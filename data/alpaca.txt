Write a Python function to find the maximum of three numbers. 3, 4, 5 def max_of_three(a, b, c):
    if a > b and a > c:
        return a
    elif b > a and b > c:
        return b
    else:
        return c

result = max_of_three(3, 4, 5)
print(result)
Develop an AI chatbot that can answer natural language queries about the top 10 most popular programming languages. What is the most popular programming language? The most popular programming language is Java. It is the first choice of many companies, developers, and students. It is widely used for developing desktop, web, and mobile applications. Its usage percentage has been steadily increasing since 2017 and other languages such as Python and JavaScript have been slowly catching up. According to the TIOBE index, Java is currently the most popular language in the world, followed by C, Python, and C++. Other major programming languages in the top 10 include JavaScript, C#, Ruby, and Go. Java is used by more than 13 million developers and is the official language of Android development. It is also used widely in many large enterprises and is one of the best choices for developers to learn to stay up-to-date in the field.
Create a Python script that will take a list of strings as input and output the unique words from the list. ["This","is","a","list","of","strings","this","list","contains","duplicate","words"] #!/usr/bin/env python

# Input list of strings
input_strings = ["This","is","a","list","of","strings","this","list","contains","duplicate","words"]

# Create empty list for unique words
output_words = []

# Loop through each string
for current_string in input_strings:
    # Split strings into separate words
    current_words = current_string.split(" ")

    # Loop through each word
    for current_word in current_words:
        # If word is not already in the output list, add it
        if current_word not in output_words:
            output_words.append(current_word)

# Print out list of unique words
print(output_words)
Create a function in python that takes a string and adds a prefix to each word in the string. Input String: "Hello World"
Prefix: "Prefix_" def add_prefix(input_string, prefix):
    """Takes a string and adds a prefix to each word in the string."""
    output_string = []
    words = input_string.split()
    for word in words:
        output_string.append(prefix + word)
    return ' '.join(output_string)
Generate a code in Python to style a paragraph using HTML tags.  def style_paragraph(text):
  return "<p style='text-align: justify; font-weight: bold; font-family: sans-serif;'>{}</p>".format(text)
Write a Python program to create a dataframe from a given dictionary of lists. data = {
    'name': ['John', 'Mark', 'Tom'],
    'age': [21, 18, 20]
} import pandas as pd

data_df = pd.DataFrame(data)

print(data_df)
Write a Python program to format a given date from one format to another. start_date = "3-5-2020"
end_date = "5-5-2020" from datetime import date

def format_date(date_str, start_format, end_format):
    date_obj = date.strptime(date_str, start_format)
    return date_obj.strftime(end_format)
Create a Python script to print characters from the "abcd" string until the total of characters printed reaches 50.  string = "abcd"
count = 0
while count < 50:
    for ch in string:
        print(ch)
        count += 1
    if count >= 50:
        break
Create a Python program that updates the dictionary with the new key-value pair. dictionary = {'apple': 1, 'banana': 2, 'orange': 3}
key = 'mango'
value = 4 dictionary = {'apple': 1, 'banana': 2, 'orange': 3}
key = 'mango'
value = 4

dictionary[key] = value
print(dictionary)
# {'apple': 1, 'banana': 2, 'orange': 3, 'mango': 4}
Write a Python code which randomly generates a hopscotch board of given size. size = 7 import random 

def generate_hopscotch_board(size):
    board = []
    for row in range(size):
        board.append([])
        for col in range(size):
            board[row].append(random.randint(1,6))
    return board

# Generate a hopscotch board
print(generate_hopscotch_board(size))
Write a Python program to check if a given number is a prime number or not.  def is_prime(num):
  if num <= 1:
    return False
  
  for i in range(2, num):
    if num % i == 0:
      return False
  
  return True
Write a Python program to create a line chart displaying numbers from 1 to 15.  import matplotlib.pyplot as plt

data = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]

# making the line plot
plt.plot(data, '-o') # '-o' is used to connected the dots

# naming the x axis
plt.xlabel('x - axis')
# naming the y axis
plt.ylabel('y - axis')

# giving a title to my graph
plt.title('Line chart of numbers from 1 to 15')

# function to show the plot
plt.show()
Develop a function in Python to calculate the maximum depth of a binary tree.  """ 
Function to calculate the maximum depth of a binary tree 
""" 

class Node: 
    def __init__(self, val): 
        self.val = val 
        self.left = None
        self.right = None

def calculate_depth(root): 
    if root is None: 
        return 0 
    return 1 + max(calculate_depth(root.left), calculate_depth(root.right))

# Driver Code 
if __name__ == '__main__': 
    root = Node(1) 
    root.left = Node(2) 
    root.right = Node(3) 
    root.left.left = Node(4) 
    root.left.right = Node(5) 
  
    print("Maximum Depth of binary tree is", calculate_depth(root))
Generate a Python program to retrieve the top N most commonly used words in a text document No Input import collections

def get_top_words(text, n):
    """ 
    Function to retrieve the top N most used words in a given text document.

    Args:
        text (str): The text document
        n (int): Number of words to extract

    Returns:
        The top n most used words as a list of strings.
    """
    # Tokenize the text
    tokens = tokenize(text) 
    
    # Count the number of times each token appears in the text
    token_count = collections.Counter(tokens).most_common(n)
    # Extract the words from token_count
    top_words = [word for word, _ in token_count]

    return top_words
Create a class called "Person" using Python, with attributes "name", "age" and "country".  class Person:
    def __init__(self, name, age, country):
        self.name = name
        self.age = age
        self.country = country
    def get_name(self):
        return self.name
    def get_age(self):
        return self.age
    def get_country(self):
        return self.country
Create a machine learning model in Python that can predict credit card defaults. sample dataset containing attributes such as age, income, credit history etc. from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler

# Load the data
data = pd.read_csv('credit_default.csv')

# Separate the features and target
X = data.drop('default', axis=1)
y = data['default']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=123)

# Scale the data
scaler = MinMaxScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Build the model
model = LogisticRegression()
model.fit(X_train, y_train)

# Predict the target
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = model.score(X_test, y_test)
print('Model accuracy: {:.2f}%'.format(accuracy*100))
Create a web crawler in Python to crawl a website for links. Not applicable import requests
from bs4 import BeautifulSoup

# get the HTML from the URL
response = requests.get('https://example.com')
html = response.text

# create the BS4 object and get all the <a> elements
bsobj = BeautifulSoup(html, 'html.parser')
links = bsobj.find_all('a')

# print all the links
for link in links:
 if link.has_attr('href'):
   print(link['href'])
Write a Python program to replace each character of a given string with the next letter in the alphabet.  def replace_letter(string):
 result = ''
 for c in string:
 if c == 'z':
 result += 'a'
 else:
 result += chr(ord(c)+1)
 return result
Generate a Python program to insert an element into a given sorted array. The sorted array is [1, 2, 3, 5] and the new element is 4. def insert(arr, x):
    i = len(arr)-1
    while (i >= 0 and x < arr[i]):
        arr[i+1] = arr[i]
        i = i-1
    arr[i+1] = x
    return arr
  
# Input array and element 
arr = [1, 2, 3, 5] 
x = 4
  
# Calling Insert Function 
arr = insert(arr, x) 
  
# Print the modified array 
print(arr)
Write a Python program to insert an item at a given position into a list lst = ["Red", "Orange", "Yellow"]
item = "Black"
pos = 2 def insert_item(lst, item, pos):
    lst.insert(pos, item)
    return lst

lst = ["Red", "Orange", "Yellow"]
item = "Black"
pos = 2

print(insert_item(lst, item, pos))
Design an API in Python to identify whether a given number is prime or not. Not applicable def is_prime(n):
    """
    This function takes a positive integer as an argument and returns a boolean
    value determining if the number is a prime number or not.
    """
    
    if n <= 1:
        return False

    for i in range(2, int(n**0.5) + 1):  # Use square root optimization
        if n % i == 0:
            return False

    return True
Develop a Python script to print the prime factors of a given positive integer.  def primeFactors(n): 
      
    factors = []
    while n % 2 == 0: 
        factors.append(2) 
        n = n / 2
  
    for i in range(3, int(sqrt(n))+1, 2): 
          
        while n % i== 0: 
            factors.append(i) 
            n = n / i 
          
    if n > 2: 
        factors.append(n) 
  
    return factors 
  
n = 315
print(primeFactors(n))
Develop a python program to find out the frequency of each character in a string. The given string is “Hello World”. # Python Program to find out the 
# frequency of each character in a string 
  
# defining a string 
str1 = "Hello World"
  
# creating an empty dictionary 
all_freq = {} 
  
# loop to find all frequencies of  
# each character in string 
for i in str1: 
    if i in all_freq: 
        all_freq[i] += 1
    else: 
        all_freq[i] = 1
  
# printing result 
print("Count of all characters in the given string is :\n "
                                        +  str(all_freq))
To use the Django-mptt package, follow these steps:

1. Import os, INSTALL_SCHEMES, and setup from distutils.command.install.
2. Define a function called fullsplit that splits a pathname into components in a platform-neutral way.
3. Modify the INSTALL_SCHEMES to put the data_files in platform-specific installation locations.
4. Compile the list of packages available and the data files.
5. Call the setup function with the appropriate parameters, including the name, description, version, author, author_email, url, packages, data_files, and classifiers.  """
Based entirely on Django's own ``setup.py``.
"""
import os
from distutils.command.install import INSTALL_SCHEMES
from distutils.core import setup

def fullsplit(path, result=None):
    """
    Split a pathname into components (the opposite of os.path.join) in a
    platform-neutral way.
    """
    if result is None:
        result = []
    head, tail = os.path.split(path)
    if head == '':
        return [tail] + result
    if head == path:
        return result
    return fullsplit(head, [tail] + result)

# Tell distutils to put the data_files in platform-specific installation
# locations. See here for an explanation:
# http://groups.google.com/group/comp.lang.python/browse_thread/thread/35ec7b2fed36eaec/2105ee4d9e8042cb
for scheme in INSTALL_SCHEMES.values():
    scheme['data'] = scheme['purelib']

# Compile the list of packages available, because distutils doesn't have
# an easy way to do this.
packages, data_files = [], []
root_dir = os.path.dirname(__file__)
mptt_dir = os.path.join(root_dir, 'mptt')
pieces = fullsplit(root_dir)
if pieces[-1] == '':
    len_root_dir = len(pieces) - 1
else:
    len_root_dir = len(pieces)

for dirpath, dirnames, filenames in os.walk(mptt_dir):
    # Ignore dirnames that start with '.'
    for i, dirname in enumerate(dirnames):
        if dirname.startswith('.'): del dirnames[i]
    if '__init__.py' in filenames:
        packages.append('.'.join(fullsplit(dirpath)[len_root_dir:]))
    elif filenames:
        data_files.append([dirpath, [os.path.join(dirpath, f) for f in filenames]])

setup(
    name = 'django-mptt',
    description = 'Utilities for implementing Modified Preorder Tree Traversal with your Django Models and working with trees of Model instances',
    version = '0.3_pre',
    author = 'Jonathan Buchanan',
    author_email = 'jonathan.buchanan@gmail.com',
    url = 'http://code.google.com/p/django-mptt/',
    packages = packages,
    data_files = data_files,
    classifiers = ['Development Status :: 4 - Beta',
                   'Environment :: Web Environment',
                   'Framework :: Django',
                   'Intended Audience :: Developers',
                   'License :: OSI Approved :: BSD License',
                   'Operating System :: OS Independent',
                   'Programming Language :: Python',
                   'Topic :: Utilities'],
)

Modify the following Python program to replace each number with its square. my_list = [1, 4, 9, 16, 25] my_list = [1, 16, 81, 256, 625]
Generate a function in Python to determine the largest element in an array. [3, 2, 1, 4, 5] def find_max(arr):
 max_val = arr[0]
 for num in arr:
 if num > max_val:
 max_val = num
 return max_val

array = [3, 2, 1, 4, 5]
print(find_max(array))
Develop a Python script for encoding a message using the Caesar cipher. message = "hello world"
shift = 3 def caesar(message, shift):
    encoded_message = ""

    for char in message:
        if char.isalpha():
            num = ord(char)
            num += shift

            if char.isupper():
                if num > ord('Z'):
                    num -= 26
                elif num < ord('A'):
                    num += 26

            elif char.islower():
                if num > ord('z'):
                    num -= 26
                elif num < ord('a'):
                    num += 26
            encoded_message += chr(num)
        else:
            encoded_message += char

    return encoded_message

# Test the code
message = "hello world"
shift = 3
encoded_message = caesar(message, shift)
print(encoded_message) # khoor zruog
Create a program in Python that classifies French text using a pre-trained model. Not applicable import torch
from transformers import BertTokenizer, BertForMaskedLM

tokenizer = BertTokenizer.from_pretrained('bert-base-french-cased')
model = BertForMaskedLM.from_pretrained('bert-base-french-cased')

text = "J'aime aller au cin_ma."
input_ids = tokenizer.encode(text, return_tensors='pt')

prediction = model(input_ids)[0] 
predicted_index = torch.argmax(prediction[0, tokenizer.mask_token_id]).item()
predicted_token = tokenizer.convert_ids_to_tokens([predicted_index])[0]

print(f"The word 'cin_ma' is {predicted_token}")
Using Python, edit the following dataset to discard outliers. Dataset: [12, 34, 37, 10, 89, 67, 99, 101] import numpy as np

dataset = [12, 34, 37, 10, 89, 67, 99, 101]
dataset_without_outliers = [x for x in dataset if abs(x-np.mean(dataset)) < 3*np.std(dataset)]

print(dataset_without_outliers) # prints [12, 34, 37, 10, 89, 67, 99]
Create a web scraper application in Python to retrieve the title, author and publication date of books from Amazon. Not applicable import requests
from bs4 import BeautifulSoup

# the URL of the page to scrape
url = 'https://www.amazon.com/books-used-books-textbooks/b/ref=sv_b_5?ie=UTF8&node=283155'

# download the HTML of the page
r = requests.get(url)
html = r.text

# create a BeautifulSoup object
soup = BeautifulSoup(html, 'html.parser')

# find all elements with the desired info
books = soup.find_all('div', {'class': 'a-row a-spacing-mini'})

# create an output file
outfile = open('output.txt', 'w', encoding='utf-8')

# loop through each book
for book in books:
 # get the title
 title = book.find('a', {'class': 'a-link-normal a-text-normal'}).text
 
 # get the author
 author = book.find('span', {'class': 'a-size-small a-color-secondary'}).text
 
 # get the publication date
 date_string = book.find('span', {'class': 'a-size-small a-color-secondary a-text-normal'}).text
 date = date_string.split('on')[1]
 
 # write the info to the file
 outfile.write(title + ',' + author + ',' + date + '\n')

# close the output file
outfile.close()
Come up with a correct function to calculate the length of a linked list in Python  # Python Program to Calculate the Length of a Linked List 
  
class Node: 
    def __init__(self, data): 
        self.data = data 
        self.next = None
  
class LinkedList: 
    def __init__(self):  
        self.head = None
  
    def lengthLinkedList(self): 
        curr = self.head 
        length = 0 
          
        while curr != None: 
            length += 1
            curr = curr.next
          
        return length

if __name__ == '__main__': 
    llist = LinkedList() 
    llist.head = Node(1) 
    second = Node(2) 
    third = Node(3) 
  
    llist.head.next = second
    second.next = third
  
    print("Length of Linked List: " + str(llist.lengthLinkedList()))
Classify whether a given number is even or odd using Python. 1 def is_even(n):
    if n % 2 == 0:
        return True
    else:
        return False
Create a python program that clean up the given text. Hello \t   world! def clean_text(text):
    return text.replace("\t", "").strip()
Create a Kivy Python application that displays a 30x30 board with a randomly generated maze. Not applicable import kivy
kivy.require('1.9.0')

from kivy.app import App 
from kivy.uix.widget import Widget 
from kivy.uix.button import Button 
from kivy.uix.gridlayout import GridLayout
from random import randint

# Create a 30x30 board
class Grid(GridLayout):
 def __init__(self, **kwargs):
 super().__init__(**kwargs) 
 self.cols = 30 
 self.rows = 30
 self.buttonList = self.makeMaze()
 
 # Randomly generate maze 
 def makeMaze(self):
 buttonList = []
 for row  in range(30):
 for col in range(30):
 # randomly create walls
 value = randint(0, 1)
 # create a button
 btn = Button(text=str(value))
 # add button to the list
 buttonList.append(btn)
 # add button to the grid
 self.add_widget(btn)
 # return the list
 return buttonList

# Main class
class MazeApp(App):
 def build(self):
 return Grid()

# Run the application
if __name__== '__main__':
 MazeApp().run()
Provide a python program that computes the maximum value from a given set of values values = [13, 33, 45, 3, 5, 17, 19, 21] # Create a list for our values
values = [13, 33, 45, 3, 5, 17, 19, 21]

# Initialize maximum value
max_val = 0

# Iterate over the list
for val in values:
    # Compare with current maximum value
    if val > max_val:
        # Update maximum value
        max_val = val

# Print the maximum value
print("Maximum value:", max_val)
Create a command-line tool for voting on git commands. The tool should have the following sub-commands: "vote", "list", "tally", and "elect". The "vote" sub-command should allow a user to vote for a specific commit. The "list" sub-command should list all votes. The "tally" sub-command should tally all votes. The "elect" sub-command should elect a commit based on the number of votes. The tool should be implemented using Python and the Git command-line tool.  import argparse
import collections
import re
import subprocess


NOTES_REF = 'refs/notes/votes'


Vote = collections.namedtuple('Vote', ['commit', 'user'])



def vote(args):
	assert args.user, 'TODO: determine user automatically'
	vote = 'vote:%s' % args.user
	subprocess.check_call([
		'git', 'notes', '--ref', NOTES_REF, 'append', '--allow-empty', '-m', vote, args.COMMIT],
		cwd=args.repo_dir)
	# TODO: prevent voting twice as same user


def get_all_votes(repo_dir):
	output_bytes = subprocess.check_output([
		'git', 'notes', '--ref', NOTES_REF, 'list'],
		cwd=repo_dir)
	output = output_bytes.decode('utf-8')
	for line in output.splitlines():
		if not line:
			continue
		votenote_ref, commit_id = line.split()
		# TODO use dulwich or something more efficient here
		votenote_bytes = subprocess.check_output(
			['git', 'show', votenote_ref],
			cwd=repo_dir)

		votenote_content = votenote_bytes.decode('utf-8') # TODO ignore invalid votes
		for voteline in votenote_content.splitlines():
			if not voteline:
				continue
			m = re.match(r'^vote:(?P<user>[a-z0-9@._]+)$', voteline.strip()) # TODO check re for user spec
			if not m:
				print('Skipping crap %r' % voteline)
				continue
			user = m.group('user')

			yield Vote(commit=commit_id, user=user)


def print_list(args):
	all_votes = get_all_votes(args.repo_dir)
	all_votes_sorted = sorted(all_votes, key=lambda v: (v.commit, v.user))
	for v in all_votes_sorted:
		print('%s: +1 from %s' % (v.commit, v.user))


def tally(all_votes):
	""" Returns a dict commit id => set of users """
	res = collections.defaultdict(set)
	for v in all_votes:
		res[v.commit].add(v.user)
	return res


def print_tally(args):
	all_votes = get_all_votes(args.repo_dir)
	for commit, votes in sorted(tally(all_votes).items(), key=lambda kv: (kv[1], kv[0])):
		print('%s: %d votes' % (commit, len(votes)))


def print_elect(args):
	all_votes = get_all_votes(args.repo_dir)
	winner_vcount, winner_commit = max((len(votes), commit) for commit, votes in tally(all_votes).items())
	# TODO more algorithms
	print('%s won the election with %d votes' % (winner_commit, winner_vcount))


def main():
	parser = argparse.ArgumentParser('Vote on git commands')
	parser.add_argument('-r', '--repo-dir', metavar='DIR', help='root directory of the repository to modify')
	subparsers = parser.add_subparsers(dest='cmd')
	vote_parser = subparsers.add_parser('vote', help='Vote for commit')
	vote_parser.add_argument('--user', metavar='USER_ID', help='ID of the user to vote as')
	vote_parser.add_argument('COMMIT', help='reference to the commit to vote for')
	subparsers.add_parser('list', help='List all votes')
	subparsers.add_parser('tally', help='Tally all votes')
	subparsers.add_parser('elect', help='Elect a commit')

	args = parser.parse_args()
	if args.cmd == 'vote':
		vote(args)
	elif args.cmd == 'list':
		print_list(args)
	elif args.cmd == 'tally':
		print_tally(args)
	elif args.cmd == 'elect':
		print_elect(args)
	else:
		parser.print_help()

if __name__ == '__main__':
	main()

Write a Python program to search for an item in a list.  def search_list(lst, elem):
  for i in range(len(lst)): 
    if lst[i] == elem: 
      return i 
  return -1
Create a quiz game using Python. Every round should be timed and display a count down timer on the screen. List of questions import time
import random

questions = [...List of questions]

def start_game():
    score = 0
    start_time = time.time()
    for i in range( len(questions) ):
        print(f'Question {i+1}:')
        question = random.choice(questions)
        print(question['text'])
        print('Options:')
        for j, option in enumerate(question['options'], start=1):
            print(f"{j}. {option}")
        answer = int(input('Answer: '))
        if answer == question['answer']:
            score += 1
            print('Correct!\n')
        else:
            print('Incorrect!\n')
        elapsed_time = time.time() - start_time
        print(f'Time remaining: {30 - int(elapsed_time):02} seconds\n')
        if elapsed_time >= 30:
            break
    print(f'Your score is {score}/{len(questions)}')

if __name__ == '__main__':
    start_game()
Create a neural network in Python for recognizing handwritten digits.  # import the necessary packages
from keras.models import Sequential
from keras.layers.convolutional import Conv2D
from keras.layers.convolutional import MaxPooling2D
from keras.layers.core import Activation
from keras.layers.core import Flatten
from keras.layers.core import Dense

# Construct the model 
model = Sequential()
model.add(Conv2D(20, (5, 5), padding="same",
input_shape=(28, 28, 1)))
model.add(Activation("relu"))
model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))
model.add(Flatten())
model.add(Dense(units=500))                 # Number of nodes in the hidden layer
model.add(Activation("relu"))
model.add(Dense(units=10))                  # Output layer with 10 classes
model.add(Activation("softmax"))

# Compile the model
model.compile(loss="categorical_crossentropy",
   optimizer="adam", metrics=["accuracy"])
What are the differences between lists and tuples in Python?  Lists and tuples are both data structures in Python. The main difference between them is that a list is mutable (can be changed) while a tuple is immutable (cannot be changed). Tuples use parentheses and lists use square brackets. Tuples can contain any type of data, including other tuples, and can be indexed and sliced. Lists, on the other hand, cannot contain mutable objects, such as other lists, and cannot be indexed or sliced because they are mutable. Tuples also tend to be faster than lists.
Create a Python script that prints all the combinations of a string. String: "ABC" def combinations(s): 
  
    # Get the length of the string 
    n = len(s) 
  
    # A loop to pick starting point of substring 
    for i in range(n): 
          
        # Pick ending point of substring 
        for j in range(i,n): 
              
            # Print the substring 
            for k in range(i,j+1): 
                print(s[k], end="") 
            print() 

combinations("ABC")
Create a HTML page that showcases a professional portfolio website.  <!DOCTYPE html>
<html>
<head>
    <title>My Professional Portfolio</title>
    <style>
        body {
            font-family: sans-serif;
            font-size: 1rem;
            background-image: url("background.png");
            background-repeat: no-repeat;
            background-position: center;
            background-size: cover;
        }

        a {
            color: #006699;
        }

        .container {
            width: 100%;
            margin: 0 auto;
            padding: 25px;
            text-align: center;
            line-height: 2rem;
            background-color: rgba(255, 255, 255, 0.8);
            box-sizing: border-box;
            border-radius: 3px;
        }

        .header {
            font-family: sans-serif;
            font-size: 2rem;
            font-weight: 600;
            color: #003333;
        }
    </style>
</head>
<body>
<div class="container">
    <div class="header">My Professional Portfolio</div>

    <p>Welcome to my professional portfolio website! Here you can find all the details about my professional skills and experience.</p>

    <p>I have experience in software development, web development, and data science. I have worked with some of the most popular technologies such as JavaScript, Python, HTML5 and CSS3. I have also worked with databases like MySQL and MongoDB.</p>

    <p>I have been working in the industry for over ten years now, and my skills and experience make me a valuable asset for any organization.</p>

    <p>If you would like to know more about me and my work, please don't hesitate to get in touch.</p>

</div>
</body>
</html>
Write a Python program to take three numbers from the user and check if the sum of any two numbers equals to the third one.  def check_triplet_sum(a, b, c):
    
    if a + b == c or b + c == a or a + c == b:
        return True
    else:
        return False

a = int(input("Enter the first number: "))
b = int(input("Enter the second number: "))
c = int(input("Enter the third number: "))

if check_triplet_sum(a, b, c):
    print("Numbers can form a triplet.")
else:
    print("Numbers cannot form a triplet.")
Compose a python script to create a bar chart. [4,6,3,7,2] import matplotlib.pyplot as plt
 
# x-axis values 
x = [4, 6, 3, 7, 2] 

# Y-axis values 
y = [0, 2, 3, 4, 5] 

# Function to plot the bar
plt.bar(x, y)

# Naming the x-axis 
plt.xlabel('x - axis')
# Naming the y-axis 
plt.ylabel('y - axis')
# Writing a title to the graph
plt.title('Bar Chart') 
# Show the plot
plt.show()
Create a program in Python that prints "Greetings" for any name that is passed as an argument. Andrew import sys

name = sys.argv[1]

print("Greetings, "+name+"!")
Create a program in Python to find the number of occurrences of an element x in a list y. [3, 5, 2, 7, 4, 3, 2], x = 2 def count_x(x, y):
    count = 0
    for i in y:
        if i == x:
            count += 1
    return count
Create a function in Python to check if a number is prime.  def check_prime(n):
    if n < 2:
        return False
    else:
        for i in range(2, int(n ** 0.5) + 1):
            if n % i == 0:
                return False
        return True
Create a document clustering program in Python that groups similar documents together. Not applicable from sklearn.feature_extraction.text import TfidfVectori
from sklearn.cluster import KMeans

# Create tf-idf vectors for each document 
vectorizer = TfidfVectorizer(stop_words='english')
X = vectorizer.fit_transform(documents)

# Generate the clusters 
true_k = 5
model = KMeans(n_clusters=true_k, init='k-means++', max_iter=100, n_init=1)
model.fit(X)

# Show the top terms for each cluster 
print("Top terms per cluster:")
order_centroids = model.cluster_centers_.argsort()[:, ::-1]
terms = vectorizer.get_feature_names()
for i in range(true_k):
 print("Cluster %d:" % i)
 for ind in order_centroids[i, :10]:
 print(' %s' % terms[ind])
 print()
Write a Python program to sort a given list according to specified criteria. lst = [('a', 1), ('b', 3), ('c', 2)] def sort_list(lst):
  return sorted(lst, key=lambda x: x[1])

result = sort_list([('a', 1), ('b', 3), ('c', 2)]) 
print(result)
Generate a python function to convert a student's grade from a 0 to 100 scale to the corresponding letter grade according to the following grade scale. 90 def grade_converter(score):
    if score >= 90:
        return 'A'
    elif score >= 80:
        return 'B'
    elif score >= 70:
        return 'C'
    elif score >= 60:
        return 'D'
    else:
        return 'F'
Classify the following text as valid or invalid python code sum = 0
sum = sum + 2 Valid
Create a machine learning classifier in Python for sentiment analysis of inappriopriate online comments  import numpy as np 
import pandas as pd 
from sklearn.feature_extraction.text import CountVectorizer 
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB 
  
# Load the data 
df = pd.read_csv('path/to/data')
  
# Create the Training and Test sets 
X_train, X_test, y_train, y_test = train_test_split(df['text'], df['label'], random_state=0) 
  
# Vectorise the data 
vect = CountVectorizer().fit(X_train) 
X_train_vectorised = vect.transform(X_train) 
  
# Fit the model 
model = MultinomialNB(alpha=1).fit(X_train_vectorised, y_train) 
  
# Make predictions 
predictions = model.predict(vect.transform(X_test))
Implement a data structure for a stack in Python.  class Stack(object):
    def __init__(self):
        self.items = []

    def is_empty(self):
        return self.items == []

    def push(self, item):
        self.items.append(item)

    def pop(self):
        return self.items.pop()

    def peek(self):
        return self.items[len(self.items)-1]

    def size(self):
        return len(self.items)
Given an array of integers, write a Python function to find the index of the largest element in that array. nums = [10, 50, 20, 7, 55] def find_largest_element_index(nums):
        largest = nums[0]
        largest_element_index = 0
        for i in range(0, len(nums)):
            if nums[i] > largest:
                largest = nums[i]
                largest_element_index = i
        return largest_element_index
Write a Python program for checking if a number is within a given range.  def is_in_range(n, lower, upper):
    return True if lower <= n & n <= upper else False

is_in_range(3, 1, 10)
# Output: True
Create a basic sentiment analysis model using Python and Scikit-learn. Not applicable import numpy as np
import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

# Load data
data = pd.read_csv('sentiment.csv')
X = data.text.values
y = data.target.values

# Split data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Vectorize the data
vectorizer = CountVectorizer(max_features=5000)
X_train_vectorized = vectorizer.fit_transform(X_train)

# Create the model
model = LogisticRegression()
model.fit(X_train_vectorized, y_train)

# Evaluate the model
scores = model.score(vectorizer.transform(X_test), y_test)
print('Accuracy:', scores)
Create a function in Python to make a list that contains the sum of each pair of elements in two different lists. list1 = [1, 8, 3, 10] 
list2 = [2, 3, 4, 5] def list_sums(lst1, lst2):
    pairs = list(zip(lst1, lst2))
    sums = [i1+i2 for (i1, i2) in pairs]
    return sums
Generate a Python program that implements linear search  def linear_search(mylist, x):
    for i in range(len(mylist)):
        if mylist[i] == x:
            return i

    return -1
Optimize a program that uses a Web Scraper to fetch data from a website. Not applicable # Import Python modules
import os
import lxml
import requests
import html5lib

# Retrieve the HTML
url = 'https://www.example.com/'
r = requests.get(url)
html_doc = r.text

# Parse the HTML
tree = lxml.html.fromstring(html_doc)
links = tree.xpath('//a/@href')

# Fetch the data from each link
data = []
for link in links:
 try:
 r = requests.get(link)
 data.append(r.text)
 except:
 pass
 
# Store data in a file
file_name = os.path.join('data', 'data.txt')
with open(file_name, 'w') as f:
 f.write('\n'.join(data))
Write a Python program to remove the duplicate items from a list. List: [10, 20, 30, 20, 10, 50, 60, 40, 80, 50, 40] """
Write a Python program to remove the duplicate items from a list
"""

# Function to remove duplicates 
def remove_duplicates(list_with_duplicates): 
  
    list_without_duplicates = [] 
    for item in list_with_duplicates:
        if item not in list_without_duplicates: 
            list_without_duplicates.append(item)
  
    return list_without_duplicates 

# main 
if __name__=="__main__": 
    # Given List 
    list1 = [10, 20, 30, 20, 10, 50, 60, 40, 80, 50, 40] 
    print("Original List", list1) 
  
    list2 = remove_duplicates(list1) 
    print("List without duplicates", list2)
Write a Python program to find the maximum of a given array. arr = [10, 9, 11, 12, 5] def find_max(arr):
    max = arr[0]
    for i in arr: 
        if i > max: 
            max = i 
  
    return max
  
# Driver Code  
arr = [10, 9, 11, 12, 5]
maximum = find_max(arr) 
print("Maximum element is:", maximum)
Write a function or class in Python to parse an Excel sheet and extract all strings that are in bold. EXCEL SHEET CONTENT ;

| Customer ID | Name | Date |
|------------|------|------|
|      12345 | John | 10/9 |
| **STRING1** | Mary | 12/3 |
|     54321  | Joe  | 5/7  |   
| **STRING2** | Paul | 3/1  | import xlrd

def extract_bold_strings(filename):
 strings = []
 workbook = xlrd.open_workbook(filename)
 sheet = workbook.sheet_by_index(0)
 for row in range(sheet.nrows):
  for col in range(sheet.ncols):
   cell_value = sheet.cell(row, col).value
   font_style = sheet.cell_xf_index(row, col).font_record.weight
   if font_style == 700:
    strings.append(cell_value)
 return strings
 
 strings = extract_bold_strings('test.xlsx') 
 print(strings) # prints ['STRING1', 'STRING2']
Write a Python program to determine if a number provided by the user is prime or not. 17 # Ask the user for a number
num = int(input('Enter a number: '))

# Set initial values
is_prime = True

# Check for prime
for i in range(2, num):
 if num % i == 0:
 is_prime = False
 break

# Output result
if is_prime:
 print(f'{num} is a prime number.')
else:
 print(f'{num} is not a prime number.')
Develop a recursive solution in Python to calculate the Fibonacci sequence up to the nth term. n = 7 def fibonacci_sequence(n): 
    if n <= 1: 
        return n 
    else: 
        return(fibonacci_sequence(n-1) + fibonacci_sequence(n-2)) 

print("The Fibonacci sequence up to the nth term:") 
for i in range(7): 
    print(fibonacci_sequence(i))
Develop a classifier in python to differentiate between cats and dogs  import numpy as np
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D

# create model
model = Sequential()
model.add(Conv2D(32, kernel_size = (3, 3), activation='relu', input_shape=(224, 224, 3)))
model.add(MaxPooling2D((2, 2)))
model.add(Dropout(0.25))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(2, activation='softmax'))

# compile model
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
Can you build an algorithm in Python that determines if a number is odd or even?  def is_odd(number):
  if number % 2 == 0:
    return False
  else:
    return True
Modify the above Python Flask application to accept form input and create a new task. Not applicable from flask import Flask, request, redirect, render_template
from flask_sqlalchemy import SQLAlchemy

app = Flask(name)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'
db = SQLAlchemy(app)

class Task(db.Model):
 id = db.Column(db.Integer, primary_key=True)
 description = db.Column(db.String(120), unique=True)

db.create_all()

@app.route('/tasks', methods=['GET'])
def get_tasks():
 tasks = Task.query.all()
 return {'tasks': [task.description for task in tasks]}

@app.route('/tasks/int:id', methods=['PUT'])
def update_task(id):
 task = Task.query.get(id)
 task.description = request.json['description']
 db.session.commit()
 return {'message': 'Task updated'}

@app.route('/tasks/int:id', methods=['DELETE'])
def delete_task(id):
 Task.query.filter_by(id=id).delete()
 db.session.commit()
 return {'message': 'Task deleted'}

@app.route('/', methods=['GET', 'POST'])
def create_task():
 if request.method == 'POST':
  task = Task(description=request.form['description'])
  db.session.add(task)
  db.session.commit()
  return redirect('/')
 return render_template('index.html')
 
if name == 'main':
 app.run(debug=True)
Explain the following Python code def fun(a,b):
   return a+b The given code defines a function named 'fun' which accepts two arguments, 'a' and 'b'. The function returns the sum of 'a' and 'b'.
Write a Python program to find the string which is most frequent among the given list of strings. my_list = ["apple", "banana", "apple", "orange"] def most_frequent(my_list):
    max_count = 0
    frequent_string = ""

    for i in my_list:
        if my_list.count(i) > max_count:
            max_count = my_list.count(i)
            frequent_string = i

    return frequent_string
Write a Python function to convert a given number into its corresponding Roman numeral. 99 def convert_to_roman(num):
    int_nums = [1000, 500, 100, 50, 10, 5, 1]
    roman_nums = ['M', 'D', 'C', 'L', 'X', 'V', 'I']
    roman_value = ''

    i = 0
    while num > 0:
        for _ in range(num // int_nums[i]):
             roman_value += roman_nums[i]
             num -= int_nums[i]
        i += 1

    return roman_value

print(convert_to_roman(99))
# Output: 'XCIX'
Generating natural language from a database in Python, db= { "Name": "John", "Age": 30, "Occupation": "Engineer" } def generateNaturalLanguage(db): 
    sentence = "The person is " 
    sentence += db["Name"] + ", " 
    sentence += "who is " + str(db["Age"]) + " years old, " 
    sentence += "and works as a " + db["Occupation"] + "."

    return sentence
Write a python program to check if a given array A is a subset of another array B A = [4, 6, 8]
B = [1, 4, 6, 8, 9, 10] def is_subset(A, B):
    # Iterate through A
    for elem in A:
        # Check if the element is in B 
        if elem not in B:
            # If not, return False
            return False

    # If we reach here, all the elements of A
    # were present in B, so return True 
    return True
Improve the Python method provided so that it checks whether the given array is a palindrome or not. arr = [1, 2, 3, 2, 1] def is_palindrome(arr):
    mid = len(arr) // 2
    for i in range(mid):
        if arr[i] != arr[len(arr) - 1 - i]:
            return False
    return True

arr = [1, 2, 3, 2, 1]
print(is_palindrome(arr))
Create a Python program to convert a given date string to a datetime object and return the week number. "2020-05-18" import datetime
def get_week_number(date_string):
    d = datetime.datetime.strptime(date_string, '%Y-%m-%d')
    return d.isocalendar()[1]  # isocalendar() is used to get the ISO week number
Create a Python program which takes a given list of temperatures (in Celsius) and converts them to Fahrenheit. [21, 12, -4] def c2f(c):
 return (c * 9 / 5) + 32

celsius = [21, 12, -4]

fahrenheit = []
for temp in celsius:
 fahrenheit.append(c2f(temp))

print(fahrenheit) 
# Output: [69.8, 53.6, 24.8]
Create a Python algorithm to find the fifth element from the end of a singly linked list. 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7 class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
    
    def find_fifth_from_end(self):
        if self is None:
            return None
        curr = self
        prev = self
        count = 0
        while curr.next is not None:
            count += 1
            if count >= 5:
                prev = prev.next
            curr = curr.next
        if count < 5:
            return None
        else:
            return prev.data
        
# Example
n1 = Node(1)
n2 = Node(2)
n3 = Node(3)
n4 = Node(4)
n5 = Node(5)
n6 = Node(6)
n7 = Node(7)

# Linked list setup
n1.next = n2
n2.next = n3
n3.next = n4
n4.next = n5
n5.next = n6
n6.next = n7

# Find 4th element from the end
print(n1.find_fifth_from_end())
Create a neural network in Python with 3 hidden layers of size 50, 40 and 30 respectively. Not applicable # Define Neural Network
model = tf.keras.Sequential([
    # First Hidden Layer 
    tf.keras.layers.Dense(50, activation='relu', input_dim=input_dim),
    # Second Hidden Layer 
    tf.keras.layers.Dense(40, activation='relu'),
    # Third Hidden Layer 
    tf.keras.layers.Dense(30, activation='relu'),
    # Output Layer 
    tf.keras.layers.Dense(num_classes, activation='softmax')
])
Design a stack in Python to hold strings.  class Stack: 
   
    def __init__(self): 
        self.stack = [] 
   
    def isEmpty(self): 
        return len(self.stack) == 0
       
    def push(self, item): 
        self.stack.append(item) 
       
    def pop(self): 
        if (self.isEmpty()): 
            return "Stack is empty"
       
        return self.stack.pop() 
       
    def peek(self): 
        if (self.isEmpty()): 
            return "Stack is empty"

        return self.stack[-1] 
       
    def size(self): 
        return len(self.stack)
Build a Python script to terminate all running processes.  import psutil

# terminate all running processes
for proc in psutil.process_iter():
    proc.terminate()
Craft a Python script to reverse a string  def reverse_string(s):
    result = ""
    for i in range(len(s)-1, -1, -1):
        result += s[i]
    return result
Can you generate a program to convert a given string to a list of characters in Python  def string_to_list(string):
    char_list = []
    for char in string:
        char_list.append(char)
    return char_list
Write a Python program that can generate random passwords of a given length and complexity. Not applicable import random
import string

def generate_password(length, complexity):
    # minimum 8 characters
    if length < 8:
        length = 8
    # maximum complexity 5
    if complexity > 5:
        complexity = 5

    char = string.ascii_letters + string.digits + string.punctuation
    pwd = []
    while len(pwd) < length:
        char_rand = random.choice(char)
        if char_rand not in pwd:
            pwd.append(char_rand)

    random.shuffle(pwd)
    return ''.join(pwd[:length])

print(generate_password(20,5))
Create a Python program to find the minimum number of steps required to make all array elements equal. arr = [2, 3, 6, 8] def min_steps(arr):
    min_step = 0
    min_val = min(arr)
    for i in range(len(arr)):
        min_step += arr[i] - min_val 
    
    return min_step
Write code to generate a multidimensional array containing two lists of strings in Python. Two lists of strings

List 1: ["apple", "banana", "carrot"]
List 2: ["french fries", "rice", "salad"] arr = [["apple", "french fries"],
 ["banana", "rice"],
 ["carrot", "salad"]]
Create a python program to edit the given nested dictionary by adding a new element. nested_dict = {
        'makers': ['John', 'Alan'],
        'printers':{
            'color':['hp', 'canon'],
            'black_white': ['epson']
        }
    }
New element to add:

{'copiers':['Xerox', 'Ricoh']} def edit_dict(nested_dict, new_element):
    """Edit the given nested dictionary by adding a new element."""
    nested_dict.update(new_element)
    return nested_dict

# Usage Example 
nested_dict = {
        'makers': ['John', 'Alan'],
        'printers':{
            'color':['hp', 'canon'],
            'black_white': ['epson']
        }
    }

new_element = {'copiers':['Xerox', 'Ricoh']}

edited_dict = edit_dict(nested_dict, new_element)
print(edited_dict)
# {'makers': ['John', 'Alan'], 
# 'printers': {'color': ['hp', 'canon'], 'black_white': ['epson']}, 
# 'copiers': ['Xerox', 'Ricoh']
Design a data structure in Python that implements a Stack. Not applicable class Stack: 
 def __init__(self): 
 self.items = [] 

 def push(self, item): 
 self.items.append(item) 

 def pop(self):
 if not self.is_empty(): 
 return self.items.pop()

 def is_empty(self):
 return len(self.items) == 0

 def peek(self):
 if not self.is_empty(): 
 return self.items[-1]

 def size(self):
 return len(self.items)
Construct a neural network in Python to predict the price of Bitcoin for the next 5 days.  """
Construct a neural network in Python to predict the price of Bitcoin for the next 5 days
"""

import numpy as np
#import matplotlib.pyplot as plt
import pandas as pd
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from sklearn.preprocessing import MinMaxScaler

# Load the dataset
dataset = pd.read_csv('BTC-USD.csv')

# Get the values
closing_prices = dataset.iloc[:, [4]].values

# Normalize the data
scaler = MinMaxScaler(feature_range=(0, 1))
prices_scaled = scaler.fit_transform(closing_prices)

# Create the input data for the model
X, Y = [], []
for i in range(30, len(prices_scaled)):
    X.append(prices_scaled[i-30:i, 0])
    Y.append(prices_scaled[i, 0])
X, Y = np.array(X), np.array(Y)

# Reshape the input
X = np.reshape(X, (X.shape[0], X.shape[1], 1))

# Create the model
model = Sequential()
model.add(LSTM(128, input_shape=(X.shape[1], 1)))
model.add(Dense(1))
model.compile(loss='mse', optimizer='adam')

# Train the model
model.fit(X, Y, epochs=100, batch_size=32)

# Prepare the 5-day prediction data
prediction_data = prices_scaled[-30:, 0]
prediction_data = np.reshape(prediction_data, (1, 30, 1))

# Make the 5-day prediction
predictions = model.predict(prediction_data)
prediction = scaler.inverse_transform(predictions)
print(prediction)
Design a sorting algorithm to sort an array of strings in lexicographical order. arr = ['Python', 'Java', 'JavaScript', 'C', 'C++'] def sort_lexicographically(arr):
    n = len(arr) 
    for i in range(n):
        min_index = i
        for j in range(i + 1, n):
            if arr[min_index] > arr[j]:
                min_index = j
        arr[i], arr[min_index] = arr[min_index], arr[i]
    return arr
 
print(sort_lexicographically(arr)) # Output: ['C', 'C++', 'Java', 'JavaScript', 'Python']
Write a function in Python that takes in a string and returns a list containing its individual words. "This is a test" def string_to_list(s):
    return s.split(' ')
Write a Python function to find the intersection between two given sets.  def intersection(set1, set2):
  return set1.intersection(set2)
Create a function in Python to create a dictionary with keys as numbers and each key corresponding to the natural number to its right.  def create_dictionary(n):
  # Create an empty dictionary
  dictionary = {}
  
  # Loop through each number
  for i in range(1, n + 1):
    # For each number, add an entry to the dictionary
    dictionary[i] = i + 1
    
  # Return the dictionary
  return dictionary
Create a text-based adventure game in Python Not applicable import textwrap 

class TextGame(object):
    def __init__(self):
        self.level = 1
        self.is_playing = True

    def start_game(self):
        self.print_intro()
        while self.is_playing:
            self.level_one()

    def print_intro(self):
        # Introduction text
        intro = textwrap.dedent('''
            You awaken in a strange place, and it seems you have no memory of how you got there.
            You can feel cold dampness of the stone walls and ground beneath your feet.
            It appears to be a dungeon of some sort. You can see a light ahead. You decide to move
            towards it.
        ''')
        print(intro)

    def level_one(self):
        # Level one text
        level_one = textwrap.dedent('''
            As you make your way towards the light, you come across a fork in the path.
            You hear a soft whisper coming from the left path.
        ''')
        print(level_one)

        action = raw_input('''Do you choose to take the left or right path? ''')
        if action.upper() == "LEFT":
            self.level_two_left()
        elif action.upper() == "RIGHT":
            self.level_two_right()
        else:
            self.level_one()

    def level_two_left(self):
        # Level two left text
        level_two_left = textwrap.dedent('''
            The whisper gets louder as you take the left path. Eventually, you reach a small room.
            In the center of the room is a hooded figure standing in front of a pedestal.
            There is a strange looking artifact on the pedestal.
        ''')
        print(level_two_left)

        action = raw_input('''Do you 'approach' the figure or 'flee'? ''')
        if action.upper() == "APPROACH":
            print("You approach the figure and it removes its hood to reveal a face you recognize")
        elif action.upper() == "FLEE":
            print("You turn and run, taking the right path")
            self.level_two_right()
        else:
            self.level_two_left()

# Create instance and start the game. 
game = TextGame()
game.start_game()
Create an algorithm in Python for the classification of numbers into even or odd. 3 def classifyNumber(num): 
    if num % 2 == 0: 
        return "even"
    else: 
        return "odd" 
  
print(classifyNumber(3))
Write a Python program to send an email with the subject "Welcome to our website!".  import smtplib

# Options
server = 'smtp.gmail.com'
port = 587
password = 'my-password'

# Sending Email 
senderEmail = 'sender@gmail.com' 
recieverEmail = 'reciever@gmail.com' 
subject = 'Welcome to our website!'
body = 'Thank you for visiting our website!'

message = f'Subject: {subject}\n\n{body}'

# Connecting to SMTP server
server = smtplib.SMTP(server, port)
server.starttls()
server.login(senderEmail, password)

# Sending the email
server.sendmail(senderEmail, recieverEmail, message)
Pick two languages from Python, Java, C++ and Go. Write a function in both languages that takes in two integer numbers and returns the sum of them. Not applicable #Python

def add(a, b):
 return a + b

#Java

public static int add(int a, int b) {
 return a + b;
}

#C++

int add(int a, int b) {
 return a + b;
}

#Go

func add(a int, b int) int {
 return a + b
}
This code is a Python script for a music player. To use it, you need to run it in a Python environment. The script will look for MP3 files in the ~/Music directory and play them in random order. To control the player, use the following keys in the console: space (play/pause), left/right arrow (seek back/forward by 10 seconds), return (next song), and q (quit).  #!/usr/bin/env python
# MusicPlayer, https://github.com/albertz/music-player
# Copyright (c) 2012, Albert Zeyer, www.az2000.de
# All rights reserved.
# This code is under the 2-clause BSD license, see License.txt in the root directory of this project.

import sys, os, random, fnmatch

# Our parent path might contain a self-build musicplayer module. Use that one.
sys.path = [os.path.abspath((os.path.dirname(__file__) or ".") + "/..")] + sys.path

import musicplayer
print "Module:", musicplayer.__file__

# ffmpeg log levels: {0:panic, 8:fatal, 16:error, 24:warning, 32:info, 40:verbose}
musicplayer.setFfmpegLogLevel(20)

try:
	import better_exchook
	better_exchook.install()
except ImportError: pass # doesnt matter

try:
	import faulthandler
	faulthandler.enable(all_threads=True)
except ImportError:
	print "note: module faulthandler not available"
	
class Song:
	def __init__(self, fn):
		self.url = fn
		self.f = open(fn)
		
	def __eq__(self, other):
		return self.url == other.url
	
	def readPacket(self, bufSize):
		s = self.f.read(bufSize)
		#print "readPacket", self, bufSize, len(s)
		return s

	def seekRaw(self, offset, whence):
		r = self.f.seek(offset, whence)
		#print "seekRaw", self, offset, whence, r, self.f.tell()
		return self.f.tell()

files = []
def getFiles(path):
	for f in sorted(os.listdir(path), key=lambda k: random.random()):
		f = os.path.join(path, f)
		if os.path.isdir(f): getFiles(f) # recurse
		if len(files) > 1000: break # break if we have enough
		if fnmatch.fnmatch(f, '*.mp3'): files.append(f)
getFiles(os.path.expanduser("~/Music"))
random.shuffle(files) # shuffle some more
files = sys.argv[1:] + files
assert files, "give me some files or fill-up ~/Music"

i = 0

def songs():
	global i, files
	while True:
		yield Song(files[i])
		i += 1
		if i >= len(files): i = 0

def peekSongs(n):
	nexti = i + 1
	if nexti >= len(files): nexti = 0
	return map(Song, (files[nexti:] + files[:nexti])[:n])

player = musicplayer.createPlayer()
player.outSamplerate = 48000
player.queue = songs()
player.peekQueue = peekSongs
player.playing = True

def formatTime(t):
	if t is None: return "?"
	mins = long(t // 60)
	t -= mins * 60
	hours = mins // 60
	mins -= hours * 60
	if hours: return "%02i:%02i:%02.0f" % (hours,mins,t)
	return "%02i:%02.0f" % (mins,t)

import termios

def prepareStdin():
	fd = sys.stdin.fileno()
	
	if os.isatty(fd):		
		old = termios.tcgetattr(fd)
		new = termios.tcgetattr(fd)
		new[3] = new[3] & ~termios.ICANON & ~termios.ECHO
		# http://www.unixguide.net/unix/programming/3.6.2.shtml
		new[6][termios.VMIN] = 0
		new[6][termios.VTIME] = 1
		
		termios.tcsetattr(fd, termios.TCSANOW, new)
		termios.tcsendbreak(fd, 0)

		import atexit
		atexit.register(lambda: termios.tcsetattr(fd, termios.TCSANOW, old))	

		print "Console control:"
		print "  <space>:        play / pause"
		print "  <left>/<right>: seek back/forward by 10 secs"
		print "  <return>:       next song"
		print "  <q>:            quit"

def getchar():
	fd = sys.stdin.fileno()
	ch = os.read(fd, 7)
	return ch

prepareStdin()

while True:
	sys.stdout.write("\r\033[K") # clear line
	if player.playing: sys.stdout.write("playing, ")
	else: sys.stdout.write("paused, ")
	curSong = player.curSong
	if curSong:
		url = os.path.basename(curSong.url)
		if len(url) > 40: url = url[:37] + "..."
		sys.stdout.write(
			url + " : " +
			formatTime(player.curSongPos) + " / " +
			formatTime(player.curSongLen))
	else:
		sys.stdout.write("no song")
	
	ch = getchar()
	if ch == "\x1b[D": # left
		player.seekRel(-10)
	elif ch == "\x1b[C": #right
		player.seekRel(10)
	elif ch == "\x1b[A": #up
		pass
	elif ch == "\x1b[B": #down
		pass
	elif ch == "\n": # return
		player.nextSong()
	elif ch == " ":
		player.playing = not player.playing
	elif ch == "q":
		print
		sys.exit(0)
	sys.stdout.flush()

Generate a Python program that finds the maximum and minimum values of a given list. [-1, 6, 4, -2, 3] def findMaxMin(numbers):
    max_val = max(numbers)
    min_val = min(numbers)
    return max_val, min_val

numbers = [-1, 6, 4, -2, 3]
max_val, min_val = findMaxMin(numbers)

print("The maximum value is:", max_val)
print("The minimum value is:", min_val)
Develop a program in Python to calculate the Fibonacci sequence.  def fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print("Incorrect input") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
        return b 

# Driver Code 
print(fibonacci(9))
Create a Python program to implement the Tower of Hanoi problem.  def tower_of_hanoi(source, dest, aux, n):
    if n == 1:
        print('Move Disk 1 from %s to %s' %(source, dest))
        return

    tower_of_hanoi(source, aux, dest, n-1)
    print('Move Disk %d from %s to %s' %(n, source, dest))
    tower_of_hanoi(aux, dest, source, n-1)    

n = 4   
tower_of_hanoi('A', 'C', 'B', n)
Write a Python program to modify a given solution to meet a given set of requirements. Solution:
def add_item(item_list, new_item):
 item_list.append(new_item)
 return

Requirements:
The function should return the index of the item that was added to the list. def modify_solution(solution, requirements):
 code_lines = solution.splitlines()
 code_lines.pop()
 code_lines.append("item_index = item_list.index(new_item)")
 code_lines.append("return item_index")
 return "\n".join(code_lines)
Write a machine learning model in Python to detect the sentiment of a text document. The text document is "This movie was horrible and I never want to watch it again." def sentiment_model(text):
 pred = model.predict([text])
 
 if pred == 0:
  sentiment = 'Positive'
 elif pred == 1:
  sentiment = 'Negative'
 
 return sentiment

sentiment = sentiment_model("This movie was horrible and I never want to watch it again.")
print(sentiment) # Output: Negative
Consult the documentation and write python code to create a thread that prints "Hello World".  import threading
 
def print_message():
    print("Hello World")
 
# create thread object
thread_obj = threading.Thread(target=print_message)
 
# start thread
thread_obj.start()
Generate an algorithm in Python to convert the given temperature from Fahrenheit to Celsius. Fahrenheit= 32 def Fahrenheit_to_Celsius(Fahrenheit):
    Celsius = (Fahrenheit - 32) * 5/9
    return Celsius
  
Fahrenheit = 32
Celsius = Fahrenheit_to_Celsius(Fahrenheit)
print("Celsius:",Celsius)
In Python, explain when to use "try", "except" and "finally".  The "try" block is used to test a piece of code to see if any errors occur while executing that code. If an error occurs, the code in the "except" block will be executed. The "finally" block is used to execute code regardless of whether an error occurs or not. The "finally" block should be used for cleanup tasks, such as releasing resources or closing files.
Write a function in Python to extract the domain name from an email address. test@example.com def get_domain_name_from_email(email):
    return email.split('@')[-1]
Create a function to parse a JSON string and return a Python dictionary. '{"name": "John", "age": 32}' import json

def parseJSON(json_string):
    return json.loads(json_string)

dictionary = parseJSON('{"name": "John", "age": 32}')
Edit the existing Python code to forward declare a function called "compute" that takes two arguments, "a" and "b", and returns the result of "a + b". def func1():
    result = compute(2,3)
    print(result) def compute(a,b):
    return a + b

def func1():
    result = compute(2,3)
    print(result)
Design a Python class to represent a book with title, author, publication year and number of pages.  class Book:
    def __init__(self, title, author, publication_year, number_of_pages):
        self.title = title
        self.author = author
        self.publication_year = publication_year
        self.number_of_pages = number_of_pages
Write a quick sorting algorithm using Python.  def quick_sort(array):
    if len(array) <= 1:
        return array

    pivot = array[0]
    left = []
    right = []

    for element in array[1:]:
        if element <= pivot:
            left.append(element)
        else:
            right.append(element)

    return quick_sort(left) + [pivot] + quick_sort(right)
Create a Decision Tree classifier in Python that can be used to predict whether a given customer will buy a car or not.  # Import Decision Tree Classifier
from sklearn.tree import DecisionTreeClassifier

# Define the Decision Tree Classifier
clf = DecisionTreeClassifier()

# Train the Decision Tree Classifier
clf.fit(X_train, y_train)

# Predict the target values
y_pred = clf.predict(X_test)
Create a function in Python to print a sorted list of the given input string. Input string: computer def sortString(inputString): 
  
    words = inputString.split() 
    words.sort() 
  
    for i in words: 
        print(i) 
          
sortString(inputString)
Develop a function in Python to convert a given number of days into seconds.  def days_to_seconds(days):
    return days * 86400

result = days_to_seconds(3)
print(result) # Outputs: 259200
Develop a system in Python to allow users to rate sports teams using a scale from 1 to 5.  # import required libraries
import pandas as pd

# define the rating scale
rating_scale = [1,2,3,4,5]

# create an empty DataFrame
rating_df = pd.DataFrame(columns=['Team', 'Rating'])

# function to take in user input and add it to the DataFrame
def add_rating(team, rating):
    rating_df = rating_df.append({'Team': team, 'Rating': rating}, ignore_index=True)

# function to allow a user to rate a team
def rate_team():
    team = input('Which team would you like to rate? ')
    rating = input('Please enter a rating between 1 and 5: ')
    if rating not in rating_scale:
        print('Error: Rating must be between 1 and 5!')
        rate_team()
    else:
        add_rating(team, rating)
        print('Rating added successfully!')

# call the rate_team() function
rate_team()
Create an API wrapper in Python for the following API "https://example.com/api/users/list" import requests 

# API wrapper for the given API 
def api_wrapper(url): 
    # get the API response 
    response = requests.get(url) 

    # check the response status 
    if(response.status_code == 200): 
        # return json data 
        return response.json()
    else: 
        return None
Cut at current position in a string by 1 letter in Python. mystring = "This is my string" mystring = mystring[:-1]
Create an algorithm for sorting a list of integers in descending order in Python. [6, 2, 12, 5] def sortDescending(numbers):
    for i in range(len(numbers)): 
        for j in range(i):
            if numbers[j] < numbers[j+1]:
                temp = numbers[j] 
                numbers[j] = numbers[j+1] 
                numbers[j+1] = temp 
  
    return numbers

print(sortDescending([6,2,12,5]))
Create a Python script that reads an integer, n, from the user and prints out the value of n factorial. 8 # Get input from the user
n = int(input("Enter a number: "))

# Calculate the factorial of the number
factorial = 1
while n > 1:
    factorial *= n
    n -= 1

# Print out the result
print("The factorial of the given number is:", factorial)
Develop a Python script to sort a collection of numbers in descending order. A collection of numbers: [1, 9, 4, 6, 3, 7] def sort_numbers(nums):
  # sort the numbers in descending order
  sorted_nums = sorted(nums, reverse=True)
  
  # print the sorted list
  print(sorted_nums)
  
  # return the sorted list
  return sorted_nums

nums = [1, 9, 4, 6, 3, 7]
sort_numbers(nums) # output: [9, 7, 6, 4, 3, 1]
Generate a correct Python program to copy a list. list_x = [1,2,3,4] def copy_list(list_x):
	list_y = list_x [:]
	return list_y
Develop a program in Python for printing an asterisk triangle consisting of n rows. 5 def asterisk_triangle(n):
    for i in range(n):
        for j in range(i+1):
            print('*', end=" ")
        print()

n = 5
asterisk_triangle(n)
Generate a Python function that will accept an array of integers and remove duplicates from the array. [1, 2, 3, 3, 4, 4, 5, 5] def remove_duplicates(arr):
 new_arr = [] 
 for num in arr: 
 if num not in new_arr:
 new_arr.append(num) 
 return new_arr
Convert the string "Hello World" to lowercase using Python.  "hello world".lower()
Develop a Python program to count the total characters from a given list of words. ["Apple", "Banana", "Orange"] words = ["Apple", "Banana", "Orange"]
total_chars = 0

for word in words:
    total_chars += len(word)

print(total_chars) # Output: 15
Generate Python code to sum up all numbers up to a given number n  def sum_to_n(n):

    #edge cases
    if n < 0: 
        return 0
    if n == 0:
        return 0

    #binominal sum formula 
    return (n * (n+1)) / 2 

print(sum_to_n(10))
Generate a Python method to format a given string in the desired manner. "I am learning python" def format_string(string):
  return string.lower().title()
This code updates JIRA release notes when deploying to an environment. It requires the environment variables JIRA_API_USER_PASSWORD and JIRA_API_USER_NAME to be set, and flags for version and instance to be provided. To use this code, set the required environment variables and provide the necessary flags for version and comment when running the script.  #!/usr/bin/env python
"""Updates JIRA release notes when deploying to an environment.

This requires the
    JIRA_API_USER_PASSWORD and
    JIRA_API_USER_NAME
environment variables to be set, and flags for version and instance to be provided.
"""

import logging
import os
import sys

import jira

from rdr_service.main_util import configure_logging, get_parser

_JIRA_INSTANCE_URL = "https://precisionmedicineinitiative.atlassian.net/"
# Release tickets are moved from our usual project, DA, to the PD project
# for change approval, so for stable/prod releases look for tickets there.
_JIRA_PROJECT_ID = "PD"


def _connect_to_jira(jira_username, jira_password):
    return jira.JIRA(_JIRA_INSTANCE_URL, basic_auth=(jira_username, jira_password))


def main(args):
    jira_username = os.getenv("JIRA_API_USER_NAME")
    jira_password = os.getenv("JIRA_API_USER_PASSWORD")
    if not jira_username or not jira_password:
        logging.error("JIRA_API_USER_NAME and JIRA_API_USER_PASSWORD variables must be set. Exiting.")
        sys.exit(-1)
    jira_connection = _connect_to_jira(jira_username, jira_password)
    summary = "Release tracker for %s" % args.version
    issues = jira_connection.search_issues(
        'project = "%s" AND summary ~ "%s" ORDER BY created DESC' % (_JIRA_PROJECT_ID, summary)
    )
    if issues:
        if len(issues) > 1:
            logging.warning(
                "Found multiple release tracker matches, using newest. %s",
                ", ".join("[%s] %s" % (issue.key, issue.fields().summary) for issue in issues),
            )
        issue = issues[0]
        jira_connection.add_comment(issue, args.comment)
        logging.info("Updated issue %s", issue.key)
        sys.exit(0)
    else:
        logging.error("No issue found with summary %r in project %r; exiting.", summary, _JIRA_PROJECT_ID)
        sys.exit(-1)


if __name__ == "__main__":
    configure_logging()
    parser = get_parser()
    parser.add_argument("--version", help="The version of the app being deployed (e.g. v0-1-rc21", required=True)
    parser.add_argument("--comment", type=str, help="The comment to add to the issue", required=True)
    main(parser.parse_args())

Design an object-oriented Python class to represent a vehicle.  class Vehicle:
    def __init__(self, make, model, year):
        self.make = make
        self.model = model
        self.year = year
    
    def getMake(self):
        return self.make
    
    def getModel(self):
        return self.model
    
    def getYear(self):
        return self.year
Construct a python program that analyzes the occurrence of different words in a text The quick brown fox jumps over the lazy dog words = 'The quick brown fox jumps over the lazy dog'.split()
word_frequency = {}

for word in words:
    if word not in word_frequency:
        word_frequency[word] = 1
    else:
        word_frequency[word] += 1

print('Word Frequency:', word_frequency)
Construct an implementation of a linked list in Python  class Node: 
  
    # Function to initialise the node object 
    def __init__(self, data): 
        self.data = data # Assign data 
        self.next = None # Initialize next as null 

# Linked List class contains a Node object 
class LinkedList: 

    # Function to initialize head 
    def __init__(self): 
        self.head = None
Create a timer class in Python to create a 5-minute countdown  import time

class Timer:
    # Constructor
    def __init__(self, duration):
        self.duration = duration
        self.start_time = time.time()
        self.end_time = self.start_time + self.duration

    # Methods
    def start(self):
        while time.time() < self.end_time:
            minutes, seconds = divmod((self.end_time - time.time()), 60)
            print(f'{int(minutes)} minutes and {int(seconds)} seconds left')
            time.sleep(1)
        print('Timer completed')
        
if __name__ == '__main__':
    timer = Timer(300) # Timer duration in seconds (5-minute timer in this example)
    timer.start()
Create a program in Python that has a list of 5 different computer languages and prints out each one in a separate line. Not applicable languages = ["Python", "C++", "Java", "Javascript", "Ruby"]

for language in languages:
    print(language)
Write a Python function to sort the given list of tuples based on their second elements.  def sort_tuples_by_second(tuples):
 tuple_order = sorted(tuples, key=lambda x: x[1])
 return tuple_order
Design an algorithm and write a code in Python that can analyze the given dataset. A dataset comprising of two columns and 10 rows. Column 1 has 10 integer values and Column 2 has 8 strings values. #Import library
import pandas as pd

#Read data
data = pd.read_csv('dataset.csv')

#Get data from columns
column1 = data['col1']
column2 = data['col2']

#Get the stats of column 1
column1_mean = column1.mean()
column1_std = column1.std()

#Analyize column 2
column2_unique_values = set(column2)

#Print results
print('The mean of column1 is', column1_mean)
print('The standard deviation of column1 is', column2_std)
print('The unique values of column2 are', column2_unique_values)
Develop a Python code to encode text into base64.  import base64

# Encode a text into base64
def encode_base64(text):
  # convert the text to bytes object
  text_bytes = text.encode('ascii')
  # encode it into base64
  base64_bytes = base64.b64encode(text_bytes)
  # convert it back to a string
  base64_encoded_text = base64_bytes.decode('ascii')

  return base64_encoded_text

print(encode_base64('This is a test'))
Come up with a Python object-oriented program to represent a circle.  class Circle:
    def __init__(self, radius):
        self.radius = radius
    
    def get_area(self):
        return 3.14 * self.radius * self.radius
Produce a Huffman tree visualisation in Python. symbols = ['A', 'B', 'C', 'D', 'E', 'F']
frequences = [45, 13, 12, 16, 9, 5] from collections import Counter
import pydot
from collections import defaultdict 
from HuffmanTree import HuffmanTree

# create a Huffman tree
symbols = ['A', 'B', 'C', 'D', 'E', 'F']
frequences = [45, 13, 12, 16, 9, 5]
frequency = Counter(zip(symbols, frequencies))
ht = HuffmanTree(frequency)

# draw the tree
nodes = defaultdict(list)
edges = []
for node in ht:
    label =  '%s\n%s' % (node.character, node.frequency)
    nodes[node.parent].append((node.identifier, label))
    edges.append((node.parent, node.identifier))

g = pydot.Dot(graph_type='graph')
for k, v in nodes.items():
    for i, j in v:
        n = pydot.Node(i, label=j)
        g.add_node(n)
for e in edges:
    g.add_edge(pydot.Edge(e[0], e[1]))
g.write_png('HuffmanTree.png')
Write a Python function that will calculate the average temperature for the past week. [64.7, 67.3, 71.3, 73.1, 75.7, 73.2, 75.7] def calc_avg_temperature(temperatures):
  total = 0
  for temp in temperatures:
    total += temp
  avg = total / len(temperatures)
  return avg

print(calc_avg_temperature([64.7, 67.3, 71.3, 73.1, 75.7, 73.2, 75.7]))

# Output: 71.17142857142857
Create a Python script to read CSV data and store the data in a Pandas DataFrame.  import pandas as pd

# Read CSV data
data = pd.read_csv("data.csv")

# Store data to DataFrame
df = pd.DataFrame(data)
Implement a solution for an online reservation system in Python. The system should allow for users to register and make reservations for products. Sample product list:
[ 
 { id: 1, name: 'Sofa', price: 499.99 }, 
 { id: 2, name: 'Table', price: 149.99 }, 
 { id: 3, name: 'Chair', price: 79.99 } 
] import sqlite3
conn = sqlite3.connect('reservation_system.db')

conn.execute(''' CREATE TABLE IF NOT EXISTS products
(
product_id INTEGER PRIMARY KEY,
product_name VARCHAR(20) NOT NULL, 
price DECIMAL NOT NULL
)''')

conn.execute("INSERT INTO products VALUES(1, 'Sofa', 499.99)")
conn.execute("INSERT INTO products VALUES(2, 'Table', 149.99)")
conn.execute("INSERT INTO products VALUES(3, 'Chair', 79.99)")

conn.execute(''' CREATE TABLE IF NOT EXISTS reservations
(
reservation_id INTEGER PRIMARY KEY,
product_id INTEGER NOT NULL,
user_name VARCHAR(20) NOT NULL,
reservation_date DATETIME NOT NULL
)''')

def register_user(username):
 conn.execute("INSERT into users (username) VALUES (?)", (username,))

def make_reservation(product_id, username, date):
 conn.execute("INSERT into reservations (product_id, user_name, reservation_date) VALUES (?, ?, ?)", (product_id, username, date))

conn.commit()
conn.close()
Given the following array of numbers, write a Python code snippet to sort it in descending order. [9, 2, 4, 7, 6] numbers = [9, 2, 4, 7, 6]
numbers.sort(reverse=True)
print(numbers)
Create a TensorFlow program in Python that takes an array of labels and classification scores as input, and plots the precision/recall curve. import numpy as np
# Array of classification labels
y = np.array([1, 0, 1, 0, 1, 0, 0, 0, 1, 1]) 
# Array of classification scores
scores = np.array([0.8, 0.6, 0.75, 0.9, 0.7, 0.3, 0.2, 0.1, 0.85, 0.5]) import numpy as np
import matplotlib.pyplot as plt 
from sklearn.metrics import precision_recall_curve

# Array of classification labels
y = np.array([1, 0, 1, 0, 1, 0, 0, 0, 1, 1]) 

# Array of classification scores
scores = np.array([0.8, 0.6, 0.75, 0.9, 0.7, 0.3, 0.2, 0.1, 0.85, 0.5])

# Get precision and recall value
precision, recall, _ = precision_recall_curve(y, scores)

# plot precision and recall curve
plt.plot(recall, precision)
plt.xlabel('Recall')
plt.ylabel('Precision')
plt.show()
Develop a game AI in Python that plays Tic-Tac-Toe. Not applicable #import necessary libraries
import numpy as np
from typing import List, Optional, Tuple

# define the board
board=np.zeros([3,3], dtype=int)

# define the winning combos
win_combos = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6]
]

# define the game AI
def game_ai(board:np.ndarray) -> Optional[Tuple[int, int]]:
  # analyze the board
  diags=[]
  diags.append(board.trace())
  diags.append(np.fliplr(board).trace()) 

  # generate all possible moves
  moves = [i for i, x in enumerate(board.reshape(-1)) if x == 0] 
  
  # get winning move
  for ind, val in enumerate(board.reshape(-1)):
    if val == 0:
      board.reshape(-1)[ind] = 1  
      if any(all(val==1 for val in combo) for combo in win_combos):
        board.reshape(-1)[ind] = 0
        return ind // 3, ind % 3
      else:
        board.reshape(-1)[ind] = 0 
  
  # block opponent's winning move
  for ind, val in enumerate(board.reshape(-1)):
    if val == 0:
      board.reshape(-1)[ind] = 2  
      if any(all(val==2 for val in combo) for combo in win_combos):
        board.reshape(-1)[ind] = 0
        return ind // 3, ind % 3
      else:
        board.reshape(-1)[ind] = 0 

  # do random move        
  return moves[np.random.choice(len(moves))] // 3, moves[np.random.choice(len(moves))] % 3

#sample call
row, col = game_ai(board)
print(row, col)
# Output: 0 1
Write a Python program that takes two lists as input and merges the values from both these lists into the third list. list1 = [1, 2, 3, 4, 5]
list2 = [6, 7, 8, 9, 0] list3 = []

list3.extend(list1)
list3.extend(list2)
  
print(list3)
Write a function in Python that takes two parameters, a positive integer n and a list of numbers, and returns the sum of the first n elements of the list. n = 3, nums = [5, 8, 20, 3] def func(n, nums):
  res = 0
  for i in range(n):
    res += nums[i]
  return res
Create a robot using Python and the MyRobotLab library that performs a specific task. Task: Move the robot's arm to a point at (x = 10, y = 20) from org.myrobotlab.service import Arduino
from org.myrobotlab.service import Servo

# Create serial connection to Arduino
arduino = Arduino("Arduino1", "COM6") # COM6 is the serial port

# Connect servos to arduino 
baseServo = Servo(arduino, "baseServo")
armServo = Servo(arduino, "armServo")

# Move servos
baseServo.moveTo(90)
armServo.moveTo(180)

# Move to a specific point
baseServo.moveTo(10)
armServo.moveTo(20)
Write a function in Python that takes a string as input and converts it to title case. s = "this is a test string" def convertToTitleCase(s):
    return ' '.join(word[0].upper() + word[1:] for word in s.split())
 
print(convertToTitleCase("this is a test string"))  # Output: This Is A Test String
Given a list of numbers, write a program in Python to create two new lists, one that contains even numbers and one that contains odd numbers. Input: [1, 2, 3, 4, 5, 6, 7, 8] def even_odd_lists(list_input): 
    even_list = [] 
    odd_list = []

    for element in list_input: 
        if element % 2 == 0: 
            even_list.append(element) 
        else: 
            odd_list.append(element) 
              
    print("Even list:", even_list) 
    print("Odd list:", odd_list) 
      
list_input = [1, 2, 3, 4, 5, 6, 7, 8] 
even_odd_lists(list_input)
Rewrite the following piece of code in Python, that calculates the sum of two variables. int x = 2;
int y = 4;
int sum = x + y; x = 2
y = 4

sum = x + y
print(sum) # 6
Design a Python program to determine if one string is a substring of another. "Hello", "Hello World" def isSubstring(str1, str2):
    if len(str1) > len(str2):
        return False

    for i in range(len(str2)):
        if (str2[i: i+len(str1)] == str1):
            return True

    return False

str1 = "Hello"
str2 = "Hello World"

print(isSubstring(str1, str2))
Create a Python script for predicting the stocks price of a company for the next 30 days using a machine learning algorithm.  import pandas as pd

from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor

# Read the data of company stocks price
df = pd.read_csv("company_stock_prices.csv")

# Create the features
X = df.drop(["Date", "Price"], axis=1).values

# Create the labels
y = df["Price"].values

# Split the dataset into training and test set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model
model = RandomForestRegressor()
model.fit(X_train, y_train)

# Make prediction on the test set
y_pred = model.predict(X_test)

# Make prediction for next 30 days
X_new = df.drop(["Date", "Price"], axis=1).tail(30).values

y_pred_30days = model.predict(X_new)
Write a Python program that will determine the maximum number of unique paths a person can take from one point to another in a two-dimensional grid. grid = [
[0,1],
[1,1]
] def unique_paths(grid):
 rows = len(grid)
 cols = len(grid[0])
 
 dp = [[0 for i in range(cols)] for j in range(rows)]
 
 for i in range(rows):
 for j in range(cols):
 if i == 0 or j == 0:
 dp[i][j] = 1
 else:
 dp[i][j] = dp[i][j-1] + dp[i-1][j]
 
 return dp[-1][-1]
 
print(unique_paths(grid))
# Output: 2
Write a Python script that takes in a Python list and returns every other element as a sublist. [1,2,3,4,5] def every_other_sublist(input_list):
 sublist = []
 for i in range(len(input_list)):
 if i % 2 == 0:
 sublist.append(input_list[i])
 return sublist
Develop a Python program which uses a sorting algorithm to sort the provided dataset by its second column in ascending order. dataset = [["Bob", 10], ["Alice", 8], ["Harry", 14]] def sort_by_column(dataset): 
	# extract second column from dataset
	second_column = [row[1] for row in dataset] 

	# sort dataset using second column
	sorted_dataset = [row for _, row in sorted(zip(second_column, dataset))] 
	
	return sorted_dataset
Write a loop in Python to print the words "hello world" 3 times.  for i in range(3):
    print("Hello World")
Edit this Python program to make the output more accurate def calculate_average(numbers):
    total = 0
    for n in numbers:
        total += n
    return float(total) / len(numbers) def calculate_average(numbers):
    total = 0
    for n in numbers:
        total += n
    return float(total) / len(numbers) if len(numbers) > 0 else 0
Given a list of integers, write a code in Python to find a sublist whose sum is divisible by 7. list = <5,-1,2,10,20, 4, 7, 8> def find_sublist_divisible_by_7(list):
    for i in range(len(list)):
        sum_so_far = 0
        for j in range(i, len(list)):
            sum_so_far += list[j]
            if sum_so_far % 7 == 0:
                return list[i:j+1]
    return None
Compare two strings in Python to determine if they are anagrams of one another. str1 = "abcd"
str2 = "dcba" def is_anagram(str1, str2):
    """
    Checks if two strings are anagrams of one another
    """
    if len(str1) != len(str2):
        return False
    
    str1_counts = {}
    for char in str1:
        if char in str1_counts:
            str1_counts[char] += 1
        else:
            str1_counts[char] = 1
            
    str2_counts = {}
    for char in str2:
        if char in str2_counts:
            str2_counts[char] += 1
        else:
            str2_counts[char] = 1
            
    for char in str1_counts:
        if str1_counts[char] != str2_counts.get(char, 0):
            return False
    
    return True
Develop an algorithm in Python to reverse a given string. "Hello World!" def reverse_string(string):
    reversed_string = ""
    for char in string:
        reversed_string = char + reversed_string
    return reversed_string

result = reverse_string("Hello World!")
print(result)
Write a Python program to find the missing number from a given list. [2, 3, 1, 5] def find_missing_number(list_of_numbers):
    max_number = max(list_of_numbers)
    total_sum = (max_number * (max_number + 1)) // 2
    actual_sum = 0
    
    for number in list_of_numbers:
        actual_sum += number
    return total_sum - actual_sum

list_of_numbers = [2, 3, 1, 5]
missing_number = find_missing_number(list_of_numbers)
print("Missing number: ", missing_number)
Create a code in Python that takes two lists and returns a new list that contains the elements of both. list1 = [1, 2, 3]
list2 = [2, 3, 4] def merge_lists(list1, list2):
  merged_list = list1 + list2
  return merged_list

merged_list = merge_lists(list1, list2)
print(merged_list)
Develop a Python script to encode and decode a string using Base64. "Hello" import base64

def encode(s):
    encoded = base64.b64encode(s.encode('utf-8'))
    return encoded.decode('utf-8')

def decode(s):
    decoded = base64.b64decode(s.encode('utf-8'))
    return decoded.decode('utf-8')
Write a Python code snippet to remove all occurrences of a character from a string.  def remove_char(s, c):
  return s.replace(c, '')
Create a function in Classical Python to extract the hostname from a given URL url = "http://www.example.com/index.html" def get_hostname(url):
    hostname = url.split("/")[2]
    return hostname

hostname  = get_hostname(url)
print(hostname)
Create a program in Python to classify emails as spam, ham or uncertain. email_list = ['Hi, this is an offer email', 'Welcome to our company', 'You will get discount'] def classify_email(email_list):
    spam_count = 0
    ham_count = 0
    uncertain_count = 0
    for email in email_list:
        if 'offer' in email or 'discount' in email:
            spam_count += 1
        elif 'welcome' in email or 'company' in email:
            ham_count += 1
        else:
            uncertain_count += 1
    return {'spam': spam_count, 'ham': ham_count, 'uncertain': uncertain_count}
Generate a Python program that returns the smallest even number in a given list nums = [5, 7, 9, 8, 4] def find_smallest_even(nums):
    smallest = None
    for num in nums:
        if (num % 2 == 0) and (smallest == None or num < smallest):
            smallest = num
    return smallest
Develop an algorithm in Python that takes a number as input and outputs the sum of all its divisors. 6 def sum_divisors(num):
    # Initialize sum 
    summation = 0
    
    # Iterate upto num 
    for i in range(1, num+1):
        # If num is divisible  
        # by i, add it to sum 
        if num%i == 0:
            summation += i
    # Return summation 
    return summation
  
   
# Driver Code 
num = 6
result = sum_divisors(num) 
  
# Printing result  
print(result)
Create a Python function that returns all the prime numbers between 1 and a given number. Number: 25 def get_primes(n):
 primes = []
 for num in range(2, n + 1):
 is_prime = True
 for divisor in range(2, num):
 if num % divisor == 0:
 is_prime = False
 break
 
 if is_prime:
 primes.append(num)
 
 return primes
 
primes = get_primes(25)
print(primes) # prints [2, 3, 5, 7, 11, 13, 17, 19, 23]
Create a virtual environment in Python to manage project dependencies.  """
Create a virtual environment in Python to manage project dependencies
"""

# Create the virtual environment
python3 -m venv env

# Activate the virtual environment
source env/bin/activate

# Install project requirements
pip install -r requirements.txt
Can you generate a Python program to calculate the length of the hypotenuse of a right triangle?  import math

def hypotenuse_length(a, b):
    """ Calculates the hypotenuse of a right triangle given its side lengths """
    
    return math.sqrt(a**2 + b**2)
  
length = hypotenuse_length(3, 4)
print(length)
Create a function in Python that takes two list of numbers and outputs the product of each element in both lists. [1, 2, 3], [3, 4, 5] def productOfLists(arr1, arr2):
    res = []
    for i in range(len(arr1)):
        for j in range(len(arr2)):
            if i == j:
                res.append(arr1[i] * arr2[j])
    return res

product = productOfLists([1, 2, 3], [3, 4, 5])
print(product)
Create a function in Python to sort this list of high-scores in descending order. [150, 160, 233, 700, 800, 1200] def sortScores(scores):
    return sorted(scores, reverse=True)
Write a Python code fragment to optimize the given function. def search(data, x):
    for element in data:
        if element == x:
            return True
    return False def search(data, x):
    if x in data:
        return True
    return False
Create a web API in Python using Flask that returns a list of ocean creatures given a user’s query. Query: Jellyfish import requests
from flask import Flask, jsonify, request

app = Flask(__name__)

@app.route("/api/ocean-creatures", methods=["GET"])
def get_ocean_creatures():
 query = request.args.get("q","")
 url = "https://en.wikipedia.org/w/api.php"
 params = {
 'action': 'query',
 'list':'search',
 'srsearch': query + ' ocean',
 'format': 'json',
 }
 res = requests.get(url, params=params).json()
 return jsonify(res)

if __name__ == '__main__':
 app.run(debug=True)
Can you create a Python function that returns the sum of all the elements in a given list? [1, 2, 3, 4, 5] def list_sum(list):
   sum = 0
   for el in list:
       sum += el
   return sum
Write a python program to round a float value to the next decimal place.  def round_up(value):
    """Rounds up a number to the next decimal."""
    return int(value * 10) / 10
Create a dictionary in Python to store information about the different elements in the Periodic Table.  elements_dict = {}

elements_dict["Hydrogen"] = {
    "symbol": "H", 
    "atomic_number": 1, 
    "atomic_mass": 1.008, 
    "group": 1, 
    "period": 1
    }

elements_dict["Helium"] = {
    "symbol": "He", 
    "atomic_number": 2, 
    "atomic_mass": 4.003, 
    "group": 18, 
    "period": 1
    }

#Repeat for other elements.
Create a Python script that normalizes a given list of strings. Input List: ['Red', 'red', 'WhITE', 'white', 'bLUE', 'blue'] """
Normalize a given list of strings
"""

def normalize(lst):
    output = []
    for item in lst:
        output.append(item.lower())
    return output
    
if __name__ == '__main__':
    input_list = ['Red', 'red', 'WhITE', 'white', 'bLUE', 'blue']
    print(normalize(input_list))
Create a program using Python that adds two numbers entered by the user. Not applicable # The function to add two numbers
def add(num1, num2):
  # Adding the two numbers
  result = num1 + num2
 
  # Printing the result
  print(f'The result of the addition is {result}')

# Taking the input from the user
num1 = int(input('Enter the first number: '))
num2 = int(input('Enter the second number: '))

# Calling the add function
add(num1, num2)
Design an algorithm in Python to calculate the Fibonacci numbers up to N. 5 def fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print("Incorrect input") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n+1): 
            c = a + b 
            a = b 
            b = c 
        return b 

print(fibonacci(5)) # 5
Generate a Python script to filter a list of words by length. words = ['cat', 'dog', 'elephant', 'bear', 'dragon'] def filter_by_length(words, length):
    return [word for word in words if len(word) == length]
Develop a python script to retrieve data from a MySQL database  import mysql.connector

conn = mysql.connector.connect(host="localhost", port="3306", database="myDB", user="root", password="mypassword")

cursor = conn.cursor()

cursor.execute("SELECT * from myTable")
data = cursor.fetchall()

conn.close()
Create a Python program to update a user record in a database. Table name: users import sqlite3

# create the connection to the Database
con = sqlite3.connect('mydatabase.db')

# get the user data from the database
with con:
 cur = con.cursor()
 sql = 'SELECT * FROM users WHERE user_id=?'
 cur.execute(sql, ['12345'])
 user = cur.fetchone()

# update the user data
user_name = 'John Smith'
user_age = 32
user_type = 'standard'

# update the data in the database
sql = 'UPDATE users SET name=?, age=?, type=? WHERE user_id=?'
con.execute(sql, [user_name, user_age, user_type, '12345'])

# commit the changes
con.commit()
Develop a python code to achieve the following goal A function to take a list of strings as input and generate a list of tuples, each containing string length and corresponding string. def string_lengths(strings):
    lengths = []
    for string in strings:
        lengths.append( (len(string), string) ) 
    return lengths
Construct a Python program that implements a game of Rock-Paper-Scissors.  import random
# define the possible inputs
possible_inputs = ['rock', 'paper', 'scissors']

# print intro message
print('Welcome to Rock, Paper, Scissors!')

# get input from user
user_input = input('Choose Rock, Paper, or Scissors: ').lower()

# check the input
if user_input not in possible_inputs:
    print('Error: Invalid input. Please choose either Rock, Paper, or Scissors.')
    exit()

# generate computer's input
computer_input = random.choice(possible_inputs)

# print results
print('You chose {} and the computer chose {}.'.format(user_input, computer_input))

# determine winner
if user_input == computer_input:
    print('It\'s a tie!')
elif (user_input == 'rock' and computer_input == 'scissors') or \
     (user_input == 'paper' and computer_input == 'rock') or \
     (user_input == 'scissors' and computer_input == 'paper'):
    print('You win!')
else:
    print('You lose!')
Upgrade a Python program to use async/await instead of time.sleep(). import time

def do_something():
	print('starting something')
	time.sleep(2)
	print('done with something')

do_something() import asyncio

async def do_something():
	print('starting something')
	await asyncio.sleep(2)
	print('done with something')

asyncio.run(do_something())
Generate a Python program which takes a list of numbers and returns only the even numbers [1, 2, 3, 4, 5, 6] def get_even_numbers(list_of_numbers):
    even_nums = []
    for num in list_of_numbers:
        if num % 2 == 0:
            even_nums.append(num)
    return even_nums

list_of_nums = [1, 2, 3, 4, 5, 6]
result = get_even_numbers(list_of_nums)
print(result)
Generate a code snippet in Python to convert a string with the following format to a dictionary. (name1=123&name2=456&name3=789). name1=123&name2=456&name3=789 inp = "name1=123&name2=456&name3=789"
kv = inp.split("&")
d = {}
for i in kv:
    k,v = i.split("=")
    d[k] = v

print(d)
Write a procedure in Python to determine if two given strings are anagrams. "programmer" and "impregromr" def is_anagram(s1, s2):
    s1_counts = {}
    for char in s1:
        if char not in s1_counts:
            s1_counts[char] = 1
        else:
            s1_counts[char] += 1
    
    s2_counts = {}
    for char in s2:
        if char not in s2_counts:
            s2_counts[char] = 1
        else:
            s2_counts[char] += 1
            
    return s1_counts == s2_counts
Develop a Python program that computes the sum of integers from 1 to n.  def find_sum(n):
  if n == 0:
    return 0
  return n + find_sum(n-1)

n = int(input("Enter a number:"))

print("The sum of integers from 1 to", n,  "is",  find_sum(n))
Optimize this Python code to make it more efficient. def count_numbers(lst):
    count = 0
    for i in range(len(lst)):
        if lst[i].isdigit():
            count += 1
    return count def count_numbers(lst):
    count = sum(map(str.isdigit, lst))
    return count
Write a Python program to read in a data set, and output the mean of the set and the range (highest - lowest) of the set. [2, 3, 6, 12, 21, 41] #this program reads in a data set, and outputs the mean of the set 
# and the range (highest - lowest) of the set.

#function to get the mean of given data set
def mean(input_list):
    total = 0
    for i in input_list:
        total += i
    return total/len(input_list)

#function to get the range (highest - lowest) of the given data set
def range(input_list):
    return max(input_list)-min(input_list)  

#initialize an array
input_list = [2, 3, 6, 12, 21, 41]

#get the mean
mean = mean(input_list)

#get the range
the_range = range(input_list)

#print the output
print("The mean of given array is",mean)
print("The range (highest - lowest) of given array is",the_range)
Create a Python program to classify emails into two categories: spam and ham.  import re

def is_spam(email):
    pattern = r'viagra|cialis|pharmacy'
    if re.search(pattern, email):
        return True
    else:
        return False
Write an algorithm for linear search in Python. List: [1, 3, 8, 10, 15, 20, 25]
Number to search: 15 def linear_search(list, n):
  i = 0
  while i < len(list):
    if list[i] == n:
      return i
    i = i+1
  return -1

list = [1, 3, 8, 10, 15, 20, 25]
n = 15
index = linear_search(list, n)
print("Number found at index:", index)
Create a dashboard using Python code to visualize the sales of a certain product. sample sales data import pandas as pd
import matplotlib.pyplot as plt

# Read the sales data
data = pd.read_csv('sales_data.csv')

# Create a figure
fig = plt.figure()

# Create a bar chart
ax = fig.add_subplot()
ax.bar(data['date'], data['sales'], color='orange')

# Set the x-axis and y-axis limits
ax.set_xlim([min(data['date']), max(data['date'])])
ax.set_ylim([0, max(data['sales']) + 10])

# Set the title of the chart
ax.set_title('Sales of a Product')

# Display the chart
plt.show()
Convert an existing function from Python 3 to Python 2. def check_anagram(string1, string2):
    if(sorted(string1) == sorted(string2)):
        return True
    else:
        return False def check_anagram(string1, string2):
    if(sorted(list(string1)) == sorted(list(string2))):
        return True
    else:
        return False
Develop an algorithm in Python to remove duplicates from a list.  # remove_duplicates function takes a list as a parameter
# and returns a list with all the duplicates removed
def remove_duplicates(input_list):
  # Create an empty list to store the result
  result = []
 
  # Iterate through the given list
  for element in input_list:
  
    # Check if the element is already in the result list
    # and if not, add it to the result
    if element not in result:
      result.append(element)
  
  # Return the result
  return result
Write a Python code to normalize a list of numbers. list_numbers = [1, 4, 4, 5, 7] """
Normalize a list of numbers using Python
"""

def normalize_list(list_numbers):
  max_val = max(list_numbers)
  normalized = [n/max_val for n in list_numbers]
  return normalized

if __name__ == '__main__':
  list_numbers = [1, 4, 4, 5, 7]
  print(normalize_list(list_numbers))
Optimize a given program written in Python. def get_factorial(n):
    if n == 1 or n == 0:
        return 1
    else:
        return n * get_factorial(n-1) def get_factorial(n):
    result = 1
	for i in range(1, n + 1):
		result *= i
	return result
Create a class in Python to represent a Person.  class Person:
    # constructor
    def __init__(self, name, age, gender):
        self.name = name
        self.age = age
        self.gender = gender

# creating a person
person1 = Person("John Doe", 35, "Male")

# printing the details
print("Name:", person1.name)
print("Age:", person1.age)
print("Gender:", person1.gender)
Create a program in Python to print the following pattern n = 5 def print_pattern(n):
    for i in range(1, n+1):
        for j in range(1, i+1):
            print(j, end="")
        print("")

print_pattern(5)
Write a Python program to generate a random string with the given length. Length: 8 import string
import random

def generate_random_string(length):
  characters = string.ascii_letters + string.digits 
  return ''.join(random.choice(characters) for i in range(length))
Write a code in Python to sort a list of integers with the following conditions:
- Numbers greater than zero should be sorted in ascending order.
- Numbers equal to zero should remain unchanged.
- Numbers less than zero should be sorted in descending order. [-2, 7, 0, 8, -3] def sort_list(numbers):
  result = []
  positive_numbers = []
  negative_numbers = []
  
  #separate negative and positive numbers
  for i in numbers:
    if i > 0:
      positive_numbers.append(i)
    elif i < 0:
      negative_numbers.append(i)
    else:
      result.append(i)
  
  #sort the positive numbers
  positive_numbers.sort()
  #sort the negative numbers in descending order
  negative_numbers.sort(reverse=True)
  
  #concatenate all of the separate lists
  result += positive_numbers
  result += negative_numbers
  
  return result
Create a web API in Python that will return a list of all users. Not applicable @app.route('/users/api/v1.0/users')
def get_users():
 users = [
 {
 'id': 1,
 'name': 'John Smith',
 'email': 'john.smith@example.com'
 },
 {
 'id': 2,
 'name': 'Jane Doe',
 'email': 'jane.doe@example.com',
 }
 ]
 return jsonify({'users': users})
Create a basic Python socket program to send a message back and forth between a server and a client. Not applicable # Server:

import socket 

s = socket.socket()
host = '127.0.0.1'
port = 12345

s.bind((host, port))
s.listen(5)
while True:
 c, addr = s.accept()
 print('Got connection from', addr)
 c.send(b'Thank you for connecting!')
 message = c.recv(1024)
 print('Received:', message)
 c.close()

# Client: 

import socket 

s = socket.socket()
host = '127.0.0.1'
port = 12345

s.connect((host, port))
print(s.recv(1024))
s.send(b'Hello, this is client!')
s.close()
Develop a Python program that calculates the mean of list of numbers. [1, 5, 2, 4, 9] def calculate_mean(nums):
    total = 0
    for n in nums:
        total += n
    mean = total / len(nums)
    return mean

mean = calculate_mean([1, 5, 2, 4, 9])
Write an algorithm in Python to sort an array of numbers in descending order. [13, 11, 7, 4, 2] def descendingSort(arr): 
    arr.sort(reverse=True) 
    return arr
  
arr = [13, 11, 7, 4, 2]
result = descendingSort(arr) 
  
print (result)
Write a python program to take in two strings, s1 and s2, and return the longest common substring. s1 = "abcd1234" 
s2 = "aa112345" def longest_common_substring(s1, s2):
    """
    Function to return the longest common substring of two input strings

    Parameters:
    s1 (string): String #1
    s2 (string): String #2

    Returns:
    longest_sub (string): The longest common substring
    """
    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]
    longest, x_longest = 0, 0
    for x in range(1, 1 + len(s1)):
        for y in range(1, 1 + len(s2)):
            if s1[x - 1] == s2[y - 1]:
                m[x][y] = m[x - 1][y - 1] + 1
                if m[x][y] > longest:
                    longest = m[x][y]
                    x_longest = x
            else:
                m[x][y] = 0
    longest_sub = s1[x_longest - longest: x_longest]
    return longest_sub

longest_common_substring(s1, s2)
# Result: '123'
Create a simple program in Python that prints out the first n fibonacci numbers.  def fibonacci(n): 
   if n<0: 
      print("Incorrect input") 
      # First Fibonacci number is 0 
   elif n==1: 
      return 0
   # Second Fibonacci number is 1 
   elif n==2: 
      return 1
   else: 
      return fibonacci(n-1)+fibonacci(n-2) 

# Driver Program 
nterms = 4
for i in range(nterms):
      print(fibonacci(i))
Given an input sentence with 4 different words, create a python program that phrases each word with the same first letter. Hello World Goodbye Mars """
Given an input sentence with 4 different words, create a python program that phrases each word with the same first letter
"""

words = 'Hello World Goodbye Mars'.split()

for word in words:
  print(word[0] + word[1:])
Given a list of strings, write a python program to count the frequencies of each of the strings and return a list of tuples containing the string and its frequency. strings = ['apple', 'banana', 'apple', 'orange'] def count_frequencies(strings):
    frequencies = {}
    for string in strings:
        if string in frequencies:
            frequencies[string] += 1
        else:
            frequencies[string] = 1
    return [(string, frequency) for string, frequency in frequencies.items()]
Generate a code snippet in Python to convert a given number to its binary format. 245 def toBinary(num):
   result = ""
   while num > 0:
      result = str(num % 2) + result
      num = num // 2
   return result

print(toBinary(245))  # output: 11110101
Construct a Python program to check whether a given number is prime or not. 13 def check_prime(num):
    if num == 1:
        return False
    for i in range(2,num):
        if not num % i:
            return False
    return True

result = check_prime(13)
print(result)
Describe the differences between objects and classes in Python.  Objects are instances of classes and are used to store data and behavior. Class is a blueprint or template for objects. It defines the attributes and methods of an object. Classes are typically used to represent real world objects or concepts and encapsulate both data and behavior. Objects are essentially specific instances of a class and can be created by instantiating the class. Objects are used to interact with the user and manipulate data. They are also used to create relationships between objects and between classes.
Write a Python program to detect cycle in a linked list using Floyd's Cycle Detection Algorithm.  def detect_cycle(head): 
    slow_p = head 
    fast_p = head 
    while(slow_p and fast_p and fast_p.next) : 
        slow_p = slow_p.next
        fast_p = fast_p.next.next
        if slow_p == fast_p : 
            return True
    return False
Generate a python program that implements a data structure for a binary tree.  # Python program to implement a binary tree

# A class that represents an individual node in a Binary Tree
class Node:
    def __init__(self, key):
        self.left = None
        self.right = None
        self.val = key

# A class to represent the Binary Tree
class BinaryTree:
    def __init__(self):
        self.root = None

    def insert(self, key):
        if self.root is None:
            self.root = Node(key)
        else:
            self._insert(self.root, key)

    def _insert(self, curr_node, key):
        if key < curr_node.val:
            if curr_node.left is None:
                curr_node.left = Node(key)
            else:
                self._insert(curr_node.left, key)
        elif key > curr_node.val:
            if curr_node.right is None:
                curr_node.right = Node(key)
            else:
                self._insert(curr_node.right, key)

    def inOrder(self):
        res = []
        self._inOrder(self.root, res)
        return res

    def _inOrder(self, curr_node, res):
        if curr_node:
            self._inOrder(curr_node.left, res)
            res.append(curr_node.val)
            self._inOrder(curr_node.right, res)

    def preOrder(self):
        res = []
        self._preOrder(self.root, res)
        return res

    def _preOrder(self, curr_node, res):
        if curr_node:
            res.append(curr_node.val)
            self._preOrder(curr_node.left, res)
            self._preOrder(curr_node.right, res)

    def postOrder(self):
        res = []
        self._postOrder(self.root, res)
        return res

    def _postOrder(self, curr_node, res):
        if curr_node:
            self._preOrder(curr_node.left, res)
            self._preOrder(curr_node.right, res)
            res.append(curr_node.val)
Create a Python program to calculate a loan's monthly payments. Loan amount: 10000,
Annual interest rate: 5.5%,
Loan period: 5 years def loan_payment(loan_amt, annual_interest_rate, loan_period):
  # convert the interest rate to a decimal
  interest_rate = annual_interest_rate / 100

  # calculate the monthly interest rate
  monthly_interest_rate = interest_rate/12

  # calculate the total number of payments
  total_payments = loan_period * 12

  # calculate the monthly payments
  monthly_payment = loan_amt*(monthly_interest_rate/(1\
          -(1+monthly_interest_rate)**(-total_payments)))

  return monthly_payment

#print the result 
print(loan_payment(10000, 5.5, 5))
Can you create an optimization algorithm in Python to minimize the following function? f(x) = x^4 + 7x^3 + 6x^2 - 6x import numpy as np

def minimize(x):
  return np.power(x,4) + 7 * np.power(x,3) + 6 * np.power(x,2) - 6 * x

def optimize(f, x):
  best_x = x 
  best_val = f(x)

  while True:
    new_x = x - 1e-3 
    new_val = f(new_x)
    if new_val < best_val: 
      best_x = new_x 
      best_val = new_val 
      x = new_x
    else:
      break
  return best_x, best_val

x = 0 
x_min, val_min = optimize(minimize, x)
print(f'Minimum of function "f(x)" is at x={x_min}, with value {val_min}.')
Develop a Neural Network model in Python that predicts stock prices for a given company Not applicable #import the necessary packages
import numpy as np
import pandas as pd
import tensorflow as tf

#read in the training dataset
df = pd.read_csv('data.csv')

#initializing the training data
X = df['Open']
y = df['Close']

#creating and tuning the model
model = tf.keras.Sequential()
model.add(tf.keras.layers.Dense(64, activation='relu', input_dim=1))
model.add(tf.keras.layers.Dense(64, activation='relu'))
model.add(tf.keras.layers.Dense(1))

model.compile(optimizer='adam', loss='mse', metrics=['mae'])
model.fit(X, y, epochs=100)

#evaluating the model
test_X = np.linspace(0, 1, 10)
test_y = model.predict(test_X)

#plotting results
plt.plot(test_X, test_y, 'r')
plt.title('Stock Price Prediciton')
plt.xlabel('Open Price')
plt.ylabel('Predicted Close Price')
plt.show()
Improve the performance of this Python function by adding caching or other techniques. def add_two_numbers(n1, n2):
 return n1 + n2 import functools

@functools.lru_cache(maxsize=None)
def add_two_numbers(n1, n2):
 return n1 + n2
Create a CNN classifier in Python using Keras that can classify the MNIST dataset. Not applicable import keras 
from keras.datasets import mnist
from keras.models import Sequential 
from keras.layers import Dense, Dropout, Flatten 
from keras.layers import Conv2D, MaxPooling2D 
from keras import backend as K

# Set image dimensions
img_rows, img_cols = 28, 28

# Load data
(X_train, y_train), (X_test, y_test) = mnist.load_data()

# Reshape data
if K.image_data_format() == 'channels_first':
  X_train = X_train.reshape(X_train.shape[0], 1, img_rows, img_cols)
  X_test = X_test.reshape(X_test.shape[0], 1, img_rows, img_cols)
  inpx_shape = (1, img_rows, img_cols)
else:
  X_train = X_train.reshape(X_train.shape[0], img_rows, img_cols, 1)
  X_test = X_test.reshape(X_test.shape[0], img_rows, img_cols, 1)
  inpx_shape = (img_rows, img_cols, 1)

# Normalize data
X_train = X_train.astype('float32')
X_test = X_test.astype('float32')
X_train /= 255
X_test /= 255

# Number of catogries
num_catogries = 10

# Create neuron network
model = Sequential()
model.add(Conv2D(32, kernel_size=(3, 3),
 activation='relu',
 input_shape=inpx_shape))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(num_catogries, activation='softmax'))

# Compile
model.compile(loss=keras.losses.categorical_crossentropy,
 optimizer=keras.optimizers.Adadelta(),
 metrics=['accuracy'])
 
# Fit data    
model.fit(X_train, y_train,
 batch_size=256,
 epochs=4,
 verbose=1,
 validation_data=(X_test, y_test))

# Evaluate
score = model.evaluate(X_test, y_test, verbose=0)
print('Test loss:', score[0])
print('Test accuracy:', score[1])
Generate a Python program that adds all numbers from 1 to a given number n.  def sum_numbers(n):
    total = 0
    for i in range(1, n+1):
        total += i
    return total
Develop a Python logic to check if two given strings are isomorphic to each other. "add", "egg" def isIsomorphic(s1, s2): 
        if len(s1) != len(s2): 
            return False

        mapping = {} 
        for i in range(len(s1)): 
            if s1[i] in mapping: 
                if mapping[s1[i]] != s2[i]: 
                    return False
            else: 
                if s2[i] in mapping.values(): 
                    return False
                mapping[s1[i]] = s2[i] 

        return True

s1 = "add"
s2 = "egg"

if(isIsomorphic(s1, s2) == True): 
    print("Yes") 
else: 
    print("No")
Write a Python program to check whether a given number is an Armstrong number. Armstrong numbers are the numbers that are equal to the sum of the cubes of their individual digits.  def is_armstrong_number(n):
 s = 0
 for digit in str(n):
 s += int(digit)**3
 return s == n
This code generates tags for a Jekyll blog hosted by Github page. To use it, create a Python file and copy the code into it. Then run the file to generate the tags.  #!/usr/bin/env python

'''
tag_generator.py

Copyright 2017 Long Qian
Contact: lqian8@jhu.edu

This script creates tags for your Jekyll blog hosted by Github page.
No plugins required.
'''

import glob
import os
import re

post_dir = '_posts/'
tag_dir = 'tag/'

filenames = glob.glob(post_dir + '*')

total_tags = []
for filename in filenames:
    f = open(filename, 'r')
    crawl = False
    for line in f:
        if crawl:
            current_tags = line.strip().split()
            if current_tags[0] == 'tags:':
                total_tags.extend(current_tags[1:])
                crawl = False
                break
        if line.strip() == '---':
            if not crawl:
                crawl = True
            else:
                crawl = False
                break
    f.close()
total_tags = set(total_tags)

old_tags = glob.glob(tag_dir + '*.md')
for tag in old_tags:
    os.remove(tag)

for tag in total_tags:
    sTag = re.sub("^\.", "", tag)
    tag_filename = tag_dir + sTag.lower().replace('.', '-') + '.md'
    f = open(tag_filename, 'a')
    write_str = '---\nlayout: tagpage\ntitle: \"Tag: ' + tag + '\"\ntag: ' + tag + '\nrobots: noindex\nexclude_from_search: true\ntagline: \'"Creative Active Individuals can only grow up in a society that emphasizes learning instead of teaching." - Chris Alexander\'\n---\n'
    f.write(write_str)
    f.close()
print("Tags generated, count", total_tags.__len__())

Given a list of integers, write a Python program to find the index of the largest number. [5, 10, 20, 6, 8] nums = [5, 10, 20, 6, 8]
max_num = max(nums)
max_index = nums.index(max_num)

print(max_index)
Create a Monte Carlo simulation in Python to estimate the value of Pi. Not applicable import random
import math

def monte_carlo_pi(n):
 inside = 0
 for i in range(n):
 x = random.random()
 y = random.random()
 if (x*x + y*y) <= 1:
 inside += 1
 pi = (inside/n)*4
 return pi

# Test with 10000 simulations
n = 10000
result = monte_carlo_pi(n)
print(f"Pi is approximately {result} with {n} trials.")
Create a basic Python program that prints out the class average for a list of student grades. [80, 85, 90, 75, 95] numbers = [80, 85, 90, 75, 95]

total = 0
for number in numbers:
 total += number

class_average = total / len(numbers)
print(class_average)
Create a CRUD REST API with Python using Flask and SQLAlchemy for a simple contact list model which contains fields for name, phone number, address, email, etc. Not applicable from flask import request, jsonify, Flask
from flask_sqlalchemy import SQLAlchemy
import uuid

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'
db = SQLAlchemy(app)

# Model
class Contact(db.Model):
 id = db.Column(db.String, primary_key=True)
 name = db.Column(db.String(80))
 phone = db.Column(db.String(20))
 address = db.Column(db.String(120))
 email = db.Column(db.String(120))

 def __init__(self, name, phone, address, email):
 self.id = str(uuid.uuid4())
 self.name = name
 self.phone = phone
 self.address = address
 self.email = email

# Routes
@app.route('/contacts', methods=["GET"])
def get_contacts():
 contacts = Contact.query.all()
 return jsonify([contact.serialize() for contact in contacts])

@app.route('/contacts/<string:id>', methods=["GET"])
def get_contact(id):
 contact = Contact.query.get(id)
 if contact == None:
 return jsonify({'error': 'contact not found'}), 404
 else:
 return jsonify(contact.serialize())

@app.route('/contacts', methods=["POST"])
def create_contact():
 data = request.get_json()
 contact = Contact(**data)
 db.session.add(contact)
 db.session.commit()
 return jsonify(contact.serialize()), 201

@app.route('/contacts/<string:id>', methods=["PUT"])
def update_contact(id):
 contact = Contact.query.get(id)
 if contact == None:
 return jsonify({'error': 'contact not found'}), 404

 data = request.get_json()
 contact.name = data.get('name', contact.name)
 contact.phone = data.get('phone', contact.phone)
 contact.address = data.get('address', contact.address)
 contact.email = data.get('email', contact.email)
 db.session.commit()
 return jsonify(contact.serialize())

@app.route('/contacts/<string:id>', methods=["DELETE"])
def delete_contact(id):
 contact = Contact.query.get(id)
 if contact == None:
 return jsonify({'error': 'contact not found'}), 404

 db.session.delete(contact)
 db.session.commit()
 return jsonify({'message': 'contact deleted'})

# Helper methods
def serialize_contact(contact):
 return {
 'id': contact.id,
 'name': contact.name,
 'phone': contact.phone,
 'address': contact.address,
 'email': contact.email
 }

# Driver
if __name__ == "__main__":
 app.run(debug=True)
Develop a python program which can generate a random array of integers  import random

def get_random_array(max_size):
    arr = []

    for _ in range(random.randint(0, max_size)):
        arr.append(random.randint(0, max_size))
    
    return arr
Create a program to encode a text message using a substitution cipher in Python. message = 'IT IS A SECRET' # define substitution cipher key
key = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'

def encode(message):
    encoded_message = ""

    # iterate through the message
    for char in message:
        # check if character is a letter
        if char.isalpha():
            # convert character to uppercase
            char = char.upper()
            # find the index of the encryption key where the letter is located
            index = key.index(char)
            # replace the character with the next letter in the encryption key
            char = key[(index + 1) % len(key)]
        # add the character to form the encoded message
        encoded_message += char

    return encoded_message

# test
msg = 'It is a secret'
encoded = encode(msg)
print(encoded) # JUJVBTBTFDSFUJFT
Create a Python module that calculates the perimeter of a circle.  import math

def calculate_circle_perimeter(radius):
        return 2 * math.pi * radius
Generate Python code to connect to a SQL database. hostname: test.com,
username: admin,
password: pwd123 import mysql.connector

connection = mysql.connector.connect(  
    host = "test.com",
    user = "admin",
    password = "pwd123",
    database = "testdb"
)
Write a python program to scrape the comments section of a given webpage and store the comments in a list. URL: https://example.com/ import requests
from bs4 import BeautifulSoup

# Make a GET request to fetch the raw HTML content
html_content = requests.get(url).text

# Parse the html content
soup = BeautifulSoup(html_content, "lxml")

# Get all the comments of the HTML document
comments = soup.find_all('div', attrs={'class': 'comments'})

# Store the comments in a list
comment_list = []
for comment in comments:
    comment_list.append(comment.text)
Create a Python program to classify the digits in a dataset Features: [0.25, 0.33, 0.46, 0.83, 0.14]
Labels: [0, 0, 1, 1, 0] import numpy as np 
from sklearn.svm import SVC 

features = np.array([[0.25, 0.33, 0.46, 0.83, 0.14]]) 
labels = np.array([0, 0, 1, 1, 0]) 
clf = SVC() 
clf.fit(features, labels) 

# predicting the class of the following data 
test_data = np.array([[0.36, 0.22, 0.91, 0.81, 0.12]]) 
result = clf.predict(test_data) 
print(result)
Use Logistic Regression in Python to classify emails into spam and non-spam categories. Not applicable #import necessary libraries
import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split

#read dataset containing emails
dataset = pd.read_csv('emails.csv')

#split data into features and labels
X = dataset['message']
y = dataset['label']

#transform text into numerical values
vectorizer = CountVectorizer()
X = vectorizer.fit_transform(X)

#split data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)

#build Logistic Regression model
log_reg = LogisticRegression()
log_reg.fit(X_train, y_train)

#evaluate model
score = log_reg.score(X_test, y_test)
print('Model accuracy: ', score)
Write a Python script to generate 10 random numbers between 0 and 1 and store them in a list. Not applicable import random

random_list = []

for i in range(10):
    random_list.append(random.random())

print(random_list)

Output:
[0.32233077981905054, 0.08449088355109318, 0.26706425230031013, 0.276595698659202, 0.5024115881862439, 0.7038010994199326, 0.4978053082374824, 0.954865052905624, 0.0981980238128365, 0.9497282414948095]
Create a Python script that creates a report for analysis. data = [1,2,3,4,5] def create_report(data):
    """
    Creates a report for analysis.
    Args:
        data: the data to use for analysis.
    Returns:
        report: the generated report.
    """
    report = ""
    report += "Data Analysis Report\n\n"
    report += "Data Points: {}\n\n".format(data)
    report += "Average: {}\n".format(sum(data)/len(data))
    report += "Maximum: {}\n".format(max(data))
    report += "Minimum: {}\n".format(min(data))
    return report

data = [1,2,3,4,5]
report = create_report(data)
print(report)
Create a web scraper in Python to extract all data from a page with the URL: http://example.com http://example.com import requests 
from bs4 import BeautifulSoup

r = requests.get("http://example.com") 
data = r.text 
soup = BeautifulSoup(data, 'html.parser') 

for item in soup.find_all("div"): 
 print(item.text)
Write a Python program to randomly shuffle a list of elements. [1,2,3,4,5,6,7] import random

list_elements = [1,2,3,4,5,6,7]
random.shuffle(list_elements)
print (list_elements)
Create a Python module to abstract basic database operations (CRUD). Not applicable import sqlite3

class Database: 
 def __init__(self, db_name):
  self.connection = sqlite3.connect(db_name)
  self.cursor = self.connection.cursor()

 def create(self, values):
  self.cursor.execute('INSERT INTO records VALUES (?, ?)', values)
  self.connection.commit()

 def read(self):
  self.cursor.execute('SELECT * FROM records')
  return self.cursor.fetchall()

 def update(self, values):
  self.cursor.execute('UPDATE records SET name = ? WHERE id = ?', values)
  self.connection.commit()

 def delete(self, id):
  self.cursor.execute('DELETE FROM records WHERE id = ?', (id,))
  self.connection.commit()
Implement a CRUD (Create Read Update Delete) system in Python.  class CRUD:
    def __init__(self):
        self.records = []
    
    def create(self,data):
        record = data
        self.records.append(record)
    
    def read(self):
        return self.records
 
    def update(self,index,data):
        self.records[index] = data
 
    def delete(self,index):
        self.records.pop(index)
Write a code to fetch the contents of a website using Python  # Import the necessary packages 
import requests 
  
# Make an API call and store the response 
url = 'https://example.com/'
r = requests.get(url) 
  
# Extract the content of the response 
html_content = r.content 
  
# Print the response 
print(html_content)
Generate a random 3 x 3 matrix with integer values in Python.  import random 
  
def random_matrix(rows, cols): 
      
    # creating a 2d array/list  
    matrix = [[random.randint(0, 9) for i in range(cols)] for j in range(rows)] 
  
    return(matrix) 
  
# taking inputs for number of rows and cols 
rows = 3
cols = 3
print(random_matrix(rows, cols))
Translate the following Python code to JavaScript:

def sum(a, b): Not applicable function sum(a, b) {
 return a + b;
}
Create a Python program which prints "Hello, World!"  print("Hello, World!")
Write a Python code snippet to check if a list contains duplicated elements. [3, 6, 8, 9, 10, 3] """
Python code snippet to check if a list contains duplicated elements
"""

def has_duplicates(arr):
    seen_elements = set()
    for elem in arr:
        if elem in seen_elements:
            return True
        seen_elements.add(elem)
    return False

if __name__ == '__main__':
    arr = [3, 6, 8, 9, 10, 3]
    print(has_duplicates(arr)) # True
Create a python program that categorizes a given list of numbers into odd and even numbers. list N = [1, 2, 3, 4, 5, 6] even = []
odd = []

for num in N:
    if num % 2 == 0:
        even.append(num)
    else:
        odd.append(num)
Develop a Python function to find the most common element in the given list. [‘cat’, ‘dog’, ‘cat’, ‘bird’, ‘horse’, ‘dog’] def mostCommonElement(list):
    element_count = {}
    for i in list:
        if i in element_count:
            element_count[i] += 1
        else:
            element_count[i] = 1 
    
    max_element = None
    max_num = 0
    for i in element_count:
        if element_count[i] > max_num:
            max_element = i
            max_num = element_count[i]
    
    return max_element
Use matplotlib in Python to create a pie chart depicting a survey result. topic = "Favorite fruits"
responses = { 'banana': 5, 'apple': 7, 'strawberry': 10, 'mango': 6 } import matplotlib.pyplot as plt
 
labels = list(responses.keys())
values = list(responses.values())
colors = ['#F08080', '#F8A458', '#9BC808', '#000080']
 
plt.pie(values, labels = labels, colors = colors, autopct='%1.2f%%')
plt.title('Favorite Fruits')
plt.axis('equal')
plt.show()
Write a machine learning algorithm in Python for predicting the stock prices of some company  import pandas as pd
from sklearn.linear_model import LinearRegression 
from sklearn.model_selection import train_test_split 

# Read historical stock data
data = pd.read_csv(‘data.csv’)

# Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(data.drop(‘target’, axis=1), 
data[‘target’], test_size=0.2, random_state=2)

# Create and fit the model
model = LinearRegression()
model.fit(X_train, y_train)

# Output the prediction 
y_pred = model.predict(X_test)
Generate a python program to show the most common 3 elements in an array. [1, 4, 2, 6, 7, 5, 1, 10, 4] def most_common(lst):
    lst_set = set(lst)
    max_val = -1
    max_item = None
    most_common_num = []
    for x in lst_set:
        item_count = lst.count(x)
        if max_val < item_count:
            max_val = item_count
            max_item = x
            if len(most_common_num) == 3:
                most_common_num.pop(0)
            most_common_num.append(x)
    return most_common_num
  
a = [1, 4, 2, 6, 7, 5, 1, 10, 4]
most_common_elements = most_common(a)
print("The most common 3 elements are:", most_common_elements)
Write a Python program that takes the two numbers and creates a generator expression to give you the sum of the numbers. 5, 10 sum = sum(x for x in range(5,11))
print(sum)
Design a Python program to print all prime numbers between 0 and a given number. 30 def is_prime(num):
    #Ignore negative numbers and zero
    if num < 2:
        return False
    
    #Return true if num is prime
    for i in range(2, num):
        if num % i == 0:
            return False
    return True

#Print all prime numbers between 0 and a given number
num_input = int(input("Enter a number: "))
for i in range(num_input):
    if is_prime(i):
        print(i, "is a prime number")
Design a class in Python that contains a method to find the intersection of two sorted integer arrays with no duplicates.  class ArrayIntersection():
    def __init__(self, arr1, arr2):
        self.arr1 = arr1
        self.arr2 = arr2
    
    def intersection(self):
        intersection = []
        i, j = 0, 0
        while i < len(self.arr1) and j < len(self.arr2):
            if self.arr1[i] == self.arr2[j]:
                intersection.append(self.arr1[i])
                i += 1
                j += 1
            elif self.arr1[i] < self.arr2[j]:
                i += 1
            else:
                j += 1
        return intersection

if __name__ == '__main__':
    arr1 = [1, 2, 3, 4, 5]
    arr2 = [3, 5, 6]
    intersection = ArrayIntersection(arr1, arr2)
    print(intersection.intersection())
Generate a random string of characters in Python with a length between 8 and 16 characters. Not applicable import string
import random

def generate_random_string(length):
    random_string = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length))
    return random_string

length = random.randrange(8,16)
random_string = generate_random_string(length)
print(random_string)
Create a Python script to scrape a website for its URL, title, and meta description. Not applicable import requests
from bs4 import BeautifulSoup

url = 'https://www.example.com'

#send a request to the website
req = requests.get(url)
soup = BeautifulSoup(req.content, 'html.parser')

#get the url
print(url)

#get the title
title = soup.title.string
print(title)

#get the meta description
meta = soup.find('meta', attrs={'name':'description'})
description = meta['content']
print(description)
Generate a Python object initialization routine for the following object. Object: InventoryItem
Attributes: name, cost, quantity class InventoryItem:
  def __init__(self, name, cost, quantity):
    self.name = name
    self.cost = cost
    self.quantity = quantity
In Python print out the first 10 numbers of the Fibonacci sequence.  a, b = 0, 1
for i in range(10):
  print(a)
  a, b = b, a + b

# Output:
0
1
1
2
3
5
8
13
21
34
Create a Python script that takes a string as input and converts it to morse code  """
Create a Python script that takes a string as input and converts it to morse code
"""

#Define a dictionary with characters as keys and morse code as values
MORSE_CODE_DICT = { 'A':'.-', 'B':'-...', 
   'C':'-.-.', 'D':'-..', 'E':'.', 
   'F':'..-.', 'G':'--.', 'H':'....', 
   'I':'..', 'J':'.---', 'K':'-.-', 
   'L':'.-..', 'M':'--', 'N':'-.', 
   'O':'---', 'P':'.--.', 'Q':'--.-', 
   'R':'.-.', 'S':'...', 'T':'-', 
   'U':'..-', 'V':'...-', 'W':'.--', 
   'X':'-..-', 'Y':'-.--', 'Z':'--..', 
   '1':'.----', '2':'..---', '3':'...--', 
   '4':'....-', '5':'.....', '6':'-....', 
   '7':'--...', '8':'---..', '9':'----.', 
   '0':'-----', ', ':'--..--', '.':'.-.-.-', 
   '?':'..--..', '/':'-..-.', '-':'-....-', 
   '(':'-.--.', ')':'-.--.-'
   }

#Main function that takes a string as input and returns morse code
def text_to_morse(text):
    # Convert all characters to upper case
    text = text.upper()
    #Split the string into individual character
    chars = list(text)
    #Initialize the output to empty string
    output = ''
    #Iterate over each character
    for char in chars:
        #If character is a space, just add a space
        if char == ' ':
            output += ' '
        #For all other characters, get the corresponding morse code from the dictionary and add it to output
        else:
            output += MORSE_CODE_DICT[char] + ' '
    return output

if __name__== '__main__':
    #Take input string from user
    user_input = input('Enter string: ')
    #Convert text to morse code
    output = text_to_morse(user_input)
    #Print the output
    print(output)
Generate a script in Python that takes in a collection of numbers and returns a collection of the same numbers sorted in ascending order. [2, 7, 10, 1] def sortCollection(arr):
    sortedArr = arr.sort()
    return sortedArr
Design a Python program that generates a 10 x 10 multiplication table.  for i in range(1, 11):
  for j in range(1, 11):
    print(f"{i} x {j} = {i * j}")
  print()
Create a Python program to calculate the square root of a user-defined positive number. n = 100 import math

n = 100

#Calculate the square root of a number
square_root = math.sqrt(n)

print(f'Square root of {n} is {square_root}')
Write a Python program to create an editable table showing a list of quote objects. quoteList = [{name: "Albert Einstein", quote: "Imagination is more important than knowledge."},
             {name: "Mahatma Gandhi", quote: "Be the change you wish to see in the world."}, 
             {name: "J.K. Rowling", quote: "The power of imagination makes us infinite."}
            ] import tkinter as tk
from tkinter import ttk

root = tk.Tk()
root.title('Quotes Table')

# create a table of quote objects
tree = ttk.Treeview(root, columns=['name', 'quote'], show = 'headings')

tree.column('name', width=100, anchor='w')
tree.heading('name', text='Name')

tree.column('quote', width=300, anchor='w')
tree.heading('quote', text='Quote')

for quote in quoteList:
 tree.insert('', 'end', values=[quote['name'], quote['quote']])

tree.pack()

root.mainloop()
Write a Python program to join all elements in a list into a string separated by a given separator. ["Hello", "World!"], separator = " " def join_list_with_separator(list, separator):
    joined_string = separator.join(list)
    return joined_string
How would you improve the following Python code to make it more efficient? def calculate_square(numbers):
    square_list = []
    for number in numbers:
        square_list.append(number * number)
	
    return square_list def calculate_square(numbers):
    return [number * number for number in numbers]
Modify the below Python code to print the type of a given input. input_value = 4 input_value = 4

print(type(input_value))
Generate a Python script to convert a text to title case format.  def title_case(string):
    convert_string = string.split(" ")
    title_string = ""
    for each_word in convert_string: 
        first_letter = each_word[0].upper()
        other_letters = each_word[1:].lower()
        title_string += first_letter + other_letters + " "
    return title_string
Develop a Python program to query the Spotify Web API for information about a given artist. The Beatles import requests
import json

# Get access token
url = 'https://accounts.spotify.com/api/token'
data = {'grant_type': 'client_credentials'}
auth = ('YOUR_CLIENT_ID', 'YOUR_CLIENT_SECRET')
response = requests.post(url, data=data, auth=auth)
token = json.loads(response.text)['access_token']

# Search for artist
url = 'https://api.spotify.com/v1/search'
params = { 'q': 'The Beatles', 'type': 'artist' }
header = { 'Authorization': f'Bearer {token}' }
response = requests.get(url, params=params, headers=header)
artist = json.loads(response.text)['artists']['items'][0]

# Get artist information
url = artist['href']
response = requests.get(url, headers=header)
artist_info = json.loads(response.text)

print(artist_info)
Write a Python program to generate a table of all possible combinations for a given set of symbols. ['A', 'B', 'C'] def print_combinations(symbols):
    for idx in range(1 << len(symbols)):
        combination = [symbol for symbol, flag in zip(symbols, bin(idx)[2:]) if flag == "1"]
        print(combination)

symbols = ['A', 'B', 'C']
print_combinations(symbols)
Create a basic calculator in Python  def calculator():
  while True:
    try:
      userInput = input('Input equation (type "quit" to exit): ')

      if userInput == "quit":
        break
        
      result = eval(userInput)
      print(result)

    except:
      print('Invalid equation')

calculator()
Write a Python script to compare two strings and print the longer string.  def get_longer_string(string1, string2):
    if len(string1) > len(string2):
        return string1
    else:
        return string2

longer_string = get_longer_string("Hello", "World")
print(longer_string)
Design a python program to implement the selection sort algorithm.  """
Design a python program to implement the selection sort algorithm
"""

def selection_sort(array):
    for i in range(len(array)-1):
        min_idx = i
        for j in range(i+1, len(array)):
            if array[min_idx] > array[j]:
                min_idx = j
        # swap elements
        array[i], array[min_idx] = array[min_idx], array[i]
    return array

if __name__ == '__main__':
    arr = [10, 4, 6, 7, 2, 1]
    sorted_arr = selection_sort(arr)
    print(sorted_arr)
Design a neural network in Python to predict if a stock price will rise or fall in the next 10 days.  import tensorflow as tf

# Define the model
model = tf.keras.Sequential([
    tf.keras.layers.Dense(128, activation='relu', input_shape=(5,)),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(2, activation='softmax')
])

# Compile the model
model.compile(
    optimizer='adam',
    loss='sparse_categorical_crossentropy',
    metrics=['accuracy']
)
Translate the following pseudo code into a Python program. for i in range(0, n-1):
  j = i + 1
  while j < n:
    swap(list[i],list[j])
    j = j + 1 def swap(list, i, j):
  temp = list[i]
  list[i] = list[j]
  list[j] = temp

def permutations(list, n):
  for i in range(0, n-1):
    j = i + 1
    while j < n:
      swap(list,i,j)
      j = j + 1

list = [10, 11, 12]
n = len(list)
permutations(list, n)
Create an algorithm in Python which sorts an array of numbers using the quicksort algorithm. [42,56,2,67,23,10,14,7] def quickSort(arr):
  if len(arr) <= 1:
    return arr
  pivot = arr[len(arr) // 2]
  left = [x for x in arr if x < pivot]
  middle = [x for x in arr if x == pivot]
  right = [x for x in arr if x > pivot]
  return quickSort(left) + middle + quickSort(right)

unsorted_list = [42, 56, 2, 67, 23, 10, 14, 7]
sorted_list = quickSort(unsorted_list)

print(sorted_list)
Create an HTML page that displays the output of this Python program. for i in range(1,11):
  print "Hello World!", i <html>
<head>
 <title>Python Output</title>
</head>
<body>
  <script>
   for (i = 1; i <= 10; i++) {
    document.write("Hello World!" + i);
   }
  </script>
</body>
</html>
Write a function in Python to compute the sum of the given list of numbers. [1, 24, 47, 98, 22, 45] def sum_list(nums):
 sum = 0
 for n in nums:
  sum += n
 return sum

result = sum_list([1, 24, 47, 98, 22, 45])
print("Sum of the list is", result)
Use the given data structure to create a python class. data = { 
   "name": "John Doe",
   "age": 30,
   "city": "London"
} class Person:
    def __init__(self, data):
        self.name = data['name']
        self.age = data['age']
        self.city = data['city']
Write a Python program to calculate the Gini coefficient of the following data set. data = [14, 17, 20, 21, 32] def gini(data):
    n = len(data)
    data.sort()
 
    gini_coef = 0
    for k in range(n):
        i = n - k - 1
        gini_coef += (2 * i + 1 - n) * data[i]
    gini_coef = gini_coef / (n * sum(data))
 
    return gini_coef

print(gini(data))
# Output: 0.32
Create an automated program to check if an employee works more than 8 hours a day with Python. Dataframe of employee working hours:

Name     | Hours
-------- | -----
John     | 8
Nick     | 10
Samantha | 7 import pandas as pd

# Read the employee working hours dataset
df = pd.read_csv("working_hours_data.csv")

# Define a function to check if an employee is working more than 8 hours
def check_hours(hours):
  if hours > 8:
    return True
  else:
    return False

# Add a new column that stores the results of the check
df['More than 8 hours?'] = df['Hours'].apply(check_hours)

# Print the updated dataframe
print(df)
Construct a code to eliminate all negative numbers from a list using Python. [-1, 9, -3, 4, -8] def remove_negatives(nums):
    new_list = [num for num in nums if num > 0]
    return new_list

my_list = [-1, 9, -3, 4, -8]
filtered_list = remove_negatives(my_list)
print(filtered_list) #[9, 4]
Edit the following Python program to handle user input as an integer num = input("Enter an integer")
print("The number is: " + num) num = int(input("Enter an integer: "))
print("The number is:", num)
Write a Python code snippet to count the number of occurrences of a given letter in a string. string = "Mississippi",
letter = "s" letter = 's'
string = "Mississippi"
count = 0
for char in string:
   if char == letter:
       count += 1
print(count)
Use MongoDB and Python to store customer information with needed fields. Not applicable # Import the needed libraries
from pymongo import MongoClient

# Connect to the MongoDB client
client = MongoClient('localhost:27017')

# Create an instance of a MongoDB database
db = client['customer_database']

# Create the customers collection
customers = db.create_collection('customers')

# Add the needed fields
customers.create_index([("Name", 1)], unique=True)
customers.create_index([("Phone Number", 1)], unique=True)
customers.create_index([("Email", 1)], unique=True)
customers.create_index([("Address", 1)], unique=True)
Given a list of strings, write a Python program to convert each of the strings to lowercase. ["My Heart Will Go On","We Are The Champions","Thriller","Welcome To The Jungle","Eye Of The Tiger","Money For Nothing","Billie Jean","Purple Rain","The Show Must Go On","Bohemian Rhapsody"] new_list = []
for item in ["My Heart Will Go On","We Are The Champions","Thriller","Welcome To The Jungle","Eye Of The Tiger","Money For Nothing","Billie Jean","Purple Rain","The Show Must Go On","Bohemian Rhapsody"]:
    new_list.append(item.lower())

print(new_list)
Generate a program in Python to prompt a user for two numbers and then display their sum.  # Ask for the numbers
number1 = int(input("Enter number 1: ")
number2 = int(input("Enter number 2: ")

# Display their sum
print("The sum of the two numbers is:", number1 + number2)
Create a program in any programming language that takes two input arguments and prints the larger number.  # Python program
def main(num1, num2):
 if num1 > num2:
  print(num1)
 else:
  print(num2)

if __name__ == "__main__":
 num1 = int(input())
 num2 = int(input())
 main(num1, num2)
Can you write a Python script to print the first 20 prime numbers?  # Program to print the first 20 prime numbers

def is_prime(num):

    # Base case
    if num == 1:
        return False
    elif num == 2:
        return True
    elif num % 2 == 0:
        return False

    # Iterate from 3 to the sqrt of number
    i = 3
    while(i * i <= num):
        
        if num % i == 0:
            return False
        i = i + 2

    return True

# Print the first 20 prime numbers
n = 2
count = 0

while count < 20:

    if is_prime(n):
        print(n, end=' ', flush=True)
        count += 1
    n += 1
Compose a Python function to retrieve all documents from a Firebase Realtime Database collection. A Firebase project URL and collection name def get_all_docs(project_url, collection_name):  # project_url and collection name
    # Your Firebase Config
    firebaseConfig = {
        "apiKey": "apiKey",
        "authDomain": "projectId.firebaseapp.com",
        "databaseURL": project_url,
        "storageBucket": "<your-storage-bucket>",
    }

    # Initialize Firebase
    firebase = pyrebase.initialize_app(firebaseConfig)

    # Get a reference to the database
    db = firebase.database()
    
    # Get the documents in the specified collection
    docs = db.child(collection_name).get()

    return docs.val()
Write an optimized function in Python to check if a given number is a prime number.  def is_prime(n):
    if n <= 1:
        return False
    if n == 2:
        return True
    if n > 2 and n % 2 == 0:
        return False

    i = 3
    while i * i <= n:
        if n % i == 0:
            return False
        i += 2

    return True
Create a Python class called Student that contains attributes for a students name and grade.  class Student:
    def __init__(self, name, grade):
        self.name = name
        self.grade = grade
Write a function in Python to filter a list of words based on a given list of allowed words. The function should accept a list of words and a set of allowed words as parameters and should return a new list containing only the words in the given list of words which are present in the set of allowed words. words = ["blue", "green", "red", "purple"]
allowed = {"blue", "green", "yellow"} def filter_words(words, allowed):
  # Create a new list to store the filtered words
  filtered_words = []
  
  # Loop over the words and check if they are in the set of allowed words
  for word in words:
    if word in allowed:
      # Add the word to the filtered list
      filtered_words.append(word)
      
  # Return the filtered list
  return filtered_words
Write a function in Python to evenly distribute the total number of tasks among n workers.  def distribute_tasks(total, num_workers):
    tasks_per_worker = [total // num_workers] * num_workers
    remainder = total - sum(tasks_per_worker)
    
    # Distribute the remainder among the workers.
    for i in range(remainder):
        tasks_per_worker[i] += 1

    return tasks_per_worker
Embed a machine learning model into a web page. Python Machine Learning model file # Imports 
from flask import Flask, render_template, request
from sklearn.externals import joblib

# App
app = Flask(__name__)

# Load the model
model = joblib.load(Python Machine Learning model file)

# Routes

@app.route('/', methods=['GET', 'POST'])
def predict(): 
    # Get the data from the POST request. 
    data = request.form
    # Make prediction using the model. 
    prediction = model.predict(data)
    
    # Render template
    return render_template('index.html', prediction=prediction)

# Run App
if __name__ == '__main__': 
    app.run(debug=True)
Create a web service endpoint in Python to register a user's name by passing it as a parameter.  from flask import Flask, request

app = Flask(__name__)

@app.route('/register', methods=['POST'])
def register_name():
    name = request.args.get('name')
    # Add code to register name
    return "Name registered"


if __name__ == '__main__':
    app.run()
Edit a given Python program to optimize the time complexity. def get_maximum_item(arr):
    maximum_number = float('-infinity')

    for item in arr:
        if item > maximum_number:
            maximum_number = item

    return maximum_number def get_maximum_item(arr):
    if len(arr) == 0:
        return float('-infinity')
    
    maximum_number = arr[0]

    for item in arr[1:]:
        if item > maximum_number:
            maximum_number = item 
            
    return maximum_number
Create a Python function to generate a random password of length n 3 import string
import random

def gen_password(length):
    characters = string.ascii_letters + string.digits + string.punctuation
    password = ""
    for i in range(length):
        password += random.choice(characters)
    return password

result = gen_password(3)
print(result)
Develop a Python script that can automate the task of fetching the titles of 500 web pages. List of 500 URLs import requests
from bs4 import BeautifulSoup

# store URLs in a list
urls = [500 URLs]

titles = []
for url in urls:
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    title = soup.find('title')
    if title:
        titles.append(title.get_text())
    else:
        titles.append('[No title]')

# print results
for i, title in enumerate(titles):
    print(f'{i + 1}: {title}')
Implement a function in Python to remove all instances of an item from a list. [1, 2, 1, 3, 4, 1], 1 def remove_item(list, item):
    while item in list:
        list.remove(item)
    return list

result = remove_item([1, 2, 1, 3, 4, 1], 1)
print(result)
Create a program in Python to check if a given list is a subsequence of another given list [1,2,3,4], [1,2,5,6,7,3,4] def is_subsequence(sub_list, main_list):
    i, j = 0, 0
    n1, n2 = len(sub_list), len(main_list)
    while i < n1 and j < n2:
        if sub_list[i] == main_list[j]:
            i += 1
        j += 1
    return i == n1
Create a web app in Python and Flask that searches for a given string in a given list and returns whether the string exists or not. list = ["apple","banana","pear"]
search_term = "orange" from flask import Flask, request

app = Flask(__name__)

@app.route("/search", methods=["POST"])
def search():
 data = request.get_json()
 list = data.get("list")
 search_term = data.get("search_term")
 
 if search_term in list:
 resp = {
 "exists": True
 }
 else:
 resp = {
 "exists": False
 }
 
 return resp

if __name__ == "__main__":
 app.run()
Generate Python code to generate a histogram from a given data set. data = [1, 3, 5, 3, 2, 6, 8, 1, 2] import matplotlib.pyplot as plt 

def generate_histogram(data):
    plt.hist(data)
    plt.xlabel("Data")
    plt.ylabel("Frequency")
    plt.title("Histogram of Data")
    plt.show()
    
generate_histogram(data)
Create a function in Python which takes three strings as parameters and concats them into one string.  def concat_strings(str1, str2, str3):
  return str1 + str2 + str3
Write a function in Python that takes 2 numbers and returns their GCD. 48, 18 def findGCD(a,b): 
    if (a == 0) 
        return b 
    if (b == 0) 
        return a 
    
    if (a == b): 
        return a 
          
    # If a is greater 
    if (a > b): 
        return findGCD(a-b, b) 
    return findGCD(a, b-a) 

if __name__ == '__main__': 
      a = 48 
      b = 18 
      print("GCD of", a , b, "is:", findGCD(a, b))
Write a Python program to produce a string summary of a given text that is no longer than 140 characters. Sample Text: "This is a sample text. It contains a few sentences for you to summarize." import gensim

# Get the sample text
text = "This is a sample text. It contains a few sentences for you to summarize."

# Create a summarization model
model = gensim.summarization.summarizer.Summarizer()

# Generate the summary
summary = model.summarize(text, word_count=140)

# Print the summary
print(summary)

# Output: This is a sample text. It contains a few sentences to summarize. #140characters. #summarymaking. #savewords.
Create a Python program that processes a text document - it should delete all the lines that contain a certain word. A text document including the following lines:

Line 1 This is a sample text document.

Line 2 It has some words and some sentences.

Line 3 This line should be deleted.

A keyword - "deleted" import re

input_file = open('text.txt', 'r')
output_file = open('output.txt', 'w')

for line in input_file:
    if not re.search(r'deleted', line):
        output_file.write(line)

input_file.close()
output_file.close()
Create a python program to print the Fibonacci sequence for the first ten numbers.  def fibonacciSequence(n):
    a = 0
    b = 1
    sequence = [a, b]
    for _ in range(2, n):
        c = a + b
        a = b
        b = c
        sequence.append(c)
    return sequence

print(fibonacciSequence(10)) # [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
Develop a Python program to generate a dictionary with the keys being the words in a given text, and the values being the corresponding frequencies. "A few words, some more words!" words = "A few words, some more words!"

words_list = words.split()

frequency_dict = {word:words_list.count(word) for word in words_list}

print(frequency_dict)
# Output: {'A': 1, 'few': 1, 'words,': 1, 'some': 1, 'more': 1, 'words!': 1}
Build a Python class to identify if a provided number is prime or composite. 10 class PrimeNumber:
    def __init__(self, num):
        self.num = num

    def is_prime(self):
        for i in range(2, self.num):
            if(self.num % i == 0):
                return False
        return True

num = 10
obj = PrimeNumber(num)

if obj.is_prime():
    print("Number is Prime")
else:
    print("Number is Composite")
Generate a python program that sort students according to their grades in reverse order. [
    {
        "name": "Alice",
        "grade": 85
    },
    {
        "name": "Bob",
        "grade": 95
    },
    {
        "name": "Carol",
        "grade": 73
    }
] students = [
    {
        "name": "Alice",
        "grade": 85
    },
    {
        "name": "Bob",
        "grade": 95
    },
    {
        "name": "Carol",
        "grade": 73
    }
]

def sortGrades(students):
    # sort list of dictionaries by grade in reverse order
    sortedStudents = sorted(students, reverse=True, key = lambda i: int(i['grade'])) 
    return sortedStudents

sortedStudents = sortGrades(students)

for student in sortedStudents:
    print(student)
Implement a function in Python that takes in an array of integers and returns the pair of integers that have the greatest product. array = [-10, -3, 5, 6, -2] def calculate_greatest_product(array):
    greatest_product = float('-inf')
    first_pair = None
    second_pair = None
    
    for i in range(0, len(array)-1):
        for j in range(i+1, len(array)):
            product = array[i] * array[j]
            if product > greatest_product:
                greatest_product = product
                first_pair = array[i]
                second_pair = array[j]
    
    return first_pair, second_pair

greatest_product = calculate_greatest_product(array)
print(greatest_product) # Output: (-10, 6)
Design a Python program that takes an array of integers and returns the first element that is divisible by 7. [41, 42, 43, 44, 45] def findFirstDivisibleBy7(arr):
    for i in range(0, len(arr)):
        if arr[i] % 7 == 0:
            return arr[i]
    return -1

arr = [41, 42, 43, 44, 45]
result = findFirstDivisibleBy7(arr)
print(result) # 42
Develop a function in Python to normalize a string.  import string

def normalize_string(string):
    normalized_string = string.lower().strip().translate(str.maketrans('', '', string.punctuation))
    return normalized_string
Build a Python program to find the maximum element in a list of numbers. [4, 9, 10, 11, 12] def maxNum(numsList):
    maxNum = numsList[0]
    for num in numsList:
        if num > maxNum:
            maxNum = num
    return maxNum

numList = [4, 9, 10, 11, 12]
print("The maximum number in the list is:", maxNum(numList))
Generate a function to perform stochastic gradient descent on the iris dataset in Python.  """
Perform stochastic gradient descent on the iris dataset in Python.
"""

import numpy as np
from sklearn import datasets
from sklearn import metrics
from sklearn.model_selection import train_test_split

# Load the dataset
iris = datasets.load_iris()
X = iris.data
y = iris.target

# Split the dataset into test and train sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Set the hyperparameters
NUM_ITERATIONS = 1000 
LEARNING_RATE = 0.01

# Initialize the weights
w = np.zeros(X_train.shape[1])
b = np.zeros((1,)) 

# Perform the Stochastic Gradient Descent
for n in range(NUM_ITERATIONS):
    # Pick a random point
    x_i, y_i = X_train[np.random.randint(X_train.shape[0])], y_train[np.random.randint(y_train.shape[0])]

    # Compute the Sigmoid
    z = np.matmul(w, x_i) + b 
    sigmoid = 1 / (1 + np.exp(-z))

    # Compute the Gradients
    dw = (sigmoid - y_i) * x_i
    db = (sigmoid - y_i) 

    # Update the weights
    w = w - LEARNING_RATE * dw 
    b = b - LEARNING_RATE * db

# Make predictions
y_pred = np.matmul(X_test, w) + b
y_pred = np.round(1 / (1 + np.exp(-y_pred)))

# Compute the accuracy
accuracy = metrics.accuracy_score(y_test, y_pred) 
print("Accuracy:", accuracy)
Come up with a python program that takes a string and return a reversed version of the string. "<noinput>" def reverse_string(string):
    return string[::-1]
Create a Python program that takes a long string as input and returns a dictionary of the words with the count of each word. "This is a test of a long string with words that will be used to generate a dictionary" def count_words(string):
    words = string.split()
    counts = dict()

    for word in words:
        if word in counts:
            counts[word] += 1
        else:
            counts[word] = 1

    return counts

string = "This is a test of a long string with words that will be used to generate a dictionary"

print(count_words(string))

# Output should be {'This': 1, 'is': 1, 'a': 2, 'test': 1, 'of': 1, 'long': 1, 'string': 1, 'with': 1, 'words': 1, 'that': 1, 'will': 1, 'be': 1, 'used': 1, 'to': 1, 'generate': 1, 'dictionary': 1}
Create a program in Python to process the following data and generate a report of the average salary of the employees. John Doe, 3000
Jane Doe, 4000
Mary Doe, 4500 def processSalaryData(name, salary):
     salaries = []
     nameList = []
     
     salaries.append(salary)
     nameList.append(name)
     
     averageSalary = sum(salaries) / len(salaries)
     
     print("Average salary of the following employees:")
     for name in nameList: 
         print(name)
     
     print("Average Salary: " + str(averageSalary))
Calculate the number of unique prime factors from a given number in Python. 24 def count_unique_prime_factors(num):
    unique_prime_factors = []

    for i in range(2, num + 1):
        if num % i == 0:
            if is_prime(i):
                unique_prime_factors.append(i)

    return len(set(unique_prime_factors))

def is_prime(n):
    if (n <= 1):
        return False
    if (n <= 3):
        return True
    if (n % 2 == 0 or n % 3 == 0):
        return False
    i = 5
    while(i * i <= n):
        if (n % i == 0 or n % (i + 2) == 0):
            return False
        i = i + 6
    return True

count_unique_prime_factors(24)
Generate a list comprehension in Python for the following operation. mulitply each element in (1, 2, 3, 4) by 3 [x * 3 for x in (1, 2, 3, 4)]
Create a Python function to sort an array of numbers based on their size. [5, 1, 2, 6, 4, 3] def sort_array(arr):
    arr.sort()
    return arr
Generate a list of prime numbers from 1 to 1000 using a Python program  def getPrimeList(n): 
    primeList = []
    for num in range (2,n + 1):
        prime = True
        for index in range(2, num):
            if num % index == 0:
                prime = False
        if prime:
            primeList.append(num)
    return primeList

print(getPrimeList(1000))
Suggest a completion for the following python funtion which calculates the sum of two numbers. def sum_of_nums(num1, num2): def sum_of_nums(num1, num2):
    return num1 + num2

example_sum = sum_of_nums(2, 3)
print("Sum of two numbers is:", example_sum)
Given a large JSON string, write a Python program to find a value associated with a given key. JSON String: {"key1": "value1", "key2": {"key3": "value2", "key4": [1,2,3]}, "key5": 5}
Given Key: key4 import json

# given JSON string 
my_json_str = '{"key1": "value1", "key2": {"key3": "value2", "key4": [1,2,3]}, "key5": 5}'

# parse the json string 
parsed_data = json.loads(my_json_str)

# get the value associated with key4
value = parsed_data["key2"]["key4"]

print(value) # Output: [1,2,3]
Give an algorithm and implement it in Python to sort the following array [9, 8, 2, 4, 5, 7, 0] def sortArray(arr):
    n = len(arr)
    for i in range(n):
        min_idx = i
        for j in range(i+1, n):
            if arr[min_idx] > arr[j]:
                min_idx = j
        arr[i], arr[min_idx] = arr[min_idx], arr[i]
    return arr 
   
sortArray([9, 8, 2, 4, 5, 7, 0])
Write a python program to sort words in alphabetical order. words = ["software", "engineering", "programming"] def sort_words(words): 
    words.sort() 
    return words 

words = ["software", "engineering", "programming"]
print(sort_words(words))
Create a Python program to display the upcoming 5 events from a given calendar.  import calendar
from datetime import date, time, datetime

def get_events(cal, start_date, num_events):
    events = []
    for i in range(num_events):
        day_events = cal.itermonthdays2(start_date.year, start_date.month)
        while not day_events[0][1]:
            start_date = start_date.replace(day=(start_date.day + 1))
            day_events = cal.itermonthdays2(start_date.year, start_date.month)

        event_date = start_date.replace(day=day_events[0][0])
        events.append((event_date, day_events[0][1]))
        start_date = start_date.replace(day=(start_date.day + 1))
    return events

cal = calendar.Calendar()
start_date = date.today()
events = get_events(cal, start_date, 5)
# print out the upcoming 5 events
for event in events:
    print(event[0], event[1])
Create a Python algorithm to evaluate a heap.  def eval_heap(arr):
 # Base case
 if len(arr) == 0:
 return -1

 # Stores the index of the max element
 max_idx = 0
 
 # Iterate the array from index 1
 for i in range(1, len(arr)):
 # Update the max_idx if value of arr[i] 
 # is greater than arr[max_idx]    
 if arr[i] > arr[max_idx]:
 max_idx = i

 # Check if heap property is violated
 for j in range(0, max_idx):
 if arr[j] > arr[max_idx]:
 return False

 # Recursively call the eval_heap on remaining elements
 return eval_heap(arr[0:max_idx])
Create a Python function to break a string into its component words.  def break_string(string):
 string = string.lower()
 words = string.split(" ")
 return words
Given an array of strings, build an algorithm in Python to determine the index of the element that contains the smallest number of characters. ["Hello", "World", "Python", "is", "Fun"] def min_length_index(arr):
  min = float('infinity')
  min_i = 0
  for i in range(len(arr)):
    if len(arr[i]) < min:
      min = len(arr[i])
      min_i = i
  return min_i

print(min_length_index(["Hello", "World", "Python", "is", "Fun"])) # 3
Create an open-ended RNN generation program that can generate a novel from a given set of sentences. The program should be built in Python using the Keras or Tensorflow library. Snow was steadily falling, blanketing the ground in white. A gentle wind was blowing in from the nearby mountains.
The sky was a foggy grey, with no sign of the sun. import tensorflow as tf
import numpy as np
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences

# Input sentences
sentences = [
"Snow was steadily falling, blanketing the ground in white.",
"A gentle wind was blowing in from the nearby mountains.",
"The sky was a foggy grey, with no sign of the sun."
]

# Tokenize the sentences 
tokenizer = Tokenizer(filters='!"#$%&()*+.,-/:;<=>?@[\\]^_`{|}~\t\n')
tokenizer.fit_on_texts(sentences)

# Generate token sequences
input_seq = tokenizer.texts_to_sequences(sentences)

# Set the maxlen so the generated token sequences are equal in size
maxlen = max([len(x) for x in input_seq])
input_seq = pad_sequences(input_seq, maxlen=maxlen, padding='post')

# Set the batch size to be as big as the input sequences
batch_size = len(input_seq)

# Create a tensor input
inputs = tf.keras.Input(shape=(maxlen,))

# Create the RNN model
x = tf.keras.layers.Embedding(
input_dim=len(tokenizer.word_index) + 1,
output_dim=128,
)(inputs)
x = tf.keras.layers.LSTM(128)(x)
x = tf.keras.layers.Dense(128, activation='relu')(x)
x = tf.keras.layers.Dense(len(tokenizer.word_index) + 1, activation='softmax')(x)

# Create the Model
model = tf.keras.Model(inputs=inputs, outputs=x)
model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])

# Train the model
model.fit(input_seq, epochs=30, batch_size=batch_size)

# Generate a novel
seed_text = "The"
next_words = 100
  
for _ in range(next_words):
  token_list = tokenizer.texts_to_sequences([seed_text])[0]
  token_list = pad_sequences([token_list], maxlen=maxlen, padding='post')
  predicted = np.argmax(model.predict(token_list), axis=-1)
  output_word = ""
  for word, index in tokenizer.word_index.items():
    if index == predicted:
      output_word = word
      break
  seed_text += " " + output_word
print(seed_text)
Create a Python script to find the first ten perfect squares.  nums = [x*x for x in range(1,11)] 
print("The first 10 perfect squares are: ", nums)
Create a Python script to filter out all numbers divisible by 3 in a list. [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13] # Initialize list
n = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]

# Function
def filter_divisible_by_3(n):
    return [num for num in n if num % 3 != 0]

# Output
print(filter_divisible_by_3(n))
# Output: [1, 2, 4, 5, 7, 8, 10, 11, 13]
Design a logistic regression model in Python to predict the class of a given point. X = [0.3, 0.7, 0.8]
y = [0, 1, 0] from sklearn.linear_model import LogisticRegression

model = LogisticRegression()

model.fit(X, y)

def predict_class(X):
 pred = model.predict([X])
 return pred
Edit an existing Python script to search for and delete duplicated words in a string. my_string = 'this this string contains contains duplicate duplicate words words' my_string = 'this string contains duplicate words' 

my_string = my_string.split() 
res = [] 
for i in my_string: 
    if i not in res: 
        res.append(i) 

my_string = ' '.join(res) 
print(my_string)
Create a Python class named “Employee” with the static method that calculates the number of employees in the company.  class Employee:
    count = 0

    def __init__(self):
        Employee.count += 1

    @staticmethod
    def get_employee_count():
        return Employee.count
Transform this JSON into a Python Dictionary. {"name": "John", "age": 28, "location": "New York"} import json

# Load the JSON data into a Python Dictionary
data = json.loads('{"name": "John", "age": 28, "location": "New York"}')
Generate a Python program to evaluate a mathematical expression? expression = "2 * (3 + 5)" def evaluate(expression):
    return eval(expression)

print(evaluate(expression))

# Output
16
edit the given Python program to delete an elements at a given position def delete(list,N):
    first_part = list[:N] 
    last_part = list[N+1:]
    list = first_part + last_part
    return list def delete(list,N):
    first_part = list[:N] 
    last_part = list[N+1:]
    list = first_part + last_part
    return list
 
list1 = [1,2,3,4,5]
N = int(input('Enter the index of the element to be deleted: '))
list1 = delete(list1,N)
print(list1)
Create a Python script to combine two dictionaries into one. dict1 = {'Name': 'John', 'Age': 30, 'Country': 'Mexico'}
dict2 = {'Animal': 'Pig', 'Color': 'Pink'} def combine_dict(dict1, dict2):
    combined_dict = dict1.copy()
    combined_dict.update(dict2)
    return combined_dict
Design a Python script to insert a given string at the beginning and end of a given array. ["hello", "world"], "***" def insertBeginningAndEnd(arr, str):
    result = []
    for element in arr:
        result.append(str + element + str)

    return result

result = insertBeginningAndEnd(["hello", "world"], "***")
print(result)
Design a Python program to detect loops in a linked list.  def detectLoop(head): 
        slow_p = head 
        fast_p = head
          
        while(slow_p and fast_p and fast_p.next): 
            slow_p = slow_p.next
            fast_p = fast_p.next.next
            if slow_p == fast_p: 
                return True
              
        return False
Create a script in Python to print out the 5 most frequent words in a given input string. input="Python is a great programming language" from collections import Counter

input = "Python is a great programming language"
words = input.split()

counts = Counter(words)

for word, count in counts.most_common(5):
    print(word, count)
Write a Python script to remove all leading and trailing whitespace from all string data in a list of dictionaries. data = [{'name': 'John Doe   ', 'age': 34}, {'name': 'Tim Smith     ', 'age': 14}] def strip_whitespace_from_data(data):
    for i in range(len(data)):
        for key, value in data[i].items():
            if isinstance(value, str):
                data[i][key] = value.strip()
    return data

data = [{'name': 'John Doe   ', 'age': 34}, {'name': 'Tim Smith     ', 'age': 14}]
data = strip_whitespace_from_data(data)
print(data)
Write a python code to extract the phone number and email address from a provided string txt ="John Smith-555-1234, john.s@example.com" import re

txt ="John Smith-555-1234, john.s@example.com"

# Phone Number
phone = re.findall(r'\d{3}-\d{4}', txt)[0]
print("Phone Number =", phone) 

# Email Address
email = re.findall(r'\S+@\S+', txt)[0]
print("Email Address =", email)
Write a python code to get the maximum element from a given list. [7, -10, 5, 112, 0] def get_max_elem(nums):
    max_elem = nums[0]
    for num in nums:
        if num > max_elem:
            max_elem = num
    return max_elem
Design a chatbot in Python to help a customer find the best product for them. The customer requirement is for an energy efficient appliance. products = [
 {'name': ' microwave', 'energy_efficiency': 'high'},
 {'name': 'air conditioner', 'energy_efficiency': 'medium'},
 {'name': 'refrigerator', 'energy_efficiency': 'high'},
 {'name': 'washing machine', 'energy_efficiency': 'low'},
]

def find_product(customer_req):
 best_product = None
 best_efficiency = 0
 for product in products:
  if product['energy_efficiency'] > best_efficiency and customer_req in product['name']:
    best_product = product
    best_efficiency = product['energy_efficiency']
 if best_product:
    print('The best product for you is the ' + best_product['name'])
 else:
    print('Sorry, we do not have any products matching your requirements.')

#Chatbot 

print('Hi, what are you looking for?')
customer_req = input()

find_product(customer_req)
Create a Python program to encode text using the Caesar cipher given an offset n.  def _encode(char, offset):
 char_code = ord(char)
 new_char_code = char_code + offset
 return chr(new_char_code)

def encode_string(string, offset):
 encoded_string = ""
 
 for char in string:
 encoded_string += _encode(char, offset)
 
 return encoded_string
Using numpy, create a Python code which would return an array with the running total of numbers in a given list.  import numpy as np

def runningTotal(arr):
    return np.cumsum(arr)
Write a Python program to divide a list of numbers into two equal lists. [1,2,3,4,5,6,7,8,9,10] list_a = [1,2,3,4,5]
list_b = [6,7,8,9,10]
Write a Python program to count and display the number of positive numbers from a given list of integers. [-2, 3, 4, -7, 6] def countPositive(nums):
    count = 0
    for num in nums:
        if num > 0:
            count += 1
    print("Number of positive numbers:", count)

nums = [-2, 3, 4, -7, 6]
countPositive(nums)

# Output: Number of positive numbers: 3
Create a Python script to parse a JSON response into readable values. Not applicable import json

# Sample json response
json_response = {
  “name": “John Doe",
  "age": 25,
  "hobbies": [“hiking", "swimming", "fishing"]
}

# Parse json
parsed_json = json.loads(json_response)

# Print values
print("Name: {}".format(parsed_json["name"]))
print("Age: {}".format(parsed_json["age"]))
print("Hobbies: {}".format(", ".join(parsed_json["hobbies"])))

# Output:
# Name: John Doe
# Age: 25
# Hobbies: hiking, swimming, fishing
Create a step by step tutorial for using a for loop to print the elements of a list in Python.  This tutorial will teach you how to use a for-loop to print the elements of a given list in Python.

Step 1: Initialize your loop
Start by initializing a loop to loop through the elements of the list. This can be done by using the for-loop keyword in Python followed by the name of the variable you will use to represent the element of the list followed by the keyword in and the name of the list you want to loop through.

For example, if you want to loop through the elements of the list called ‘mylist’, you would write:

for element in mylist:

Step 2: Print the element
Inside the loop, use the print() function to print the current element. The print() function takes as argument the element of the list, which you can refer to with the variable you defined in Step 1.

For example, if the name of the variable you defined in Step 1 was ‘element’, you would write:

print(element)

Step 3: Terminate the loop
After you’ve printed all the elements, you should terminate the loop. To do this, you can use the keyword break. By using break, you can tell the loop to stop looping once it has reached the last element of the list.

For example, you can write:

break

That’s it! This is how you use a for-loop to print the elements of a given list in Python.
Write a Python code to generate a random color code (RGB).  # Generate a random color code (RGB) 
import random

def get_random_color():
    r = random.randint(0, 255)
    g = random.randint(0, 255)
    b = random.randint(0, 255)
    return (r, g, b)

if __name__ == '__main__':
    print(get_random_color())
Design an algorithm in Python to calculate the sum of individual digits in a given number. Number: 12345 def digitSum(n): 
	sum = 0
 
	# loop until we have no digits left 
	while (n != 0): 
		# extract the last digit 
		dig = n % 10
 
		# add the digit to the total sum 
		sum += dig
 
		# remove the last digit from n 
		n = n // 10
 
	return sum
 
# Driver Code 
n = 12345
sum = digitSum(n) 
 
# Print the result 
print(sum)
Design a neural network in Python to predict the output given the input. X1: [1, 0]
X2: [0, 1]
Y: [1, 1] import numpy as np
import tensorflow as tf

# defining the neural network
model = tf.keras.Sequential()
model.add(tf.keras.layers.Dense(2, activation='sigmoid', input_shape=(2, )))
model.add(tf.keras.layers.Dense(2))

# compiling the network
model.compile( optimizer='sgd',
              loss='mean_squared_error',
              metrics=['accuracy']
            )

# training the network
X = np.array([[1,0],[0,1]])
Y = np.array([[1,1]])
model.fit(X, Y, epochs=1000)

# predicting the output
print(model.predict(X))
Design a class in Python to store details of a person Name: John
Age: 34 class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

person = Person('John', 34)
Write a python program to generate the binary representation of a base-10 number  def decimal_to_binary(num): 
    if num > 1:
        decimal_to_binary(num//2) 
    print(num % 2,end = '')
Generate a python program to modify all the characters in a string to lowercase string = "HELLO WORLD" def to_lowercase(string):
    lowercase_string = ""
    for char in string:
        lowercase_string += char.lower()
    return lowercase_string

if __name__ == '__main__':
    string = "HELLO WORLD"
    print(to_lowercase(string))
Create a Python program to generate a random password at least eight characters long.  import string
import random

def gen_password(length):
    all_chars = string.ascii_letters + string.digits + string.punctuation
    generated_password = ''.join(random.choice(all_chars) for _ in range(length))
    return generated_password

if __name__ == '__main__': 
    password = gen_password(8)
    print(password)
Write a Python program to join two given lists with a specific separator. list_1 = ["Hello", "World"]
list_2 = ["Python", "Programming"]
separator = "," list_1 = ["Hello", "World"]
list_2 = ["Python", "Programming"]
separator = ","

result = separator.join(list_1 + list_2)
print(result)
Design an algorithm in Python to check if two given strings are anagrams.  def is_anagram(str1, str2): 
    # Get lengths of both strings 
    n1 = len(str1) 
    n2 = len(str2) 
  
    # If Lengths are different, they can't be anagrams 
    if n1 != n2: 
        return False
  
    # Sort both the strings 
    str1 = sorted(str1) 
    str2 = sorted(str2) 
  
    # Compare sorted strings 
    for i in range(0, n1): 
        if str1[i] != str2[i]: 
            return False
  
    return True
Create a minimum heap in python  class MinHeap:
    def __init__(self):
        self.heap_list = [0]
        self.current_size = 0

    def insert(self, item):
        self.heap_list.append(item)
        self.current_size += 1
        self.fix_new_item()

    def fix_new_item(self):
        idx = self.current_size
        while idx // 2 > 0:
            if self.heap_list[idx] < self.heap_list[idx // 2]:
                temp = self.heap_list[idx // 2]
                self.heap_list[idx // 2] = self.heap_list[idx]
                self.heap_list[idx] = temp
            idx = idx // 2
Create a Python function to count the number of strings that contain the substring "cat". ["cat keeper", "cat lover", "lizard wrangler", "cat wrangler"] def count_substring_cat(string_list):
    count = 0
    for string in string_list:
        if "cat" in string:
            count += 1
    return count

string_list = ["cat keeper", "cat lover", "lizard wrangler", "cat wrangler"]
result = count_substring_cat(string_list)

print(result)
Write a code snippet in Python to extract a substring from a given string.  def extract_substring(string):
  return string[2:5]
Develop an algorithm in Python to identify the majority element in an unsorted array. [3,9,3,3,3,1,3,3] def find_majority_element(array):
    count = 0
    majority_element = None

    for element in array:
        if count == 0:
            majority_element = element

        count += (1 if element == majority_element else -1)

    return majority_element
Create a Python script to apply text mining to a given dataset? A dataset of 500 customer reviews on a product import nltk 
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords

# read the dataset
data = open("dataset.txt", "r").read()

# tokenize the dataset
words = word_tokenize(data)

# remove stopwords
words_filtered = [word for word in words if word not in set(stopwords.words('english'))]

# apply text mining techniques
# e.g. frequency of words, sentiment analysis, topic extraction etc
Create a Python function to tokenize sentences into words. The quick brown fox jumped over the lazy dog. def tokenize(sentence):
 tokens = []
 current_word = ""
 for char in sentence:
 if char.isalpha():
 current_word += char
 else:
 if current_word:
 tokens.append(current_word)
 current_word = ""
 if char.isnumeric():
 tokens.append(char)
 if current_word:
 tokens.append(current_word)
 return tokens

print(tokenize('The quick brown fox jumped over the lazy dog.'))
# ['The', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog']
Create a program in Python that takes a string as an input and removes all the characters whose ASCII value is odd. str = "Hello world!" def remove_odd_ascii_chars(str):
    new_str = ""
    for ch in str:
        if ord(ch) % 2 == 0:
            new_str += ch
    return new_str

str = "Hello world!"
new_str = remove_odd_ascii_chars(str)
print(new_str)
Write a Python program to calculate the sum of the first 10 prime numbers. Not applicable # Calculate the sum of the first 10 prime numbers
 
# Variable to store the sum
sum = 0
 
# Iterate over the first 10 prime numbers and add them to the sum 
for i in range(2,37):
   # Check for Prime number
   if all(i % j != 0 for j in range(2, i)):
      sum += i
 
# Output the result 
print("Sum of the first 10 prime numbers is",sum)
Create a function in Python that takes a string of any length and capitalizes every word. 'hello world' def capitalize_words(string):
 words = string.split(' ')
 capitalized = [word.capitalize() for word in words]
 return ' '.join(capitalized)

# Usage

print(capitalize_words('hello world')) # Hello World
Generate a Python program to classify digits from 0 to 9 in a given dataset. Numbers from 0 to 9 are represented in the dataset as any number from 0 to 100. import tensorflow as tf 

# Dataset contains numbers from 0 to 100
x = tf.placeholder('float', [None, 100]) 

# Output a one-hot encoded vector
y = tf.placeholder('float') 

# Initialize weights and bias
W = tf.Variable(tf.zeros([100, 10]))
b = tf.Variable(tf.zeros([10]))

# Softmax
pred = tf.nn.softmax(tf.matmul(x, W) + b)

# Cross entropy
cost = tf.reduce_mean(-tf.reduce_sum(y * tf.log(pred), reduction_indices = 1)) 

# Gradient descent
optimizer = tf.train.GradientDescentOptimizer(learning_rate = 0.5).minimize(cost) 

# Train
with tf.Session() as sess: 
	sess.run(tf.global_variables_initializer()) 
    
	for epoch in range(10): 
		_, c = sess.run([optimizer, cost], feed_dict = {x: data, 
                                                   			y: labels}) 
		
		# Label the numbers 0 to 9
		correct_prediction = tf.equal(tf.argmax(pred, 1), tf.argmax(y, 1)) 
		
		# Accuracy
		accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32)) 
		
		print("Epoch {}".format(epoch + 1))
		print("Accuracy {}".format(accuracy.eval({x: data, y: labels}))) 
		
		# Get the weights and bias
		weight, bias = sess.run([W, b])
Develop a Python program that counts the number of times each word appears in a given sentence.  sentence = input('Enter a sentence: ') 
words = sentence.split()
word_freq = {} 
  
for word in words: 
    if word in word_freq: 
        word_freq[word] += 1
    else: 
        word_freq[word] = 1
  
for key, value in word_freq.items(): 
    print (key,":", value)
Generate random passwords using Python.  import string 
import random 
  
def generate_pass(size = 8, chars=string.ascii_letters + string.digits + string.punctuation): 
  ''' 
  Generates a random password with given size and given 
  characters 
  '''
  return ''.join(random.choice(chars) for _ in range(size)) 

# Driver code 
print(generate_pass())
Write a Python program to insert an element at the beginning of a given list.  def insert_at_beginning(list, element):
    list.insert(0, element)
    return list
Write a Python script that extracts information from a JSON object. {
   "name": "John Doe",
   "age": 23,
   "address": {
      "street": "123 Main Street",
      "city": "Berkeley",
      "state": "CA"
   }
} import json

data = json.loads('''
{
   "name": "John Doe",
   "age": 23,
   "address": {
      "street": "123 Main Street",
      "city": "Berkeley",
      "state": "CA"
   }
}
''')

name = data['name']
age = data['age']
street = data['address']['street']
city = data['address']['city']
state = data['address']['state']

print(name)
print(age)
print(street)
print(city)
print(state)
Create an application in Python that displays the lyrics to a given song. ‘Happy’ by Pharrell Williams import requests
import re
 
def get_lyrics(song):
 song = song.replace(" ", "+")
 base_url = 'https://www.azlyrics.com/lyrics/'
 page_url = base_url + song + ".html"
 
 response = requests.get(page_url)
 lyrics = re.search(r"<!-- start of lyrics -->(.*)<!-- end of lyrics -->", response.text, flags=re.DOTALL).group(1)
 lyrics = re.sub(r'<[^>]*>', '', lyrics)
 
 return lyrics
 
lyrics = get_lyrics('Happy Pharrell Williams')
print(lyrics)
Write a Python program that stores the months of the year in a dictionary.  months_dict = {
    'January': 1,
    'February': 2,
    'March': 3,
    'April': 4,
    'May': 5,
    'June': 6,
    'July': 7,
    'August': 8,
    'September': 9,
    'October': 10,
    'November': 11,
    'December': 12
}
Write a Python program to generate the powerset of a given set of elements. [1, 2, 3] def powerset(arr):
    result = [[]]
    for ele in arr:
        result.extend([subset + [ele] for subset in result])
    return result

print(powerset([1, 2, 3]))
Create a Python dictionary representing the following data:
   - A points to 4 
   - B points to 6 
   - C points to 10  d = { "A": 4, "B": 6, "C": 10 }
Create a sorting algorithm for an array of integers using Python. [4, 2, 9, 7, 3] def sort(array):
  # base case: if array is empty or has only one element, it is already sorted
  if len(array) <= 1:
    return array

  # divide array into two halves
  midpoint = len(array) // 2
  left = array[:midpoint]
  right = array[midpoint:]

  # recursively sort left and right subarrays
  left = sort(left)
  right = sort(right)

  # merge two sorted halfs
  return merge(left, right)

def merge(left, right):
  result = []
  left_index = 0 # index of the left subarray
  right_index = 0 # index of the right subarray

  # keep going until one of the two subarrays is depleted
  while left_index < len(left) and right_index < len(right):
    if left[left_index] <= right[right_index]:
      # add the smallest element and increment its index
      result.append(left[left_index])
      left_index += 1
    else:
      result.append(right[right_index])
      right_index += 1
  
  # we must have reached the end of the left or right subarray
  # append all remaining elements
  for i in range(left_index, len(left)):
    result.append(left[i])
  for i in range(right_index, len(right)):
    result.append(right[i])
  
  return result

# Test code
array = [4, 2, 9, 7, 3]
sorted_array = sort(array)
print(sorted_array)
Write a Python program which prints the index of the given value in a list. my_list = [2, 4, 6, 8]
value = 4 def find_index(my_list, value):
    for i in range(len(my_list)):
        if my_list[i] == value:
            return i
Design a Python module that prints out a table of squares for input ranging from 0 to 10.  def print_table():
    print(" x | x^2")
    print("-----------")

    for i in range(11):
        answer = i * i
        print(f" {i} | {answer}")

print_table()
Develop a function in Python that takes a list of strings as input and returns a dictionary mapping each string to its length. ["apple", "mango", "banana"] def getStringLengths(words):
    # Create an empty dictionary 
    lengths = {} 

    # For each word in the list of words
    for word in words:
        # find the length of the word
        length = len(word)
        # add the length of the word to the dictionary
        lengths[word] = length 

    # return the dictionary
    return lengths

print(getStringLengths(["apple", "mango", "banana"]))
Write a Python program to compute the integral of a given function using the trapezoidal rule.  def trapezoidal_rule(f, a, b, n):
 # calculate h
 h = (b-a)/n
 # initialize output
 result = 0.0
 # calculate last term
 result += 0.5*f(a) + 0.5*f(b)
 # calculate intermediate terms
 for i in range(1,n):
 result += f(a + i*h)
 # multiply by step size
 result *= h
 return result
Implement a function in Python for finding the maximum element in an array. list = [18, 25, 1, 12, 37] def find_max(list):
    max_element = list[0]
    for element in list:
        if element > max_element:
            max_element = element
    return max_element

max = find_max(list)
print(max)
Generate a Python program to optimize an array of numbers A = [5, 4, 8, 9, 6, 1, -4, 7] def optimize_array(A):
    A.sort()
    return A

print(optimize_array([5, 4, 8, 9, 6, 1, -4, 7]))
Edit the following Python program to remove the redundant lines. def foo(list):        
    list.append(1)         
    list.append(2)
    list.append(3)       
    list.append(1)
    list.append(2)
    return list

list = [1, 2, 3] def foo(list):        
    list.append(1)         
    list.append(2)
    list.append(3)
    return list

list = [1, 2, 3]
Write a Python program to compare two dictionaries to check if they are equal. d1 = {'a':1, 'b':2, 'c':3}
d2 = {'a':1, 'b':2, 'c':4} def compare_dicts(dict1, dict2):
    if dict1 == dict2:
        return True
    return False

result = compare_dicts(d1, d2)
print(result)
Create a function in Python that takes an integer input and prints all combinations of the numbers. 4 def permutations(n):
 for i in range(n+1):
  for j in range(n+1):
   for k in range(n+1):
    for l in range(n+1):
     print(i,j,k,l)

# Calling the function
permutations(4)
Construct a function to calculate the sums of the rows of a 2D array in Python.  def calculateRowSums(arr: List[List[int]]): 
    sums = [] 
    for row in arr: 
        sums.append(sum(row)) 
    return sums 
  
if __name__ == "__main__": 
    arr = [[1, 2, 3], [4, 5, 6]] 
    print(calculateRowSums(arr))
Generate a text-based progress bar using Python.  import sys 

def progress_bar(iteration, total, length=50, fill='█'):
    iteration = iteration + 1
    percent = ("{0:.1f}").format(100 * (iteration / float(total)))
    filledLength = int(length * iteration // total)
    bar = fill * filledLength + '-' * (length - filledLength)
    sys.stdout.write('\r |{}| {}% {}'.format(bar,percent, "Complete"))
    sys.stdout.flush()
Write a Python program to predict stock prices for a given stock. Given stock: "XYZ" import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression

# Read data
data = pd.read_csv("xyz.csv")

# Separate data for prediction
X = np.array(data['Date']).reshape(-1, 1) 
y = np.array(data['Price']).reshape(-1, 1)

# Train the model
model = LinearRegression()
model.fit(X, y)

# Predict the prices
predicted_price = model.predict(np.array(["2020-10-01"]).reshape(-1, 1))
print("Predicted Stock Price for 2020-10-01:", predicted_price[0][0])
Generate a Python program to remove all elements of given list present in other list. list1 = [1, 2, 3, 4, 5, 6], list2 = [2, 4, 6] def remove_from_list(list1, list2):
    for i in list2: 
        list1.remove(i) 
        
    return list1

list1 = [1, 2, 3, 4, 5, 6]
list2 = [2, 4, 6]
       
print(remove_from_list(list1, list2))
Create a script in any language to pass two arrays of different lengths and return a new array that is a combination of the two. array1 = [1, 2, 3, 4], array2 = [5, 6] # Python
def combine_arrays(arr1, arr2):
  combined_arr = [x for x in arr1]
  for i in arr2:
    combined_arr.append(i)
  return combined_arr

# JavaScript 
function combineArrays(arr1, arr2) {
  let combinedArr = [...arr1];
  for (let i of arr2) {
    combinedArr.push(i);
  }
  return combinedArr;
}
Create a text-based game using Python.  # Game setup
name = input("What is your name? ")
print("Welcome, " + name + "!")

# Main loop
while True:

    # Get player input
    command = input("What would you like to do? ")

    # Execute command
    if command == "go north":
        print("You head north.")
    elif command == "go east":
        print("You head east.")
    elif command == "go south":
        print("You head south.")
    elif command == "go west":
        print("You head west.")
    elif command == "quit":
        print("Goodbye, " + name + "!")
        break
    else:
        print("Sorry, I don't understand.")
Create a Python program to detect if the number is prime or not  def is_prime(number): 
    if number <= 1: 
        return False 

    for i in range(2, number): 
        if number % i == 0: 
            return False 

    return True
Modify the following Python code to use a loop instead of recursion. def GCD(x, y):
if y == 0:
 return x
 else:
 return GCD(y, x%y) def GCD(x, y):
    while(y != 0):
        temp = y
        y = x % y
        x = temp
    return x
Create a web scraper in Python that extracts the titles and summary from the reviews on a certain web page. https://www.example.com/reviews import requests
from bs4 import BeautifulSoup

url = “https://www.example.com/reviews”
response = requests.get(url)
soup = BeautifulSoup(response.text, “html.parser”)

titles = []
summaries = []

for review in soup.find_all(‘div’, {‘class’: ‘review’}):
 titles.append(review.find(‘h3’).text)
 summaries.append(review.find(‘p’).text)
Compute the prime factors of a given number using Python. 24 def primeFactors(num):
	for div in range(2, num // 2 + 1):
		while num % div == 0:
			print(div)
			num //= div
	if num > 1:
		print(num)

num = 24
primeFactors(num) // 2, 2, 2, 3
Create a program in Python to check for palindrome numbers. 121 def palindrome(num):
    num = str(num)
    if num == num[::-1]:
        print(num + " is a palindrome number")
    else: 
        print(num + " is not a palindrome number")

palindrome(121)
// Output: 121 is a palindrome number
Construct a linked list of nodes in Python. No Input class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def push(self, new_data): 
        new_node = Node(new_data) 
        new_node.next = self.head 
        self.head = new_node 
  
    def insert_after(self, prev_node, new_data): 
        if prev_node is None: 
            print "The given previous node must be in Linked List."
            return
  
        new_node = Node(new_data) 
        new_node.next = prev_node.next
        prev_node.next = new_node 
  
    def append(self, new_data): 
        new_node = Node(new_data) 
        if self.head is None: 
            self.head = new_node 
            return
  
        last = self.head 
        while (last.next):
            last = last.next
        last.next =  new_node
Create a class in Python which takes a name and assigns it to the user_name property.  class User:
    def __init__(self, name):
        self.user_name = name;
Using basic Python, create a Fibonacci sequence.  def get_fibonacci_sequence(n):
    series = [0,1]
    while len(series) < n:
        series.append(sum(series[-2:]))
    return series

print(get_fibonacci_sequence(10))
Create a Python program to encode a string with a Caesar cipher. plaintext = "Caesar Cipher"
shift = 3 def caesar_cipher(plaintext,shift):
    ciphertext = ""
    for char in plaintext: 
        if char == ' ':
            ciphertext += char
        elif  char.isupper():
            ciphertext += chr((ord(char) + shift - 65) % 26 + 65)
        else:
            ciphertext += chr((ord(char) + shift - 97) % 26 + 97)
    return ciphertext

plaintext = "Caesar Cipher"
shift = 3
ciphertext = caesar_cipher(plaintext,shift)

print("Plain Text : {}".format(plaintext))
print("Cipher Text : {}".format(ciphertext))
Implement a data structure in Python for a binary search tree. Not applicable class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

class BinarySearchTree:
    def __init__(self):
        self.root = None
    
    def insert(self, data):
        newNode = Node(data)

        if self.root is None:
            self.root = newNode
        else:
            current = self.root

            while True:
                if data < current.data:
                    if current.left is None:
                        current.left = newNode
                        return
                    else:
                        current = current.left
                else:
                    if current.right is None:
                        current.right = newNode
                        return
                    else:
                        current = current.right
Generate code to create and populate a database table using Python and SQLite. The table should have following columns: Name (text), Age (integer), Gender (text) import sqlite3

conn = sqlite3.connect(':memory:')

# Create Table
cursor = conn.cursor()
cursor.execute("CREATE TABLE people (name text, age integer, gender text)")

# Insert records
cursor.execute("INSERT INTO people VALUES ('John', 25, 'Male')")
cursor.execute("INSERT INTO people VALUES ('Mary', 30, 'Female')")
cursor.execute("INSERT INTO people VALUES ('Jane', 18, 'Female')")

# Commit the changes
conn.commit()
Edit a Python program to calculate the product of two numbers. def product(num1, num2):
 return 0 def product(num1, num2):
 return num1 * num2
Create a Python program to print the current timestamp  from datetime import datetime

now = datetime.now()
print(now.strftime("%Y-%m-%d %H:%M:%S"))
Create a shell script to automate the installation of Python and the essential Python packages. Not applicable #!/bin/bash

# Install essential Python packages
sudo apt-get -y update
sudo apt-get -y install build-essential checkinstall
sudo apt-get -y install libreadline-gplv2-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev

# Download and install Python
version="3.8.5"
file="Python-$version.tgz"
url="https://www.python.org/ftp/python/$version/$file"

wget $url
sudo tar xzf $file
cd "Python-$version"
sudo ./configure
sudo make install

# Install packages
pip install virtualenv
pip install numpy
pip install pandas
pip install matplotlib
pip install scikit-learn
pip install tensorflow
Create a python program that modifies a given string to remove all spaces. my_string = "This is a string with spaces" def remove_spaces(my_string):
    return my_string.replace(' ', '')

#test
my_string = "This is a string with spaces"
no_spaces_string = remove_spaces(my_string)
print(no_spaces_string) # Output: Thisisastringwithspaces
Create a GUI-based program in Python that allows a user to input the radius of a circle, and display its area.  import tkinter 

# Create the window 
window = tkinter.Tk()

#Set up interface elements
window.title("Radius Calculator")

text_label = tkinter.Label(window, text="Input Radius: ")
text_label.grid(row=0)

area_label = tkinter.Label(window, text="Output Area: ")
area_label.grid(row=1)

radius_entry = tkinter.Entry(window, width=20)
radius_entry.grid(row=0, column=1, padx=20, pady=20)

area_output = tkinter.Text(window, width=20, height=1, borderwidth=3, relief=tkinter.GROOVE)
area_output.grid(row=1, column=1, padx=20, pady=20)

def calculate_area():
    r = float(radius_entry.get())
    area = 3.14 * (r ** 2)
    area_output.delete(1.0, tkinter.END)
    area_output.insert(tkinter.END, str(area))

# Add the "Calculate Area" button 
calc_btn = tkinter.Button(window, text="Calculate Area", command=calculate_area)
calc_btn.grid(row=2, columnspan=2, padx=10, pady=10)

# Run the program 
window.mainloop()
Create a Python program to find the k-nearest neighbors of a given point. (1,2), 3 """
Find the k-nearest neighbors of a given point
"""
import numpy as np 
  
def knn(point, k, points): 
    distances = []
    for p in points:
        distances.append((((point[0] - p[0]) ** 2 + (point[1] - p[1]) **2) ** 0.5, p))
    distances.sort()
    neighbors = []
    for i in range(k): 
        neighbors.append(distances[i][1]) 
    return neighbors
  
if __name__ == "__main__": 
    # Array of points   
    points = np.array([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]) 
    # Provided point 
    point = (1, 2)
    k = 3 
    print(knn(point, k, points))
Write a Python program to get the two smallest numbers in a list of numbers. [1, 3, 7, 4, 5] list = [1, 3, 7, 4, 5]
small1 = min(list)
list.remove(small1)
small2 = min(list)

print(small1, small2) # 1, 3
Develop a model in Python to forecast a time series.  from pylab import *

from statsmodels.tsa.arima_model import ARIMA

# create a dataset
data = [12, 15, 8, 7, 8, 10, 13, 6, 11, 10, 13]

# fit model
model = ARIMA(data, order=(1, 1, 0))
model_fit = model.fit(disp=0)
# print summary of fit model
print(model_fit.summary())
# make prediction
yhat = model_fit.predict(len(data), len(data))
print('Prediction: %f' % yhat)
Create a Python program to print out the elements of a list in reverse order. mylist = [1, 2, 3, 4, 5] # Creating a new reversed list
reversed_list = mylist[::-1]

# Iterating through the list and printing each element
for num in reversed_list:
    print(num)
Write Python code to detect outliers in a given dataset where the values are stored in an array. dataset = [6, 7, 8, 10, 8, 8, 9, 11, 12, 15] import numpy as np

def detect_outliers(data):
    # calculate summary statistics
    data_mean, data_std = np.mean(data), np.std(data)
    
    # define outliers
    cut_off = data_std * 3
    lower, upper = data_mean - cut_off, data_mean + cut_off
    
    # identify outliers
    outliers = [x for x in data if x < lower or x > upper]
    return outliers

dataset = [6, 7, 8, 10, 8, 8, 9, 11, 12, 15]
outliers = detect_outliers(dataset) 
print(outliers)  # [15]
Write a python code to find the longest contiguous increasing subsequence in the following array. [3,6,9,1,2,3,4,5] """
Find the longest contiguous increasing subsequence 
"""

def long_increasing_subsequence(arr): 
    n = len(arr) 
    dp = [1 for x in range(n)] 
   
    for i in range (1 , n): 
        for j in range(0 , i): 
            print (i,j) 
            if (arr[i] > arr[j]) and (dp[i]< dp[j] + 1): 
                dp[i] = dp[j]+1
   
    maximum = 0
    for i in range(n): 
        maximum = max(maximum, dp[i])  

    return maximum 

arr =[3,6,9,1,2,3,4,5] 
longest_subsequence_length = long_increasing_subsequence(arr)
print(longest_subsequence_length) # prints 5
Write a basic Python web server that outputs "Hello, World!" when GET request to '/' path is sent. Not applicable import http.server
 
class HelloHandler(http.server.BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type','text/html')
        self.end_headers()
        self.wfile.write(b"Hello, World!")
 
httpd = http.server.HTTPServer(('localhost', 8000), HelloHandler)
httpd.serve_forever()
Optimize a given Python program for speed, memory usage and readability. def factorial(n):
    f =1
    for i in range(2,n+1):
        f *=i
    return f def factorial(n):
    result = 1
    for i in range(2, n+1):
        result *= i
    return result
Generate a program in Python to classify a series of numbers into even or odd. [4, 7, 9, 11, 12] def classify_numbers(nums):
    for num in nums:
        if (num % 2) == 0:
            print(str(num) + " is even")
        else:
            print(str(num) + " is odd")

nums = [4, 7, 9, 11, 12]
classify_numbers(nums)

# Output:
# 4 is even
# 7 is odd
# 9 is odd
# 11 is odd
# 12 is even
Create a Python script to generate a random password with at least one uppercase, one lowercase and one number.  import string
import random

def generate_password():
    letters = string.ascii_letters + string.digits
    password = list(random.choice(letters) for i in range(8))
    while not any(l.isupper() for l in password) or not any(l.islower() for l in password) or not any(l.isdigit() for l in password):
        password = list(random.choice(letters) for i in range(8))
    return ''.join(password)

password = generate_password() 
print("Random password is:", password)
Develop a function to multiply two matrices of different dimensions in Python. X = [[3, 2], 
     [4, 5]]
Y = [[4, 5, 6], 
     [6, 7, 8]] def multiply_matrix(matrixA, matrixB): 
    if len(matrixA[0]) != len(matrixB): 
        return "Invalid matrices. Cannot multiply." 
    else: 
        result_rows = len(matrixA) 
        result_columns = len(matrixB[0]) 
        result = [[0 for x in range(result_columns)] for y in range(result_rows)] 

        # iterate through rows of matrixA 
        for i in range(len(matrixA)): 
            # iterate through columns of matrixB 
            for j in range(len(matrixB[0])): 
                # iterate through rows of matrixB 
                for k in range(len(matrixB)): 
                    result[i][j] += matrixA[i][k] * matrixB[k][j] 

        return result 

X = [[3, 2], 
     [4, 5]]
Y = [[4, 5, 6], 
     [6, 7, 8]]

result = multiply_matrix(X, Y)  
for r in result: 
    print(r)
Create an algorithm in Python to separate numbers below 10 and above 5. array = [4, 7, 10, 8, 12, 6] below_ten = [] # Separated numbers
above_five = [] # Separated numbers

# Iterate over array
for n in array:
    if n > 5:
        above_five.append(n)
    else:
        below_ten.append(n)

# Print results
print("Below 10: ", below_ten)
print("Above 5: ", above_five)
Generate a solution to the Tower of Hanoi problem by writing a Python program.  def hanoi(n, source, auxiliary, target):
    if n > 0:
        hanoi(n - 1, source, target, auxiliary)
        target.append(source.pop())
        hanoi(n - 1, auxiliary, source, target)
This code is a Python script that reads in a file of the CODA format and performs some basic statistical computations. The script requires an index.txt and chain.txt file, which it will automatically identify for internal use. The script can output mean, standard deviation, and confidence interval (default 95%), and can plot a histogram or trace plot. To use the script, run "coda-script.py CODAindex.txt CODAchain.txt per=xx var=xx bins=xx print hist trace" in the terminal, where xx is the desired percentile, variable, or number of bins.  #! /usr/bin/env python

# Written by Vasaant S/O Krishnan Friday, 19 May 2017
# Run without arguments for instructions.

import sys
usrFile = sys.argv[1:]

if len(usrFile) == 0:
    print ""
    print "# Script to read in file of the CODA format and perform some basic"
    print "# statistical computations. An index.txt and chain.txt file must be"
    print "# provided and the script will automatically identify them for internal"
    print "# use. Options are:"
    print ""
    print "# print = Outputs mean, std and confidence interval (default 95%)."
    print "# var   = Specify your required variable for hist, trace."
    print "# per   = Specify your required confidence interval (requires var=)."
    print "# hist  = Plot histogram (requires var=)."
    print "# bins  = Choose bin size (default bins=100)"
    print "# trace = Trace plot (requires var=)."
    print ""
    print " -->$ coda-script.py CODAindex.txt CODAchain.txt per=xx var=xx bins=xx print hist trace"
    print ""
    exit()

import re
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.mlab as mlab



#=====================================================================
#   Define variables.
#
ints         = '\s+?([+-]?\d+)'              # Integers for regex
#floats       = '\s+?([+-]?\d+(?:\.\d+)?)'    # Floats or int
floats       = '\s+?([+-]?\d+(?:\.\d+)?|\.\d+)([eE][+-]?\d+)?'    # Floats or int or scientific
codaFiles    = []                            # CODAindex and CODAchain files
indexFileFnd = False                         # CODAindex file identified?
chainFileFnd = False                         # CODAchain file identified?
indexCodes   = {}                            # Dictionary containing CODAindex info.
# chainIndx    = []                          # Indexes/Column 1 of CODAchain.txt file
chainData    = []                            #    Data/Column 2 of CODAchain.txt file
percentile   = 95.0                          # Default percentile
bins         = 100                           # Default number of bins for histogram
reqIndxCode  = ''                            # User requested varible for hist, trace
#=====================================================================



#=====================================================================
#   Determine which are the CODAindex and CODAchain files and
#   automatically assign them to their respective variables.
#
for i in usrFile:
    codaSearch = re.search('.txt',i)
    if codaSearch:
        codaFiles.append(i)

if len(codaFiles) == 2:    # Assuming 1 index and 1 chain file
    for j in codaFiles:
        with open(j,'r') as chkTyp:    # Run a quick check on the first line only
            firstLine = chkTyp.readline()
            codaIndex = re.search('^(\S+)' + ints   + ints + '$', firstLine)
            codaChain = re.search('^(\d+)' + floats +        '$', firstLine)
            if codaIndex:
                indexFile = j
                indexFileFnd = True
            if codaChain:
                chainFile = j
                chainFileFnd = True
else:
    print "Insfficient files of CODA*.txt format."
    print "Check your input files."
#=====================================================================



#=====================================================================
#   Determine percentile
#
for i in usrFile:
    userPercentile = re.search('per=([+-]?\d+(?:\.\d+)?)',i)
    if userPercentile:
        percentile = abs(float(userPercentile.group(1)))
        usrFile.append('print')
#=====================================================================



#=====================================================================
#   Determine user requested variable from CODAIndex file
#
for i in usrFile:
    userReqCodaIndx = re.search('var=(\S+)',i)
    if userReqCodaIndx:
        reqIndxCode = str(userReqCodaIndx.group(1))

#   ... same for number of bins:
for i in usrFile:
    userReqBins = re.search('bins=(\d+)',i)
    if userReqBins:
        bins = int(userReqBins.group(1))
        usrFile.append('hist')
#=====================================================================



if indexFileFnd and chainFileFnd:
    #=====================================================================
    #    Harvest index file for the variable list and corresponding
    #    [start,stop] coords:
    #
    for line in open(indexFile, 'r'):
        reqIndex = re.search('^(\S+)' + ints   + ints + '$', line)
        if reqIndex:
            key   =  str(reqIndex.group(1))
            value = [int(reqIndex.group(2)), int(reqIndex.group(3))]
        indexCodes[key] = value

    maxElement = max(indexCodes, key = indexCodes.get)    # The key with the largest value
    chainLen   = max(indexCodes[maxElement])              # The largest value (expected amt. of data)
    #=====================================================================



    #=====================================================================
    #    I thought that initialising the arrays before filling them
    #    would be faster. It is not.
    #
    # chainIndx = np.zeros(chainLen)
    # chainData = np.zeros(chainLen)
    # with open(chainFile, 'r') as harvestVals:
    #     for i in range(chainLen):
    #         currLine = harvestVals.readline()
    #         reqChain = re.search('^(\d+)' + floats + '$', currLine)
    #         if reqChain:
    #             chainIndx[i] =   int(reqChain.group(1))
    #             chainData[i] = float(reqChain.group(2))
    #=====================================================================



    #=====================================================================
    #    Harvest chain file
    #
    for line in open(chainFile, 'r'):
        reqChain = re.search('^(\d+)' + floats + '$', line)
        if reqChain:
            #chainIndx.append(  int(reqChain.group(1)))
            chainData.append(float(reqChain.group(2)))
    #chainIndx = np.array(chainIndx)
    chainData = np.array(chainData)
    #=====================================================================



    #=====================================================================
    #    Basic check on the harvest by comparing harvested vs. expected
    #    no. of data.
    #
    if len(chainData) != chainLen:
        print "    Warning! "
        print "    %10d lines expected  from %s."%(chainLen,indexFile)
        print "    %10d lines harvested from %s."%(len(chainData),chainFile)
    #=====================================================================



    #=====================================================================
    #    Output some basic statistics to the terminal.
    #
    if 'print' in usrFile:
        print "\n%20s %10s %10s"%("mean","std",str(percentile)+"%")
        for i in indexCodes:
            strtIndx = indexCodes[i][0] - 1    # Python starts from 0. CODAindex from 1
            stopIndx = indexCodes[i][1]        # ... but np.array needs this to get to the end

            npPerTile = np.percentile(chainData[strtIndx:stopIndx],[0,percentile])    # Numpy sorts internally
            minPer    = npPerTile[0]
            maxPer    = npPerTile[1]
            print "%8s  %10.4f %10.4f %6d, %6.3f"%(i, chainData[strtIndx:stopIndx].mean(),
                                                      chainData[strtIndx:stopIndx].std(),
                                                     minPer,maxPer
                                                  )
        print ""
    #=====================================================================



    #=====================================================================
    #    Trace plot that gives the variable value as a function of its
    #    rank (or position in the chain)
    #
    if 'trace' in usrFile:
        if reqIndxCode != '':
            for i in indexCodes:
                if reqIndxCode == i:
                    strtIndx = indexCodes[i][0] - 1    # Python starts from 0. CODAindex from 1
                    stopIndx = indexCodes[i][1]        # ... but np.array needs this to get to the end
                    traceRank = range(stopIndx-strtIndx)
                    plt.plot(traceRank,chainData[strtIndx:stopIndx])
                    plt.xlabel('Rank')
                    plt.ylabel('Variable: '+i)
                    plt.show()
        else:
            print "No variable selected by user for trace plot."
    #=====================================================================



    #=====================================================================
    #    Histogram
    #
    if 'hist' in usrFile:
        if reqIndxCode != '':
            for i in indexCodes:
                if reqIndxCode == i:
                    strtIndx = indexCodes[i][0] - 1    # Python starts from 0. CODAindex from 1
                    stopIndx = indexCodes[i][1]        # ... but np.array needs this to get to the end
                    [n, bins, patches] = plt.hist(chainData[strtIndx:stopIndx],
                                                  bins    =  bins,
                                                  normed  =  True,
                                                  histtype= 'step'
                                                  )

                    y = mlab.normpdf(bins, chainData[strtIndx:stopIndx].mean(),
                                           chainData[strtIndx:stopIndx].std()
                                     )

                    npPerTile = np.percentile(chainData[strtIndx:stopIndx],[0,percentile])
                    maxPer    = npPerTile[1]
                    plt.axvline(x=maxPer, color='k', label=str(percentile)+'%',ls=':',lw=0.8)

                    plt.plot(bins,y,'--')
                    plt.ylabel('Variable: '+i)
                    plt.legend(frameon=False)
                    plt.show()
        else:
            print "No variable selected by user for histogram."
    #=====================================================================

Generate a correct python program to classify a given text document into one of three categories. The text document contains articles about sports, politics and business. def classify_document(doc):
 words = doc.split()
 sports_words = 0
 politics_words = 0
 business_words = 0
 for word in words:
 if word in sports_words:
 sports_words += 1
 elif word in politics_words:
 politics_words += 1
 elif word in business_words:
 business_words += 1
 if sports_words > politics_words and sports_words > business_words:
 return "sports"
 elif politics_words > sports_words and politics_words > business_words:
 return "politics"
 else:
 return "business"
Create a k-Nearest Neighbors (k-NN) classifier in Python to predict whether an individual earns more or less than $50,000 per year. [[44, 'M', 17, 0, 0, 'high school', 44000], [38, 'M', 9, 4, 0, 'Bachelor's degree', 55000], [30, 'F', 12, 2, 0, 'Master's degree', 48000]] import numpy as np 

class KNNClassifier:
 def __init__(self, k):
 self.k = k

 def fit(self, X, y):
 self.X_train = X
 self.y_train = y

 def predict(self, X):
 predictions = []
 
 for row in X:
 distances = []
 for train_row in self.X_train:
 distances.append(np.linalg.norm(row - train_row))
 
 sorted_distances = np.argsort(distances) 
 
 top_k_distances = sorted_distances[:self.k]
 
 top_k_labels = [self.y_train[i] for i in top_k_distances] 
 
 label_counts = {}
 for label in top_k_labels:
 label_counts[label] = label_counts.get(label, 0) + 1
 
 sorted_label_counts = sorted(label_counts.items(), key = lambda x: x[1], reverse=True)
 
 predictions.append(sorted_label_counts[0][0])

 return predictions
The given code contains several test functions for various Pipenv functionalities. Each test function tests a specific aspect of Pipenv, such as environment variable expansion, source management, virtual environment creation, and package installation. To run these tests, you can use a testing framework such as pytest and execute the test functions. The tests cover a range of scenarios, such as installing packages from multiple sources, maintaining file line endings, and running Pipenv in a virtual environment. The tests ensure that Pipenv functions correctly and that the expected behavior is maintained across different scenarios.  # -*- coding=utf-8 -*-
from __future__ import absolute_import, print_function
import io
import os
import tarfile

import pytest

from pipenv.patched import pipfile
from pipenv.project import Project
from pipenv.utils import temp_environ
from pipenv.vendor.vistir.path import is_in_path, normalize_path
from pipenv.vendor.delegator import run as delegator_run


@pytest.mark.project
@pytest.mark.sources
@pytest.mark.environ
def test_pipfile_envvar_expansion(PipenvInstance):
    with PipenvInstance(chdir=True) as p:
        with temp_environ():
            with open(p.pipfile_path, 'w') as f:
                f.write("""
[[source]]
url = 'https://${TEST_HOST}/simple'
verify_ssl = false
name = "pypi"

[packages]
pytz = "*"
                """.strip())
            os.environ['TEST_HOST'] = 'localhost:5000'
            project = Project()
            assert project.sources[0]['url'] == 'https://localhost:5000/simple'
            assert 'localhost:5000' not in str(pipfile.load(p.pipfile_path))


@pytest.mark.project
@pytest.mark.sources
@pytest.mark.parametrize('lock_first', [True, False])
def test_get_source(PipenvInstance, lock_first):
    with PipenvInstance(chdir=True) as p:
        with open(p.pipfile_path, 'w') as f:
            contents = """
[[source]]
url = "{0}"
verify_ssl = false
name = "testindex"

[[source]]
url = "https://pypi.org/simple"
verify_ssl = "true"
name = "pypi"

[packages]
pytz = "*"
six = {{version = "*", index = "pypi"}}

[dev-packages]
            """.format(os.environ['PIPENV_TEST_INDEX']).strip()
            f.write(contents)

        if lock_first:
            # force source to be cached
            c = p.pipenv('lock')
            assert c.return_code == 0
        project = Project()
        sources = [
            ['pypi', 'https://pypi.org/simple'],
            ['testindex', os.environ.get('PIPENV_TEST_INDEX')]
        ]
        for src in sources:
            name, url = src
            source = [s for s in project.pipfile_sources if s.get('name') == name]
            assert source
            source = source[0]
            assert source['name'] == name
            assert source['url'] == url
            assert sorted(source.items()) == sorted(project.get_source(name=name).items())
            assert sorted(source.items()) == sorted(project.get_source(url=url).items())
            assert sorted(source.items()) == sorted(project.find_source(name).items())
            assert sorted(source.items()) == sorted(project.find_source(url).items())


@pytest.mark.install
@pytest.mark.project
@pytest.mark.parametrize('newlines', [u'\n', u'\r\n'])
def test_maintain_file_line_endings(PipenvInstance, newlines):
    with PipenvInstance(chdir=True) as p:
        # Initial pipfile + lockfile generation
        c = p.pipenv('install pytz')
        assert c.return_code == 0

        # Rewrite each file with parameterized newlines
        for fn in [p.pipfile_path, p.lockfile_path]:
            with io.open(fn) as f:
                contents = f.read()
                written_newlines = f.newlines

            assert written_newlines == u'\n', '{0!r} != {1!r} for {2}'.format(
                written_newlines, u'\n', fn,
            )
            # message because of  https://github.com/pytest-dev/pytest/issues/3443
            with io.open(fn, 'w', newline=newlines) as f:
                f.write(contents)

        # Run pipenv install to programatically rewrite
        c = p.pipenv('install chardet')
        assert c.return_code == 0

        # Make sure we kept the right newlines
        for fn in [p.pipfile_path, p.lockfile_path]:
            with io.open(fn) as f:
                f.read()    # Consumes the content to detect newlines.
                actual_newlines = f.newlines
            assert actual_newlines == newlines, '{0!r} != {1!r} for {2}'.format(
                actual_newlines, newlines, fn,
            )
            # message because of  https://github.com/pytest-dev/pytest/issues/3443


@pytest.mark.project
@pytest.mark.sources
@pytest.mark.needs_internet
def test_many_indexes(PipenvInstance):
    with PipenvInstance(chdir=True) as p:
        with open(p.pipfile_path, 'w') as f:
            contents = """
[[source]]
url = "{0}"
verify_ssl = false
name = "testindex"

[[source]]
url = "https://pypi.org/simple"
verify_ssl = "true"
name = "pypi"

[[source]]
url = "https://pypi.python.org/simple"
verify_ssl = "true"
name = "legacy"

[packages]
pytz = "*"
six = {{version = "*", index = "pypi"}}

[dev-packages]
            """.format(os.environ['PIPENV_TEST_INDEX']).strip()
            f.write(contents)
        c = p.pipenv('install')
        assert c.return_code == 0


@pytest.mark.install
@pytest.mark.project
def test_include_editable_packages(PipenvInstance, testsroot, pathlib_tmpdir):
    file_name = "tablib-0.12.1.tar.gz"
    package = pathlib_tmpdir.joinpath("tablib-0.12.1")
    source_path = os.path.abspath(os.path.join(testsroot, "pypi", "tablib", file_name))
    with PipenvInstance(chdir=True) as p:
        with tarfile.open(source_path, "r:gz") as tarinfo:
            tarinfo.extractall(path=str(pathlib_tmpdir))
        c = p.pipenv('install -e {0}'.format(package.as_posix()))
        assert c.return_code == 0
        project = Project()
        assert "tablib" in [
            package.project_name
            for package in project.environment.get_installed_packages()
        ]


@pytest.mark.project
@pytest.mark.virtualenv
def test_run_in_virtualenv_with_global_context(PipenvInstance, virtualenv):
    with PipenvInstance(chdir=True, venv_root=virtualenv.as_posix(), ignore_virtualenvs=False, venv_in_project=False) as p:
        c = delegator_run(
            "pipenv run pip freeze", cwd=os.path.abspath(p.path),
            env=os.environ.copy()
        )
        assert c.return_code == 0, (c.out, c.err)
        assert 'Creating a virtualenv' not in c.err, c.err
        project = Project()
        assert project.virtualenv_location == virtualenv.as_posix(), (
            project.virtualenv_location, virtualenv.as_posix()
        )
        c = delegator_run(
            "pipenv run pip install -i {} click".format(p.index_url),
            cwd=os.path.abspath(p.path),
            env=os.environ.copy()
        )
        assert c.return_code == 0, (c.out, c.err)
        assert "Courtesy Notice" in c.err, (c.out, c.err)
        c = delegator_run(
            "pipenv install -i {} six".format(p.index_url),
            cwd=os.path.abspath(p.path), env=os.environ.copy()
        )
        assert c.return_code == 0, (c.out, c.err)
        c = delegator_run(
            'pipenv run python -c "import click;print(click.__file__)"',
            cwd=os.path.abspath(p.path), env=os.environ.copy()
        )
        assert c.return_code == 0, (c.out, c.err)
        assert is_in_path(c.out.strip(), str(virtualenv)), (c.out.strip(), str(virtualenv))
        c = delegator_run(
            "pipenv clean --dry-run", cwd=os.path.abspath(p.path),
            env=os.environ.copy()
        )
        assert c.return_code == 0, (c.out, c.err)
        assert "click" in c.out, c.out


@pytest.mark.project
@pytest.mark.virtualenv
def test_run_in_virtualenv(PipenvInstance):
    with PipenvInstance(chdir=True) as p:
        c = p.pipenv('run pip freeze')
        assert c.return_code == 0
        assert 'Creating a virtualenv' in c.err
        project = Project()
        c = p.pipenv("run pip install click")
        assert c.return_code == 0
        c = p.pipenv("install six")
        assert c.return_code == 0
        c = p.pipenv('run python -c "import click;print(click.__file__)"')
        assert c.return_code == 0
        assert normalize_path(c.out.strip()).startswith(
            normalize_path(str(project.virtualenv_location))
        )
        c = p.pipenv("clean --dry-run")
        assert c.return_code == 0
        assert "click" in c.out

@pytest.mark.project
@pytest.mark.sources
def test_no_sources_in_pipfile(PipenvInstance):
    with PipenvInstance(chdir=True) as p:
        with open(p.pipfile_path, 'w') as f:
            contents = """
[packages]
pytest = "*"
            """.format(os.environ['PIPENV_TEST_INDEX']).strip()
            f.write(contents)
        c = p.pipenv('install --skip-lock')
        assert c.return_code == 0


Design a Python program to print out all prime numbers in a range Number Range between 1 and 10 def is_prime(n):
    for i in range(2, n):
        if n%i == 0:
            return False
    return True

for num in range(1, 10):
    if is_prime(num):
        print(num)
Write a Python program to collect user input and determine how many numbers in the list are greater than the user's number. User input: 9
List: [6, 7, 8, 9, 10] def count_greater_than_user(user_num, num_list):
    count = 0
    for number in num_list:
       if number > user_num:
           count += 1
    return count

user_num = int(input("User input: "))  
num_list = [6, 7, 8, 9, 10]

result = count_greater_than_user(user_num, num_list)
print(f"Number of numbers greater than {user_num}: {result}")
Code a function in Python to search for an element in a linked list.  # Node class 
class Node: 
 
    # Function to initialize the node object 
    def __init__(self, data): 
        self.data = data # Assign data 
        self.next = None # Initialize next as null 

# Linked list class 
class LinkedList: 
 
    # Function to initialize the Linked List object 
    def __init__(self):  
        self.head = None
 
    # This function returns true if a value x is present in linked list 
    def search(self, x):     
        temp = self.head 
        while temp.next != None: 
            if temp.data == x: 
                return True  # data found 
            temp = temp.next
 
        if temp.data == x: 
            return True # data found 
        return False # data not found 

# Code execution
if __name__=='__main__': 
 
    # Start with the empty list 
    llist = LinkedList() 
    llist.head = Node(1) 
    second = Node(2) 
    third = Node(3) 

# Link first node with second 
    llist.head.next = second  
     
# Link second node with third  
    second.next = third 

# Search value 3 
    if llist.search(3): 
        print("Value found")
    else:
        print("Value not found")
Design a program that outputs the average value of a list in Python. [1, 4, 10, 6] # Given a list of numbers
nums = [1, 4, 10, 6]

# Calculate the average
total = 0
for num in nums:
    total += num

average = total/ len(nums)

# Output the average
print(average)
Design a game in Python in which two players take turns guessing a randomly generated number between 0 and 100. The player who guesses the number first wins. Not applicable import random

print('Player 1 Taking Turn')

random_number = random.randint(0, 100)

p1_name = input('Enter your name: ')  
p2_name = input('Enter your name: ')

game_over = False

while not game_over:

  # Player 1 guessing
  p1_guess = int(input('Guess a number between 0 and 100: '))
  if p1_guess == random_number:
    print('{} wins!'.format(p1_name))
    game_over = True
  elif p1_guess > random_number:
    print('{} your guess is too high'.format(p1_name))

  # Player 2 guessing
  print('\n' + p2_name + ' Taking Turn')
  p2_guess = int(input('Guess a number between 0 and 100: '))
  if p2_guess == random_number:
    print('{} wins!'.format(p2_name))
    game_over = True
  elif p2_guess > random_number:
    print('{} your guess is too high'.format(p2_name))
    
print('Game over!')
Generate python code to implement a linear search algorithm to find a particular value in an array. array = [5, 10, 15, 20] def linear_search(array, value):
    length = len(array)
    
    for i in range(length):
        if array[i] == value:
            return i
            
    return -1

print(linear_search(array, 15))
Create a program in Python to sum the multiples of 3 or 5 between 1 and 1000  total = 0

for i in range(1,1000):
    if i % 3 == 0 or i % 5 == 0:
        total += i

print(total)
Build a web application in python to display the current temperature in Fahrenheit.  from flask import Flask, request 
from requests import get 

app = Flask(__name__) 

@app.route('/', methods=['GET']) 
def home():
    api_key = # API key for open weather API
    url = f'http://api.openweathermap.org/data/2.5/weather?q=current&units=imperial&APPID={api_key}'
    output = request.get(url).json()
    temp = output['main']['temp']
    return f"The current temperature in Fahrenheit is {temp} F"
if __name__ == '__main__': 
    app.run(debug=True, host='0.0.0.0', port=8989)
Generate a Python function that takes in a list of numbers, and creates a new list with each number doubled. [1, 2, 3, 4] def double_numbers(numbers):
    # use list comprehesion to double each number
    doubled_numbers = [num * 2 for num in numbers]
    return doubled_numbers

numbers = [1, 2, 3, 4]
doubled_numbers = double_numbers(numbers)
print(doubled_numbers) # [2, 4, 6, 8]
Write a code to detect any pattern in a given string in Python. my_string = "aabccba" def detect_pattern(my_string):
    for i in range(len(my_string)):
        if my_string.count(my_string[i]) > 1:
            return True
    return False

if __name__ == '__main__':
    print(detect_pattern(my_string))
Create a function in Python that takes in an array of integers, and returns a new array with all the elements in the original array multiplied by two. [1, 2, 3, 4] def double_array(array):
    return [element*2 for element in array]

double_array([1, 2, 3, 4]) # [2, 4, 6, 8]
Write an algorithm in Python that identifies and removes duplicates from a given array. Array = [2, 3, 4, 3, 2] def removeDuplicates(array):
 result = []

 for number in array:
 if number not in result:
 result.append(number)

 return result

array = [2, 3, 4, 3, 2]
print(removeDuplicates(array))
Create a Python program using PyTorch to categorize the sentiment of a sentence into either positive, negative, or neutral. Sentence: The movie was critically acclaimed. import torch
import torch.nn as nn
import torch.optim as optim

class SentimentClassifier(nn.Module):
 def __init__(self):
  super().__init__()
  self.embedding = nn.EmbeddingBag(1000, 16, sparse=True)
  self.fc = nn.Linear(16, 3)
 
 def forward(self, x):
  x = self.embedding(x)
  x = self.fc(x)
  return x

# instantiate the model
model = SentimentClassifier()

# define the loss and optimizer
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

# train the model
model.train()
for i in range(num_epochs):
 # iterate over the data
 for x,y in train_iter:
  # predict
  y_pred = model(x)
 
  # calculate the loss
  loss = criterion(y_pred, y)
 
  # backpropagate the loss
  loss.backward()
 
  # update weights
  optimizer.step()
 
  # zero grad
  optimizer.zero_grad()

# Test the model
model.eval()
with torch.no_grad():
 for x,y in test_iter:
  y_pred = model(x)
 
  # calculate the accuracy
  correct = (y == y_pred.argmax(dim=1)).float().sum()
  acc = correct/len(y)
Design a python function to filter out the fields from a JSON data. {
  "name": "John",
  "age": 25,
  "position": "Developer"
} def filter_json_data(input, fields):
    output = {}
    for field in fields:
        if field in input:
            output[field] = input[field]
    return output
Create a Python web application using the Flask framework that returns the sum of two numbers.  from flask import Flask, request


app = Flask(__name__)

@app.route('/get_sum', methods=['GET'])
def get_sum():
num1 = request.args.get('num1', type=int)
num2 = request.args.get('num2', type=int)
sum = num1 + num2
return str(sum)

if __name__ == "__main__":
 app.run(debug=True)
Edit the following Python code to print out "Hello World" 5 times. print("Hello World") for i in range(5):
    print("Hello World")
Write a function in Python to remove all numbers from an array. [3, 1, 4, 5, 6, 2] def remove_numbers(arr):
  new_arr = []
  for el in arr:
    if not isinstance(el, int):
      new_arr.append(el)
  return new_arr

a = [3, 1, 4, 5, 6, 2]

print(remove_numbers(a))
Write a Python program for supervised learning that can predict the price of a house given some features of the house. Not applicable import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

# Read the dataset
df = pd.read_csv('data.csv')

# Split the dataset into features and labels
X = df.drop('price',axis=1)
y = df['price']

# Split the dataset into train and test set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Build the model
model = LinearRegression()
model.fit(X_train, y_train)

# Evaluate the model
test_score = model.score(X_test, y_test)
print('Test Score:', test_score)

# Make predictions
y_pred = model.predict(X_test)

# Print out some example predictions
print('\nSample Predictions')
for i in range(10):
    print(f'Predicted Price: {y_pred[i]:.2f}, Actual Price: {y_test.values[i]}')
Write a Robotic Process Automation (RPA) script in Python to read data from an Excel spreadsheet and insert into a database table. A database table with columns item_id, item_name, price
An Excel spreadsheet with the same columns import pandas as pd
import pyodbc

# Connect to database
server = '<yourserver>'
database = '<yourdatabase>'
username = '<yourusername>'
password = '<yourpassword>'
conn = pyodbc.connect('DRIVER={ODBC Driver 17 for SQL Server};SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password)
cursor = conn.cursor()

# Read Excel file
df = pd.read_excel('<yourfilename>')

# Insert values into database
for index, row in df.iterrows():
 item_id = row['item_id']
 item_name = row['item_name']
 price = row['price']
 cursor.execute(f"INSERT INTO table (item_id, item_name, price) VALUES ({item_id}, '{item_name}', {price})")
conn.commit()
Write code in Python to filter the elements in a list. The function should take a list as an input and return the filtered list. list = [14, 15, 16, 16, 19, 20, 20, 21, 19] def filter_list(my_list): 
    # creating a new list to store the values 
    new_list = [] 
  
    # looping through all the list elements 
    for i in my_list: 
        # checking condition 
        if i not in new_list: 
            new_list.append(i) 
              
    # returning new_list which contains unique values 
    return new_list 
  
list = [14, 15, 16, 16, 19, 20, 20, 21, 19]
  
print(filter_list(list)) 

# output [14, 15, 16, 19, 20, 21]
Implement a stack in Python using lists. Not applicable class Stack:
 def __init__(self):
 self.items = []
 
 def isEmpty(self):
 return self.items == []
 
 def push(self, item):
 self.items.append(item)
 
 def pop(self):
 return self.items.pop()
 
 def peek(self):
 return self.items[len(self.items)-1]
 
 def size(self):
 return len(self.items)

stack = Stack()
stack.push(1)
stack.push(2)
print(stack.peek())
print(stack.pop())
print(stack.size())
Create a function in Python to identify and extract financial data from a string. Sample text: "USD 2.5 billion was invested in the company." import re

def extract_financial_data(text):
  rex = r'(?P<amount>\d+(?:\.\d+)?)(?P<currency>\w{3})'
  match = re.search(rex, text)
  amount = float(match.group('amount'))
  currency = match.group('currency')
  return amount, currency

amount, currency = extract_financial_data("USD 2.5 billion was invested in the company.")
print(amount, currency) # Output: 2.5 USD
Design a python program to extract the most frequently occuring words from the text. This is a sample text containing some words for the purpose of demostrating the task. def extract_frequent_words(text):
    words = text.split()
    freq_words = {}
    for word in words:
        if word not in freq_words:
            freq_words[word] = 1
        else:
            freq_words[word] += 1
            
    sorted_words = sorted(freq_words.items(), key=lambda x: x[1], reverse=True)

    return sorted_words[0][0]
Create a Python class called "Person" with fields for "name" and "age". The class should also include an initialization function and a method to say hello. Not applicable class Person:
 def __init__(self, name, age):
 self.name = name
 self.age = age

 def say_hello(self):
 print('Hello, my name is {} and I am {} years old'.format(self.name, self.age))
Write a Python program to generate a report of average speeds for all roads a given city. This report should include the name, direction, and average speed of each road in the city. An example of a dataset of roads in a city with relevant information like road name, direction, and speed limit import csv

road_data = [] 

# read the roads data into the list 
with open('roads.csv', 'r') as f: 
 reader = csv.reader(f) 
 next(reader) 
  
 for row in reader: 
  data = {'name': row[0], 
          'direction': row[1], 
          'speed_limit': int(row[2])} 
  road_data.append(data) 
  
# compute the average speed 
average_speeds = {} 
for road in road_data: 
 name = road['name'] 
 direction = road['direction'] 
 if name not in average_speeds: 
  average_speeds[name] = {} 
 if direction not in average_speeds[name]: 
  average_speeds[name][direction] = 0 
 average_speeds[name][direction] += road['speed_limit'] 

# report the average speeds 
print('Report of average speeds for all roads:') 
for name, directions in average_speeds.items(): 
 for direction, speed in directions.items(): 
  print(f'{name} ({direction}): {speed / len(directions)}')
Create a search engine using Python  #import the necessary packages
from bs4 import BeautifulSoup
from requests import get

#function to scrape data
def scrape_data(url): 
    response = get(url)
    soup = BeautifulSoup(response.text, "html.parser") 
    return soup

#function to search data
def search_data(search_query): 
    #specify the base URL
    base_url = "https://www.example.com/search?q="
    search_query = search_query.replace(" ", "+") 

    #generate the complete URL
    complete_url = base_url + search_query
    #extract the data
    soup = scrape_data(complete_url) 
    results = soup.find_all('div', class_='result') 

    #display the results
    print("Showing Results For: " + search_query) 
    print("=================================")

    #search through the results 
    for result in results:
        print(result.text)

#sample search query
search_query = "machine learning"

search_data(search_query)
Write a Python program for fetching the current weather data from a public API and displaying it in the terminal. Assume you have the API key and the API URL available. API URL: https://api.openweathermap.org/data/2.5/weather 

API Key: <my-key> import requests

API_URL = 'https://api.openweathermap.org/data/2.5/weather'
API_KEY = '<my-key>'

response = requests.get(API_URL, params={'APPID': API_KEY, 'q': 'New York'})

if response.status_code == 200:
 data = response.json()
 temperature = data['main']['temp']
 humidity = data['main']['humidity']
 print(f'The temperature is {temperature:.2f}°C and the humidity is {humidity}%.')
else:
 print('Error while fetching the data.')
Write a for-loop in Python to find the average of 5 numbers. 5 numbers:  10, 15, 20, 25, 30 total = 0
for num in [10, 15, 20, 25, 30]:
    total += num

average = total / 5
print(average)
Write a Python script to check how many words with length 5 are in the given string The quick brown fox jumped over the lazy dog. def count_words_length(string):
    count = 0
    words = string.split(" ")
    for word in words:
        if len(word) == 5:
            count += 1
    return count

string = "The quick brown fox jumped over the lazy dog."
print(count_words_length(string))
Write a python program to extract all the words from a given sentence and store them into a dictionary. Calculate the frequency of each word, and store them in the same dictionary keyed with the words. I love to code words_dict = {}
sentence = "I love to code"
words = sentence.split()

for word in words:
 if word in words_dict:
 words_dict[word] += 1
 else:
 words_dict[word] = 1

print(words_dict)

# Output:
# {'I': 1, 'love': 1, 'to': 1, 'code': 1}
Write a Python program to go through a list of employee names and print the highest-paid one. John, 45000
Jane, 50000
Michael, 60000
Josh, 40000 employees = [
    ['John', 45000],
    ['Jane', 50000],
    ['Michael', 60000],
    ['Josh', 40000]
]

highest_salary = 0
highest_name = ""

for name, salary in employees:
    if salary > highest_salary:
        highest_salary = salary
        highest_name = name

print("The highest-paid employee is " + highest_name + " with a salary of " + str(highest_salary))
Create a program in Python that takes a positive integer of arbitrary size and checks if it is a prime number.  def is_prime(num):
    if num > 1:
        for i in range(2, num):
            if (num % i) == 0:
                return False
    else:
        return False
    return True
This code is a Python script that contains a set of unit tests for the virtinst CapabilitiesParser module. To run the tests, execute the script. The tests include checking the CPU architecture, operating system type, domains, and features of different guests, as well as testing various CPU maps and capabilities. The script also includes helper functions for building host feature dictionaries and comparing guest capabilities.  # Copyright (C) 2013, 2014 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA 02110-1301 USA.

import os
import unittest

from tests import utils
from virtinst import CapabilitiesParser as capabilities


def build_host_feature_dict(feature_list):
    fdict = {}
    for f in feature_list:
        fdict[f] = capabilities.FEATURE_ON

    return fdict


class TestCapabilities(unittest.TestCase):

    def _compareGuest(self, (arch, os_type, domains, features), guest):
        self.assertEqual(arch,            guest.arch)
        self.assertEqual(os_type,         guest.os_type)
        self.assertEqual(len(domains), len(guest.domains))
        for n in range(len(domains)):
            self.assertEqual(domains[n][0], guest.domains[n].hypervisor_type)
            self.assertEqual(domains[n][1], guest.domains[n].emulator)
            self.assertEqual(domains[n][2], guest.domains[n].machines)

        for n in features:
            self.assertEqual(features[n],        guest.features[n])

    def _buildCaps(self, filename):
        path = os.path.join("tests/capabilities-xml", filename)
        xml = file(path).read()

        return capabilities.Capabilities(xml)

    def _testCapabilities(self, path, (host_arch, host_features), guests,
                          secmodel=None):
        caps = self._buildCaps(path)

        if host_arch:
            self.assertEqual(host_arch, caps.host.cpu.arch)
            for n in host_features:
                self.assertEqual(host_features[n], caps.host.cpu.features[n])

        if secmodel:
            self.assertEqual(secmodel[0], caps.host.secmodel.model)
            self.assertEqual(secmodel[1], caps.host.secmodel.doi)
            if secmodel[2]:
                for k, v in secmodel[2].items():
                    self.assertEqual(v, caps.host.secmodel.baselabels[k])

        for idx in range(len(guests)):
            self._compareGuest(guests[idx], caps.guests[idx])

    def testCapabilities1(self):
        host = ('x86_64', {'vmx': capabilities.FEATURE_ON})

        guests = [
            ('x86_64', 'xen',
              [['xen', None, []]], {}),
            ('i686',   'xen',
              [['xen', None, []]], {'pae': capabilities.FEATURE_ON}),
            ('i686',   'hvm',
              [['xen', "/usr/lib64/xen/bin/qemu-dm", ['pc', 'isapc']]], {'pae': capabilities.FEATURE_ON | capabilities.FEATURE_OFF}),
            ('x86_64', 'hvm',
              [['xen', "/usr/lib64/xen/bin/qemu-dm", ['pc', 'isapc']]], {})
       ]

        self._testCapabilities("capabilities-xen.xml", host, guests)

    def testCapabilities2(self):
        host = ('x86_64', {})
        secmodel = ('selinux', '0', None)

        guests = [
            ('x86_64', 'hvm',
              [['qemu', '/usr/bin/qemu-system-x86_64', ['pc', 'isapc']]], {}),
            ('i686',   'hvm',
              [['qemu', '/usr/bin/qemu', ['pc', 'isapc']]], {}),
            ('mips',   'hvm',
              [['qemu', '/usr/bin/qemu-system-mips', ['mips']]], {}),
            ('mipsel', 'hvm',
              [['qemu', '/usr/bin/qemu-system-mipsel', ['mips']]], {}),
            ('sparc',  'hvm',
              [['qemu', '/usr/bin/qemu-system-sparc', ['sun4m']]], {}),
            ('ppc',    'hvm',
              [['qemu', '/usr/bin/qemu-system-ppc',
               ['g3bw', 'mac99', 'prep']]], {}),
       ]

        self._testCapabilities("capabilities-qemu.xml", host, guests, secmodel)

    def testCapabilities3(self):
        host = ('i686', {})

        guests = [
            ('i686',   'hvm',
              [['qemu', '/usr/bin/qemu', ['pc', 'isapc']],
               ['kvm', '/usr/bin/qemu-kvm', ['pc', 'isapc']]], {}),
            ('x86_64', 'hvm',
              [['qemu', '/usr/bin/qemu-system-x86_64', ['pc', 'isapc']]], {}),
            ('mips',   'hvm',
              [['qemu', '/usr/bin/qemu-system-mips', ['mips']]], {}),
            ('mipsel', 'hvm',
              [['qemu', '/usr/bin/qemu-system-mipsel', ['mips']]], {}),
            ('sparc',  'hvm',
              [['qemu', '/usr/bin/qemu-system-sparc', ['sun4m']]], {}),
            ('ppc',    'hvm',
              [['qemu', '/usr/bin/qemu-system-ppc',
               ['g3bw', 'mac99', 'prep']]], {}),
       ]

        secmodel = ('dac', '0', {"kvm" : "+0:+0", "qemu" : "+0:+0"})

        self._testCapabilities("capabilities-kvm.xml", host, guests, secmodel)

    def testCapabilities4(self):
        host = ('i686',
                 {'pae': capabilities.FEATURE_ON | capabilities.FEATURE_OFF})

        guests = [
            ('i686', 'linux',
              [['test', None, []]],
              {'pae': capabilities.FEATURE_ON | capabilities.FEATURE_OFF}),
       ]

        self._testCapabilities("capabilities-test.xml", host, guests)

    def testCapsLXC(self):
        guests = [
            ("x86_64", "exe", [["lxc", "/usr/libexec/libvirt_lxc", []]], {}),
            ("i686", "exe", [["lxc", "/usr/libexec/libvirt_lxc", []]], {}),
       ]

        self._testCapabilities("capabilities-lxc.xml",
                               (None, None), guests)

    def testCapsTopology(self):
        filename = "capabilities-test.xml"
        caps = self._buildCaps(filename)

        self.assertTrue(bool(caps.host.topology))
        self.assertTrue(len(caps.host.topology.cells) == 2)
        self.assertTrue(len(caps.host.topology.cells[0].cpus) == 8)
        self.assertTrue(len(caps.host.topology.cells[0].cpus) == 8)

    def testCapsCPUFeaturesOldSyntax(self):
        filename = "rhel5.4-xen-caps-virt-enabled.xml"
        host_feature_list = ["vmx"]
        feature_dict = build_host_feature_dict(host_feature_list)

        caps = self._buildCaps(filename)
        for f in feature_dict.keys():
            self.assertEquals(caps.host.cpu.features[f], feature_dict[f])

    def testCapsCPUFeaturesOldSyntaxSVM(self):
        filename = "rhel5.4-xen-caps.xml"
        host_feature_list = ["svm"]
        feature_dict = build_host_feature_dict(host_feature_list)

        caps = self._buildCaps(filename)
        for f in feature_dict.keys():
            self.assertEquals(caps.host.cpu.features[f], feature_dict[f])

    def testCapsCPUFeaturesNewSyntax(self):
        filename = "libvirt-0.7.6-qemu-caps.xml"
        host_feature_list = ['lahf_lm', 'xtpr', 'cx16', 'tm2', 'est', 'vmx',
                             'ds_cpl', 'pbe', 'tm', 'ht', 'ss', 'acpi', 'ds']
        feature_dict = build_host_feature_dict(host_feature_list)

        caps = self._buildCaps(filename)
        for f in feature_dict.keys():
            self.assertEquals(caps.host.cpu.features[f], feature_dict[f])

        self.assertEquals(caps.host.cpu.model, "core2duo")
        self.assertEquals(caps.host.cpu.vendor, "Intel")
        self.assertEquals(caps.host.cpu.threads, "3")
        self.assertEquals(caps.host.cpu.cores, "5")
        self.assertEquals(caps.host.cpu.sockets, "7")

    def testCapsUtilFuncs(self):
        new_caps = self._buildCaps("libvirt-0.7.6-qemu-caps.xml")
        new_caps_no_kvm = self._buildCaps(
                                    "libvirt-0.7.6-qemu-no-kvmcaps.xml")
        empty_caps = self._buildCaps("empty-caps.xml")
        rhel_xen_enable_hvm_caps = self._buildCaps(
                                    "rhel5.4-xen-caps-virt-enabled.xml")
        rhel_xen_caps = self._buildCaps("rhel5.4-xen-caps.xml")
        rhel_kvm_caps = self._buildCaps("rhel5.4-kvm-caps.xml")

        def test_utils(caps, no_guests, is_hvm, is_kvm, is_bios_disable,
                       is_xenner):
            self.assertEquals(caps.no_install_options(), no_guests)
            self.assertEquals(caps.hw_virt_supported(), is_hvm)
            self.assertEquals(caps.is_kvm_available(), is_kvm)
            self.assertEquals(caps.is_bios_virt_disabled(), is_bios_disable)
            self.assertEquals(caps.is_xenner_available(), is_xenner)

        test_utils(new_caps, False, True, True, False, True)
        test_utils(empty_caps, True, False, False, False, False)
        test_utils(rhel_xen_enable_hvm_caps, False, True, False, False, False)
        test_utils(rhel_xen_caps, False, True, False, True, False)
        test_utils(rhel_kvm_caps, False, True, True, False, False)
        test_utils(new_caps_no_kvm, False, True, False, False, False)

    def testCPUMap(self):
        caps = self._buildCaps("libvirt-0.7.6-qemu-caps.xml")
        cpu_64 = caps.get_cpu_values(None, "x86_64")
        cpu_32 = caps.get_cpu_values(None, "i486")
        cpu_random = caps.get_cpu_values(None, "mips")

        def test_cpu_map(cpumap, cpus):
            cpunames = sorted([c.model for c in cpumap], key=str.lower)

            for c in cpus:
                self.assertTrue(c in cpunames)

        self.assertEquals(cpu_64, cpu_32)

        x86_cpunames = [
            '486', 'athlon', 'Conroe', 'core2duo', 'coreduo', 'n270',
            'Nehalem', 'Opteron_G1', 'Opteron_G2', 'Opteron_G3', 'Penryn',
            'pentium', 'pentium2', 'pentium3', 'pentiumpro', 'phenom',
            'qemu32', 'qemu64']

        test_cpu_map(cpu_64, x86_cpunames)
        test_cpu_map(cpu_random, [])

        conn = utils.open_testdriver()
        cpu_64 = caps.get_cpu_values(conn, "x86_64")
        self.assertTrue(len(cpu_64) > 0)


if __name__ == "__main__":
    unittest.main()

Create a python program to display the numbers divisible by 3 in the given range from 1 to 20 for num in range(1, 21):
    if num % 3 == 0:
        print(num)
Design a compiler to identify the language and the keywords used in a given source code. Source code:
    for i in range(10):
    	print(i)
Language: Python def isPython(code):
    keywords = ['for', 'in', 'range', 'print']

    # check for each keyword
    for keyword in keywords:
        if keyword not in code:
            return False

    return True

code = '''
for i in range(10):
	print(i)
'''

print(isPython(code))
# Output: True
Produce a program in Python to classify an animal as "mammal" or "non-mammal" depending on its features and description. features = ["warm blooded", "gives birth to live young"]
description = "The animal is feline and has four legs." def classify_animal(features,description):
    if("warm blooded" in features and "gives birth to live young" in features):
        return "mammal"
    elif("feline" in description and "four legs" in description):
        return "mammal"
    else:
        return "non-mammal"
Create a python script to create an NxN matrix with the values in the range 0 to NxN-1  def generate_matrix(N):
    matrix = [] 
    for i in range(N): 
        row = [] 
        for j in range(N): 
            row.append(i * N + j) 
        matrix.append(row) 
    return matrix
Create a function in Python to calculate the standard deviation from a given array of numbers. [2, 4, 4, 4, 5, 5, 7, 9] def compute_std_dev(nums): 
	mean = sum(nums) / len(nums)
	variance = 0
	for n in nums:
		variance += (n - mean) ** 2
	variance /= len(nums)

	std_dev = variance ** 0.5
	return std_dev
Rewrite the given code to use dictionaries instead of switch statements in Python. def convert_letter_grade(grade):
    switch (grade):
        case 'A':
            return 4.0
        case 'B':
            return 3.0
        case 'C':
            return 2.0
        case 'D':
            return 1.0 def convert_letter_grade(grade):
    grades = {
        'A': 4.0,
        'B': 3.0,
        'C': 2.0,
        'D': 1.0
    }
    return grades[grade]
Change the following python code so that the loop only iterates through the even numbers in the list. for num in range(16):
    print(num) for num in range(16):
    if num % 2 == 0:
        print(num)
Create a function in Python to find the longest string in a given list of strings ["Apple", "Banana", "Orange", "Mango", "Pineapple"] def find_longest_string(arr):
    longest_string = ''
    for s in arr:
        if len(s) > len(longest_string):
            longest_string = s
    return longest_string

arr = ["Apple", "Banana", "Orange", "Mango", "Pineapple"]
result = find_longest_string(arr)
print('Longest string is', result)
Write a python program to calculate a person's BMI (body mass index). Height: 1.75m
Weight: 80kg # Calculate BMI
height = 1.75 # meters
weight = 80 # kilograms
bmi = weight / (height * height)
print("BMI: ", bmi)
Given a Python dictionary, write a function to invert the keys and values of the dictionary. my_dict = {'A':1, 'B':2, 'C':3} def invert_dict(dictionary):
    inverted_dict = {}
    for key, value in dictionary.items():
        inverted_dict[value] = key
    return inverted_dict

inverted_dict = invert_dict(my_dict)
print(inverted_dict)
Write a Python program to check that a string contains only a certain set of characters (in this case a-z, A-Z and 0-9).  import re

def check_string(input_string):
    regex = re.compile('[a-zA-Z0-9]')
    for c in input_string:
        if not regex.match(c):
            return False
    return True

string1 = 'ABC123'
string2 = 'ABC12!@'

if check_string(string1):
    print('String1 is valid')
else:
    print('String1 is not valid')

if check_string(string2):
    print('String2 is valid')
else:
    print('String2 is not valid')
Create a program that sorts a list of strings in alphabetical order. ['python', 'javascript', 'java', 'go'] """
Create a program that sorts a list of strings in alphabetical order.
"""

def sort_list(lst):
    """
    This function sorts a list of strings in alphabetical order.
    """
    lst.sort()
    return lst
 
if __name__ == '__main__':
    lst = ['python', 'javascript', 'java', 'go']
    print(sort_list(lst))
This code checks the status of an AWS SQS queue and returns the total number of messages in the queue. To use this code, you need to provide the endpoint of the queue and the number of queues to check as command-line arguments. The code will then iterate over each queue and return the total number of messages in all the queues. The output will be the total number of messages multiplied by 100.  #!/usr/bin/python
# -*- coding: utf8 -*-


from pprint import pprint
import sys,os
import random
import json
import gzip
import random

import boto3

s3 = boto3.resource('s3')
client = boto3.client('sqs')

QUEUE_ENDPOINT='https://eu-west-1.queue.amazonaws.com/888250974927/s3-copy-list'
DST_BUCKET='ireland-leo-test'

def check_queue_status(qurl):
    #print('check_queue_status(%s)'%(qurl))
    #return {'number':0}

    response = client.get_queue_attributes(
        QueueUrl=qurl,
        AttributeNames=[
            'All'
        ]
    )

    #pprint(response)
    #{u'Attributes': {'ApproximateNumberOfMessages': '1',

    message_number=0
    if 'Attributes' in response:
        if 'ApproximateNumberOfMessages' in response['Attributes'] and 'ApproximateNumberOfMessagesNotVisible' in response['Attributes']:
            message_number=int(response['Attributes']['ApproximateNumberOfMessages'])
            not_visiable_message_number=int(response['Attributes']['ApproximateNumberOfMessagesNotVisible'])
            if message_number>0 or not_visiable_message_number>0:
                #print('%04d/%04d : %s'%(message_number, not_visiable_message_number, qurl))
                pass
                
    return {'number':message_number}


if __name__ == '__main__':
    qurl_endpoint=sys.argv[1]
    q_number=int(sys.argv[2])

    total_number=0
    for pos in xrange(q_number):
        response = check_queue_status('{0}-{1}'.format(qurl_endpoint, pos+1))

        total_number+=response['number']


        
    print total_number*100

    sys.exit(0)

Create a Python script that takes in an array with numbers and returns an array with all the even numbers in the original array. [1, 2, 3, 4, 5, 6, 7, 8] def even_numbers(numbers):
 
  # Initialize an empty array to store the even numbers
  even_numbers_array = []
  
  # Iterate through the numbers array
  for number in numbers:
    
    # Check if the number is even
    if number % 2 == 0:
      
      # If the number is even, add it to the even_numbers_array
      even_numbers_array.append(number)
      
  # Return the even_numbers_array  
  return even_numbers_array
  
# Test it
numbers = [1, 2, 3, 4, 5, 6, 7, 8]
print(even_numbers(numbers)) # Should return [2, 4, 6, 8]
Create a desktop application in Python to store passwords with authentication.  # Import relevant libraries
import tkinter as tk 
import hashlib

# Create the main window 
root = tk.Tk()
root.title('Password Manager')

# Create a secure password database
password_storage = {}

# Create a function for hashing the password
def hash_password(password):
  hashed_password = hashlib.sha256(password.encode('utf-8')).hexdigest()
  return hashed_password

# Create an authentication system to prompt the user to enter a username and password
def authenticate():
  username_entry = tk.Entry(root) 
  username_entry.pack()

  password_entry = tk.Entry(root, show="*") 
  password_entry.pack()

  def authenticate_user():
    username = username_entry.get()
    password = password_entry.get()
    hashed_password = hash_password(password)
    if username in password_storage and password_storage[username] == hashed_password:
      print('Authenticated!')
    else:
      print('Incorrect')
  tk.Button(root, text='Authenticate', command=authenticate_user).pack()

# Call the authenticate function
authenticate()

root.mainloop()
Create a python program to filter a list of words by length. ["Apple", "Banana", "Orange", "Grapes"] def filter_words_by_length(word_list, length):
    return [word for word in word_list if len(word) == length]
Edit the following Python program to print out the key-value pair of a dictionary. d = {'Name': 'John', 'Age': 30, 'City': 'New York'} d = {'Name': 'John', 'Age': 30, 'City': 'New York'}
 
for key, value in d.items():
    print(f'{key}: {value}')
Create a StatusBar class that can be used to display messages and prompts in a REPL. The class should have methods for displaying messages, prompting the user for confirmation or a file name, and processing user input. The class should also be able to handle events such as refresh requests and paste events.  import greenlet
import time
import curtsies.events as events

from bpython.repl import Interaction as BpythonInteraction

from bpython.curtsiesfrontend.manual_readline import char_sequences as rl_char_sequences

class StatusBar(BpythonInteraction):
    """StatusBar and Interaction for Repl

    Passing of control back and forth between calls that use interact api
    (notify, confirm, file_prompt) like bpython.Repl.write2file and events
    on the main thread happens via those calls and self.wait_for_request_or_notify.

    Calling one of these three is required for the main thread to regain control!

    This is probably a terrible idea, and better would be rewriting this
    functionality in a evented or callback style, but trying to integrate
    bpython.Repl code.
    """
    def __init__(self, initial_message='', permanent_text="", refresh_request=lambda: None):
        self._current_line = ''
        self.cursor_offset_in_line = 0
        self.in_prompt = False
        self.in_confirm = False
        self.waiting_for_refresh = False
        self.prompt = ''
        self._message = initial_message
        self.message_start_time = time.time()
        self.message_time = 3
        self.permanent_text = permanent_text
        self.main_greenlet = greenlet.getcurrent()
        self.request_greenlet = None
        self.refresh_request = refresh_request

    @property
    def has_focus(self):
        return self.in_prompt or self.in_confirm or self.waiting_for_refresh

    def message(self, msg):
        self.message_start_time = time.time()
        self._message = msg

    def _check_for_expired_message(self):
        if self._message and time.time() > self.message_start_time + self.message_time:
            self._message = ''

    def process_event(self, e):
        """Returns True if shutting down"""
        assert self.in_prompt or self.in_confirm or self.waiting_for_refresh
        if isinstance(e, events.RefreshRequestEvent):
            self.waiting_for_refresh = False
            self.request_greenlet.switch()
        elif isinstance(e, events.PasteEvent):
            for ee in e.events:
                self.add_normal_character(ee if len(ee) == 1 else ee[-1]) #strip control seq
        elif e in rl_char_sequences:
            self.cursor_offset_in_line, self._current_line = rl_char_sequences[e](self.cursor_offset_in_line, self._current_line)
        elif e == "":
            raise KeyboardInterrupt()
        elif e == "":
            raise SystemExit()
        elif self.in_prompt and e in ("\n", "\r"):
            line = self._current_line
            self.escape()
            self.request_greenlet.switch(line)
        elif self.in_confirm:
            if e in ('y', 'Y'):
                self.request_greenlet.switch(True)
            else:
                self.request_greenlet.switch(False)
            self.escape()
        elif e in ['\x1b']:
            self.request_greenlet.switch(False)
            self.escape()
        else: # add normal character
            self.add_normal_character(e)

    def add_normal_character(self, e):
        self._current_line = (self._current_line[:self.cursor_offset_in_line] +
                             e +
                             self._current_line[self.cursor_offset_in_line:])
        self.cursor_offset_in_line += 1

    def escape(self):
        """unfocus from statusbar, clear prompt state, wait for notify call"""
        self.in_prompt = False
        self.in_confirm = False
        self.prompt = ''
        self._current_line = ''

    @property
    def current_line(self):
        self._check_for_expired_message()
        if self.in_prompt:
            return self.prompt + self._current_line
        if self.in_confirm:
            return self.prompt
        if self._message:
            return self._message
        return self.permanent_text

    # interaction interface - should be called from other greenlets
    def notify(self, msg, n=3):
        self.request_greenlet = greenlet.getcurrent()
        self.message_time = n
        self.message(msg)
        self.waiting_for_refresh = True
        self.refresh_request()
        self.main_greenlet.switch(msg)

    # below Really ought to be called from greenlets other than main because they block
    def confirm(self, q):
        """Expected to return True or False, given question prompt q"""
        self.request_greenlet = greenlet.getcurrent()
        self.prompt = q
        self.in_confirm = True
        return self.main_greenlet.switch(q)
    def file_prompt(self, s):
        """Expected to return a file name, given """
        self.request_greenlet = greenlet.getcurrent()
        self.prompt = s
        self.in_prompt = True
        result = self.main_greenlet.switch(s)
        return result

Write a code snippet for a simple linear regression model in Python. Not applicable import pandas as pd
import matplotlib.pyplot as plt
from sklearn import linear_model

# Read data from CSV
data = pd.read_csv('data.csv')

# Set X and Y
X = data['X']
Y = data['Y']

# Create linear regression model
model = linear_model.LinearRegression()

# Train the model
model.fit(X, Y)

# Make predictions
Y_pred = model.predict(X)

# Visualize the results
plt.scatter(X, Y)
plt.plot(X, Y_pred, color='red')
plt.show()
Edit this Python code to improve the runtime complexity of the program. def solve(list):
    max_len = 0
    for i in range(len(list)-1):
        for j in range(i+1, len(list)):
            if list[i] == list[j]:
                cur_len = 0
                k = 0
                while i+k < len(list) and j+k < len(list) and list[i+k] == list[j+k]:
                    cur_len += 1
                    k += 1
                max_len = max(max_len, cur_len)
    return max_len def solve(list):
    max_len = 0
    longest_prefix = [0] * len(list)
    for i in range(1, len(list)):
        if list[i] == list[i-1]:
            longest_prefix[i] = longest_prefix[i-1] + 1
        else:
            longest_prefix[i] = 0
        max_len = max(max_len, longest_prefix[i])
    return max_len
Create a function in Python that takes a string of text as an argument and returns the text with all vowels removed.  def remove_vowels(s): 
    vowels = ('a', 'e', 'i', 'o', 'u') 
    for x in s: 
        if x in vowels: 
            s = s.replace(x, "") 
    return s
Write a Python program to get the latest news article from a news website. Not applicable import requests
from bs4 import BeautifulSoup

url = 'https://example.com/news'

response = requests.get(url)
soup = BeautifulSoup(response.content, 'lxml')

latest_news = soup.find('div', id='latest_news')
latest_article = latest_news.find('h2')

print(latest_article.text)
Write a python function to convert a telephone number into its numerical representation, e.g., turning a 4-digit telephone number into “2-4-6-8” or “4-4-4-4”. Telephone Number: 2002 def numerical_representation(phone):
 phone_number = ""
 for digit in phone:
 if digit == '0':
     phone_number += "0"
 elif digit == '1':
     phone_number += "1"
 elif digit == '2':
     phone_number += "2-4-6-8"
 elif digit == '3':
     phone_number += "3-5-9-7"
 elif digit == '4':
     phone_number += "4-4-4-4"
 elif digit == '5':
     phone_number += "5-5-2-6"
 elif digit == '6':
     phone_number += "6-6-8-4"
 elif digit == '7':
     phone_number += "7-9-3-1"
 elif digit == '8':
     phone_number += "8-8-6-2"
 elif digit == '9':
     phone_number += "9-7-1-3"

 return phone_number
 
 numerical_representation('2002')  # '2-4-6-8'
Design a Python class for creating a digital clock  class DigitalClock:
    def __init__(self):
        self.__hours = 0
        self.__minutes = 0
        self.__seconds = 0
    
    def set_time(self,hours,minutes,seconds):
        self.__hours = hours
        self.__minutes = minutes
        self.__seconds = seconds
    
    def get_time(self):
        return self.__hours, self.__minutes, self.__seconds
    
    def display(self):
        print(str(self.__hours).zfill(2),":",str(self.__minutes).zfill(2),":",str(self.__seconds).zfill(2))

my_clock = DigitalClock()
my_clock.set_time(12, 45, 10)
my_clock.display()
Develop a Python program to generate the first N Fibonacci numbers. N = 10 def fibonacci_numbers(n):
 result = []
 a, b = 0, 1
 while a < n:
 result.append(a)
 a, b = b, a+b
 return result

n = 10
fibonacci = fibonacci_numbers(n)

print(fibonacci)

# Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
Create a class in Python to represent a complex number leveraging operator overloading in Python.  class ComplexNumber:
    """Represent a complex number."""
  
    def __init__(self, real, imaginary):
        self.real = real
        self.imaginary = imaginary
  
    def __add__(self, other):
        return ComplexNumber(self.real + other.real,
                             self.imaginary + other.imaginary)
  
    def __mul__(self, other):
        return ComplexNumber(self.real*other.real - self.imaginary*other.imaginary,
                self.real*other.imaginary + self.imaginary*other.real)
Create a python program to convert a string containing comma seperated values into a list of integers. "12,34,55,67" def str_to_list(input_str):
    result = [int(i) for i in input_str.split(",")]
    return result

str = "12,34,55,67"
int_list = str_to_list(str)
print(int_list) # Output: [12, 34, 55, 67]
Construct a function in Python that takes a list of integers and a number and returns the number of occurrences of the number in the list.  def count_occurrences(lst, num):
    count = 0
    for item in lst:
        if item == num:
            count += 1
    return count
Generate a Python function that takes a list of strings and returns a dictionary with each string as the key and the length of the string as the value. ['one', 'two', 'three', 'four'] def count_lengths(strings):
  return {string : len(string) for string in strings}

strings = ['one', 'two', 'three', 'four']

print(count_lengths(strings))
# Output: {'one': 3, 'two': 3, 'three': 5, 'four': 4}
Create a REST API endpoint in Python to handle a POST request and make updates to a database. Not applicable from flask import Flask
import mysql.connector

# create the app and connect to the database
app = Flask(__name__) 
conn = mysql.connector.connect(
 host="localhost",
 user="db_user", 
 passwd="password", 
 database="my_db"
)

# handle POST request
@app.route("/my_endpoint", methods=["POST"])
def handle_post_request():
 # get the data from the request
 data = request.get_json()

 # connect to the database
 cursor = conn.cursor()

 # write data to database
 query = "INSERT INTO my_table (field1, field2) VALUES (%s, %s)"
 cursor.execute(query, (data["field1"], data["field2"]))
 conn.commit()

 return "Success!"
Write a Python function to generate a random number between 1 and 5, given two numbers X and Y. 4, 8 import random

def generate_random_number(x, y):
    start = min(x, y)
    end = max(x, y)
    return random.randint(start, end)

result = generate_random_number(4, 8)
print(result)
What is a Python script to list the full path of all directories in a directory?  import os

path = "."

for dirName, subdirList, fileList in os.walk(path):
 print(os.path.abspath(dirName))
Create a Python class to store employee information such as name, ID, and salary.  class Employee:
    def __init__(self, name, id, salary):
        self.name = name
        self.id = id
        self.salary = salary

    def get_name(self):
        return self.name

    def get_id(self):
        return self.id

    def get_salary(self):
        return self.salary
Write a Python program to edit the given JSON string using the given selection criteria. JSON String: { “name”: “Alice”, “role”: “programmer”, “department”: “engineering” }
Selection Criteria: Change the department of the given JSON string. import json

json_str = '{ "name": "Alice", "role": "programmer", "department": "engineering" }'

data = json.loads(json_str)

data["department"] = "marketing"

json_str = json.dumps(data)

print(json_str)
Create a Python application for creating a card game. The application should generate a random deck of cards to play with, keep track of the score, and calculate the winner of the game. Not applicable import random

class CardGame:

    deck = None
    scores = None

    def __init__(self):
        self.deck = self.generateDeck()
        self.scores = {'player1': 0, 'player2': 0}     

    def generateDeck(self):
        suits = ['Clubs', 'Diamonds', 'Hearts', 'Spades']
        ranks = ['2','3','4','5','6','7','8','9','10','J','Q','K','A']
        deck = []
        for suit in suits:
            for rank in ranks:
                deck.append([suit, rank])
        random.shuffle(deck)
        return deck

    # Returns total points of a player's cards
    def getScore(self, player):
        score = 0
        for card in self.deck:
            if card[1] in ['J', 'Q', 'K']:
                score += 10
            elif card[1] == 'A':
                score += 11
            else:
                score += int(card[1])
        self.scores[player] = score
        return score

    # Check if a player won or there is a tie
    def isWinner(self, player1, player2):
        score1 = self.getScore(player1)
        score2 = self.getScore(player2)

        if score1 > score2:
            print(f'{player1} Wins')
        elif score2 > score1:
            print(f'{player2} Wins')
        else:
            print('It is a tie')
Write a Python program to replace all the vowels in a string with '#'.  def replace_vowels(input_string):
    output_string = ""
    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']

    for char in input_string:
        if char in vowels:
            output_string += '#'
        else:
            output_string += char
    return output_string

input_string = "Hello, I am a string."
output_string = replace_vowels(input_string)

print(output_string)
Design a REST-API in Python using Flask that displays the current date and time when a GET request is sent. Not applicable from flask import Flask, jsonify
from datetime import datetime

app = Flask(__name__)

@app.route('/time', methods=['GET'])
def time():
  time = {
    'time': datetime.now()
  }
  return jsonify(time)

if __name__ == '__main__':
  app.run()
Using the input provided, build a Python dictionary with the number as the key and its square as the value. numbers = [2, 3, 4] square_dict = {number:number**2 for number in numbers}
Create an optimization problem in Python to optimize the function. The given function is f(x, y) = x + y^2, where x and y are real numbers. import numpy as np
from scipy.optimize import minimize
def f(x):
    x, y = x
    return x + y**2

x0 = np.array([0,0])
res = minimize(f, x0, method='nelder-mead')
print(res.x)
Generate a Python program to convert a given amount of money in one currency to another given currency. amount = 10
from_currency = "USD"
to_currency = "EUR" import requests

def currency_converter(amount, from_currency, to_currency):
    base_url = "https://api.exchangeratesapi.io/latest"
    URL = base_url + "?base=" + from_currency + "&symbols=" + to_currency
    r = requests.get(URL) 
    response = r.json() 
    rate = response['rates'][to_currency] 
    return rate * amount
Develop an automated trading system in Python. The system should use a technical indicator such as the Relative Strength Index (RSI) to trade a given asset. It should generate buy and sell signals and allocate capital accordingly. Real-time price data for assets like the S&P 500, currency pairs like EUR/USD, commodities like Crude Oil, etc. import numpy as np
import pandas as pd
from scipy.stats import norm
import matplotlib.pyplot as plt
import datetime as dt

# import price data for the asset
prices = pd.read_csv('data.csv', index_col=0, parse_dates=True)

# add a new column for the relative strength index
prices['RSI'] = np.nan

# define the period for the rolling window
n = 14 

# calculate the relative strength index
for i in range(n,len(prices)):
 prices.loc[prices.index[i],'RSI'] = round(100 - 
 100/(1+prices['Close'][i-n:i].pct_change().mean()/prices['Close'][i-n:i].pct_change().std()),2)
  
# generate buy and sell signals
prices['Signal'] = np.nan

for i in range(n,len(prices)):
 if prices.loc[prices.index[i],'RSI'] <= 30:
 prices.loc[prices.index[i],'Signal'] = 'BUY'
 elif prices.loc[prices.index[i],'RSI'] >= 70:
 prices.loc[prices.index[i],'Signal'] = 'SELL'
 else:
 prices.loc[prices.index[i],'Signal'] = None

# define capital to trade
capital = 100000

# assign positions
position = 0 # 0 = no position, 1 = long, -1 = short

# plot the RSI indicator with buy and sell signals
plt.figure(figsize=(15,10))
plt.plot(prices.RSI, label='Relative Strength Index (RSI)')
plt.scatter(prices[prices['Signal']=='BUY'].index,prices[prices['Signal']=='BUY'].RSI,
 marker='o', color='green', label='Buy Signal')
plt.scatter(prices[prices['Signal']=='SELL'].index,prices[prices['Signal']=='SELL'].RSI,
 marker='o', color='red', label='Sell Signal')
plt.legend(loc='upper left')
plt.title('Relative Strength Index (RSI) with Buy and Sell Signals')
plt.show()

# execute trades
for i in range(0, len(prices)-1):

 if prices.loc[prices.index[i],'Signal'] == 'BUY' and position == 0:
 # enter long position
 position = 1
 # calculate the number of contracts 
 lotSize = np.int(np.floor(capital * 0.01 / (prices.loc[prices.index[i],'Close'] * 100)))
 # calculate entry price
 entryPrice = prices.loc[prices.index[i],'Close']
 # update capital
 capital = capital - lotSize * entryPrice * 100
 elif prices.loc[prices.index[i],'Signal'] == 'SELL' and position == 0:
 # enter short position
 position = -1
 # calculate the number of contracts
 lotSize = np.int(np.floor(capital * 0.01 / (prices.loc[prices.index[i],'Close'] * 100)))
 # calculate entry price
 entryPrice = prices.loc[prices.index[i],'Close']
 # update capital
 capital = capital + lotSize * entryPrice * 100
 elif prices.loc[prices.index[i+1],'Signal'] == 'SELL' and position == 1:
 # exit long position
 position = 0
 # calculate exit price
 exitPrice = prices.loc[prices.index[i+1],'Close']
 # update capital
 capital = capital + lotSize * exitPrice * 100
 elif prices.loc[prices.index[i+1],'Signal'] == 'BUY' and position == -1:
 # exit short position
 position = 0
 # calculate exit price
 exitPrice = prices.loc[prices.index[i+1],'Close']
 # update capital
 capital = capital - lotSize * exitPrice * 100

# print final capital
print('Final capital:',round(capital,2))
Develop a method for converting an introduction letter from PDF to HTML, using Python.  import pdfminer 

def convert_pdf_to_html(pdf_file):
    content = ""
    # to convert pdf document to html
    with open(pdf_file, "rb") as file:
        pdf = pdfminer.pdfdocument.PDFDocument(file)
        rsrcmgr = pdfminer.pdfinterp.PDFResourceManager()
        laparams = pdfminer.pdflayout.LAParams()
        device = pdfminer.converter.HTMLConverter(rsrcmgr, laparams=laparams)
        interpreter = pdfminer.pdfinterp.PDFPageInterpreter(rsrcmgr, device)
        for page in pdfminer.pdfpage.PDFPage.create_pages(pdf):
            interpreter.process_page(page)
            content += device.get_result()

    return content
Write a Python function to convert a ciphertext(string) to plaintext (string) using the Caesar encryption technique. "xlmw mw xli pefsi" def caeser_encryption_decrypt(ciphertext): 
    plaintext = "" 
    
    for char in ciphertext:  
        if char.isupper(): 
            plaintext += chr((ord(char) - 3-65) % 26 + 65) 
  
        else: 
            plaintext += chr((ord(char) - 3 - 97) % 26 + 97) 
  
    return plaintext 

result = caeser_encryption_decrypt("xlmw mw xli pefsi")
print(result)
Create a program in Python that takes an integer and prints out the Fibonacci sequence up to the given integer. 17 def fibonacci(num):
    if num<=0: 
        print("Incorrect input") 
    elif num==1: 
        return 0
    elif num==2: 
        return 1
    else: 
        return fibonacci(num-1)+fibonacci(num-2) 

for x in range(1, num+1): 
    print(fibonacci(x))
This code checks if a file exists inside a swift container. To use it, you need to import the necessary libraries and define the CloudAgent class. You also need to define the required configuration parameters, including the region, container, date, and name of the file to check. Once you have defined these parameters, you can run the agent function, which will log whether the file exists or not and send an email if the file is missing.  #!/usr/bin/env python

# Copyright 2013 Hewlett-Packard Development Company, L.P.
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

# Only required for more convenient local development.

import sys, os
sys.path.append(os.path.dirname(os.path.realpath(__file__))+'/lib')


from cloudagents import CloudAgent
from keystoneclient.v2_0 import client
import novaclient
import swiftclient
from time import mktime
import datetime
import parsedatetime.parsedatetime as pdt

ca = CloudAgent()

ca.required_config = {
	"name": "File Existence Checker",
	"version": "0.2.0",
	"author": "Jeff Kramer",
	"url": "http://www.hpcloud.com/",
	"help": """This script checks to see if a file exists inside of a swift container.  It also has functions to allow for searching for files named on relative dates, daily backups for instance.""",
	"config":
		[{
			"name": "region",
			"regexp": "^.{1,50}$",
			"title": "Region",
			"description": "Short name for the object storage endpoint region to search.  IE: region-a.geo-1",
			"type": "string",
			"required": True,
			"resource": "openstack.object-store.endpoints.region"
		},{
			"name": "container",
			"regexp": "^.{1,50}$",
			"title": "Container",
			"description": "Name of the container to search for the file.",
			"type": "string",
			"required": True,
			"resource": "openstack.object-store.[region].containers"
		},{
			"name": "date",
			"regexp": "^.{1,250}$",
			"title": "Date Adjustment",
			"description": "Date adjustment.  Enables time substitution in object name.  IE: 'yesterday'.  Dates are compared in UTC.",
			"type": "string",
			"required": False,
		},{
			"name": "name",
			"regexp": "^.{1,250}$",
			"title": "Name",
			"description": "Object name to check for in the container.  If a date adjustment is set, python datetime time substution is enabled.  IE: 'backups/%Y-%m-%d.zip'",
			"type": "string",
			"required": True
		},
		]
	}

def agent():
	
	ca.log("Starting!")
	
	keystone = client.Client(token=ca.creds['token'], tenant_id=ca.creds['tenantId'],
							auth_url=ca.creds['identity_url'])
	
	object_store_catalog = keystone.service_catalog.get_endpoints()['object-store']
	
	region_endpoints = None
	
	for endpoints in object_store_catalog:
		if endpoints['region'] == ca.conf['region']:
			region_endpoints = endpoints
	
	if not region_endpoints:
		ca.log_fail("Failing, region not found in endpoint list.")
		exit()
	
	if ca.conf.get('date'):
		p = pdt.Calendar()
		result = p.parse(ca.conf['date'])
		dt = datetime.datetime.fromtimestamp(mktime(result[0]))
		path = dt.strftime(ca.conf['name'])
	else:
		path = ca.conf['name']
	
	try:
		headers = swiftclient.head_object(region_endpoints['publicURL'],ca.creds['token'],
												ca.conf['container'],path)
		if headers['content-length'] >= 0:
			ca.log("File exists!")
			
	except swiftclient.client.ClientException, e:
		ca.log("File doesn't exist!")
		ca.email("File missing: "+ca.conf['container']+"/"+path,'''
	The container '%s' appears to be missing the file '%s'.
	''' % (ca.conf['container'], path))
		

ca.run(agent)

Write a Python program to add numbers from different columns of a multi-dimensional array. [[1, 2, 3], 
[4, 5, 6], 
[7, 8, 9]] arr = [[1, 2, 3], 
[4, 5, 6], 
[7, 8, 9]] 

# Initialize result 
result = 0

# Iterate every element in the array 
for row in arr: 
  for col in row:
    # Adding elements of each row 
    result = result + col  

# Displaying sum 
print(result)

# Output: 45
Write a python program to classify the given input into two categories Input: Apple def classify(input):
    if input == "apple":
        label = "fruit"
    else:
        label = "not fruit"
    return label
Design an algorithm in Python to read in a matrix of integers and print the sum of each row. [[1, 2, 3],
[4, 5, 6], 
[7, 8, 9]] def rowSum(matrix):
    row_sums = []
    for row in matrix:
        row_sum = 0
        for num in row:
            row_sum += num
        row_sums.append(row_sum)
    return row_sums

matrix = [[1, 2, 3],
          [4, 5, 6],
          [7, 8, 9]]

print(rowSum(matrix)) # [6, 15, 24]
Write a Python program to sort data from the largest to the smallest. [44, 23, 11, 33, 5] unsorted_list = [44, 23, 11, 33, 5]
sorted_list = sorted(unsorted_list, reverse=True)

print(sorted_list)
Develop a Python function to determine the greatest common divisor of two integers. a = 28 
b = 15 def gcd(a, b): 
 if(b == 0): 
  return a 
 return gcd(b, a%b) 

def main():
 a = 28 
 b = 15 
 print(gcd(a,b)) 

if __name__ == "__main__": 
 main() 

# Output
3
Write a Python function for computing the Fibonacci numbers of n.  def fibonacci(n):
    if n < 2:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)
Generate a python class 'Employee' with properties 'name' and 'salary'.  class Employee: 
    def __init__(self, name, salary): 
        self.name = name
        self.salary = salary
    
    def get_name(self):
        return self.name
    
    def get_salary(self):
        return self.salary
Design a Python code snippet that deletes all duplicates in a given list of numbers.  def deleteDuplicates(list): 
    final_list = [] 
    for num in list: 
        if num not in final_list: 
            final_list.append(num) 
    return final_list
Develop a Python script to convert a list of words into a dictionary with its frequency count as the key and the words as the value. List of words: hello, world, hello, python, hello words = ["hello","world","hello","python","hello"] 

# counting frequency of each word in a list 
wordFrequencyDict = {}
for word in words: 
    if (word in wordFrequencyDict): 
        wordFrequencyDict[word] += 1
    else: 
        wordFrequencyDict[word] = 1

print(wordFrequencyDict)
Edit the following Python code such that it takes an optional integer value as parameter. This value will be used to limit the maximum number of words in the sentence. def generateSentence():
    words = ['Hello', 'World', 'He', 'She', 'They', 'Good', 'Bad']
    sentence = ''
    for i in range(len(words)):
        sentence += words[i] + ' '
    return sentence def generateSentence(limit = None):
    words = ['Hello', 'World', 'He', 'She', 'They', 'Good', 'Bad']
    sentence = ''
    counter = 0
    for i in range(len(words)):
        if not limit or counter < limit:
            sentence += words[i] + ' '
            counter += 1
        else:
            break
    return sentence
Develop a Python Webscraper for collecting data from a given URL. Example URL: http://example.com/data import requests
from bs4 import BeautifulSoup

URL = 'http://example.com/data'

# Send a request to the URL
page = requests.get(URL)

# Parse the page
soup = BeautifulSoup(page.content, 'html.parser')

# Get the data
data = soup.find_all('div', class_='data')

# Print the data
for item in data:
 print(item.text)
Generate a for loop in Python to iterate over a range of numbers from 0 to 10.  for i in range(0,11):
    print(i)
Create an algorithm in Python to compile a list of all possible ships given a list of components. components = ["a", "b", "c", "d", "e"] ships = []
permutations = [[]]

def generate_ships(components, index, permutation):
 if index == len(components):
 ships.append(permutation)
 else:
 for i in [0, 1]:
 permutation_copy = permutation.copy()
 permutation_copy.append(i)
 generate_ships(components, index + 1, permutation_copy)

# Initial call
generate_ships(components, 0, [])

print(ships)
Can you provide a Python code snippet to generate a random integer between 1 and 10, inclusive?  import random

random_int = random.randint(1, 10)
print(random_int)
Write a Python program to identify the most common words used in a list of text strings. the quick brown fox;
jumped over the lazy dog from collections import Counter

input_strings = []
input_string = "the quick brown fox"
input_strings.append(input_string)
input_string = "jumped over the lazy dog"
input_strings.append(input_string)

words = []
for input_string in input_strings:
 words.extend(input_string.split(" "))

word_counts = Counter(words)

most_common_words = word_counts.most_common()

print("The most common words are:")
for word, count in most_common_words:
 print(f"{word} ({count})")
Create an AI model in Python that can classify text into 3 classes: positive, negative or neutral. <example data>

"I had a great experience"
"The customer support was horrible"
"It was ok" import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB

# Create labels
data = ["I had a great experience",
"The customer support was horrible",
"It was ok"]
labels = [1, 0, 2]

# Fit the Vectorizer
vectorizer = CountVectorizer()
counts = vectorizer.fit_transform(data)

# Train the classifier
classifier = MultinomialNB()
targets = labels
classifier.fit(counts, targets)

# Make predictions
examples = ["I had a great time",
"Their customer service was so bad"]
example_counts = vectorizer.transform(examples)
predictions = classifier.predict(example_counts)

# Print predictions
print(predictions)  # Output: [1, 0]
Generate a Python script to scrape a product page from an e-commerce website. URL: https://www.example.com/products/big-green-hat import requests
from bs4 import BeautifulSoup

url = 'https://www.example.com/products/big-green-hat'
page = requests.get(url)
soup = BeautifulSoup(page.content, 'html.parser')

product_title = soup.find('div', class_='product-title').text.strip()
product_price = soup.find('span', class_='price').text.strip()
product_description = soup.find('div', class_='product-description').text.strip()

print('Product Title: ' + product_title)
print('Product Price: ' + product_price)
print('Product Description: ' + product_description)
Create an AI-powered Python script to optimize any given code. Example code:
function getResult(a, b, c) {
 return a + b + c;
} # Import the required libraries
from dataclasses import dataclass

@dataclass
class Params:
 a: int
 b: int
 c: int

def get_result(params: Params) -> int:
 """Returns the sum of the three given numbers"""
 return params.a + params.b + params.c

# Optimize the code
def optimize(fn, params):
 best_score = 0
 best_params = None
 for a in range(params.a - 10, params.a + 10):
 for b in range(params.b - 10, params.b + 10):
 for c in range(params.c - 10, params.c + 10):
 score = fn(Params(a, b , c))
 if score > best_score:
 best_score = score
 best_params = {
 'a': a,
 'b': b,
 'c': c
 }
 return best_params

if __name__ == '__main__':
 # Initialize the parameters
 params = Params(a=1, b=2, c=3)
 # Get the optimized params
 best_params = optimize(get_result, params)
 # Print the optimized result
 print("Optimized result: %d" % get_result(Params(best_params['a'], best_params['b'], best_params['c'])))
Generate a Python program to partition a given array into two parts such that every element in first part is less or equal than the elements in the second part. [1, 9, 0, 5, 2] def partition(arr):
  pivot = arr[0]
  i = 0
  j = len(arr) - 1

  while i <= j:
   while arr[i] < pivot:
    i += 1
   while arr[j] > pivot:
    j -= 1

   if i <= j:
    arr[i], arr[j] = arr[j], arr[i] 
    i +=1
    j -= 1

  return arr

print(partition([1, 9, 0, 5, 2]))
Generate a python program that accepts two numbers and prints their addition.  def add(x, y):
    print(x + y)

a = int(input("Enter first number: "))
b = int(input("Enter second number: "))
add(a, b)
Write a code for sorting the words within a sentence, alphabetically. Python is a great language """
Write a code for sorting the words within a sentence, alphabetically.
"""

def sort_words_alphabetically(sentence):
    words = sentence.split()
    words.sort()
    return ' '.join(words)

if __name__ == '__main__':
    sentence = 'Python is a great language'
    print(sort_words_alphabetically(sentence))
Write a python program to calculate the standard deviation for a list of numbers inputted by the user. [1, 2, 3, 4, 5] nums = [1, 2, 3, 4, 5]

# Function to calculate the standard deviation 
def standardDeviation(nums): 
 
 # Compute mean (average of elements) 
 mean = sum(nums) / len(nums) 
 
 # Compute sum squared distances to the mean 
 sum_sq_dist = 0
 for num in nums: 
 sum_sq_dist += (num - mean) ** 2 
 
 # Compute standard deviation and return result 
 return (sum_sq_dist / len(nums) - - - 1)** 0.5

# Print the standard deviation 
print(standardDeviation(nums))
Create a basic Python script for printing a pattern of stars. Not applicable # Print pattern
for i in range(1, 6):
 for j in range(0, i):
 print("* ", end="")
 print()

# Output
# * 
# * * 
# * * * 
# * * * * 
# * * * * *
Create a function in Python that implements quick-sort. The function should take in a list (of integers) and return a sorted list. [2, 5, 7, 1, 6, 3, 9, 0, 4, 8] def quicksort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)

print(quicksort([2, 5, 7, 1, 6, 3, 9, 0, 4, 8]))
Write a code to create a web server using Flask framework in Python.  from flask import Flask 

app = Flask(__name__) 
  
@app.route('/') 
def home(): 
    return 'Welcome!'
  
if __name__ == '__main__': 
    app.run()
Create an output array from the given input so that each element in the output is the product of all the other element in the same row. [
 [10, 2, 3],
 [4, 5, 6],
 [7, 8, 9]
] [180, 144, 120]

# Python 
def get_products(arr):
    result = []
    # looping over each row in the array
    for row in arr:
        product = 1
        # calculating product of all elements except the element at current index 
        for i,element in enumerate(row):
            product *= row[i] if i != 0 else 1
        
        # append product to result array
        result.append(product)
    return result
Optimize the following Python code:

def count_dups(arr):
  dt = {} 
  count = 0 
 
  for x in arr:
    if x in dt:
      count += 1 
    else:
      dt[x] = 1 
 
  return count Not applicable def count_dups(arr):
  dt = {} 
  count = 0 
 
  for x in arr:
    count += x in dt
    dt[x] = 1 
 
  return count
Write a Python program to generate a random password of length 8 that contains both upper-case and lower-case letters. Not applicable import string
import random

def generate_password(length):
 # Get all possible characters
 characters = string.ascii_lowercase + string.ascii_uppercase + string.digits 
 
 # Generate a random password
 password = ''.join(random.choice(characters) for i in range(length))
 
 # Return the generated password
 return password


print(generate_password(8))
Develop a Python program that takes an array of strings, and returns an object that contains the frequency of each string in the array. [‘a’, ‘a’, ‘b’, ‘a’, ‘c’, ‘a’] def count_frequency(arr):
    freq_dict = {}
    for ele in arr: 
        if ele in freq_dict: 
            freq_dict[ele] += 1
        else: 
            freq_dict[ele] = 1
    return freq_dict

arr = ['a', 'a', 'b', 'a', 'c', 'a']
result = count_frequency(arr)

print(result) # Output: {'a': 4, 'b': 1, 'c': 1}
Write a Python program to compare two lists and return the differences as a new list. list1 = [1, 3, 4, 5] 
list2 = [2, 4, 6, 8] list1 = [1, 3, 4, 5] 
list2 = [2, 4, 6, 8]

diff = []

for item in list1: 
 if item not in list2: 
 diff.append(item) 

for item in list2: 
 if item not in list1: 
 diff.append(item) 

print(diff) # [1, 3, 6, 8]
Create a scalable program in Python using functions to add two numbers. 7, 9 def add(x, y): 
    return x + y
 
# Driver code 
num1 = 7
num2 = 9
print("Sum of {0} and {1} is {2}" 
        .format(num1, num2, add(num1, num2)))
GPT-model, create a Python program for shuffeling the elements of an array.  import random

def shuffle(arr):
  for i in range(len(arr)):
    j = random.randint(0, len(arr)-1)
    arr[i], arr[j] = arr[j], arr[i]
 
  return arr
Create a Naive Bayes classifier in Python to classify text. Not applicable from sklearn.naive_bayes import MultinomialNB
import pandas as pd

# Data Preparation
# Read the data
data = pd.read_csv('./data.csv')
# Create train and test sets
X_train, X_test, y_train, y_test = train_test_split(data['text'], data['label'], test_size=0.2, random_state=0)

# Vectorization
# Create a vectorizer object
vectorizer = CountVectorizer()
# Fit and transform the train and test sets
X_train_vec = vectorizer.fit_transform(X_train)
X_test_vec = vectorizer.transform(X_test)

# Naive Bayes Classifier
# Create a Naive Bayes Classifier
clf = MultinomialNB()
# Fit the model
clf.fit(X_train_vec, y_train)
# Print the accuracy
print("Accuracy:", clf.score(X_test_vec, y_test))
Generate a random upper-case letter using Python.  import random

def get_random_uppercase_letter():
    return chr(random.randint(65,90))

if __name__ == '__main__':
    print(get_random_uppercase_letter())
Create a Python Django web application that generates a ztree for a given user. The ztree should display a hierarchical structure of projects, services, hosts, and other relevant information. The ztree should be accessible only to authenticated users. The ztree should be generated using the given code.  #!/usr/bin/env python
# -*- coding: utf-8 -*-
# =============================================================================
#     FileName: api.py
#         Desc: 2015-15/4/16:下午5:54
#       Author: 苦咖啡
#        Email: voilet@qq.com
#     HomePage: http://blog.kukafei520.net
#      History: 
# =============================================================================

from django.shortcuts import render_to_response, HttpResponseRedirect, HttpResponse
from django.template import RequestContext
from django.contrib.auth.decorators import login_required
import commands, json, yaml
from assets.models import Project
from mysite.settings import auth_key
from assets.models import Host, IDC
import hashlib, time
from django.views.decorators.csrf import csrf_exempt
from django.shortcuts import redirect
# 登录
from users.models import CustomUser
from assets.models import project_swan
from assets.ztree.service import ztree_tag
from django.shortcuts import get_object_or_404
from assets.models import Host, IDC, Service, Line, Project, HostRecord
from cmdb_auth.models import AuthNode


# songxs add
@login_required
def ztree_project(request):
    line_list = Line.objects.filter()
    business = Project.objects.filter(line__isnull=False)
    no_business = Project.objects.filter(line__isnull=True)
    ztree_data = ztree_tag(request.user.username)

    return render_to_response('default/default.html', locals(), context_instance=RequestContext(request))


@login_required
def ztree_business(request):
    """
    树请求验证
    :param request:
    :return:
    """
    business_name = request.GET.get("uuid", False)
    get_token = str(request.GET.get("token", False))
    ztree_data = ztree_tag(request.user.username)

    try:
        sum_token = str(hashlib.sha1(request.user.username + auth_key + business_name +
                                     time.strftime('%Y-%m-%d', time.localtime(time.time()))).hexdigest())
    except TypeError:
        sum_token = False

    if request.GET.get("options") == "host":
        uuid = request.GET.get('uuid', '')
        ip = request.GET.get('ip', '')
        if uuid:
            host = get_object_or_404(Host, uuid=uuid)
        elif ip:
            host = get_object_or_404(Host, eth1=ip)
        host_record = HostRecord.objects.filter(host=host).order_by('-time')
        user_audit = AuthNode.objects.filter(node=host)
        audit_count = user_audit.count()
        return render_to_response('ztree/host_detail.html', locals(), context_instance=RequestContext(request))


    content_status = True
    idle = request.GET.get("idle", False)

    if get_token != sum_token:
        content_status = False
        return render_to_response('ztree/ztree_service.html', locals(), context_instance=RequestContext(request))

    if business_name != u"未分类":
        try:
            bus_data = Project.objects.get(uuid=request.GET.get("uuid"))
            if not idle:
                server_list = Host.objects.filter(business=bus_data, idle=True).order_by("create_time")
            else:
                server_list = Host.objects.filter(business=bus_data, idle=False).order_by("create_time")
        except:
            pass

    else:
        bus_data = u'未分类'
        idc_data = IDC.objects.filter(type=1)
        if not idle:
            server_list = Host.objects.filter(business__isnull=True, idc=idc_data, idle=True).order_by("create_time")
        else:
            server_list = Host.objects.filter(business__isnull=True, idc=idc_data, idle=False).order_by("create_time")

    if request.GET.get("options") == "swan_push":
        s = Ztree_class(business_name, request.user.first_name)
        rst = s.swan()
        rst_data = rst.get("swan_name")
        status = len(rst_data)
        return render_to_response('ztree/swan.html', locals(), context_instance=RequestContext(request))

    if request.GET.get("options") == "doc":
        data = Project.objects.get(pk=business_name)
        # return render_to_response('ztree/swan.html', locals(), context_instance=RequestContext(request))
        return render_to_response('markdown/index.html', locals(), context_instance=RequestContext(request))

    if request.GET.get("options") == "highstate":
        project = Project.objects.get(uuid=business_name)
        host_list = Host.objects.filter(business=project)
        return render_to_response('ztree/highstate.html', locals(), context_instance=RequestContext(request))

    if request.GET.get("options") == "monitor":
        return render_to_response('ztree/zabbix_count.html', locals(), context_instance=RequestContext(request))

    if request.GET.get("options") == "salt":
        return render_to_response('ztree/saltstack.html', locals(), context_instance=RequestContext(request))


    if request.GET.get("options") == "project":
        ip_list = []
        server_list = {}
        line_name = Line.objects.get(pk=business_name)
        business_data = Project.objects.filter(line=business_name)

        for i in business_data:
            node = Host.objects.filter(business=i, idle=True)
            for k in node:
                if k.eth1 not in ip_list:
                    ip_list.append(k.eth1)
                    server_list[str(k.uuid)] = k.eth1
        count = len(ip_list)
        return render_to_response('ztree/project.html', locals(), context_instance=RequestContext(request))

    if request.GET.get("options") == "types":
        get_env = request.GET.get("name")
        business_data = Project.objects.filter(pk=business_name)
        server_list = Host.objects.filter(business=business_data, env=get_env).order_by("-create_time")

        count = server_list.count()
        return render_to_response('ztree/ztree.html', locals(), context_instance=RequestContext(request))

    if request.GET.get("options") == "service":
        s = []
        bus_data = Project.objects.get(uuid=business_name)
        server_list = Host.objects.filter(business=bus_data, idle=True).order_by("create_time")

        for i in server_list:
            t = i.service.all()
            for b in t:
                if b not in s:
                    s.append(b)

        tag = request.GET.get("tgt", False)

        if tag:
            service_all = Service.objects.get(name=tag)
            server_list = Host.objects.filter(service=service_all, business=bus_data)

        return render_to_response('ztree/ztree_service.html', locals(), context_instance=RequestContext(request))

    count = server_list.count()
    return render_to_response('ztree/ztree.html', locals(), context_instance=RequestContext(request))


@login_required
def CdnCache(request):
    """
    树请求验证
    :param request:
    :return:
    """
    service = request.GET.get("services")
    get_token = str(request.GET.get("token"))
    uuid = str(request.GET.get("uuid"))

    sum_token = str(hashlib.sha1(request.user.username + auth_key + service + time.strftime('%Y-%m-%d', time.localtime(
            time.time()))).hexdigest())

    content_status = True
    if get_token != sum_token:
        content_status = False

    idc_data = IDC.objects.get(uuid=uuid)
    service_all = Service.objects.get(name=service)
    server_list = Host.objects.filter(idc=idc_data, service=service_all)
    business_name = idc_data.name
    service_tag = service

    return render_to_response('ztree/service.html', locals(), context_instance=RequestContext(request))


@login_required
def CdnIdc(request):
    """
    树请求验证
    :param request:
    :return:
    """
    get_token = str(request.GET.get("token"))
    uuid = str(request.GET.get("uuid"))
    idc_data = IDC.objects.get(uuid=uuid)

    sum_token = str(hashlib.sha1(request.user.username + auth_key + idc_data.name + time.strftime('%Y-%m-%d',
                                                                                                  time.localtime(
                                                                                                          time.time()))).hexdigest())

    content_status = True
    if get_token != sum_token:
        content_status = False

    server_list = Host.objects.filter(idc=idc_data)
    business_name = idc_data.name

    return render_to_response('ztree/idc.html', locals(), context_instance=RequestContext(request))


class Ztree_class(object):
    """
    ztree 类
    """

    def __init__(self, project_name, user):
        self.project_name = project_name
        self.user = user

    def monitor(self):
        return True

    def swan(self):
        rst_data = {}

        user_info = CustomUser.objects.get(first_name=self.user)

        myform_rst = Project.objects.get(uuid=self.project_name)

        rst = project_swan.objects.filter(project_name_id=myform_rst.uuid)

        """
        所有当前项目发布名称放到一个list中
        """

        swan_name_list = [i.swan_name for i in rst]
        swan_push = user_info.project_swan_set.all()
        user = CustomUser.objects.get(first_name=self.user)

        if user.is_superuser:

            for i in rst:
                rst_data[str(i.uuid)] = i.swan_name

        else:
            swan_push = user_info.project_swan_set.all()
            for i in swan_push:
                if i.swan_name in swan_name_list:
                    rst_data[str(i.uuid)] = i.swan_name

        host_list = myform_rst.host_set.all()
        content = {"swan_name": rst_data, "host": host_list}

        return content

    def highstate(self):
        project = Project.objects.get(service_name=self.project_name)
        # server_list = project.host_set
        host_list = Host.objects.filter(business=project)

        return True


@csrf_exempt
def ZtreeIndex(request):
    """

    :param request:
    :return:
    """
    if request.method == 'POST':
        otherParam = request.POST.get("otherParam")
        status = request.POST.get("status")
        line_id = request.POST.get("line_id")

        try:
            name = request.POST.get("name")
            id = request.POST.get("id")

        except:
            name = False

        if not name:
            ztree = ztree_tag(request.user.username)
            return HttpResponse(json.dumps(ztree, ensure_ascii=False, indent=4))

        elif int(status[0]) == 1:
            ztree = []
            return HttpResponse(json.dumps(ztree, ensure_ascii=False, indent=4))

        else:
            ztree = []
            bus_data = Project.objects.get(service_name=name)
            server_list = Host.objects.filter(business=bus_data).order_by("create_time")

            s = []
            for i in server_list:
                t = i.service.all().values()
                for b in t:
                    if b not in s:
                        s.append(b)
            tree_id = 0
            for i in s:
                tree_id += 1

                token = hashlib.sha1(request.user.username + auth_key + i.get("name") + time.strftime('%Y-%m-%d',
                                                                                                      time.localtime(
                                                                                                              time.time()))).hexdigest()

                ztree.append({"id": tree_id, "status": 3, "line_id": line_id, "name": i.get("name"), "token": token,
                              "t": i.get("name"), "business": bus_data.service_name})

            return HttpResponse(json.dumps(ztree, ensure_ascii=False, indent=4))
    content = {"status": 403, "message": "auth error"}
    return HttpResponse(json.dumps(content, ensure_ascii=False, indent=4))

Design a Python program to count the number of hops that a knight can make from a given square on a chessboard in a single move. 42 (For the chessboard position E3) def count_knight_moves(position):
    x = int(position / 10)
    y = position % 10
    count = 0 
    
    # Possible moves the knight can make 
    xmove = [-2, -2, -1, -1,  1, 1,  2, 2] 
    ymove = [-1,  1, -2,  2, -2, 2, -1, 1] 
      
    # Check if knight is on the boundary 
    if x <= 0 or y <= 0 or x > 8 or y > 8:
        return 0 
      
    for k in range(len(xmove)):
        if (x + xmove[k] <= 8) and (y + ymove[k] <= 8): 
            count += 1
             
    return count 

position = 42
moves = count_knight_moves(position)
print("The knight can make %d moves from E3" %moves)
Create an algorithm in Python to evaluate the performance of a trading strategy. The data input to the algorithm will be a list of closing prices of a stock in the past. def evaluate_strategy(prices):
    # Calculate the returns as the ratio of current price to the previous price
    returns = []
    for i in range(1, len(prices)):
        return_value = (prices[i]/prices[i-1])-1
        returns.append(return_value)
        
    # Calculate the average return
    average_return = 0
    for i in range(len(returns)):
        average_return += returns[i]
    average_return = average_return/len(returns)
    
    # Calculate Sharpe Ratio
    volatility = 0
    for i in range(len(returns)):
        volatility += (returns[i]-average_return)**2
    volatility = volatility/(len(returns)-1)
    volatility = np.sqrt(volatility)
    sharpe_ratio = average_return/volatility
    
    #Calculate Maximum Drawdown
    max_drawdown = 0
    for i in range(1, len(prices)):
        max_drawdown = max(prices[i]-min(prices[:i+1]), max_drawdown)
        
    return average_return, sharpe_ratio, max_drawdown
Write a Python script to create a classifier which can classify given emails as spam or non-spam.  import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB

# read data
df = pd.read_csv('data.csv')

# transform data into features
vectorizer = CountVectorizer()
x = vectorizer.fit_transform(df['text'])

# train Naive Bayes model
clf = MultinomialNB()
clf.fit(x, df['label'])

# predict on unseen data
example = vectorizer.transform(['I am a spam email'])
prediction = clf.predict(example)
print(prediction[0])
Write a Python script to calculate the sum of the elements of a list. [1, 2, 3, 4, 5] nums = [1, 2, 3, 4, 5]

sum_val = 0
for n in nums:
    sum_val += n

print(f"Sum of the elements in the list: {sum_val}")
Write an algorithm to reverse a linked list in Python Node 1: (1→2→3→4→None) class Node():
 def __init__(self, value):
 self.value = value
 self.next = None

 def reverseLinkedList(head):
 prev = None
 curr = head
 while(curr != None):
 next_node = curr.next
 curr.next = prev
 prev = curr
 curr = next_node
 head = prev
 return head

# Create linked list
head = Node(1)
head.next = Node(2)
head.next.next = Node(3)
head.next.next.next = Node(4)

# Reversed linked list
reverseLinkedList(head)
Create a REST API with Python and Django Rest Framework that supports a simple TODO list functionality. Not applicable from rest_framework import serializers
from .models import Todo

class TodoSerializer(serializers.ModelSerializer):
 class Meta:
 model = Todo
 fields = '__all__'

# views.py

from rest_framework import viewsets
from .models import Todo
from .serializers import TodoSerializer

class TodoViewSet(viewsets.ModelViewSet):
 queryset = Todo.objects.all()
 serializer_class = TodoSerializer

# urls.py

from django.urls import path
from .views import TodoViewSet

urlpatterns = [
 path('todos/', TodoViewSet.as_view()),
]
Write a Python program to create a function that receives a list of strings and returns a new list with the strings sorted according to their length. ["Python", "is", "a", "programming", "language"] def sort_list_by_length(list_of_strings):
    return sorted(list_of_strings, key=len) 

list_of_strings = ["Python", "is", "a", "programming", "language"]
sorted_list = sort_list_by_length(list_of_strings) 

print(sorted_list)
Write a python program to check if a list contains a pair of elements that sum up to a given total.  def is_sum_possible(nums, target_sum):
    num_set = set(nums)

    for num in num_set:
        if (target_sum - num) in num_set:
            return True
    return False
Write a python program to which given a list of numbers, will calculate the mean value  def mean(nums):
    total = 0
    for num in nums:
        total += num
    # Return the mean by dividing by the number of elements 
    return total / len(nums)
Generate a program in python that converts a given sequence of strings into a list "This is a test" def convert_str_list(x):
    return x.split()

print(convert_str_list("This is a test"))
Design a sorting algorithm in Python that uses two lists. list1 = [3, 2, 5, 4, 1]
list2 = [0, 1, 1, 0, 1] def sort_two_lists(list1, list2):
    """Function to sort two lists by the order of list2"""
    zipped_lists = zip(list1, list2)
    zipped_lists = sorted(zipped_lists, key=lambda x: x[1])
    sorted_list1, sorted_list2 = zip(*zipped_lists)
    return list(sorted_list1), list(sorted_list2)
Edit a Python program to create a dictionary where the key is a string and the values is a list of strings.  my_dict = dict()

# ... existing program here

# Create a dictionary of strings
my_dict['item1'] = ['one','two','three']
my_dict['item2'] = ['four','five','six']
Create a Python program to calculate the sum of all numbers between 1 and 50 inclusive.  total = 0

for i in range(1, 51):
    total += i

print(total)
Write a Python program to create a class to represent a bank account and add two methods, deposit and withdrawal, to modify the account balance. Not applicable. class BankAccount:
    
    def __init__(self, name, balance=0.0):
        self.name = name
        self.balance = balance
        
    def deposit(self, amount):
        self.balance += amount
        return self.balance
    
    def withdraw(self, amount):
        if amount > self.balance:
            raise RuntimeError('Amount greater than available balance.')
        self.balance -= amount
        return self.balance
Write a function in Python that will take in two numbers and return their sum. num1 = 5;
num2 = 10; def sum(num1, num2):
 return num1 + num2

sum(5, 10); // returns 15
Create a python function which takes a list as an argument and returns the largest number in the list. numbers = [20, 9, 5, 10] def largest_number(numbers):
    largest = numbers[0]
    for num in numbers:
        if num > largest:
            largest = num
    return largest

largest = largest_number(numbers)
print('The largest number in the list is: ', largest)
Write a Python program to print out the factorial of a number. 7 def factorial(x):
    factorial = 1
    while x > 1:
        factorial = factorial * x
        x = x - 1
    return factorial

number = 7
result = factorial(number)
print(result)
Create a class in Python that manages a student database. It should have several methods including one to add a new student into the database, one to delete a student from the database, and one to update the student's information in the database. Not applicable import sqlite3

class StudentDatabase:
 def __init__(self, db):
  self.conn = sqlite3.connect(db)
  self.cur = self.conn.cursor()
  self.cur.execute("CREATE TABLE IF NOT EXISTS students (id INTEGER PRIMARY KEY, name TEXT, email TEXT, age INTEGER)")
  self.conn.commit()
  
 def add_student(self, name, email, age):
  self.cur.execute("INSERT INTO students VALUES (NULL, ?, ?, ?)", (name, email, age))
  self.conn.commit()
  
 def delete_student(self, id):
  self.cur.execute("DELETE FROM students WHERE id=?", (id,))
  self.conn.commit()
  
 def update_student(self, id, name, email, age):
  self.cur.execute("UPDATE students SET name=?, email=?, age=? WHERE id=?", (name, email, age, id))
  self.conn.commit()
  
 def list_students(self):
  self.cur.execute("SELECT * FROM students")
  rows = self.cur.fetchall()
  return rows
  
def main():
 db = StudentDatabase('students.db')
 db.add_student('John Doe', 'john@doe.com', 30)
 db.add_student('Adam Smith', 'adam@smith.com', 25)
 db.delete_student(2)
 db.update_student(1, 'John Smith', 'john@smith.com', 40)
 print(db.list_students())
 
if __name__ == '__main__':
 main()
Write a Python class to convert an integer to its Roman numeral equivalent.  class Solution:
    def int_to_Roman(self, num):
        val = [
            1000, 900, 500, 400,
            100, 90, 50, 40,
            10, 9, 5, 4,
            1
            ]
        syb = [
            "M", "CM", "D", "CD",
            "C", "XC", "L", "XL",
            "X", "IX", "V", "IV",
            "I"
            ]
        roman_num = ''
        i = 0
        while  num > 0:
            for _ in range(num // val[i]):
                roman_num += syb[i]
                num -= val[i]
            i += 1
        return roman_num
Insert missing keyword in this Python statement. for i in range(): for i in range(10):
Using Python, create a program that predicts the price of a new car based on the make, model, year, and feature options of the car. make: Honda
model: Odyssey
year: 2020
features: V6 engine, navigation system import pandas as pd

# Load the dataset
df = pd.read_csv('car-pricing-dataset.csv')

# Create new row of data
new_row = {
 'make': 'Honda',
 'model': 'Odyssey',
 'year': 2020,
 'features': 'V6 engine, navigation system',
}

# Vectorize data
X = pd.get_dummies(df)
X_row = pd.get_dummies(pd.DataFrame(new_row, index=[0]))

# Train a model
from sklearn.ensemble import RandomForestRegressor
model = RandomForestRegressor(n_estimators=100)
model.fit(X, df['price'])

# Predict new row of data
predicted_price = model.predict(X_row)[0]

# Print result
print(f'The estimated price of the {new_row["year"]} {new_row["make"]} {new_row["model"]} {new_row["features"]} is ${predicted_price:.2f}.')
Given a binary tree, write a Python program to determine the sum of all elements in the tree.  def sum_tree(root):
    if root is None:
        return 0

    return root.val + sum_tree(root.left) + sum_tree(root.right)
Create a Python function that takes a string and rotates the characters in the string by a specified integer. "Hello", 3 def rotateString(s, n):
    output = ""
    for char in s:
        output += chr(ord(char) + n)
    return output

result = rotateString("Hello", 3)
print(result)
Write an algorithm in Python to generate a random non-repeating integer array of size N 10 import random 

def random_array(N): 
 
    result = [] 
  
    for i in range(N): 
  
        # Stores the number in result after checking for its presence. 
        data = random.randint(1, 100) 
  
        if data not in result: 
            result.append(data) 
          
    return result 

# Driver Code 
N = 10
res = random_array(N) 
print(res)
Write a Python function that takes a list of numbers as input, sorts them in ascending order, and returns a new list that includes the number of times each number occurred in the original list. [2, 5, 2, 2, 1, 3, 5, 7, 2] def sort_and_count(numbers):
 sorted_list = sorted(numbers)
 new_list = []
 
 length = len(sorted_list)
 current_index = 0
 
 while current_index < length:
 current_number = sorted_list[current_index]
 current_count = sorted_list.count(current_number)
 new_list.append((current_number, current_count))
 
 for i in range(current_count):
 sorted_list.remove(current_number)
 
 current_index += 1
 
 return new_list
 
# Usage:
print(sort_and_count([2, 5, 2, 2, 1, 3, 5, 7, 2]))
# Output: [(1, 1), (2, 4), (3, 1), (5, 2), (7, 1)]
Implement a KNN classifier in Python.  import pandas as pd 
import numpy as np
from sklearn.neighbors import KNeighborsClassifier

#Load the data
df = pd.read_csv('dataset.csv')
#Split the labels and independent variables
x = df.iloc[:,:-1].values
y = df.iloc[:,-1].values

# Fit KNN algorithm on the dataset
knn = KNeighborsClassifier(n_neighbors=5, metric='euclidean')
knn.fit(x,y)
Create a Python script that extracts text from a webpage and stores it in a SQLite database. The script should import the following libraries: sqlite3, urllib, re, BeautifulSoup, NavigableString, and nltk. It should download the 'punkt' package from the nltk library. The script should define a function called 'parseRes2' that takes in a BeautifulSoup object, a title, a URL, a cursor object, an author, a date, and a collection title. The function should extract text from the webpage and store it in the SQLite database. The script should define a main function that connects to the database, creates a table called 'texts', and deletes any existing entries for the author 'Johannes de Plano Carpini'. The main function should then call the 'parseRes2' function to extract text from a specific webpage and store it in the database.  import sqlite3
import urllib
import re
from urllib.request import urlopen
from bs4 import BeautifulSoup, NavigableString

import nltk

nltk.download('punkt')

from nltk import sent_tokenize

def parseRes2(soup, title, url, cur, author, date, collectiontitle):
    chapter = 0
    sen = ""
    num = 1
    [e.extract() for e in soup.find_all('br')]
    [e.extract() for e in soup.find_all('table')]
    [e.extract() for e in soup.find_all('span')]
    [e.extract() for e in soup.find_all('a')]
    for x in soup.find_all():
        if len(x.text) == 0:
            x.extract()
    getp = soup.find_all('p')
    #print(getp)
    i = 0
    for p in getp:
        # make sure it's not a paragraph without the main text
        try:
            if p['class'][0].lower() in ['border', 'pagehead', 'shortborder', 'smallboarder', 'margin',
                                         'internal_navigation']:  # these are not part of the main t
                continue
        except:
            pass
        if p.b:
            chapter = p.b.text
            chapter = chapter.strip()
        else:
            sen = p.text
            sen = sen.strip()
            if sen != '':
                num = 0
                for s in sent_tokenize(sen):
                    sentn = s.strip()
                    num += 1
                    cur.execute("INSERT INTO texts VALUES (?,?,?,?,?,?,?, ?, ?, ?, ?)",
                                (None, collectiontitle, title, 'Latin', author, date, chapter,
                                 num, sentn, url, 'prose'))


def main():
    # get proper URLs
    siteURL = 'http://www.thelatinlibrary.com'
    biggsURL = 'http://www.thelatinlibrary.com/johannes.html'
    biggsOPEN = urllib.request.urlopen(biggsURL)
    biggsSOUP = BeautifulSoup(biggsOPEN, 'html5lib')
    textsURL = []

    title = 'Johannes de Plano Carpini'

    author = title
    collectiontitle = 'JOHANNES DE PLANO CARPINI LIBELLUS HISTORICUS IOANNIS DE PLANO CARPINI'
    date = '1246 A.D.'

    with sqlite3.connect('texts.db') as db:
        c = db.cursor()
        c.execute(
        'CREATE TABLE IF NOT EXISTS texts (id INTEGER PRIMARY KEY, title TEXT, book TEXT,'
        ' language TEXT, author TEXT, date TEXT, chapter TEXT, verse TEXT, passage TEXT,'
        ' link TEXT, documentType TEXT)')
        c.execute("DELETE FROM texts WHERE author = 'Johannes de Plano Carpini'")
        parseRes2(biggsSOUP, title, biggsURL, c, author, date, collectiontitle)


if __name__ == '__main__':
    main()

Optimize the following Python program as much as possible def func(string): 
    list_out = [] 
    for s in string: 
        list_out.append(s.upper()) 
    return list_out 
  
list_out = func("hello") def func(string): 
    return [s.upper() for s in string]

list_out = func("hello")
Create a Python program to generate the n-th item in the Fibonacci sequence. 5 def Fibonacci(n): 
    if n<0: 
        print("Incorrect input") 
    # First Fibonacci number is 0 
    elif n==1: 
        return 0
    # Second Fibonacci number is 1 
    elif n==2: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2) 

# Driver Code 
n = 5
print(Fibonacci(n))
Design a Python Program to convert a given DNA sequence into its RNA equivalent. DNA = "ATCGATCG" def convert_to_rna(DNA):
    rna = ""
    # iterate through each character
    for char in DNA:
        # check character
        if char == "A":
            rna += "U"
        elif char == "T":
            rna += "A"
        elif char == "C":
            rna += "G"
        elif char == "G":
            rna += "C"
    return rna
Design a Python program to sort the given list using insertion sort. [3,8,15,2,6,10] def insertionSort(arr): 
    for i in range(1, len(arr)): 
  
        j = i-1
        key = arr[i] 
  
        while j >=0 and key < arr[j] : 
                arr[j+1] = arr[j] 
                j -= 1
        arr[j+1] = key 
  
arr = [3,8,15,2,6,10]
insertionSort(arr) 
print ("Sorted array is:") 
for i in range(len(arr)): 
    print ("%d" %arr[i])
How can a programmer check the length of a string in python?  In Python, the length of a string can be checked by using the len() function. For example, the length of the string "Hello World" can be checked by using the following code:

my_string = "Hello World"
print(len(my_string))
Design an algorithm using Python to detect whether two given strings are anagrams or not. s1="listen"
s2="silent" def is_anagram(s1, s2):
    # Strip the strings of white space and convert to lower case
    s1 = s1.replace(" ", "").lower()
    s2 = s2.replace(" ", "").lower()

    if len(s1) != len(s2):
        return False

    # Count the number of each character in the string
    count = {}
    for char in s1:
        if char not in count:
            count[char] = 1
        else:
            count[char] += 1

    # Check if the characters present in s2 too
    for char in s2:
        if char not in count:
            return False
        if count[char] == 0:
            return False
        count[char] -= 1

    return True

s1="listen"
s2="silent"

print(is_anagram(s1, s2))
Write a Python program to search for a given element in a list.  def search_element(element, list_):
    for i in range(len(list_)):
        if element == list_[i]:
            return i
    return -1
Write a code in Python for computing the maximum difference between any two elements in an array. Array: [2, 9, 4, 1, 5] def max_difference(arr): 
  
    max_diff = 0
    for i in range(0, len(arr)): 
        for j in range(i+1, len(arr)): 
            diff = arr[j]-arr[i] 
            if(diff > max_diff): 
                max_diff = diff 
  
    return max_diff 
  
array = [2, 9, 4, 1, 5]
  
print("Maximum difference =", max_difference(array))
Edit the following python code to prompt the user to enter the value of radius to calculate the area of a circle.  # Calculate area of a circle

Pi = 3.14

# Get radius from user
radius = float(input("Please enter the radius of the circle: "))

# Calculate the circle area
area = Pi*radius**2

# Print the area
print("The area of the circle is:", area)
Write a Python program to convert all strings in a list to uppercase.  def to_uppercase(list):
  return [item.upper() for item in list]
Write a Python program to count the number of occurrences of each word in a given string.  def count_words(string):
    lst = string.split()
    count_dict = {i: lst.count(i) for i in lst}
    return count_dict

string = "Writing is one of the most difficult activities in the world"

word_count = count_words(string)

print(word_count)
Create a Python program that takes in a list of strings and returns a dictionary with the count of each word. list_of_strings = ['My', 'name', 'is', 'John', 'Doe', 'My', 'name', 'is', 'John'] def count_words(list_of_strings):
    count_dict = dict()
    for word in list_of_strings:
        if word in count_dict:
            count_dict[word] += 1
        else:
            count_dict[word] = 1

    return count_dict

list_of_strings = ['My', 'name', 'is', 'John', 'Doe', 'My', 'name', 'is', 'John']

result = count_words(list_of_strings)
print(result)
Create a post request in python with the given parameters. API: https://api.endpoint.com
Headers: {'Authorization': 'Bearer abcdefg', 'Content-Type': 'application/json'}
Parameters: {'name': 'John', 'age': 25} import requests

url = 'https://api.endpoint.com'
headers = {'Authorization': 'Bearer abcdefg', 'Content-Type': 'application/json'}
parameters = {'name': 'John', 'age': 25}

response = requests.post(url, headers=headers, json=parameters)
Design a class using Python that represents a bank account with a balance.  class BankAccount:
 
    def __init__(self, balance=0.0):
        self.balance = balance
 
    def deposit(self, amount):
        self.balance += amount
        return self.balance
 
    def withdraw(self, amount):
        self.balance -= amount
        return self.balance
Create a Python script that takes an array of numbers and finds the three longest possible increasing subsequences. [2, 4, 3, 5, 1, 7, 6] def find_longest_increasing_subsequences(arr): 
    # Array to store ending 
    # index of longest increasing subsequences 
    seq_lengths = [1 for i in range(len(arr))] 
  
    # For every element store its index as a starting index 
    # of increasing subsequences 
    starting_seq_idx = [-1 for i in range(len(arr))] 
  
    max_length = 1
    for i in range(1, len(arr)): 
        for j in range(i):  
            if arr[i] > arr[j] and seq_lengths[i] < seq_lengths[j] + 1: 
                seq_lengths[i] = seq_lengths[j] + 1
                starting_seq_idx[i] = j 
  
                if max_length < seq_lengths[i]: 
                    max_length = seq_lengths[i] 
  
    longest_incr_seqs = [] 
    # Backtrack starting index to get actual sequence 
    # and add to result 
    while max_length > 0: 
  
        # An empty result list to store 
        # longest decreasing subsequences 
        max_seq = [] 
  
        for i in range(len(arr)): 
            if seq_lengths[i] == max_length: 
                # Follow the values from back to front 
                temp = i 
                while temp >= 0: 
                    max_seq.append(arr[temp]) 
                    temp = starting_seq_idx[temp] 
  
                longest_incr_seqs.append(max_seq[::-1]) 
                max_length -= 1
    return longest_incr_seqs
  
arr = [2, 4, 3, 5, 1, 7, 6] 

result = find_longest_increasing_subsequences(arr)
print(result)
Rewrite the following bash script to Python. #!/bin/bash
echo "Enter a number: "
read num
fact=1
for((i=num;i>=1;i--))
do 
    fact=$((fact * i))
done
echo "Factorial is $fact" print("Enter a number: ")
num = int(input())

fact = 1
for i in range(num, 0, -1):
    fact *= i

print("Factorial is", fact)
Create a web crawler in Python that starts from a website and looks for other links in the page then scrapes the page content. Not applicable import requests
from bs4 import BeautifulSoup
import re

def crawl(url):
 visited = set()
 queue = [url] 
 
 while queue:
 curr = queue.pop(0)
 visited.add(curr) 
 response = requests.get(curr)
 
 if response.ok:
 soup = BeautifulSoup(response.text, 'html.parser')

# scrape the page here 

# find all the links
 links = soup.find_all('a', href=re.compile('^http')) 
 
 for link in links:
 if link['href'] not in visited:
 queue.append(link['href'])
Using a neural network, generate Python code for a sentiment analysis application. A CSV file containing sentiment data with each sentence having a label (positive, neutral, or negative) import pandas as pd
import numpy as np
import keras

# Read in data 
data = pd.read_csv('sentiment.csv')

# Preprocessing: 
# Convert sentences to vectors
tokenizer = keras.preprocessing.text.Tokenizer(num_words = 1000)
tokenizer.fit_on_texts(data['sentence']) 
X = tokenizer.texts_to_matrix(data['sentence'], mode='tfidf')

# One-hot encoding of labels 
labels = data['label']
num_classes = np.max(labels) + 1 
y = keras.utils.to_categorical(labels, num_classes) 

# Building the model 
model = keras.models.Sequential()
model.add(keras.layers.InputLayer(input_shape = X.shape[1:])) 
model.add(keras.layers.Dense(units = 50, activation='relu')) 
model.add(keras.layers.Dense(units = num_classes, activation='softmax'))

# Compiling and training the model
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy']) 
model.fit(X, y, epochs=15, batch_size=32, validation_split=0.2 ) 

# Saving the model
model.save('sentiment_analysis.h5')
Write a function in Python that takes in a string and returns the number of uppercase and lowercase letters. "This Is A Test String" def count_uppercase_lowercase(s):
  lowercase_count = 0
  uppercase_count = 0
  for c in s:
    if c.isupper():
      uppercase_count+=1
    elif c.islower():
      lowercase_count+=1
  return uppercase_count, lowercase_count

uppercase_count, lowercase_count =  count_uppercase_lowercase("This Is A Test String")
print("Number of Uppercase letters : ", uppercase_count)
print("Number of Lowercase letters : ", lowercase_count)
Generate a new Python program to be able to classify a list of emails.  def classify_email(email_list): 
    classified_list = []
    for email in email_list: 
        if '@' in email: 
            classified_list.append('Valid') 
        else: 
            classified_list.append('Invalid') 
    return classified_list
Create a Python program that takes a list of strings as input, removes any duplicate strings, and prints out the resulting unique list. ["a", "b", "c", "d", "a", "e"] input_list = ["a", "b", "c", "d", "a", "e"]
unique_list = set(input_list)

print(unique_list)
# Output: {'a', 'c', 'b', 'e', 'd'}
Explain the purpose of a list in Python  A list in Python is a data structure used to store a collection of elements, each of which may be a different data type. They are like arrays in other languages, but offer different and more powerful features, such as the ability to have uneven lengths and different data types in the same list. Lists are mutable, meaning that elements can be added, removed or changed after creation. They also support various operations such as indexing, slicing, in-place list modification, as well as various methods for searching and sorting.
Create a Python function that takes two lists, compare them, and return True if both lists are identical and False if they differ. list1 = [1, 2, 3]
list2 = [1, 2, 3] def compare_lists(list1, list2):
    if len(list1) != len(list2):
        return False

    for i in range(len(list1)):
        if list1[i] != list2[i]:
            return False

    return True
Generate code to make a chatbot for FAQs (Frequently Asked Questions) using the RASA platform. Not applicable # coding: utf-8
#
# FILE: rasa_chatbot.py
#
# AUTHOR: Rohan Muthukumar
# DATE CREATED: 06/10/2020
# 
# DESCRIPTION: This file contains code for building an FAQ chatbot 
# using the RASA NLU platform.
#
# USAGE: python rasa_chatbot.py
#
#

from rasa_nlu.training_data import load_data
from rasa_nlu.model import Trainer
from rasa_nlu import config

# Loading training data
training_data = load_data("faq.json")

# Configuring pipelines for model 
trainer = Trainer(config.load("config.yml"))

# Training the model 
interpreter = trainer.train(training_data) 

# Prints output of interpreter 
print(interpreter.parse('what can i do on this chatbot?'))
Design a Python program to count how many words appear in a given sentence. Sentence: I am writing this code to practice def word_count(sentence): 
    count = 0
    words = sentence.split() 
    for word in words: 
        count += 1
    return count
  
sentence = "I am writing this code to practice"
count = word_count(sentence)
print("Number of words present inGiven sentence:")  
print(count)
Write a Python program to read a list of numbers from the user, and then output the average of the numbers.  numbers = []

# get numbers from the user
while True:
 user_input = input('Enter a number (or press enter to quit): ')
 if user_input == '':
 break
 numbers.append(int(user_input))

#calculate the average
average = sum(numbers) / len(numbers)

print(f'The average is {average}')
Create a Python function to calculate the factorial of an input number.  def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)
Summarize the article using Python. Article Text: Einstein once said that “imagination is more important than knowledge.” According to his famous quote, in order to truly move forward and make an impact on the world, one should use creativity and inventiveness to push boundaries. def summarize_article(text):
    sentence_list = text.split(". ")
    summary = []
    for sentence in sentence_list:
        if "imagination" in sentence or "inventiveness" in sentence:
            summary.append(sentence)
    return '. '.join(summary) + '.'

print(summarize_article(text))

# Output
"Einstein once said that “imagination is more important than knowledge”. According to his famous quote, in order to truly move forward and make an impact on the world, one should use creativity and inventiveness to push boundaries."
Create a Python class to represent a circle having radius, color and area as its data members.  class Circle:
    def __init__(self, radius, color):
        self.radius = radius
        self.color = color
        self.area = 3.14 * (radius**2)

    def get_radius(self):
        return self.radius
    
    def get_color(self):
        return self.color
    
    def get_area(self):
        return self.area

if __name__ == '__main__':
    c = Circle(4, 'blue')
    print("Radius of circle:", c.get_radius())
    print("Color of circle:", c.get_color())
    print("Area of circle:", c.get_area())
Create a Machine Learning model in Python to predict wine quality from attributes such as pH, Chlorides, Free sulfur dioxide, Alcohol etc. Not applicable import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor

# Read in the data
df = pd.read_csv('winequality.csv')

# Pick features and target
X = df.drop('quality', axis=1).values
y = df['quality'].values

# Split into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale the data
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Create and train our model
model = RandomForestRegressor()
model.fit(X_train, y_train)

# Make predictions
predictions = model.predict(X_test)

# Measure accuracy
from sklearn.metrics import mean_squared_error
error = mean_squared_error(y_test, predictions)
print('Mean squared error: ', error)
Write a Python program to classify the given data using a neural network 6 samples, with each sample containing 10 continuous real-valued features. import numpy as np
import tensorflow as tf

# define parameters
num_features = 10
num_classes = 2 
num_samples = 6

# create placeholder for input data
input_x = tf.placeholder(tf.float32, shape=[num_samples, num_features])

# define weights
weights = {
    'h1': tf.Variable(tf.random_normal([num_features, 2])),
    'out': tf.Variable(tf.random_normal([2, num_classes]))
}

# define biases
biases = {
    'b1': tf.Variable(tf.random_normal([2])),
    'out': tf.Variable(tf.random_normal([num_classes]))
}

# define layers
layer_1 = tf.add(tf.matmul(input_x, weights['h1']), biases['b1'])
output_layer = tf.matmul(layer_1, weights['out']) + biases['out']

# define loss and optimizer
loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=output_layer, labels=input_x))
optimizer = tf.train.AdamOptimizer(learning_rate=0.001).minimize(loss)

# create session and initialize variables
with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())

    # fetch the input data
    data_x = np.array(...)

    # train the model
    for i in range(1000):
        sess.run(optimizer, feed_dict={input_x: data_x})

    # predict the classes for the input data
    classification_output = sess.run(output_layer, feed_dict={input_x: data_x})
Optimize a given Python program to calculate the Fibonacci series. Not applicable def Fibonacci(n):
 if n<0:
  print("Incorrect input")
 elif n==1:
  return 0
 elif n==2:
  return 1
 else:
  a = [0] * (n+1)
  a[0] = 0
  a[1] = 1
 
  for i in range(2, n+1):
   a[i] = a[i-1] + a[i-2]
  return a[n]
Can you create a Python script to extract email addresses from a raw text? "John Doe john@example.com, Jane Doe jane@example.com, Kevin Smith kevin@example.com" import re

text = "John Doe john@example.com, Jane Doe jane@example.com, Kevin Smith kevin@example.com"

emails = re.findall(r"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+",
                    text)

print(emails) # ['john@example.com', 'jane@example.com', 'kevin@example.com']
Create a Python script that generates the Fibonacci sequence.  def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)

for n in range(10):
    print(fibonacci(n))
Create a python script to generate a tree representation for a given array of numbers. [-3, 5, 1, 8, 2] class TreeNode: 
    def __init__(self, data): 
        self.data = data
        self.left = None
        self.right = None

def generate_tree(arr): 
    root = TreeNode(arr[0])

    for i in range(1, len(arr)): 
        curr = root 
        while True: 
            if arr[i] < curr.data: 
                if curr.left is None: 
                    curr.left = TreeNode(arr[i]) 
                    break
                else: 
                    curr = curr.left 
            elif arr[i] > curr.data: 
                if curr.right is None: 
                    curr.right = TreeNode(arr[i]) 
                    break
                else: 
                    curr = curr.right 
    return root

result = generate_tree([-3, 5, 1, 8, 2])
Combine the two Python lists into a single list. list1 = [1, 2, 3]
list2 = [4, 5, 6] combined_list = list1 + list2
print(combined_list)
Write a Python script for splitting a given string into a list of words. my_sentence = "This is my sentence" sentence_words = my_sentence.split(" ")
print(sentence_words)
Use natural language processing to create a sentiment analysis model in Python using the NLTK library. Not applicable import nltk
from nltk.tokenize import word_tokenize
from nltk.sentiment.vader import SentimentIntensityAnalyzer

# Initializing the sentiment analyser
sia = SentimentIntensityAnalyzer()

# Defining the sentiment analysis function
def sentiment_analyzer(text):
    score = sia.polarity_scores(text)
    neg = score['neg']
    pos = score['pos']
    if pos > neg:
        print('Positive sentiment')
    elif pos < neg:
        print('Negative sentiment')
    else:
        print('Neutral sentiment')

# Testing the sentiment analysis function
sentiment_analyzer("That movie was great!")
Develop an algorithm to sort a list of numbers from low to high inPython. [5, 7, 1, 6, 10, 4, 2] def sort_numbers(nums):
    for i in range(len(nums)):
        for j in range(i+1, len(nums)):
            if nums[i] > nums[j]:
                temp = nums[j]
                nums[j] = nums[i]
                nums[i] = temp
    return nums

print(sort_numbers([5, 7, 1, 6, 10, 4, 2]))
Create a function in Python to remove the given element from any list if it is present. Not applicable def remove_item(lst, item):
    try:
        lst.remove(item)
        return lst

    except ValueError:
        return lst
Create a basic Python script for categorizing incoming emails. This script should read incoming emails from an IMAP server, categorize them into spam and not spam, and save them in different folders. Not applicable import imaplib
import email
import re

# connect to the IMAP server
imap = imaplib.IMAP4_SSL('imap.gmail.com')

# login
imap.login('example@gmail.com', 'password')

imap.select('inbox')

# fetch messages
status, data = imap.search(None, '(UNSEEN)')

# loop through messages
for msg_id in data[0].split():
    typ, message_parts = imap.fetch(msg_id, '(RFC822)')

    # get the email message
    raw_email = message_parts[0][1]

    email_message = email.message_from_bytes(raw_email)

    # extract the from and subject of the email message
    from_data = re.search(r'(?<=From:)(.*)', str(email_message))
    from_ = from_data.group().strip()

    subject_data = re.search(r'(?<=Subject:)(.*)', str(email_message))
    subject = subject_data.group().strip()

    # classify email if it is spam or not
    if 'spam' in subject.lower():
        imap.copy(msg_id, 'spam')
    else:
        imap.copy(msg_id, 'not_spam')

imap.close()
imap.logout()
Build a basic web server using Python. Not applicable import http.server
import socketserver

PORT = 8080

Handler = http.server.SimpleHTTPRequestHandler

with socketserver.TCPServer(("", PORT), Handler) as httpd:
    print("serving at port", PORT)
    httpd.serve_forever()
Create a function in Python to count the frequency of each unique word in a string. "This is a sentence of words which contains words repeated multiple times" def count_words(sentence):
    words = sentence.split()
    freq_dict = {}
    for word in words:
        if word in freq_dict:
            freq_dict[word] += 1
        else:
            freq_dict[word] = 1
    return freq_dict

print(count_words("This is a sentence of words which contains words repeated multiple times"))
Design a REST API in Python which will store and retrieve customer messages.  from flask import Flask, jsonify, request

app = Flask(__name__)

messages = []  # list to store customer messages

@app.route('/messages', methods=['POST', 'GET'])
def manage_messages():
    '''API endpoint to store and retrieve customer messages'''
    if request.method == 'POST':  # storing customer message
        customer_message = request.get_json()
        messages.append(customer_message)
        return jsonify(message='Message successfully stored'), 200

    elif request.method == 'GET':  # retrieving customer messages
        return jsonify(messages=messages), 200
The given code is a Python script that converts National Water Model output data to GSSHA formatted input. To use this script, you need to create an instance of the NWMtoGSSHA class and provide the necessary input parameters such as the path to the GSSHA project folder, the name of the GSSHA elevation grid file, the path to the input folder for the LSM files, and the search pattern for LSM files. Once you have created an instance of the class, you can use its methods to convert LSM data to GSSHA format. For example, you can use the `lsm_precip_to_gssha_precip_gage` method to convert LSM precipitation data to GSSHA precipitation gage data. You can also use the `lsm_data_to_arc_ascii` method to convert LSM data to GSSHA arc ascii format.  # -*- coding: utf-8 -*-
#
#  nwm_to_gssha.py
#  GSSHApy
#
#  Created by Alan D Snow, 2016.
#  License BSD 3-Clause

import logging
from datetime import timedelta
from os import mkdir, path, remove, rename
import xarray as xr

from .grid_to_gssha import GRIDtoGSSHA

log = logging.getLogger(__name__)


# ------------------------------------------------------------------------------
# MAIN CLASS
# ------------------------------------------------------------------------------
class NWMtoGSSHA(GRIDtoGSSHA):
    """This class converts the National Water Model output data to GSSHA formatted input.
    This class inherits from class:`GRIDtoGSSHA`.

    Attributes:
        gssha_project_folder(:obj:`str`): Path to the GSSHA project folder
        gssha_project_file_name(:obj:`str`): Name of the GSSHA elevation grid file.
        lsm_input_folder_path(:obj:`str`): Path to the input folder for the LSM files.
        lsm_search_card(:obj:`str`): Glob search pattern for LSM files. Ex. "*.grib2".
        lsm_lat_var(Optional[:obj:`str`]): Name of the latitude variable in the LSM netCDF files. Defaults to 'lat'.
        lsm_lon_var(Optional[:obj:`str`]): Name of the longitude variable in the LSM netCDF files. Defaults to 'lon'.
        lsm_time_var(Optional[:obj:`str`]): Name of the time variable in the LSM netCDF files. Defaults to 'time'.
        lsm_lat_dim(Optional[:obj:`str`]): Name of the latitude dimension in the LSM netCDF files. Defaults to 'lat'.
        lsm_lon_dim(Optional[:obj:`str`]): Name of the longitude dimension in the LSM netCDF files. Defaults to 'lon'.
        lsm_time_dim(Optional[:obj:`str`]): Name of the time dimension in the LSM netCDF files. Defaults to 'time'.
        output_timezone(Optional[:obj:`tzinfo`]): This is the timezone to output the dates for the data. Default is he GSSHA model timezone. This option does NOT currently work for NetCDF output.

    Example::


        from datetime import datetime
        from gsshapy.grid import NWMtoGSSHA

        n2g = NWMtoGSSHA(gssha_project_folder='E:\\GSSHA',
                         gssha_project_file_name='gssha.prj',
                         lsm_input_folder_path='E:\\GSSHA\\nwm-data',
                         lsm_search_card="*.grib")

        # example rain gage
        out_gage_file = 'E:\\GSSHA\\nwm_rain1.gag'
        n2g.lsm_precip_to_gssha_precip_gage(out_gage_file,
                                            lsm_data_var="RAINRATE",
                                            precip_type="RADAR")

        # example data var map array
        # WARNING: This is not complete
        data_var_map_array = [
            ['precipitation_rate', 'RAINRATE'],
            ['pressure', 'PSFC'],
            ['relative_humidity', ['Q2D','T2D', 'PSFC']],
            ['wind_speed', ['U2D', 'V2D']],
            ['direct_radiation', 'SWDOWN'],  # ???
            ['diffusive_radiation', 'SWDOWN'],  # ???
            ['temperature', 'T2D'],
            ['cloud_cover', '????'],
        ]   
        e2g.lsm_data_to_arc_ascii(data_var_map_array)

    """
    def __init__(self,
                 gssha_project_folder,
                 gssha_project_file_name,
                 lsm_input_folder_path,
                 lsm_search_card="*.nc",
                 lsm_lat_var='y',
                 lsm_lon_var='x',
                 lsm_time_var='time',
                 lsm_lat_dim='y',
                 lsm_lon_dim='x',
                 lsm_time_dim='time',
                 output_timezone=None,
                 ):
        """
        Initializer function for the NWMtoGSSHA class
        """
        super(NWMtoGSSHA, self).__init__(gssha_project_folder,
                                         gssha_project_file_name,
                                         lsm_input_folder_path,
                                         lsm_search_card,
                                         lsm_lat_var,
                                         lsm_lon_var,
                                         lsm_time_var,
                                         lsm_lat_dim,
                                         lsm_lon_dim,
                                         lsm_time_dim,
                                         output_timezone)

    @property
    def xd(self):
        """get xarray dataset file handle to LSM files"""
        if self._xd is None:
            path_to_lsm_files = path.join(self.lsm_input_folder_path,
                                          self.lsm_search_card)
            self._xd = super(NWMtoGSSHA, self).xd
            self._xd.lsm.coords_projected = True
        return self._xd

    def _load_converted_gssha_data_from_lsm(self, gssha_var, lsm_var, load_type):
        """
        This function loads data from LSM and converts to GSSHA format
        """
        super(NWMtoGSSHA, self).\
            _load_converted_gssha_data_from_lsm(gssha_var, lsm_var, load_type)
        self.data.lsm.coords_projected = True

Create a program in Python that generates a random password given the length of the password and a set of characters. Length = 8
Characters = numbers, lowercase, uppercase import random

def generate_password(length, characters):
    password = ""
    for _ in range(length):
        character_index = random.randint(0, len(characters) - 1)
        password += characters[character_index]

    return password

characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
password = generate_password(8, characters)
Create a Python program to print the multiplication table of the given number n.  def print_table(n):
 for i in range(1, n+1):
 for j in range(1, n+1):
 print(f'{i} x {j} = {i * j}')
 print()
Write a Python script to fetch the sale price of a product from an online store. Website = www.productstore.com
ProductID = 12345 import requests
url = f'https://www.productstore.com/ProductID={ProductID}&format=json'

resp = requests.get(url)
data = resp.json()
sales_price = data['salesPrice']
print('The sale price of the product is {}'.format(sales_price))
Develop a Python program that prints out the nth Fibonacci number.  def fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print("Incorrect input") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
        return b 

print(fibonacci(n))
Create a Python program to detect if a 2-d array has an increasing line along a diagonal. [[1, 2, 3], [4, 5, 6], [7, 8, 9]] def increasing_diagonal(grid):
 # Get the number of rows and columns in the grid
 num_rows = len(grid)
 num_cols = len(grid[0])

 # Loop through the elements of the array
 for i in range(num_rows):
  for j in range(num_cols):
   # Check that the adjacent elements in the diagonal line
   # are increasing
   if i + 1 < num_rows and j + 1 < num_cols:
    if grid[i][j] >= grid[i + 1][j + 1]:
     return False
 
 return True
 
# Test array
grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
 
# Print solution
print(increasing_diagonal(grid))
Create a Python program to print out the version of the currently installed OS.  import platform

print(platform.platform())
Convert the given string from Upper Camel Case notation to lower snake case notation in Python. UpperCamelCase lower_snake_case = ''.join(w.lower() for w in UpperCamelCase.split()).replace('', '_')[1:]
How can you improve the following python function to make it run more quickly? def find_target(numbers, target):
    for number in numbers:
        if number == target:
            return True
    return False def find_target(numbers, target):
    """This function returns True if the target is present in the given list of numbers."""
    # Use set to improve the lookup performance
    num_set = set(numbers)
    if target in num_set:
        return True
    return False
Write a Python program to optimize the algorithm of finding the maximum value in a list of numbers.  def find_max_value(lst):
    max_value = lst[0]
    for item in lst:
        # loop through list and compare each item with max_value 
        if item > max_value:
            max_value = item
    return max_value
 
lst = [1, -5, 8, 10, -2] 
  
# call the function
maximum_value = find_max_value(lst)
  
print("The maximum value in the list is", maximum_value)
# Output: The maximum value in the list is 10
Write a Python program to parse a JSON object. data = {
    "name": "John Doe",
    "age": 45,
    "city": "New York"
} import json

data = {
    "name": "John Doe",
    "age": 45,
    "city": "New York"
}

data_parsed = json.loads(json.dumps(data))

name = data_parsed['name']
age = data_parsed['age']
city = data_parsed['city']
Develop a Python program to insert a given element into a specific position in a list 2, [1, 3, 4] # Create a function
def insert_element(el, lst):
    # Insert the element into the specific position
    lst.insert(2, el)
    return lst

# Test the function
print(insert_element(2, [1,3,4]))

# Output
[1, 3, 2, 4]
Write a python program to check if two sequences are identical. [1,2,3], [1,2,3] def check_seq(seq1, seq2):
    if len (seq1) != len (seq2): 
        return False
    else: 
        for i in range(len (seq1)):
            if seq1[i] != seq2[i]:
                return False
    return True
Create a REST API endpoint in Python Flask for registering a new user. Example user parameters: {name: "Alice", email: "alice@example.com", password: "123456"} from flask import Flask, request
from flask_sqlalchemy import SQLAlchemy

app = Flask(name)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'
db = SQLAlchemy(app)

class User(db.Model):
 id = db.Column(db.Integer, primary_key=True)
 name = db.Column(db.String(50))
 email = db.Column(db.String(50), unique=True)
 password = db.Column(db.String(50))

db.create_all()

@app.route('/register', methods=['POST'])
def register_user():
 user = User(name=request.json['name'],
 email=request.json['email'],
 password=request.json['password'])
 db.session.add(user)
 db.session.commit()
 return {'message': 'User created'}

if name == 'main':
 app.run(debug=True)
Write a Python program to create a custom discussion forum with a given list of topics. topics=['Cars','Computers','Home Automation'] # Define a custom class for the forum
class Forum:
    # Initialize the class with a title and a list of topics  
    def __init__(self, title, topics):
        self.title = title
        self.topics = topics

    # Define a method to print the list of topics
    def display_topics(self):
        for topic in self.topics:
            print(topic)

# Create a new Forum object 
myforum = Forum("Discussions Forum", topics)

# Print the list of topics 
myforum.display_topics() # Output: Cars, Computers, Home Automation
Modify a python program so that it can sort the list of numbers in ascending order. numbers = [3, 5, 9, 1, 2] numbers = [3, 5, 9, 1, 2] 

numbers.sort() 

print(numbers)
Write a Python program to filter a list of strings according to a given pattern. Pattern: asterisks
Strings: ["daisy", "sunflower", "asterisk", "cat", "monkey"] def filter_strings(pattern, strings):
    filtered_strings = [x for x in strings if pattern in x]
    return filtered_strings

result = filter_strings('asterisks', ["daisy", "sunflower", "asterisk", "cat", "monkey"])
print(result)
Create a class in Python 3 that represents a process with a start() and stop() function.  class Process:
    def start(self):
        # code to start the process 
        pass

    def stop(self):
        # code to stop the process 
        pass
Create a class for a student in Python  class Student:
    def __init__(self, name, age, course):
        self.name = name
        self.age = age
        self.course = course
    
    def getCourse(self):
        return self.course
Create a text classifier in Python using Naive Bayes.  from sklearn.naive_bayes import MultinomialNB 

clf = MultinomialNB(alpha=1.0)
clf.fit(X_train, y_train)
Create a web API in Python Flask that returns the factorial of the provided number. 5 from flask import Flask, request

app = Flask(__name__)

@app.route('/factorial', methods=['POST'])
def factorial():
 num = request.json['num']
 result = 1
 for i in range(2, num + 1):
  result *= i
 return { 'factorial': result }

if __name__ == '__main__':
 app.run(debug=True)
Write a Python function to convert Fahrenheit temperatures to Celcius.  def fahrenheit_to_celcius(fahrenheit):
    celcius = (fahrenheit - 32) * (5/9)
    return celcius
Create a Python program for solving the 8-puzzle problem using a* search algorithm. 1 2 3 
4 5 6 
7 8 0 """
Create a Python program for solving the 8-puzzle problem using a* search algorithm. 
"""

from collections import deque
from collections import namedtuple

# Create a namedtuple to store the puzzle information
Puzzle = namedtuple('Puzzle', ['board', 'steps', 'cost'])

# Find the index of 0
def find_index(board):
    return board.index(0)

# Move the 0 to the left
def move_left(board, blank_idx):
    left = blank_idx - 1
    if left < 0:
        return None
    else:
        new_board = list(board)
        new_board[blank_idx], new_board[left] = new_board[left], new_board[blank_idx]
        return new_board

# Move the 0 to the right
def move_right(board, blank_idx):
    right = blank_idx + 1
    if right > 8:
        return None
    else:
        new_board = list(board)
        new_board[blank_idx], new_board[right] = new_board[right], new_board[blank_idx]
        return new_board

# Move the 0 up
def move_up(board, blank_idx):
    up = blank_idx - 3
    if up < 0:
        return None
    else:
        new_board = list(board)
        new_board[blank_idx], new_board[up] = new_board[up], new_board[blank_idx]
        return new_board

# Move the 0 down
def move_down(board, blank_idx):
    down = blank_idx + 3
    if down > 8:
        return None
    else:
        new_board = list(board)
        new_board[blank_idx], new_board[down] = new_board[down], new_board[blank_idx]
        return new_board

# Calculate the total cost of the puzzle
def cost_function(puzzle):
    return puzzle.steps +  sum([abs(b % 3 - t % 3) + abs(b//3 - t//3)
            for b, t in ((puzzle.board.index(i), puzzle.board.index(goal.board[i]))
            for i in range(1, 9))])

# Perform the A* search
def a_star_search(start, goal):
    explored = set()
    # Start with the queue of puzzles
    queue = deque([Puzzle(start, 0, 0)])
    
    # Keep searching until the queue is empty or the goal is found
    while queue:
        # Pop from the queue
        puzzle = queue.popleft()
        # Find the blank tile
        blank_idx = find_index(puzzle.board)
        explored.add(tuple(puzzle.board))
        
        # Move 0 to the left
        new_board = move_left(puzzle.board, blank_idx)
        if new_board and tuple(new_board) not in explored:
            if new_board == goal.board:
                return Puzzle(new_board, puzzle.steps + 1, cost_function(Puzzle(new_board, puzzle.steps + 1, 0)))
            queue.append(Puzzle(new_board, puzzle.steps + 1, cost_function(Puzzle(new_board, puzzle.steps + 1, 0))))
        
        # Move 0 to the right
        new_board = move_right(puzzle.board, blank_idx)
        if new_board and tuple(new_board) not in explored:
            if new_board == goal.board:
                return Puzzle(new_board, puzzle.steps + 1, cost_function(Puzzle(new_board, puzzle.steps + 1, 0)))
            queue.append(Puzzle(new_board, puzzle.steps + 1, cost_function(Puzzle(new_board, puzzle.steps + 1, 0))))
        
        # Move 0 up
        new_board = move_up(puzzle.board, blank_idx)
        if new_board and tuple(new_board) not in explored:
            if new_board == goal.board:
                return Puzzle(new_board, puzzle.steps + 1, cost_function(Puzzle(new_board, puzzle.steps + 1, 0)))
            queue.append(Puzzle(new_board, puzzle.steps + 1, cost_function(Puzzle(new_board, puzzle.steps + 1, 0))))
        
        # Move 0 down
        new_board = move_down(puzzle.board, blank_idx)
        if new_board and tuple(new_board) not in explored:
            if new_board == goal.board:
                return Puzzle(new_board, puzzle.steps + 1, cost_function(Puzzle(new_board, puzzle.steps + 1, 0)))
            queue.append(Puzzle(new_board, puzzle.steps + 1, cost_function(Puzzle(new_board, puzzle.steps + 1, 0))))
        
        # Reorder queue to the lowest cost board
        queue = deque(sorted(queue, key=lambda x: x.cost))

# Define the start and end board
start = [1, 2, 3, 4, 5, 6, 7, 8, 0]
goal = Puzzle([1, 2, 3, 4, 5, 6, 7, 0, 8], 0, 0)

# Perform the a* search
print('Start Board:')
print(start[0], start[1], start[2])
print(start[3], start[4], start[5])
print(start[6], start[7], start[8])

solution = a_star_search(start, goal)

print('Solution Board:')
print(solution.board[0], solution.board[1], solution.board[2])
print(solution.board[3], solution.board[4], solution.board[5])
print(solution.board[6], solution.board[7], solution.board[8])

print('Number of Steps:', solution.steps)
Code a function in Python that returns the length of the longest increasing subsequence in a given list of integers. list = [1, 3, 4, 5, 7, 6, 9, 10] def longestIncreasingSubsequence(list):
 n = len(list)
 maxLength = 0

# Create a list to store the maximum length 
# of the increasing subsequence ending at 'i' 
lengthList = [1] * n

# Compute optimized values in bottom up manner 
for i in range(1, n):
 for j in range(0, i):
  if (list[i] > list[j] and lengthList[i] < lengthList[j] + 1):
   lengthList[i] = lengthList[j] + 1

# Pick maximum of all computed values 
maxLength = max(lengthList)

return maxLength
Create a python class to encapsulate stacks.  class Stack:
    def __init__(self):
        # Create an empty stack
        self.stack = []
    
    def push(self, item):
        # Push an item onto the top of the stack
        self.stack.append(item)
    
    def pop(self):
        # Pop an item off the top of the stack
        return self.stack.pop()
    
    def peek(self):
        # Get the top item off the stack
        return self.stack[-1]
    
    def is_empty(self):
        # Return true if the stack is empty
        return not self.stack
    
    def get_size(self):
        # Return the size of the stack
        return len(self.stack)
Write a Python program to compare two integers and prints if one is greater then another. int1=1, int2=2 # compare two integers
int1=1
int2=2
if int1 > int2:
    print("int1 is greater than int2")
elif int2 > int1:
    print("int2 is greater than int1")
else:
    print("int1 and int2 are equal")
Implement a function in Python that takes a list of strings and returns a new list of strings containing all words that start with an uppercase letter. list = ["Apple", "banana", "Pineapple", "Grapes"] def upper_words(list):
    result = []
    for word in list:
        if word[0].isupper():
            result.append(word)
    return result
Optimize a Python script that multiplies two matrices. The script should work with any two matrices given as input. m1 = [[1, 2], [3, 4]]
m2 = [[2, 0], [1, 2]] def multiply_matrices(m1, m2):
 if len(m1[0]) != len(m2):
 raise ValueError('The matrices cannot be multiplied.')

 # Create the result matrix
 # Dimensions would be m1 rows x m2 columns
 result = [[0 for col in range(len(m2[0]))] for row in range(len(m1))]

 for i in range(len(m1)):
 # Iterate through rows of m1
 for j in range(len(m2[0])):
 # Iterate through columns of m2
 for k in range(len(m2)):
 result[i][j] += m1[i][k] * m2[k][j]
 return result

# Test
m1 = [[1, 2], [3, 4]]
m2 = [[2, 0], [1, 2]]

result = multiply_matrices(m1, m2)
for row in result:
 print(row)

# Output
# [4, 4]
# [10, 8]
Create a class in Python to optimize a set of parameters. import numpy as np

# Sample data
n_samples = 10
X = np.random.rand(n_samples, 3)
y = np.arange(n_samples) import numpy as np
from scipy.optimize import minimize

class ParamOptimizer:
    def __init__(self, X, y):
        self.X = X
        self.y = y
        
    def cost_function(self, x):
        return np.sum(np.reshape(x, (self.X.shape[1], -1)) * self.X - self.y) ** 2
    
    def optimize(self):
        res = minimize(self.cost_function, np.zeros(self.X.shape[1]))
        return res.x
Create a Python program to generate a simple report of a database table. The report should include the total number of entries in the table, the average value of a numeric column, and a list of the unique values for a categorical column. Not applicable import sqlite3

database_file = "mydatabase.db"

# connect to database
conn = sqlite3.connect(database_file)

# create cursor
cursor = conn.cursor()

# query table
total_query = "SELECT COUNT(*) FROM mytable;"
average_query = "SELECT AVG(numeric_column) FROM mytable;"
unique_query = "SELECT DISTINCT categorical_column FROM mytable;"

# execute queries
total_entries = cursor.execute(total_query).fetchone()[0]
average_value = cursor.execute(average_query).fetchone()[0]
unique_values = cursor.execute(unique_query).fetchall()

# close connection
conn.close()

# print report
print("Total entries:", total_entries)
print("Average value:", average_value)
print("Unique values:", unique_values)
Generate a short Python program to swap two items in a given list.  def swap_items(lst, item1, item2):
    idx1 = lst.index(item1)
    idx2 = lst.index(item2)
    lst[idx1], lst[idx2] = lst[idx2], lst[idx1]
    
    return lst
Create a Python script to generate a random 4-digit number (from 1000-9999) and display it on the screen. Not applicable import random

print(random.randint(1000,9999))
Create a script in Python to generate a random password of length 10 characters, consisting of numbers, upper-case letters, and symbols. Not applicable import string
import random

def generate_password():
 characters = string.ascii_letters + string.digits + string.punctuation
 password = ''
 for _ in range(10):
 password += random.choice(characters)
 return password

print(generate_password())
Write a Python code to decode a JSON string. {
 "name": "John",
 "age": 30,
 "is_married": False
} import json

json_string = '{"name": "John", "age": 30, "is_married": false}'

data = json.loads(json_string)
name = data['name']
age = data['age']
is_married = data['is_married']

print('Name: ', name)
print('Age: ', age)
print('Is Married: ', is_married)
Develop a Python program which takes two numbers in input and prints the sum of them.  def add(num1, num2): 
    sum = num1 + num2 
    print(sum) 
  
# Driver code 
num1 = int(input("Enter num1: ")) 
num2 = int(input("Enter num2: ")) 
add(num1, num2)
Create a Python script to get the values of a key from a given dictionary. {"name": "John", "age": 35, "city": "New York"} d = {"name": "John", "age": 35, "city": "New York"}
value = d.get("age")
print(value)
Design a function in Python to generate a random password.  """
Design a function in Python to generate a random password
"""

import string
import random

def generate_password(length=16):
    # list of possible characters for the password
    characters = string.ascii_letters + string.punctuation + string.digits
    
    # generate a random password
    password = ''.join(random.choice(characters) for i in range(length))
    
    # return the random password
    return password

# generate a random password
random_password = generate_password()

# print the random password
print(random_password)
Write a Python program that display news headlines from a news site in an interactive way. The program should ask the user for the news categories they are interested in and display the news headlines related to these categories in separate feeds. Not applicable import requests

# Ask user for the categories they are interested in
categories = input('What categories of news would you like to see? ').split(',')

# Create an empty dictionary of news headlines
headlines = {}
   
for category in categories:
    # Request news data from a news website
    news_response = requests.get(f'https://example.com/data/{category}')
    headlines[category] = news_response.json()

# Print out the news headlines
for category, news_data in headlines.items():
    print(f'\n{category.title()} News\n------------------')
    for headline in news_data:
        print(headline['title'])
Design a Python program to classify text data into three groups: Positive, Neutral and Negative based on the sentiment scores. The following is a text snippet: 

"The conference was an incredible success. All the participants were thrilled and delighted with the outcome." import nltk

# Load the text
text = "The conference was an incredible success. All the participants were thrilled and delighted with the outcome."

# Tokenize the text
tokens = nltk.word_tokenize(text)

# Add sentiment scores to each token
scores = [0.8, 0.7, 0.7, 0.5, 0.6, 0.9, 0.2, 0.3, 0.8, 0.9, 0.9, 0.6]

# Create groups based on the sentiment scores
positive_words = list(filter(lambda x: x[1] > 0.6, zip(tokens, scores)))
neutral_words = list(filter(lambda x: 0.3 <= x[1] <= 0.6, zip(tokens, scores)))
negative_words = list(filter(lambda x: x[1] < 0.3, zip(tokens, scores)))

# Print the group results
print('Positive words:')
for word in positive_words:
 print(word[0])

print('\nNeutral words:')
for word in neutral_words:
 print(word[0])

print('\nNegative words:')
for word in negative_words:
 print(word[0])
Design an algorithm in Python to find all the ways a point on the plane can be reached from the origin.  def find_all_ways(x, y):
    if x == 0 and y == 0:
        return [[(0, 0)]]

    paths = []
    if x > 0:
        paths += find_all_ways(x-1, y)
    if y > 0:
        paths += find_all_ways(x, y-1)

    for path in paths:
        path.append((x, y))
    return paths
How would you construct a loop in Python to iterate over a list?  In Python, you can use a "for" loop to iterate over a list. For example:
 
my_list = [1, 2, 3, 4, 5]
for x in my_list:
    print(x)

This will print each of the elements in the list on a new line.
Write a Python program to print the first 20 prime numbers.  n = 20
primes = []
for num in range(2, n+1):
    is_prime = True
    for div in range(2, num):
        if (num % div == 0):
            is_prime = False
            break
    if is_prime:
        primes.append(num)
print(primes)
Create a Python script that pulls data from an API and stores it in a database. Not applicable import requests
import json
import sqlite3

# Make a GET request to the API
response = requests.get(url)
data = response.json()

# Save the data to a database
conn = sqlite3.connect('data.db')
c = conn.cursor()
for item in data:
    c.execute("INSERT INTO items VALUES (?, ?)", (item['id'], item['name']))
conn.commit()
conn.close()
Implement cross-validation in a Machine Learning model using Python's Scikit-Learn module. Not applicable import numpy as np
from sklearn.model_selection import KFold

# Define model and data
model = Model()
X = data

# 10-fold cross-validation
kf = KFold(n_splits=10)
scores = []

# Iterate through group and train model
for train_index, test_index in kf.split(X):
 X_train, X_test = X[train_index], X[test_index]
 model.fit(X_train)
 scores.append(model.score(X_test))

# Calculate average score across all folds
avg_score = np.mean(scores)
print(f'Average Score: {avg_score}')
Write a function in Python that takes a string of text as an input and returns a list of all possible anagrams of the string. "aabc" def getAnagrams(string):
    #base case
    if len(string) <= 1: 
        return [string] 

    #recursive case
    all_possible_anagrams = []
    for i, letter in enumerate(string): 
        #recursively iterate over the string without the fixed letter
        sub_string = string[:i] + string[i+1:]

        #get anagrams of sub string
        anagrams_of_substring = getAnagrams(sub_string)

        for sub_anagram in anagrams_of_substring:
            #add the fixed letter to all the anagrams of sub string
            anagram = letter + sub_anagram
            all_possible_anagrams.append(anagram)

    return all_possible_anagrams

print(getAnagrams("aabc"))
Write a Python program that will generate a random password of length 10 containing numbers, lowercase letters, and uppercase letters. Not applicable import random
import string

length = 10
chars = string.ascii_letters + string.digits
password = ''.join(random.choice(chars) for i in range(length))

print(password)
Create a python script to visualize the distribution of values in a numpy array numpy array [1, 2, 3, 4, 5, 6] import matplotlib.pyplot as plt
import numpy as np
 
arr = np.array([1,2,3,4,5,6])
 
plt.hist(arr)
plt.title("Distribution of values in the given array")
plt.show()
Write a Python program to convert a string of lower case characters to upper case characters. "Hello World" string = "Hello World"

# convert to upper case
string = string.upper()

# print result
print(string) # prints "HELLO WORLD"
Automatically analyze and optimize the given Python code snippet. def factorial(n):
 if n == 1:
 return 1
 else:
 return n*factorial(n-1) def factorial(n):
 return 1 if n in (0, 1) else n * factorial(n - 1)
Transform a Gradient Descent algorithm in Python to work with First Order Updates instead. def gradient_descent(x, y, iters=1000, lr=0.01):
    m = b = 0
    n = len(x)

    for i in range(iters):
        y_pred = m * x + b
        dm = -(2/n) * sum([x[i] * (y[i] - y_pred[i]) for i in range(n)])
        db = -(2/n) * sum([y[i] - y_pred[i] for i in range(n)])
        m -= lr * dm
        b -= lr * db def gradient_descent(x, y, iters=1000, lr=0.01):
    m = b = 0
    n = len(x)

    # First-order Update
    m_update = 0
    b_update = 0

    for i in range(iters):
        y_pred = m * x + b

        # Gradient
        dm = -(2/n) * sum([x[i] * (y[i] - y_pred[i]) for i in range(n)])
        db = -(2/n) * sum([y[i] - y_pred[i] for i in range(n)])

        # Updates
        m_update -= lr * dm
        b_update -= lr * db

        # Update the parameters
        m += m_update
        b += b_update
Create a function in Python to generate a random data matrix with a given shape.  import numpy as np

def generate_random_matrix(rows, columns):
    matrix = np.random.randint(low = 0, high = 100, size = (rows,columns))
    return matrix
Write a Python program that finds the smallest number in a given array with an algorithm that has an optimal time complexity. array = [3, 8, 2, 5, 4, 1, 9] def find_smallest_number(array):
    smallest = array[0]
    for element in array:
        if element < smallest:
            smallest = element
    return smallest
Generate a Python script that classifies dogs into breed classes.  import cv2
 
# Classifies a given image into one of the breed classes
def classify(image):
    
    # Retrieve the breed classes from the database
    breeds = get_breeds()
    closest_distance = float('inf')
    closest_breed = None
 
    # Create a feature descriptor for the image
    feature_descriptor = cv2.xfeatures2d.SIFT_create()
    (keypoints, descriptors) = feature_descriptor.detectAndCompute(image, None)
 
    # For each breed in the database
    for breed in breeds:
        # Compute the Euclidean distance between the descriptors
        distance = 0
 
        for i in range(len(descriptors)):
            distance += np.linalg.norm(descriptors[i] - breed[i])
 
        # If it is smaller than the current distance, set it as the new closest distance
        if distance < closest_distance:
            closest_distance = distance
            closest_breed = breed
 
    # Return the closest breed
    return closest_breed
Given a dictionary and a string, write a Python program to compute the number of times each character appears in the string. dict = {'a': 0, 'b': 0, 'c': 0}
str = 'abacab' def freq_char_dict(dict, str): 
    for char in str: 
        dict[char] += 1
    return dict
  
dict = {'a': 0, 'b': 0, 'c': 0} 
str = 'abacab'
print(freq_char_dict(dict, str))
Using Python, construct an algorithm that creates a dictionary with the numbers 1-5 as keys and the square of each number as its value. Not applicable numbers_dictionary = {}
for i in range(1,6): 
 numbers_dictionary[i] = i*i

print(numbers_dictionary)
Create a function in Python to remove duplicate elements from a list.  def removeDuplicates(list):
  newList = []
  for element in list:
    if element not in newList:
      newList.append(element)
  return newList
Create a program in Python to print the following output. string = "programming" str = "programming"
print(str[::-1])

Output: gnimmargorp
Write code to generate a random 3x3 tic-tac-toe board in Python.  import random

# our tic-tac-toe board
board = []

# function to generate a random 3x3 tic-tac-toe board
def generate_board():
  # create a 3x3 board
  board = [[0 for i in range(3)] for j in range(3)]

  # populate the board randomly
  for row in range(3):
    for col in range(3):
      board[row][col] = random.choice(['X','O'])

  return board

# print the generated board
board = generate_board()
for row in board:
  print(row)
Develop a Python script to extract some text from a website. Website URL: http://example.com import requests
from bs4 import BeautifulSoup
 
response = requests.get("http://example.com")
 
soup = BeautifulSoup(response.content, "html.parser")
 
text = soup.get_text()
print(text)
In Python, create an algorithm for efficiently sorting a list of numbers in ascending order. [4,7,2,1,11,0,29] def sort_list(numbers):
    for i in range(len(numbers)-1):
        for j in range(i+1, len(numbers)):
            if numbers[i] > numbers[j]:
                numbers[i], numbers[j] = numbers[j], numbers[i]
    return numbers
Create a Python package that contains a collection of functions for finding the average value of an array. [1,2,3,4,5] def average(array):
 '''
 Finds the average of all numbers in an array

 Args:
 array (list): List of numbers

 Returns:
 float: The average of all values in the array
 '''

 total = 0
 for value in array:
 total += value

 return total / len(array)
Generate a Python program to compare two given strings to check if they are identical or not.  def is_identical(str1, str2): 
    if str1 == str2: 
        return True
    else: 
        return False
Generate a random four-digit number in Python.  import random
rand_num = random.randint(1000, 9999)
Create a search engine in Python that searches the web for relevant information on a given topic.  import requests

# Perform a google search and returns the first page of results
def search(query):
    # Use a custom user-agent to avoid being blocked by Google
    headers = {
        'User-Agent': 'MySearchEngine/1.0'
    }

    # Build the query string
    query_string = {
        'q': query
    }

    # Send the GET request and extract the response details
    result = requests.get('https://www.google.com/search', params=query_string, headers=headers)
    response = result.text
    details = {
        'url': result.url,
        'response': result.text
    }

    return details

if __name__ == '__main__':
    query = 'cats'
    print(search(query))
Write a Python function to calculate the sum of the natural numbers up to n.  def sum_natural_numbers(n):
    if n < 1:
        return 0
    else:
        return n + sum_natural_numbers(n - 1)
Create a Python function that takes two arguments: a list of numbers and an integer k. The function should return a list of all pairs of numbers in the given list whose sum is equal to k. list = [1, 2, 3, 4, 5], k = 5 def get_pairs(list, k):
 pairs = []
 for i in range(len(list)):
 for j in range(i+1, len(list)):
 if list[i] + list[j] == k:
 pairs.append( [list[i], list[j]] )
 return pairs

print(get_pairs([1, 2, 3, 4, 5], 5))

# Output: [[1, 4], [2, 3]]
Construct a Python dictionary based on the following data keys = ["car", "bike"]
values = ["Ford", "Honda"] dict = {
    "car" : "Ford", 
    "bike" : "Honda"
}
Write a python program to fill in a 2D array with zeros.  import numpy as np

# define an array of size 5x5
my_array = np.zeros((5, 5))

print(my_array)
Can you develop a function in Python to check if two given strings are isomorphic?  def isIsomorphic(s1, s2):
    # Create a dictionary to map character from one string to another
    map_dict = {}

    if len(s1) != len(s2):
        return False

    for i in range(len(s1)):
        if s1[i] not in map_dict:
            # Check if the mapped character already occurs in target string
            if s2[i] in map_dict.values():
                return False
            # Store the mapping  
            map_dict[s1[i]] = s2[i]
        elif map_dict[s1[i]] != s2[i]:
            return False

    return True
Create a Python program to check if the given number is divisible by 3 or not. 12 def is_divisible_by_3(n):
  return (n % 3 == 0)

n = 12
if is_divisible_by_3(n):
  print(str(n) + ' is divisible by 3.')
else:
  print(str(n) + ' is not divisible by 3.')
Create a function in Python that takes an ID and returns a list of all the numbers in its range. ID = 5 def get_numbers(id):
    nums = []
    for i in range(id + 1):
        nums.append(i)
    return nums

numbers = get_numbers(5)
print(numbers)
Create a Python program to join a list of strings with a delimiter. ["Apple", "Orange", "Mango"] def join_list_str(list_str, delimiter):
  return delimiter.join(list_str)

list_str = ["Apple", "Orange", "Mango"]
delimiter = ","

result = join_list_str(list_str, delimiter)

print(result)

# Output
Apple,Orange,Mango
Create a to-do list for programming tasks for the next week.  1. Complete pending assignments. 
2. Review algorithms. 
3. Update the portfolio website. 
4. Attend a programming workshop. 
5. Start working on a Machine Learning project. 
6. Read some articles on JavaScript. 
7. Create a web application using Node.js. 
8. Practice solving programming puzzles. 
9. Write a program for sorting an array. 
10. Research on different AI technologies. 
11. Write a blog post on recent web development trends. 
12. Participate in hackathons. 
13. Build a basic chatbot using Python. 
14. Try to implement a Genetic Algorithm. 
15. Learn a new programming language. 
16. Make an interactive website using HTML, CSS and JavaScript. 
17. Update skills by working on an open source project. 
18. Create a machine learning model to classify images. 
19. Work on an Android application.
Rewrite the below program to use Python's dictionary comprehension. states = {'NY': 'New York', 'PA': 'Pennsylvania', 'FL': 'Florida'}

inverse_states = {}

for key,value in states.items():
  inverse_states[value] = key states = {'NY': 'New York', 'PA': 'Pennsylvania', 'FL': 'Florida'}

inverse_states = {value:key for key,value in states.items()}
Generate a function to print a Fibonacci series with n steps (including 0) in Python.  def printFibo(n): 
    a = 0
    b = 1
    if n < 0: 
        print("Incorrect input") 
    elif n == 0: 
        print(a) 
    elif n == 1: 
        print(a,b) 
    else: 
        print(a,b,end=" ") 
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
            print(b,end=" ") 

printFibo(10)
Write a Python program to encode an integer into a base 62 string.  import string 

def encode_base_62(n): 
    base62 = string.digits + string.ascii_uppercase + string.ascii_lowercase
    output = "" 
    while n > 0:
        output = base62[n%62] + output
        n //= 62
    return output
Build a web scraper in Python to extract data from a given website.  import requests
from bs4 import BeautifulSoup

# Define a function to fetch the webpage and extract data
def data_extraction(url):
    # Fetch the webpage and parse it
    page = requests.get(url)
    page_parse = BeautifulSoup(page.content, 'html.parser')
    
    # Extract data
    data = page_parse.find_all('div', class_='data-item')
    
    return data

# Provide the URL of the website
url = 'https://example.com'

# Fetch the webpage and extract data
data = data_extraction(url)
Write a Python program that combines two lists, eliminating duplicate entries. list_1 = [1, 2, 3]
list_2 = [2, 3, 4] list_1 = [1, 2, 3]
list_2 = [2, 3, 4]

final_list = []

for item in list_1:
 if item not in final_list:
 final_list.append(item)

for item in list_2:
 if item not in final_list:
 final_list.append(item)

print(final_list)
Create a Python program that sends a request to a website and displays the response.  import requests

def send_request(url):
    response = requests.get(url)
    
    if response.status_code == 200:
        print("Success! The website responded with: ")
        print(response.text)
    else:
        print("Error! The website responded with: ")
        print("Status code: ", response.status_code)
Design an Object-Oriented design in Python to represent a mobile phone in a virtual world.  class Phone:
  def __init__(self, name):
    self.name = name
    self.owner = None

  def assign_owner(self, owner):
    self.owner = owner

  def use(self):
    print(f"{self.owner.name} is using {self.name}")

class Person:
  def __init__(self, name):
    self.name = name
    self.phone = None

  def assign_phone(self, phone):
    self.phone = phone
    self.phone.owner = self

  def use_phone(self):
    if self.phone is not None:
      self.phone.use()
Create a Python function that takes two numbers and returns the biggest of them. x = 3, y = 6 def max_of_two(x, y):
    if x > y:
        return x
    else:
        return y
 
x = 3
y = 6
maximum = max_of_two(x, y)
print('The maximum of', x, 'and', y, 'is', maximum)
Generate a function to calculate the greatest common factor (GCF) of two numbers in Python. Not applicable def gcf(a, b):
    if (a == 0):
        return b
    if (b == 0):
        return a

    if (a == b):
        return a

    if (a > b):
        return gcf(a-b, b)
    return gcf(a, b-a)
Create a Python script that updates a MongoDB collection with a set of documents. [
 {
 "_id": 1,
 "title": "Task 1"
},
 {
 "_id": 2,
 "title": "Task 2"
}
] import pymongo

# connect to MongoDB
client = pymongo.MongoClient('localhost', 27017)
db = client['my_database']
collection = db['my_collection']

# create a list of documents
documents = [
 {
 "_id": 1,
 "title": "Task 1"
 },
 {
 "_id": 2,
 "title": "Task 2"
 }
]

# update the collection
result = collection.insert_many(documents)
Generate a Python program to edit a given list of strings and remove the duplicates in-place. ["AB", "AC", "AB", "CD", "AC"] list = ["AB", "AC", "AB", "CD", "AC"]

seen = set()
res = []

for item in list:
    if item in seen:
        continue
    seen.add(item)
    res.append(item)

list[:] = res

print(list)
Given a list of numbers with one missing, create a Python program to find the missing number. [1, 2, 4, 6, 7, 8] def find_missing_number(lst): 
    n = len(lst) 
    total = (n + 1)*(n + 2)/2
    sum_of_lst = sum(lst) 
    missing_number = total - sum_of_lst 
    return missing_number 
  
lst = [1, 2, 4, 6, 7, 8] 
missing_number = find_missing_number(lst) 
print(missing_number)
Write a code to extract data from a web page using python requests.  """
Extract data from a web page using python requests
"""

import requests

# Define the url
url = 'https://example.com'

# Get the data from the url
response = requests.get(url)

# Extract the data
data = response.text # or response.json() for JSON data

# Print the data
print(data)
Create a GUI application in Python to display a simple message.  # importing tkinter module 
from tkinter import *
  
# creating a GUI window 
root = Tk() 
  
# setting a geometry to the GUI window 
root.geometry("300x200") 
  
# creating a label widget to display a message 
# this label is child of root window 
Label(root, text="Hello, World!").pack() 
  
# looping the GUI window using an infinite loop 
root.mainloop()
Develop a python program automate the process of generating a list of random numbers between 1 to 100.  import random

def generate_random_nums(n,min_val,max_val):
    output = []
    for i in range(n):
        output.append(random.randint(min_val,max_val))
    return output

if __name__ == '__main__':
    n = 10
    min_val = 1
    max_val = 100
    print(generate_random_nums(n,min_val,max_val))
Construct a class for a triangle in the Python language.  class Triangle:
    def __init__(self, side1, side2, side3):
        self.side1 = side1
        self.side2 = side2
        self.side3 = side3
    
    def get_perimeter(self):
        return self.side1 + self.side2 + self.side3
    
    def get_area(self):
        s = self.get_perimeter() / 2
        return (s * (s-self.side1) * (s-self.side2) * (s-self.side3)) ** 0.5
Develop a Python program that takes in a single-dimensional array as a parameter, and returns the number of subsets with size 3 or greater. arr = [1, 2, 3, 4, 5] def find_subsets(arr):
    count = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            for k in range(j+1, len(arr)):
                count += 1
    return count
Modify a Python program to accept input from a user. def printMessage(): 
    print("Hello World!") def printMessage(): 
    message = input("Type your message here: ")
    print(message)
Design an algorithm in Python for sorting a given array of numbers in descending order. An array of integers [3, 5, 7, 2, 4, 1] def bubble_sort(arr):
 length = len(arr)
 
 for i in range(length - 1, 0, -1):
 for j in range(0, i):
 if arr[j] < arr[j + 1]:
 arr[j], arr[j + 1] = arr[j + 1], arr[j]
 
 return arr
 
a = [3, 5, 7, 2, 4, 1]
print(bubble_sort(a)) # [7, 5, 4, 3, 2, 1]
Create two functions using Python Pandas and Numpy. The first should take a column of words in a DataFrame as input and should return a new column with all the words counted. The second function should take an array of numbers as input and should return the sum of all the numbers in the array. DataFrame column of words: ["apple", "banana", "orange", "apple", "apple"]
Array of numbers: [1, 2, 3, 4, 5] def word_count(column):
 return column.value_counts()

def array_sum(numbers):
 return np.sum(numbers)
Write a python code to obtain a dictionary of country codes and their corresponding median income.  import requests
import json

def get_median_income():
    url = "https://data.worldbank.org/indicator/SI.POV.NAHC?locations=1W"
    response = requests.get(url)
    data = json.loads(response.text)
    income_data = data['data'][0]
    income_dict = dict()
    for entry in income_data:
        income_dict[entry[0]] = entry[3]
    return income_dict

if __name__ == '__main__':
    print(get_median_income())
Generate a function in Python that finds the most frequent element in a list.  def most_frequent(lst): 
  
    counter = 0
    num = lst[0] 
      
    for i in lst: 
        curr_frequency = lst.count(i) 
        if(curr_frequency> counter): 
            counter = curr_frequency 
            num = i 
  
    return num
Construct a program in Python to compute the sum of square numbers in a given range, including the start and end numbers. Range: 10-20 def sumOfRanges(start, end):
 sum = 0
 
 for i in range(start, end+1):
 sum += i*i
 
 return sum

sumOfRanges(10,20) #673
Find the 5 most frequent words in the given text. Text: Python is a high-level programming language. from collections import Counter

text = " Python is a high-level programming language."
words = text.split()

frequencies = Counter(words)

# printing five most frequent words 
frequent_words = frequencies.most_common(5)

print(frequent_words)
Create a Python program to create a fibonacci sequence of the length of n  def create_fibonacci(n):
    fibonacci_sequence = [0]
    if n == 0:
        return fibonacci_sequence
    elif n == 1:
        fibonacci_sequence.append(1)
        return fibonacci_sequence
    else:
        fibonacci_sequence.append(1)
        current_num = 1
        while len(fibonacci_sequence) < n:
            previous_num = fibonacci_sequence[-2]
            current_num = previous_num + fibonacci_sequence[-1]
            fibonacci_sequence.append(current_num)

        return fibonacci_sequence
Write a Python program that calculates the greatest common divisor of two numbers and displays the result. 10 and 20 def gcd(a, b):
    if b == 0: 
        return a 
    return gcd(b, a % b) 
  
num1 = 10
num2 = 20

gcd_value = gcd(num1, num2)

print(f'The greatest common divisor of {num1} and {num2} is {gcd_value}')
Use Python to run a web-scraping program and store the results in a MongoDB database. Not applicable import requests
from bs4 import BeautifulSoup
import pymongo

# connect to MongoDB
client = pymongo.MongoClient("mongodb://localhost:27017/")
db = client["my_database"]
collection = db["scraped_data"]

# make a GET request to the website
page = requests.get("https://example.com/")

# parse content of the request with BeautifulSoup
soup = BeautifulSoup(page.content, 'html.parser')

# store scraped data in MongoDB
records = soup.find_all('div', class_= "example")

for record in records:
  data = {
    'title': record.find('h2').text, 
    'description': record.find('p').text
  }
  collection.insert_one(data)
Create a program in Python to analyze the following data set and print the mean, median, and standard deviation of each group. DataSet = [
    [21, 24, 23, 20, 19, 19],
    [15, 22, 20, 16, 8, 14],
    [7, 6, 5, 9, 10, 14]
] import statistics

data_set = [
    [21, 24, 23, 20, 19, 19],
    [15, 22, 20, 16, 8, 14],
    [7, 6, 5, 9, 10, 14]
]

for group in data_set:
    print("Mean: " + str(statistics.mean(group)))
    print("Median: " + str(statistics.median(group)))
    print("Standard Deviation: " + str(statistics.stdev(group)))
    print()
Implement a basic algorithm in Python to calculate the nth Fibonacci number. 6 def fibonacci(n):
 if n == 0:
 return 0
 elif n == 1:
 return 1
 else:
 return fibonacci(n - 1) + fibonacci(n - 2)
 
print(fibonacci(6)) // 8
Write a Python program that takes a date in the format "YYYY-MM-DD" and returns a string with the day of the week for that date.  from datetime import datetime

def day_of_week(date):
    # convert string to date object
    date_obj = datetime.strptime(date, "%Y-%m-%d")
    # retrieve weekday
    day = date_obj.strftime("%A")
    return day
Define an interface for a data import task in Python. Not applicable class DataImportTask:

    def __init__(self, source, destination):
        self.source = source
        self.destination = destination

    # Method to download the source file to the file system
    def download(self):
        # Implementation here

    # Method to read the content of the source file into a CSV format
    def read(self):
        # Implementation here

    # Method to format the content into the destination format
    def format(self):
        # Implementation here

    # Method to save the destination in the desired location
    def save(self):
        # Implementation here
Generate a Python program that takes a positive integer as input and returns a boolean indicating whether it is a prime number or not.  def is_prime(n):
    if n < 2:
        return False
    for i in range(2, n):
        if n % i == 0:
            return False
    return True
Implement a function in Python to print the next n prime numbers.  def n_prime_numbers(n):
 
    prime_list = []
    num = 2
    while len(prime_list) < n:
        for x in range(2,num):
            if num % x == 0:
                break
        else:
            prime_list.append(num)
        num += 1
    return prime_list

print(n_prime_numbers(10))
Create a list in Python to store the first 10 numbers that are divisible by 4.  divisible_by_four = [i for i in range(1,11) if i%4 == 0]
Create a Python program to generate 10 random numbers between 0 and 10.  import random

random_numbers = []

for i in range(10):
    random_numbers.append(random.randint(0,10))

print(random_numbers)
Write a Python program to find the most frequent item of an input list.  def most_frequent(input_list):
    # Create a dictionary to store frequency of each item
    frequency_dict = {}
    for item in input_list:
        if item in frequency_dict:
            frequency_dict[item] += 1
        else:
            frequency_dict[item] = 1

    # Find the most frequent item
    most_frequent_item = max(frequency_dict, key=frequency_dict.get)

    return most_frequent_item

input_list = [1, 2, 3, 4, 1, 2, 5, 2, 4]
most_frequent_item = most_frequent(input_list)

print(most_frequent_item)
Generate a Python program to find the maximum number in a given set of numbers. 7, 6, 5, 9, 8 def find_maximum(nums):
    # Initialize the maximum number 
    max_num = nums[0]
    # Loop through the list
    for num in nums:
        # Check if the current number is bigger
        if num > max_num:
            # If it is, save the number
            max_num = num

    return max_num

# call the function
maximum = find_maximum(nums)
print("The maximum is " + str(maximum))
Create a Python script to open a web page.  import webbrowser

url = "www.example.com"

# open the web page in a new browser tab
webbrowser.open_new_tab(url)
Write a Python program to flatten a nested list. lst = [[1,2,3], [4,5], [6]] def flatten_list(lst):
    return [item for sublist in lst for item in sublist]
Create a python program that reads a list of names and picks a random name from that list. John, Mary, Paul, Gerry import random

names = ["John", "Mary", "Paul", "Gerry"]

print("The randomly chosen name is", random.choice(names))
Write a function to delete the last item from a list in Python. [1,2,3,4,5] def delete_last_item(lst):
  lst.pop()
  return lst

print(delete_last_item([1,2,3,4,5]))
Develop an algorithm for calculating the sum of two numbers, in Python. 2, 20 def add_numbers(a, b):
    return a + b

print("The sum of 2 and 20 is: ", add_numbers(2, 20))
Generate a python script which sorts a series of numbers from lowest to highest. 7, 2, 5, 1, 3 unsorted_list = [7, 2, 5, 1, 3]
def bubblesort(unsorted_list):
    length = len(unsorted_list)
    for i in range(length):
        for j in range(length - i - 1):
            if unsorted_list[j] > unsorted_list[j + 1]:
                unsorted_list[j], unsorted_list[j + 1] = unsorted_list[j + 1], unsorted_list[j]
    return unsorted_list
print(bubblesort(unsorted_list))
Write a Python program that takes the following dictionary as an argument and returns the count of each item {"apples": 5, "oranges": 6, "bananas": 7} def item_counts(fruits):
    counts = {}
    for k, v in fruits.items():
        counts[k] = v
    return counts
Write a Python script that takes as input a list of random numbers and returns only the even numbers from the list A list of 20 random numbers: [1,6, 3,2 ,8,7, 0, 4, 9, 11, 22, 18, 33, 28, 26, 55, 49, 37, 63, 59] """Generate a python script that takes a list of random numbers as input and return only the even numbers from the list"""

# Take a list as input
lst = [1,6, 3,2 ,8,7, 0, 4, 9, 11, 22, 18, 33, 28, 26, 55, 49, 37, 63, 59]

# Create a new list that will contain only the even numbers from the input list
even_numbers = []

# Iterate through input list and append only even numbers to the new list 
for num in lst:
    if num % 2 == 0:
        even_numbers.append(num)
        
# Print out the new list containing only even numbers
print(even_numbers)
Design a Python program that takes a list and randomizes the order of the elements in the list. [1, 2, 3, 4, 5] import random 
  
# function to generate a random 
# permutation of a list  
def randomize(data_list): 
    # Start from the last  
    # element and swap one by one.  
    for i in range(len(data_list) - 1, 0, -1):  
  
        # Pick a random index  
        # from 0 to i  
        j = random.randint(0, i + 1)  
  
        # Swap the randomly picked  
        # element with the current  
        data_list[i], data_list[j] = data_list[j], data_list[i]  
  
# Driver code  
data_list = [1, 2, 3, 4, 5] 
randomize(data_list) 

print(data_list)
Write a Python program to create a random password of length 10. <noimport> import string 
import random

def generate_password(length): 
    password = "" 
    for i in range(length): 
        character = random.choice(
            string.ascii_letters + 
            string.digits + 
            string.punctuation)
        password += character
    return password

password = generate_password(10) 
print(password)
Identify all bugs in the following Python code and suggest fixes. a = input('Enter a number: ')
b = input('Enter a number: ')
if a > b
 print('a is greater than b') a = int(input('Enter a number: '))
b = int(input('Enter a number: '))
if a > b:
 print('a is greater than b')
Create a python function to extract the largest DNA sequence from a list of sequences. sequences = ["ATGATATCATCGATTGTA",
"ATGCGATATACGATGAT",
"ATGGATCGATTATATTA"] def longest_sequence(sequences):
 longest_sequence = sequences[0]

 for sequence in sequences:
 if len(sequence) > len(longest_sequence):
 longest_sequence = sequence

 return longest_sequence

print(longest_sequence(sequences))  # ATGATATCATCGATTGTA
Write a Lambda function in Python to validate a user's settings. The function should check to make sure that the user has provided valid values for each setting and return an error if any of them are invalid. settings = {
 "name": "John Smith", 
 "age": 29, 
 "city": "New York"
} def validate_user(event, context):
 valid_fields = ["name", "age", "city"]
 valid_values = ["John Smith", 29, "New York"]
 
 event_body = event.get("body")
 if not event_body:
 return {
 "statusCode": 400, 
 "body": "Invalid data"
 }
 
 for key, value in event_body.items():
 if key not in valid_fields:
 return {
 "statusCode": 400, 
 "body": f"Invalid field {key}"
 }
 if value not in valid_values:
 return {
 "statusCode": 400, 
 "body": f"Invalid value for field {key}"
 }
 
 return {
 "statusCode": 200,
 "body": "User has valid configuration"
 }
Program a function in Python that creates all substrings of a given string. The string is "create". def createSubstrings(string): 
    length = len(string) 
    subString = []
    
    # Loops through the string  
    # and the length of substring to be formed 
    for i in range(length): 
        for j in range(i + 1, length + 1): 
            subString.append(string[i:j]) 
  
    return subString
Write a socket program in Python to send and receive data.  import socket

HOST = '127.0.0.1'  # The server's hostname or IP address
PORT = 65432        # The port used by the server

with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
    s.connect((HOST, PORT))
    s.sendall(b'Hello, world')
    data = s.recv(1024)

print('Received', repr(data))
Create a binary tree in Python with the given data. [ 1, 2, 3, 4, 5, 7, 8] class Node(object):
 def __init__(self, data):
  self.data = data
  self.left = None
  self.right = None

class BinaryTree(object):
 def __init__(self):
  self.root = None
  
 def insert(self, data):
  if self.root == None:
   self.root = Node(data)
  else:
   self._insert(data, self.root)
  
 def _insert(self, data, node):
  if data < node.data:
   if node.left == None:
    node.left = Node(data)
   else:
    self._insert(data, node.left)
  else:
   if node.right == None:
    node.right = Node(data)
   else:
    self._insert(data, node.right)

# Create binary tree  
tree = BinaryTree()
data_list = [1, 2, 3, 4, 5, 7, 8]
for data in data_list:
 tree.insert(data)
Create a code that checks whether the given date is valid or not in Python. Year: 2020
Month: 11
Day: 40 def validate_date(year, month, day):
    try:
        datetime.datetime(year, month, day)
        return True
    except ValueError:
        return False

validate_date(2020, 11, 40) # Output: False
Write Python code to parse this JSON data. {
  "title": "The Adventures of Tom Sawyer",
  "author": "Mark Twain",
  "year": 1876
} import json

data = {
  "title": "The Adventures of Tom Sawyer",
  "author": "Mark Twain",
  "year": 1876
}

parsed_data = json.loads(data)

title = parsed_data['title']
author = parsed_data['author']
year = parsed_data['year']
Generate a 3-D matrix of random values in Python  import numpy as np

matrix = np.random.rand(3,3,3)
Code a Monte-Carlo simulation in Python.  import random

# Monte Carlo simulation to estimate an integral
# The integral can be of any function f(x)

# N is the number of samples to take
# a, b is the interval
N = 10000
a, b = 0.0, 1.0

# initialize a variable to store the running sum
sum = 0

# take N samples
for i in range(N):
    x = random.uniform(a, b)
    sum += f(x) 

# compute the estimated integral
estimated_integral = (b - a) / N * sum 

print("The estimated integral is: ", estimated_integral)
Construct a function in Python to remove all the vowels from a given sentence.  def remove_vowels(phrase): 
  vowels = ['a','e','i','o','u'] 
  return ''.join([c for c in phrase if c not in vowels])
Construct an artificial neural network (ANN) architecture in Python for a given 3-class classification task. Input layer size = 50
Number of hidden layers = 2 
Number of output categories = 3 import torch.nn as nn

class ANN(nn.Module):
    def __init__(self):
        super().__init__()
        # Input layer
        self.fc1 = nn.Linear(50, 64) # 50 input units, 64 neurons in the hidden layer
        self.relu1 = nn.ReLU()
        # Hidden layer 1
        self.fc2 = nn.Linear(64, 32)
        self.relu2 = nn.ReLU()
        # Hidden layer 2
        self.fc3 = nn.Linear(32, 16)
        self.relu3 = nn.ReLU()
        # Output layer
        self.fc4 = nn.Linear(16, 3)
        self.sigmoid = nn.Sigmoid()
 
    def forward(self, x):
        x = self.fc1(x)
        x = self.relu1(x)
        x = self.fc2(x)
        x = self.relu2(x)
        x = self.fc3(x)
        x = self.relu3(x)
        x = self.fc4(x)
        x = self.sigmoid(x)
        return x
Write an Apriori algorithm in Python for mining frequent item sets. Not applicable import itertools

def apriori(dataset, min_support=0.5, verbose=False):
    # Get all unique items
    item_set = set([item for sublist in dataset for item in sublist])
    # Generate the initial frequent item sets
    freq_set = frequent_item_sets(dataset, item_set, min_support, verbose)
    # Use the initial sets to generate more
    if verbose:
        print(f'Frequent Item Sets: {freq_set}')
    final_item_sets = freq_set.copy()
    k = 2
    while len(freq_set) > 0:
        if verbose:
            print(f'\nGenerating item sets of size {k}')
        k_item_sets = generate_k_item_sets(freq_set, k)
        freq_set = frequent_item_sets(dataset, k_item_sets, min_support, verbose)
        final_item_sets.update(freq_set)
        k += 1
    return final_item_sets

def generate_k_item_sets(item_sets, k):
    return set([i.union(j) for i in item_sets for j in item_sets if len(i.union(j)) == k])

def frequent_item_sets(dataset, item_sets, min_support, verbose):
    support_counts = {}
    for item_set in item_sets:
        for transaction in dataset:
            if item_set.issubset(transaction):
                try:
                    support_counts[item_set] += 1
                except KeyError:
                    support_counts[item_set] = 1
    n = len(dataset)
    freq_set = set([item_set for item_set in support_counts if (support_counts[item_set] / n) >= min_support])
    if verbose:
        for item_set in support_counts:
            print(f'{item_set}: {support_counts[item_set]}')
    return freq_set

# Test the apriori algorithm
dataset = [['A', 'B', 'C', 'D'],
           ['B', 'C', 'E'],
           ['A', 'B', 'C', 'E'],
           ['B', 'D', 'E'],
           ['A', 'B', 'C', 'D']]

frequent_item_sets = apriori(dataset, 0.5, verbose=True)
print(f'\nFrequent Item Sets: {frequent_item_sets}')
Design a Python script that prints out all the even numbers in a given list of numbers. [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] # given list of numbers
nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# empty list for even numbers
even_list = []

# iterate over the list
for num in nums:
    # check if number is even
    if num % 2 == 0:
        # append number to even list
        even_list.append(num)

# print even numbers
print(even_list)
Create a python class object for the following data: A customer has name, age, emailid and phone number as attributes. class Customer:
    def __init__(self, name, age, emailid, phone_number):
        self.name = name
        self.age = age
        self.emailid = emailid
        self.phone_number = phone_number
Using the input, generate a python program to count the number of times a specific word appears in a sentence or a paragraph. sentence = 'My favorite color is blue'
word = 'blue' def count_word(sentence, word):
    words = sentence.split(' ')
    return words.count(word)
Design a chaos-based Python program to simulate the predator–prey interactions between a fox and a rabbit. Two species: fox and rabbit
Number of rabbits: 10
Number of foxes: 3 import random 
  
def fox_and_rabbit_simulator(num_of_rabbits, num_of_fox): 
      
    # Initialize the population 
    rabbit_population = [num_of_rabbits] 
    fox_population = [num_of_fox] 
      
    # Simulation of Fox and Rabbit interaction 
    for i in range(365): 
        # For every day, the numbers of rabbits and foxes are calculated 
        rabbit_pop = rabbit_population[i] * random.uniform(0.9, 1.1) 
        fox_pop = fox_population[i] * random.uniform(1.01, 1.2) 
        # Calculate the number of foxes and rabbits for next day 
        rabbit_population.append(rabbit_pop) 
        fox_population.append(fox_pop) 
  
    print("Rabbit population after 365 days :", round(rabbit_population[-1])) 
    print("Fox population after 365 days :", round(fox_population[-1])) 
  
# Driver Code 
if __name__ == "__main__": 
    fox_and_rabbit_simulator(10, 3)
Create a TopicItem object with the given parameters: logger, seuid, first_message, and parent. The TopicItem represents a specific topic which contains many connections and has attributes like the number of sent messages. It has methods to get the child at a specific position, get the number of children, get all children, get the latest data, get detailed data, get plotable items, get short data, and get time items. It also has a timer that aggregates the topic every TOPIC_AGGREGATION_FREQUENCY nsecs and pushes the updated data to self.__calculated_data.  from rospy.rostime import Time
import rospy

from python_qt_binding.QtCore import QTranslator

from abstract_item import AbstractItem
from helper_functions import prepare_number_for_representation, UPDATE_FREQUENCY, TOPIC_AGGREGATION_FREQUENCY, \
    ROUND_DIGITS, MAXIMUM_OFFLINE_TIME
from arni_core.helper import SEUID, SEUID_DELIMITER
from node_item import NodeItem

from rospy.timer import Timer
from rospy.impl.tcpros_service import ServiceProxy
from rospy.rostime import Duration
from rospy.rostime import Time
from connection_item import ConnectionItem


import re

class TopicItem(AbstractItem):
    """
    A TopicItem represents a specific topic which contains many connections and has attributes like the number of sent messages.
    """

    def __init__(self, logger, seuid, first_message, parent=None):
        """Initializes the TopicItem.
        
        :param seuid: the seuid of the item
        :type seuid: str
        :param logger: a logger where to log when special events occur
        :type logger: ModelLogger
        :param parent: the parent-item
        :type parent: AbstractItem
        """
        AbstractItem.__init__(self, logger, seuid, parent)
        self.__parent = parent
        self._type = "topic"

        self.add_keys=["dropped_msgs", "traffic", "bandwidth", "frequency"]
        self.avg_keys=["period_mean", "period_stddev", "stamp_age_mean", "stamp_age_stddev"]
        self.max_keys=["period_max", "stamp_age_max"]

        self._attributes = []
        self._attributes.extend(["dropped_msgs", "traffic",
                                 "period_mean", "period_stddev", "period_max", "stamp_age_mean",
                                 "stamp_age_stddev", "stamp_age_max", "bandwidth", "frequency"])

        for item in self._attributes:
            self._add_data_list(item)

        self.__calculated_data = {}
        for key in self._attributes:
            self.__calculated_data[key] = []

        self.__calculated_data["window_stop"] = []
        self.__calculated_data["window_start"] = []

        for item in self._attributes:
            self._rated_attributes.append(item + ".actual_value")
            self._rated_attributes.append(item + ".expected_value")
            self._rated_attributes.append(item + ".state")

        for item in self._rated_attributes:
            self._add_rated_data_list(item)

        self._logger.log("info", Time.now(), seuid, "Created a new TopicItem")

        self.__timer = Timer(Duration(nsecs=TOPIC_AGGREGATION_FREQUENCY), self.__aggregate_topic_data)

        self.tree_items = []
        self.__aggregation_window = rospy.get_param("~aggregation_window", 5)

    # def _updateTimer(self, event):
    #     """
    #     Updates the timer to the last changed status. If it
    #     :return:
    #     """
    #     self.alive = False
    #     # TODO this can be very expensive - is there a better way?
    #     for item in self.tree_items:
    #         for child in item.get_childs():
    #             if child.alive:
    #                 self.alive = True
    #                 break
    #
    #     if not self.alive:
    #         self.set_state("offline")


    def get_child(self, row, parent=None):
        """
        Returns the child at the position row.

        :param row: the index of the row
        :type row: int
        :param parent: the model parent at the given index (not global / logical parent)
        :type parent: NodeItem

        :returns: the child at the position row
        :rtype: AbstractItem
        """
        if not isinstance(parent, NodeItem):
            print(type(parent))
            raise UserWarning
        return self.__get_local_childs(parent)[row]

    def __get_local_childs(self, parent=None):
        """
        Returns all childs of the topic item at the given position in the gui.

        :param parent: the model parent at the given index (not global / logical parent)
        :type parent: NodeItem
        :param sub_activated: Defines if subscriber shall be shown too.
        :returns: the child at the position row
        :rtype: AbstractItem
        """
        childs = []
        if parent is not None:
            # a specific parent has been chosen - we have to use it to display the correct connection items
            # use the seuid to determine the node and compare this to the parts in the connections item (child of this
            # item.
            seuid = parent.get_seuid()

            seuid_helper = SEUID()
            seuid_helper.identifier = seuid
            seuid_helper.set_fields()
            node = seuid_helper.node
            for child in self.get_childs():
                child_seuid = child.get_seuid()
                seuid_helper.identifier = child_seuid
                seuid_helper.set_fields()
                node_comp = seuid_helper.publisher
                # do the check on the publisher
                if node == node_comp:
                    # match.
                    childs.append(child)
                    continue

            return childs
        else:
            return self._child_items

    def row(self, parent=None):
        """
        Returns the index of the Item.

        :returns: the index of the Item
        :rtype: int
        """
        if parent:
            return parent.get_childs().index(self)
        elif self.__parent:
            return self.__parent.get_childs().index(self)


    def child_count(self, parent=None):
        """
        Returns the number of children from the AbstractItem.

        :returns: number of childs
        :rtype: int
        """
        return len(self.__get_local_childs(parent))

    def get_childs(self, parent=None):
        """
        Returns a list with all children.
        WARNING: This is the same method as in AbstractItem (superclass) to warn you using this function in the gui
        context. Topic item shows only some connections depending on the parent node. This is *not* implemented for
        this function.

        :returns: list of children
        :rtype: list
        """
        if parent is not None:
            return self.__get_local_childs(parent)
        return self._child_items



    def get_items_younger_than(self, time, *args):
        """
        Used to overwrite the standard implementation in AbstractItem. This method provides the data from the
        calculated data and *not* from the raw input. This is especially wanted when plotting
        :param time:
        :param args:
        :return:
        """
        self._data_lock.acquire()
        return_values = {}

        if args:
            for key in args:
                return_values[key] = None
            if "window_stop" not in args:
                return_values["window_stop"] = None
        else:
            for key in self.__calculated_data:
                return_values[key] = None

        breakpoint = 0
        list_of_time = self.__calculated_data["window_stop"]
        length = len(list_of_time)

        if length is not 0:
            if list_of_time[0] >= time:
                for key in return_values:
                    try:
                        return_values[key] = self.__calculated_data[key][:]
                    except KeyError:
                        print("Accessed key was: " + key + ". Available keys are: ")
                        print(self.__calculated_data)
                        raise
            else:
                for i in range(length - 1, -1, -1):
                    if list_of_time[i] < time:
                        breakpoint = i + 1
                        for key in return_values:
                            if key in self.__calculated_data:
                                return_values[key] = self.__calculated_data[key][breakpoint:length]
                            else:
                                raise IndexError("IndexError! length of the list %s, accessed index %s. length of data"
                                                 " at given point %s, key is %s", length, i,
                                                 len(self.__calculated_data[key]), key)
                        break

        self._data_lock.release()
        return return_values


    def get_raw_items_younger_than(self, time, *args):
        """
        Returns all entries that are younger than time either in all keys of self._data or if args not empty in
        all key corresponding to args.
        Warning: Method assumes data is sorted by time if this is not true will return too few or too much data.

        :param time: the lower bound in seconds
        :type time: rospy.Time
        :param args: the keys to the dict
        :type args: str

        :returns: dict of lists
        :rtype: dict
        :raises KeyError: if an element in args cannot be found in any of the dictionaries (data vs rated data)
        """
        return_values = {}

        if args:
            for key in args:
                return_values[key] = None
            if "window_stop" not in args:
                return_values["window_stop"] = None
        else:
            for key in self._data:
                return_values[key] = None

        breakpoint = 0
        list_of_time = self._data["window_stop"]
        length = len(list_of_time)

        if length is not 0:
            if list_of_time[0] >= time:
                for key in return_values:
                    try:
                        return_values[key] = self._data[key][:]
                    except KeyError:
                        print("Accessed key was: " + key + ". Available keys are: ")
                        print(self._data)
                        raise
            else:
                for i in range(length - 1, -1, -1):
                    if list_of_time[i] < time:
                        breakpoint = i + 1
                        for key in return_values:
                            if key in self._data:
                                return_values[key] = self._data[key][breakpoint:length]
                            else:
                                raise IndexError("IndexError! length of the list %s, accessed index %s. length of data"
                                                 " at given point %s, key is %s", length, i, len(self._data[key]), key)
                        break
        return return_values


    def __aggregate_topic_data(self, event):
        """
        Aggregates the topic every TOPIC_AGGREGATION_FREQUENCY nsecs and pushes the updated data to
        self.__calculated_data.

        :param event: containing information when this method was called - not used but needed for the interface
        """
        aggregated_data = {}
        for key in self._attributes:
            aggregated_data[key] = 0

        for key in self.__calculated_data.keys():
             self.__calculated_data[key].append(0)

        child_count = 0
        for connection in self.get_childs():  # !assuming all childs are connection items!
            values = connection.aggregate_data(self.__aggregation_window)  # average over N seconds

            if values:
                for key in self.add_keys:
                     aggregated_data[key] += values[key]
                for key in self.max_keys:
                    if values[key] > aggregated_data[key]:
                         aggregated_data[key] = values[key]
                for key in self.avg_keys:
                     aggregated_data[key] += values[key]
                child_count += 1


        for key in self.avg_keys:
            if child_count == 0:
                aggregated_data[key] = 0
            else:
                aggregated_data[key] /= child_count

        self._data_lock.acquire()

        for key in self._attributes:
            self.__calculated_data[key][-1] = aggregated_data[key]

        self.__calculated_data["window_start"][-1] = Time.now()
        self.__calculated_data["window_stop"][-1] = Time.now() - (Duration(secs=1) if int(Duration(secs=1).to_sec()) <= int(Time.now().to_sec()) else Time(0))


        self._data_lock.release()


    def execute_action(self, action):
        """
        Not senseful, Topics cannot execute actions.

        :param action: action to be executed
        :type action: RemoteAction
        """
        pass


    def get_detailed_data(self):
        """
        Returns the detailed data of the HostItem.

        :returns: detailed data
        :rtype: str
        """
        data_dict = self.get_latest_data()
        for key in self.__calculated_data:
            if self.__calculated_data[key]:
                data_dict[key] = self.__calculated_data[key][-1]
            else:
                data_dict[key] = self.tr("Currently no value available")

        data_dict["state"] = self.get_state()

        content = "<p class=\"detailed_data\">"

        content += self.get_erroneous_entries()

        content += "Rounded to a second:<br>"

        if "frequency" in self._attributes:
            content += self.tr("frequency") + ": " + prepare_number_for_representation(data_dict["frequency"]) \
                   + " " + self.tr("frequency_unit") + " <br>"
        content += self.tr("bandwidth") + ": " + prepare_number_for_representation(data_dict["bandwidth"]) \
                   + " " + self.tr("bandwidth_unit") + " <br>"

        content += self.tr("dropped_msgs") + ": " + prepare_number_for_representation(data_dict["dropped_msgs"]) \
                   + " " + self.tr("dropped_msgs_unit") + " <br>"
        content += self.tr("period_max") + ": " + prepare_number_for_representation(data_dict["period_max"]) \
                   + " " + self.tr("period_max_unit") + " <br>"
        content += self.tr("stamp_age_max") + ": " + prepare_number_for_representation(data_dict["stamp_age_max"]) \
                   + " " + self.tr("stamp_age_max_unit") + " <br>"

        content += "</p>"
        return content


    def get_plotable_items(self):
        """
        Returns items for the plot.

        :returns: str[]
        """
        if "frequency" in self.__calculated_data:
            return ["dropped_msgs","stamp_age_max", "period_max",
                    "bandwidth", "frequency"]

        else:
            return ["dropped_msgs", "traffic", "stamp_age_max", "period_max", "bandwidth"]


    def get_short_data(self):
        """
        Returns a shortend version of the item data.

        :returns: data of the item
        :rtype: str
        """
        data_dict = {}
        for key in self.__calculated_data:
            if self.__calculated_data[key]:
                data_dict[key] = self.__calculated_data[key][-1]
            else:
                data_dict[key] = self.tr("Currently no value available")
                data_dict["window_stop"] = Time(0)
                data_dict["window_start"] = Time(0)

        data_dict["state"] = self.get_state()

        try:
            if data_dict["window_stop"] == Time(0):
                return "No data yet"
            elif (Time.now() - data_dict["window_stop"]) > Duration(MAXIMUM_OFFLINE_TIME):
                # last entry was more than MAXIMUM_OFFLINE_TIME ago, it could be offline!
                return "No data since " + prepare_number_for_representation(Time.now() - data_dict["window_stop"]) \
                       + " seconds"
        except:
            print(data_dict["window_stop"])
            raise UserWarning


        content = ""
        if data_dict["state"] is "error":
            content += self.get_erroneous_entries_for_log()
        else:
            content += self.tr("frequency") + ": " + prepare_number_for_representation(
                data_dict["frequency"]) + " " \
                       + self.tr("frequency_unit") + " - "
            content += self.tr("bandwidth") + ": " + prepare_number_for_representation(data_dict["bandwidth"]) \
                       + " " + self.tr("bandwidth_unit") + " - "
            content += self.tr("dropped_msgs") + ": " + prepare_number_for_representation(data_dict["dropped_msgs"]) \
                       + " " + self.tr("dropped_msgs_unit")

        return content


    def can_execute_actions(self):
        """
        This item cannot execute actions, so it returns False

        :return: False
        """
        return False


    def get_list_items(self):
        return []


    def get_time_items(self):
        return ["stamp_age_mean", "stamp_age_max"]

Create an HTML page to display a form with a text input field, a dropdown list, and a submit button. Not applicable <!DOCTYPE html>
<html>
<head>
 <title>Form Example</title>
</head>
<body>
 <h1>Form Example</h1>
 <form action="submit.php" method="post">
 <label for="nameInput">Name:</label>
 <input type="text" id="nameInput" name="name" />
 
 <label for="languageSelect">Favorite Language:</label>
 <select id="languageSelect" name="language">
 <option value="java">Java</option>
 <option value="javascript">Javascript</option>
 <option value="python">Python</option>
 </select>
 
 <input type="submit" value="Submit" />
 </form>
</body>
</html>
Create a basic web-scraper in Python that obtains the price and description of a product from a website. A link to the product page on a website. import requests
from bs4 import BeautifulSoup

# Website URL
url = 'LINK'
 
# Make a request and get the HTML content
r = requests.get(url) 
html_content = r.text

# Parse the HTML content
soup = BeautifulSoup(html_content, 'lxml')

# Price
price_tag = soup.find(class_='price')
price = price_tag.text

# Description
description_tag = soup.find(class_='product-description')
description = description_tag.text

print('Price:', price)
print('Description:', description)
Build a Python program to sort values Sort the array [9, 3, 1, 8, 5] in ascending order. def sort_ascending(arr):
    # Bubble sort
    for i in range(len(arr) - 1):
        for j in range(len(arr) - 1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
    
    return arr
What is the output of the following Python code? nums = [1, 2, 3, 4, 5]
sorted_nums = sorted(nums) The output of the code is [1, 2, 3, 4, 5], which is the sorted version of the list nums.
Create a web scraper using Python to extract a list of all the movie names from IMDb's Top 250 Movies page. Not applicable import requests
from bs4 import BeautifulSoup

url = 'https://www.imdb.com/chart/top?sort=us,asc'
response = requests.get(url)
soup = BeautifulSoup(response.text, 'html.parser')

movie_names = []
for div in soup.find_all('div', {'class': 'lister-list'}):
  for h3 in div.find_all('h3'):
    movie_names.append(h3.find('a').text)

print(movie_names)
Construct a neural network in Python for predicting the outcome of a given football match. Data set of past 10 football matches. import tensorflow as tf

# Building data set
features = tf.placeholder(tf.float32, [None, 10])
labels = tf.placeholder(tf.int32, [None])

# Building a neural network
def build_model(features):
    # An input layer
    input_layer = tf.layers.dense(features, 16, activation=tf.nn.relu)

    # Two hidden layers
    dense_layer_2 = tf.layers.dense(input_layer, 8, activation=tf.nn.relu)
    dense_layer_3 = tf.layers.dense(input_layer, 8, activation=tf.nn.relu)  

    # An output layer
    output_layer = tf.layers.dense(dense_layer_3, 2)

    return output_layer

predictions = build_model(features)

# Define the loss function
loss = tf.reduce_mean(tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=predictions))

# Training the model
train_op = tf.train.AdagradOptimizer(learning_rate=0.3).minimize(loss)
Serialize a list of dictionaries in Python [{'name':'John', 'age':30},
{'name':'Paul', 'age':22}] import json

data = [{'name':'John', 'age':30},
{'name':'Paul', 'age':22}]

serialized_data = json.dumps(data)
print(serialized_data)
Create a loop in Python that prints out all the natural numbers below 6.  for num in range(6): 
  print(num)
Create a Python function that calculates the standard deviation of a given list of numbers. [2, 4, 4, 4, 5, 5, 7, 9] def calculate_std_deviation(numbers):
 mean = sum(numbers) / len(numbers)
 
 variance = 0
 for num in numbers:
 variance += (num - mean)**2
 variance = variance/len(numbers)
 
 std_deviation = variance**0.5
 return std_deviation
 
 
numbers = [2, 4, 4, 4, 5, 5, 7, 9]
std_deviation = calculate_std_deviation(numbers)
print('The standard deviation is: {}'.format(std_deviation))
Develop a class in Python to represent an employee, including the data attributes for name, age, position and salary. Not applicable class Employee:
    def __init__(self, name, age, position, salary):
        self.name = name
        self.age = age
        self.position = position
        self.salary = salary

    def getName(self):
        return self.name

    def getAge(self):
        return self.age

    def getPosition(self):
        return self.position
    
    def getSalary(self):
        return self.salary
Modify the following Python function to get the first index of the keyword within the string. def first_index(str, keyword):
    for i in range(len(str)):
        if str[i] == keyword:
            return i def first_index(str, keyword):
    for i in range(len(str)):
        if str[i] == keyword:
            return i
    return -1
Build a Python model to predict if a customer will churn or not based on their past transaction data. Features: [age, recency, frequency, monetary_value, no_of_products]
Target: binary (1 – will churn, 0 – will not churn) import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# Load the data
data = pd.read_csv('transaction_data.csv')

# Separate input features (X) and target variable (y)
X = data[['age', 'recency', 'frequency', 'monetary_value', 'no_of_products']]
y = data['churn']

# Split the dataset into training and testing set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=1)

# Create a logistic regression model
log_reg = LogisticRegression()

# Train the model on the training set
log_reg.fit(X_train, y_train)

# Output the predictions on the test set
y_pred = log_reg.predict(X_test)

# Compute and print the accuracy score
acc = accuracy_score(y_test,y_pred)
print('Model accuracy score:', acc)
Design a Python algorithm to identify all the prime numbers up to a given integer.  def identify_primes(num):
    '''This function will identify all the prime numbers up to a given integer.'''
    primes = []
    for x in range(2, num):
        if all(x%i!=0 for i in range(2, int(x**0.5)+1)):
            primes.append(x)
    return primes
Using regular expression, construct a pattern in Python to identify strings of the form "word1word2word3word4word5".  import re
pattern = r"\b(\w+)\b(\w+)\b(\w+)\b(\w+)\b(\w+)\b"
Generate a Python function to parse a JSON data structure. data = {
 "name": "John",
 "age": 18,
 "occupation": "Software Engineer"
} import json

def parse_json(data):
 data = json.loads(data)
 return data['name'], data['age'], data['occupation']

name, age, occupation = parse_json(data)
print(name, age, occupation)
# Output: John 18 Software Engineer
Optimize a function written in Python that calculates the mean of a given sequence of numbers import numpy as np
sequence = np.array([1, 4, 6, 5, 9], dtype=np.float64)
def calculate_mean(sequence):
    sum = 0
    for number in sequence:
        sum += number
    return sum / len(sequence) import numpy as np
sequence = np.array([1, 4, 6, 5, 9], dtype=np.float64)
def calculate_mean(sequence):
    return np.mean(sequence)
Create an optimization algorithm in Python that takes an array of numbers as input. The algorithm should return the sum of the maximum two elements. Input Array: [1, 2, 4, 5, 3, 7] def maximizeSum(arr): 
    if (len(arr) < 2): 
        print("Invalid Input") 
        return 
  
    first = second = -1000
    for i in range(0, len(arr)): 
  
        if (arr[i] > first): 
            second = first 
            first = arr[i] 
  
        elif (arr[i] > second and  
              arr[i] != first): 
            second = arr[i] 
  
    return (first + second) 
  
# Driver code 
arr = [1, 2, 4, 5, 3, 7] 
print(maximizeSum(arr))
Create a Python module that stores information about books (title, author and year). It should allow you to add, delete and search for books. Not applicable class Book:
 def __init__(self, title, author, year):
 self.title = title
 self.author = author
 self.year = year

 def __str__(self):
 return f'{self.title} by {self.author} ({self.year})'

class BookDB:
 def __init__(self):
 self.books = []

 def add_book(self, book):
 self.books.append(book)

 def delete_book(self, title):
 self.books = [book for book in self.books if book.title != title]

 def search_book(self, title):
 for book in self.books:
 if book.title == title:
 return book

 return None
Create a prototype of a bubble sort function in Python.  def bubbleSort(arr):
    for i in range(len(arr)):
        for j in range(0, len(arr)-i-1):
            if arr[j] > arr[j+1] :
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr
Develop a class in Python to store information about a customer.  class Customer:
    '''
    A class used to store information about a Customer. 
    Attributes:
    name (str): the customer's name
    address (str): the customer's address
    phone_number (str): the customer's phone number
    email (str): the customer's email
    '''
    
    def __init__(self, name, address, phone_number, email):
        self.name = name
        self.address = address
        self.phone_number = phone_number
        self.email = email

    def display_info(self):
        print('Name: {}\nAddress: {}\nPhone Number: {}\nEmail: {}'.format(self.name, self.address, self.phone_number, self.email))
Create a program in Python to scrape all pages of a website and extract all URLs and titles.  import requests
import re
from bs4 import BeautifulSoup

def scrape_all_pages(url):
    urls = []
    titles = []
    
    while url:
        response = requests.get(url)
        html = response.text
        soup = BeautifulSoup(html, 'html.parser')
        for link in soup.find_all('a'):
            if link.has_attr('href'):
                absolute_url = link['href']
                if re.match('^http', absolute_url):
                    urls.append(absolute_url)
                    titles.append(link.string)
        url = soup.find('a', rel="next")
        if url:
            url = url['href']
    return urls, titles

if __name__ == '__main__':
    print(scrape_all_pages('https://www.example.com/'))
Write a Python program to implement a basic stack data structure with push, pop, and peek operations. Not applicable class Stack:
 def __init__(self):
 self.items = []

 def push(self, item):
 self.items.append(item)

 def pop(self):
 return self.items.pop()

 def peek(self):
 return self.items[len(self.items)-1]

my_stack = Stack()
my_stack.push(1)
my_stack.push(2)
my_stack.push(3)
print(my_stack.peek()) # 3
print(my_stack.pop()) # 3
print(my_stack.pop()) # 2
Generate Python class to define and simulate a bouncing ball.  import math

class BouncingBall():
    def __init__(self):
        self.x = 0.0   # horizontal position 
        self.y = 5.0   # vertical position 
        self.vy = 0.2  # vertical velocity 
        self.g = 9.81  # gravitational acceleration 

    def update(self, dt):
        self.y -= self.vy * dt
        self.vy -= self.g * dt

        if self.y <= 0:
            self.y = 0
            self.vy *= -0.9
Write a Python program to perform linear search on a given array of numbers. [2, 3, 4, 6, 1] def linearSearch(arr, x): 
  
    for i in range (len(arr)): 
  
        if arr[i] == x: 
            return i 
  
    return -1
  
arr = [2, 3, 4, 6, 1] 
x = 4
  
result = linearSearch(arr, x) 
  
if(result == -1): 
    print("Element is not present in array") 
else: 
    print("Element is present at index", result)
Write a python program to check if a given number is an Armstrong number or not.  def is_armstrong_number(num):
    digits_sum = 0
    num_string = str(num)
    for digit in num_string:
        digits_sum += int(digit)**len(num_string)
    return digits_sum == num
Transform the following nested for loop into a list comprehension statement in Python. for i in range(2, 5): 
    for j in range(3): 
        print(i, j) [(i,j)  for i in range(2,5) for j in range(3)]
Write a Python program to print out the most common words in a given text.  import collections

def most_common_words(text):
    words = text.split()
    counts = collections.Counter(words)
    return counts.most_common(10)
Create a reinforcement learning environment in Python that teaches an agent to navigate through a simple gridworld. Not applicable import numpy as np

# define the environment
class Gridworld:
 def __init__(self, size=4):
 self.size = size
 self.reset()
 
 def reset(self):
 # reset the environment
 self.state = np.zeros((self.size, self.size))
 self.done = False
 self.reward = 0
 
 # define states
 self.state[3,3] = 1
 self.current_state = [0,0]
 
 # define actions
 self.action_space = {0: 'up',
 1: 'down',
 2: 'left',
 3: 'right'}
 
 # define the rewards
 self.reward_space = {'win': 1, 'loss': -1, 'tie': 0}
 
 def step(self, action):
 # take an action in the environment
 reward = 0
 done = False
 # calculate next state
 current_state = self.current_state
 if action == 0:
 next_state = [current_state[0] - 1, current_state[1]]
 elif action == 1:
 next_state = [current_state[0] + 1, current_state[1]]
 elif action == 2:
 next_state = [current_state[0], current_state[1] - 1]
 elif action == 3:
 next_state = [current_state[0], current_state[1] + 1]
 else:
 pass
 
 # check for rewards
 if self.state[next_state[0], next_state[1]] == 1:
 reward = self.reward_space['win']
 self.done = True
 elif (next_state[0] < 0 or next_state[0] >= self.size) or (next_state[1] < 0 or next_state[1] >= self.size):
 # reward for out of bounds penalty
 reward = self.reward_space['loss']
 self.done = True
 
 # update state
 self.state[current_state[0], current_state[1]] = 0
 self.state[next_state[0], next_state[1]] = 1
 self.current_state = next_state
 
 # return state, reward, and done
 return self.state, reward, self.done
Write a Python program to build a deep learning model to categorize text into different classes.  def deep_learning_model(X, y):
    model = Sequential()
    model.add(Embedding(MAX_NB_WORDS, EMBEDDING_DIM, input_length=X.shape[1]))
    model.add(SpatialDropout1D(0.2))
    model.add(LSTM(100, dropout=0.2, recurrent_dropout=0.2))
    model.add(Dense(13, activation='softmax'))
    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
    return model
The code is a Python function named `probe` that takes a multiline text as input and parses it into a dictionary. To use the function, call it with a string of text generated by `ffprobe` or `avprobe`. The output will be a dictionary containing the parsed data.  # coding: utf-8
""" Copyright (c) 2013 João Bernardo Vianna Oliveira

    This file is part of Discoder.

    Discoder is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Discoder is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Discoder.  If not, see <http://www.gnu.org/licenses/>.
"""

__author__ = 'jb'

from discoder.lib import Obj
import re

class ParseError(Exception):
    pass

tag = Obj(
    # Regex for parsing the markup language generated by ffprobe or avprobe
    open = re.compile(r'^\[(\w+)\]$'),
    close = re.compile(r'^\[/(\w+)\]$'),
    value = re.compile(r'^(\w+)(?::(\w+))?=(.*)$')
)

def probe(text):
    """
        Parse multiline text generated by `ffprobe` or `avprobe`
        Command line:
            ffprobe -v quiet [-show_format] [-show_streams] filename

        :type text: str
        
        Input:
        ------
        [TAG]
        data_x=1
        data_y=2
        INFO:data_z=3
        [/TAG]

        Output:
        -------
        {'tag': [{'data_x': 1, 'data_y': 2, 'info': {'data_z': 3}}]}
    """
    blocks = Obj()
    this = None
    for i, line in enumerate(text.splitlines()):
        if not line.strip():
            continue
        open_block = tag.open.match(line)
        if open_block:
            if this is not None:
                raise ParseError('Opened block without closing last one: {0}: {1}'.format(i, line))
            this = Obj()
            name = open_block.group(1).lower()
            if name == 'stream':
                name += 's' # compatibility with json output
            if name != 'format': # "format" only has one element.
                blocks.setdefault(name, []).append(this)
            else:
                blocks[name] = this
        else:
            if this is None:
                raise ParseError("There's no block to insert data or close: {0}: {1}".format(i, line))
            if tag.close.match(line):
                this = None
            else:
                name, sub, val = tag.value.match(line).groups()
                if not sub:
                    this[name] = val
                else:
                    attr = this.setdefault(name.lower(), Obj())
                    attr[sub] = val
    return blocks

Create a Python program to classify an email as spam or not spam. This email body contains some overly spammy words. import re

def classify(text):
    spam_words = ["free", "prize", "win", "offer"]
    is_spam = False
    for w in spam_words:
        if re.search(w, text):
            is_spam = True
    if is_spam:
        return "This is a spam email."
    else:
        return "This is not a spam email"
    
print(classify("This email body contains some overly spammy words."))
Create a Python script for classifying customer data. customer_data = [
    {"name": "John Doe", "age": 25, "gender": "Male"},
    {"name": "Jane Doe", "age": 30, "gender": "Female"},
    {"name": "Pat Smith", "age": 75, "gender": "Unknown"}
] import pandas as pd

df = pd.DataFrame(customer_data)
df["age_category"] = df["age"].apply(lambda a: "Young" if 0 < a <= 20 else "Middle-aged" if 21 <= a <= 60 else "Senior")
df["gender_category"] = df["gender"].apply(lambda g: "Male" if g == "Male" else "Female" if g == "Female" else "Other")

print(df)
Develop a Python program to prepare a presentation in PDF format.  from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas

def prepare_presentation(content):
    """
    Develop a Python program to prepare a presentation in PDF format.
    
    :param content: presentation slides
    :return: PDF file of the presentation
    """
    # create a pdf object
    pdf_obj = canvas.Canvas('presentation.pdf', pagesize=A4)
    
    # add contents to the pdf
    for slide in content:
        pdf_obj.drawImage(slide)
    
    # save pdf
    pdf_obj.save()
Can you design a function in Python to print the first 20 even numbers in ascending order?  def print_even_numbers():
    even_nums = [num for num in range(0, 40) if num % 2 == 0]
    for num in even_nums[:20]:
        print(num)

print_even_numbers()
Write a Python code to detect the Odd or Even numbers in a given list. list = [1, 2, 3, 4, 5] for num in list: 
    if num % 2 == 0: 
        print(num, "is an even number") 
    else: 
        print(num, "is an odd number")
Create a Python application for controlling an LED light strip. The application should have functions for changing the color and brightness of the lights. Not applicable from gpiozero import LED

light_strip = LED(17)

def set_light_color(red, green, blue):
 """
 Sets the color of the LED light strip.

 Args:
  red (int): The red channel of the color.
  green (int): The green channel of the color.
  blue (int): The blue channel of the color.
 """
 light_strip.colors = (red, green, blue)

def set_light_brightness(brightness):
 """
 Sets the brightness of the LED light strip.

 Args:
  brightness (int): The brightness value (0 - 1).
 """
 light_strip.brightness = brightness

set_light_color(255, 128, 0)
set_light_brightness(0.5)
Create a class in Python named "MyCalculator" with a method "sum" that calculates the sum of two numbers.  class MyCalculator:
    def __init__(self):
        pass
    
    def sum(self, a, b):
        return a + b
Write a Python script to classify emails as spam or not.  #import packages
import numpy as np
import pandas as pd 
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score

# Load the data from the 'spam' emails dataset
emails_data = pd.read_csv("emails.csv")

# Split the data into features and labels
X = emails_data.drop("label", axis=1)
y = emails_data["label"]

# Split the data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=0
)

# Create the Multinomial Naive Bayes model
mnb = MultinomialNB()

# Train the model
mnb.fit(X_train, y_train)

# Make predictions
predictions = mnb.predict(X_test)

# Evaluate the accuracy of the model
print("Accuracy:", accuracy_score(y_test, predictions))
Analyze a given Python code snippet and determine its type - a documentation, a code snippet, or a comment. def f(x):
    """A simple function
    that prints the argument"""
    print(x) Documentation
Rewrite a Python program from imperative to functional style. def find_even_numbers(numbers):
  even_numbers = []
  for num in numbers:
    if num % 2 == 0:
      even_numbers.append(num)
  return even_numbers def find_even_numbers(numbers):
    even_numbers = filter(lambda num: num % 2 == 0, numbers)
    return list(even_numbers)
Write a Python program to search through a list of strings and find the longest common prefix string. [ "panel", "panda", "paint", "panther" ] def longest_common_prefix(words):
    # Sort the strings in the list
    # so that the first string is the shortest
    words.sort(key=len) 
    
    # Initialize a prefix to empty string
    prefix = ""

    # Loop until length of prefix is less
    # than the length of the shortest string
    while len(prefix) < len(words[0]): 
        # Set the current character to 
        # the character at i-th index of 
        # the shortest string
        current = words[0][len(prefix)] 

        # Check if the character is present 
        # in the substring of all other strings 
        for i in range(1, len(words)): 
            # Loop through all the words 
            # starting from the second string 
            if words[i][len(prefix)] != current:
                # Return the prefix if the character 
                # is not present in the rest of the strings 
                return prefix
        # Add the current character to the prefix
        prefix += current 

    # Return the longest prefix 
    return prefix
Create a python function for calculating the area of a circle given the radius.  def area(radius): 
    return 3.14 * radius * radius
Write a method in Python to print each element in a given dictionary. {
    "Alice": 23,
    "Bob": 30,
    "John": 27
} def printDict(dictionary): 
    for key in dictionary: 
        print("{}: {}".format(key, dictionary[key])) 

dict = {
    "Alice": 23,
    "Bob": 30,
    "John": 27
}
printDict(dict)
Write a Python program to generate a list containing all the linear combinations of `x` and `y`, where `x` and `y` are given as input. x = [1, 2, 3]
y = [4, 5, 6] x = [1, 2, 3]
y = [4, 5, 6]

combinations = [[i, j] for i in x for j in y]
print(combinations)
Edit the given Python code to add a try-except block. x = 5
y = 0
z = x/y

print(z) try:
  x = 5
  y = 0
  z = x/y
  print(z)
except ZeroDivisionError as e:
  print('Cannot divide by zero!')
Write a python program to convert an integer to its binary form.  def integer_to_binary(num):
    if num == 0:
        return 0
    elif num < 0:
        num += 2**32
    binary = ''
    while num > 0:
        binary = str(num%2) + binary
        num //= 2
    return binary
Create a python program to calculate the average of three numbers.  def average(a,b,c):
    return (a + b + c) / 3
Develop a function in python to delete all the vowels in a string. string = "B e a u t iful" def remove_vowels(string):
    vowels = 'aeiou'
    new_string = ''

    for c in string:
        if c.lower() not in vowels:
            new_string += c
    
    return new_string

if __name__ == '__main__':
    string = "Beau tiful"
    print(remove_vowels(string))
Create an AI ML model using Python to classify a given dataset which contains restaurants reviews into different categories. dataset containing 8,000 restaurant reviews import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import classification_report

# Read the dataset
data = pd.read_csv('restaurant_reviews.csv')

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(data['review'], data['category'], test_size=0.2, random_state=42)

# Initialize the CountVectorizer
vect = CountVectorizer().fit(X_train)

# Transform the training and testing sets
X_train_vectorized = vect.transform(X_train)
X_test_vectorized = vect.transform(X_test)

# Initialize and train the model
model = MultinomialNB().fit(X_train_vectorized, y_train)

# Make predictions
preds = model.predict(X_test_vectorized)

# Generate the classification report
print(classification_report(y_test, preds))
Generate a python function that takes in a string and replaces certain characters Input string: "hello world"
Characters to replace: "l"
Replacement character: "a" def replaceChar(s, charToReplace, replacementChar): 
    newStr = ""
    for char in s:
        if char == charToReplace:
            newStr += replacementChar
        else: 
            newStr += char
    return newStr

print(replaceChar("hello world", "l", "a")) # Output: "heaaao worad"
Write a Python program to add a prefix and suffix to all strings in a list. list = ['abc', 'def', 'ghi'] pre = "PRE-"
suf = "-SUF"

enriched_list = [ pre + s + suf for s in list]

print(enriched_list)
Generate a python program to find the sum of series 1 +1/2 + 1/4 +….+ 1/n  def series_sum(n):
    sum_series = 0
    for i in range(1, n + 1):
        sum_series += 1/i
    return sum_series
Generate a Python program to generate a random number within a given range.  def random_num(start, end):
  return random.randint(start, end)
Create an algorithm in Python that takes an array of strings and sorts them in alphabetical order. ['Jan', 'June', 'Raju', 'April'] def alphabeticalSort(arr):
    arr.sort()
    return arr

result = alphabeticalSort(['Jan', 'June', 'Raju', 'April'])
print(result)
Write a Python program to search for a specific word in a given string and return the number of times the string appears. String: "Hello, world! This is a sample message."
Word: "hello" string = "Hello, world! This is a sample message."
word = "hello"

count = string.lower().split().count(word.lower())
print(f"The word {word} appears {count} times in the given string.")
Generate a script that parses a JSON string and prints out the corresponding Python dictionary. {"name": "John", "age": 30, "city": "New York"} import json

json_string = '{"name": "John", "age": 30, "city": "New York"}'
parsed_json = json.loads(json_string)

print(parsed_json)
Generate a Python program to sort a list of strings alphabetically. ['banana', 'apple', 'orange'] def sort_strings(string_list):
    sorted_list = sorted(string_list)
    return sorted_list

unsorted_list = ['banana', 'apple', 'orange']
sorted_list = sort_strings(unsorted_list)
print(sorted_list)
Implement a K Nearest Neighbors algorithm in Python.  import numpy as np 
from math import sqrt 
import warnings 
from collections import Counter 

def k_nearest_neighbors(data, predict, k=3): 
    if len(data) >= k: 
        warnings.warn('K is set to a value less than total voting groups!') 
  
    distances =[] 
    for group in data: 
        for features in data[group]: 
            euclidean_distance = np.linalg.norm(np.array(features) - np.array(predict)) 
            distances.append([euclidean_distance, group]) 
  
    votes = [i[1] for i in sorted(distances)[:k]] 
    vote_result = Counter(votes).most_common(1)[0][0] 
    confidence = Counter(votes).most_common(1)[0][1] / k 

    return vote_result, confidence
Create a function to lexicographically compare two strings in
Python.  def stringCompare(str1, str2):
    if str1 < str2: 
        return -1
    elif str1 > str2: 
        return 1
    else: 
        return 0

str1 = "Hello"
str2 = "World"

result = stringCompare(str1, str2)
if result == -1:
    print ("str1 is less than str2")
elif result == 1:
    print ("str2 is less than str1")
else:
    print ("str1 is equal to str2")
Generate a Python program to apply custom formatting for the following output. Given a list of strings, output a HTML table with data in the strings def create_html_table(slist):
    table_html = "<table>"
    for str in slist:
        table_html += "<tr>"
        table_html += "<td>" + str + "</td>" 
        table_html += "</tr>"

    table_html += "</table>"
    return table_html
Write a Python function to classify data points as low, medium and high according to the given threshold values. threshold = [4, 6] def classify(value, threshold):
    if value < threshold[0]:
        return 'low'
    elif threshold[0] <= value < threshold[1]:
        return 'medium'
    else:
        return 'high'
Create a function in Python that checks if a given number is a prime. 15 def isPrime(n):
    if n < 2:
        return False
    for i in range(2, int(sqrt(n))+1):
        if n % i == 0:
            return False
    return True
Implement a Python program to find the maximum and minimum of a list. [3, 2, 8, 9, 5] # Function to find the maximum and minimum of a list
def find_max_min(nums):
    max = nums[0]
    min = nums[0]
    for num in nums:
        if num > max:
            max = num
        if num < min:
            min = num
    return (max, min)

# Test program
nums = [3, 2, 8, 9, 5]
max, min = find_max_min(nums)
print('Maximum:', max)
print('Minimum:', min)
Write a Python program to detect duplicate values in a list. my_list = [1, 3, 5, 6, 3, 4, 7, 5] seen = set()
duplicates = []
for item in my_list:
 if item in seen:
 duplicates.append(item)
 else:
 seen.add(item)

print(duplicates)
# Output: [3, 5]
Write a Python script to solve a partial differential equation.  import numpy as np
import scipy.special
from scipy.integrate import ode

def pde_solve(u0, t0, t1, dt):
    # Define the right-hand side
    def f(t, u, args):
        dudt = args*u
        return dudt
    
    # Create the solver
    solver = ode(f).set_integrator('dopri5', method='adams')
    solver.set_initial_value(u0, t0).set_f_params(args)
    
    # Solve the equation
    t = t0
    u = u0
    while solver.successful() and solver.t < t1:
        u = solver.integrate(solver.t + dt)
        t = solver.t
    
    return u
Write a Python program to automatically generate the HTML for a table from a dictionary of data. d = {"col1": ["A", "B", "C"],
"col2": [2, 4, 6],
"col3": [3, 5, 7]} html_str = '<table><tr>'

for key in d:
 html_str += '<th>{}</th>'.format(key)
html_str += '</tr>'

for i in range(len(d['col1'])):
 html_str += '<tr>'
 for key in d:
 html_str += '<td>{}</td>'.format(d[key][i])
 html_str += '</tr>'

html_str += '</table>'

print(html_str)
Generate a python program to collect all elements of a given list that are of even length. list = ["a", "bb", "ccc", "dddd", "eee"] def even_length_elements(my_list):
  even_length_list = list()
  for elem in my_list:
     if (len(elem) % 2 == 0):
        even_length_list.append(elem)
  return even_length_list
Write a function in Python that takes two strings and checks if they are anagrams (i.e., if they contain the same characters in the same order). Strings: "Hello", "World" def isAnagram(str1, str2):
    # Convert the strings to lowercase
    str1 = str1.lower()
    str2 = str2.lower()

    # Sort the strings
    str1sorted = ''.join(sorted(str1))
    str2sorted = ''.join(sorted(str2))

    # Check if sorted strings are equal 
    if(str1sorted == str2sorted):
        return True
    else:
        return False

# Test
print(isAnagram('Hello', 'World'))
Develop a program in Python that partitions a given list into two parts, such that the sum of the two parts are equal. [1,2,3,4,5] def partition(nums):
    """
    Partitions the given list into two parts such that
    the sum of the two parts are equal.
    @param nums: List
    @return: List
    """
    total = sum(nums)
    curr_sum = 0
    left_list = []
    right_list = []
    
    for num in nums:
        if curr_sum <= total/2:
            left_list.append(num)
            curr_sum += num
        else:
            right_list.append(num)
    return (left_list, right_list)
Design a Python generator to return all possible permutations of a given collection. [1,2,3] def permutations(nums):
    if len(nums) <=1:
        yield nums
    else:
        for perm in permutations(nums[1:]):
            for i in range(len(nums)):
                # nb elements[0:1] works in both string and list contexts
                yield perm[:i] + nums[0:1] + perm[i:]

# Driver program to test above
data = [1, 2, 3] 
for perm in list(permutations(data)): 
    print(perm)
Create a Python script to find the maximum and minimum values for each sublist in a list [[8, 4], [6, 2, 3], [1, 9, 7]] def findMinMax(list):
    min_list = []
    max_list = []
    
    for sublist in list: 
        min_list.append(min(sublist)) 
        max_list.append(max(sublist)) 
    return min_list, max_list 

list = [[8, 4], [6, 2, 3], [1, 9, 7]] 
min_list, max_list = findMinMax(list) 

print("The min values of given sublist :", min_list) 
print("The max values of given sublist :", max_list) 

# Output
# The min values of given sublist : [4, 2, 1]
#The max values of given sublist : [8, 6, 9]
Develop a program for solving the traveling salesman problem in Python.  import pulp

#Create the ‘prob’ variable to contain the problem data
prob = pulp.LpProblem('Travelling_Salesman_Problem', pulp.LpMinimize)

#Create problem Variables
route = list(range(1,nodes+1))

# Define Cost Matrix
weights = [[0, 8, 2, 10], [8, 0, 4, 12], [2, 4, 0, 9], [10, 12, 9, 0]]

# Create a list of tuples containing all the possible routes
all_pairs = [(i,j) for i in route for j in route if i != j]
 
# Create a list of tuples containing all the possible routes for two stops
all_trips = [(i,j,k) for i in route for j in route for k in route if i!=j and j!=k and i != k]
 
# Create a list of tuples containing all the possible routes for three stops
all_trips = [(i,j,k,l) for i in route for j in route for k in route for l in route if i!=j and j!=k and k!=l and i != k and i != l and j != l]

# Create a dictionary of all the routes and the associated cost
costs = dict(zip(all_trips, weights))

# Create dictionary of refular pairs and the associated cost
pair_costs = dict(zip(all_pairs, weights))

# Create a list of tuples containing all possible routes for the given number of stops
trip_vars = pulp.LpVariable.dicts('trip',all_trips, lowBound=0, upBound=1,cat=pulp.LpInteger)

# Objective Function
prob += pulp.lpSum([trip_vars[i] * costs[i]for i in all_trips]), "Sum_of_Transporting_Costs"

# Constraints
# Ensure that the total number of trips are healthy
prob += pulp.lpSum([trip_vars[i] for i in all_trips]) == 1, "Sum_of_Trips"

# Ensure that the total number of trips each city is healthy
for k in route:
    prob += pulp.lpSum([trip_vars[i] for i in all_trips if k in i]) <= 1, "Sum_of_Trips_out_of_City_%d"%k

#Ensure that each stop is usually used
for pairs in all_pairs:
    prob += pulp.lpSum([trip_vars[i] for i in all_trips if pairs[0] in i and pairs[1] in i]) <= pair_costs[pairs], "Sum_of_Trips_%s_%s"%pairs

# The problem is solved using PuLP's choice of Solver
prob.solve()
Generate a Python program to find the nth Fibonacci number. 5 def fibonacci(n): 
    # base condition
    if n == 0 or n == 1: 
        return n
    
    # calculate Fibonacci number for n
    return fibonacci(n-1) + fibonacci(n-2)

# test 
print(fibonacci(5))

Output:
5
Write a function to calculate the average of a Python list of integers. numbers = [2, 4, 5, 7, 8] def calculate_average(numbers):
  return sum(numbers)/len(numbers)

numbers = [2, 4, 5, 7, 8]
print(calculate_average(numbers)) # Output: 5.6
Develop a Python program to compact a given list of integers by removing its duplicate elements. [1, 1, 2, 2, 3, 4, 4, 5] def compact_list(array):
    return list(set(array))
Create a Python program that uses the NumPy library to generate a series of random numbers. Not applicable import numpy as np

# Generate random integers within a specified range
x = np.random.randint(0, 10, size=(3, 3))

# Generate random floats within a specified range
y = np.random.uniform(low=0.0, high=10.0, size=(3, 3))

# Generate random numbers with numpy
z = np.random.rand(3,3)

print('Random integers:', x, '\n') 
print('Random floats:', y, '\n') 
print('Random numbers:', z)
Build a web application using Django and React that displays a list of products and provides user authentication. Not applicable # Setup Django

# Create a Django project
django-admin startproject myproject

# Create an app inside the Django project
cd myproject
python manage.py startapp products

# Add the app to INSTALLED_APPS in the settings.py file
INSTALLED_APPS = [
    'products.apps.ProductsConfig',
    # other apps
]

# Add the authentication app to INSTALLED_APPS in the settings.py file
INSTALLED_APPS = [
    'django.contrib.auth',
	# other apps
]

# Setup React

# Create a React application
create-react-app myapp

# Add the dependecies 
cd myapp
npm install react-router-dom
npm install axios
npm install react-bootstrap

# Create components
# Create components for:
# Home page
# Product list page
# Login page
# Logout page
# Authentication

# Add routes for the components
# Add routes for the login, logout, and product list components

# Connect to the Django server
# Add the Django API to the React application
axios.defaults.baseURL = 'http://localhost:8000/'

# Render the React application
# Create the entry point for the application 
# Add a script tag pointing to the entry point
# Render the application in the browser
Develop a code to sort a list of numbers in increasing order in Python. [8, 15, 2, 18, 10] def sort_list(input_list): 
    # Traverse through all array elements 
    for i in range(len(input_list)): 
  
        # Find the minimum element in remaining  
        # unsorted array 
        min_idx = i 
        for j in range(i+1, len(input_list)): 
            if input_list[min_idx] > input_list[j]: 
                min_idx = j 
              
        # Swap the found minimum element with  
        # the first element         
        input_list[i], input_list[min_idx] = input_list[min_idx], input_list[i] 
  
    return input_list
  
# Driver code to test above
if __name__ == '__main__':
    input_list = [8, 15, 2, 18, 10]
    print("Input list:", input_list)
    print("Sorted list:", sort_list(input_list))
Create a simple Python program that takes in two strings and prints the one with the longer length. string1:'Inception', string2: 'Interstellar' string1 = 'Inception'
string2 = 'Interstellar'

if len(string1) > len(string2):
    print(string1)
else:
    print(string2)
Create a Python program to optimize a given function for a given interval. func = lambda x: x**2 - 4.5*x + 5 
interval = [-3.5, 4.5] import scipy.optimize

# Execute optimization
mini = scipy.optimize.minimize_scalar(func = func, 
                bounds = interval)
                 
# Print optimal value x_opt
print('{0:5.5f}'.format(mini.x))
Create a Python program that takes a list of integers as an input and returns a dictionary with keys being the numbers and values being the frequency of those numbers in the list. [1, 3, 5, 6, 1, 2, 5, 3] def counting(nums):
    result={}
    for num in nums:
        if num in result:
            result[num]+=1
        else:
            result[num]=1
    return result

nums=[1, 3, 5, 6, 1, 2, 5, 3]
result=counting(nums)
print(result)
# Output: {1: 2, 3: 2, 5: 2, 6: 1, 2: 1}
Write a Python code to print a dictionary where the keys are numbers between 1 and 15 (both included) and the values are square of keys.  my_dict ={}
for num in range(1, 16):
    my_dict[num] = num*num

print(my_dict)
Create a Python script to calculate the running sum of an array. [1, 2, 3, 4, 5] # Create a function to compute running sum
def running_sum(lst):
    running_sum = 0
    running_lst = []
    for num in lst:
        running_sum += num
        running_lst.append(running_sum)
    return running_lst

# Test array
test = [1, 2, 3, 4, 5]

# Print the result
print(running_sum(test))
Create a web scraper in Python to get the title and first paragraph of a web page Web page URL: https://en.wikipedia.org/wiki/Machine_learning import requests
from bs4 import BeautifulSoup

url = 'https://en.wikipedia.org/wiki/Machine_learning'

# Make a GET request to fetch the raw HTML content
html_content = requests.get(url).text

# Parse the html content
soup = BeautifulSoup(html_content, "lxml")
# Print the title of the web page
print("Title:", soup.title.string)

# Find the first paragraph
first_paragraph = soup.find('p').text
print("First paragraph:", first_paragraph)
Create a python function to take a list of numbers as an argument, and return the sum of the odd numbers in the list [2, 3, 4, 5, 6, 7] def odd_numbers(numbers):
    result = 0 
    for num in numbers: 
        if num % 2 != 0:
            result += num
    return result
Create a Python script to filter a dataset of customer reviews. The script should take a dataframe of customer reviews (with columns for customer, product, rating, and review content) as input, and should output a subset of reviews that have a rating of 4 or more stars. import pandas as pd

df = pd.DataFrame(
 {'customer': ['John', 'Kate', 'Sarah', 'Daniel', 'Edward', 'Angela', 'Steve', 'Michael'],
  'product': ['Widget', 'Widget', 'Widget', 'Widget', 'Phone', 'Phone', 'Phone', 'Phone'],
  'rating': [5, 4, 3, 4, 5, 3, 3, 5],
  'content': ['Loved this product', 'I was satisfied', 'Not great', 
              'Generally liked it', 'Didn\'t like it', 'Terrible',
              'It was okay', 'Loved it!']
 }) filtered_df = df[df['rating'] >= 4]

filtered_df
   customer product  rating             content
0     John  Widget       5       Loved this product
1     Kate  Widget       4       I was satisfied
3   Daniel  Widget       4  Generally liked it
4   Edward   Phone       5      Didn't like it
7  Michael   Phone       5           Loved it!
Create a Python program to calculate the factorial of an integer 7 def factorial(n): 
    if n == 0 or n == 1: 
        return 1
    else: 
       return n * factorial(n - 1)

result = factorial(7)
print(result)
Write a Python function to compare two strings and check if they are equal. Compare 'Hello' and 'World' def str_compare(str1, str2):
return str1 == str2

str_compare('Hello', 'World')
Write a Python program to remove all duplicated words from a given input string. sentence = "This is a sentence with some duplicate words in it." sentence_words = sentence.split(" ")
 
unique_words = set(sentence_words)
 
print(" ".join(unique_words))
Create a Python module for a spiral matrix with the following functions: createSpiralMatrix, printSpiralMatrix, and transposeSpiralMatrix. Not applicable def createSpiralMatrix(n):
 matrix = [[0] * n for i in range(n)]
 row = 0
 col = -1
 total = n * n
 spiral = 1

 while total > 0:
 # move left -> right
 while col + 1 < n and matrix[row][col + 1] == 0:
 col += 1
 matrix[row][col] = spiral
 total -= 1
 spiral += 1

 # move up -> down
 while row + 1 < n and matrix[row + 1][col] == 0:
 row += 1
 matrix[row][col] = spiral
 total -= 1
 spiral += 1

 # move right -> left
 while col - 1 >= 0 and matrix[row][col - 1] == 0:
 col -= 1
 matrix[row][col] = spiral
 total -= 1
 spiral += 1

 # move down -> up
 while row - 1 >= 0 and matrix[row - 1][col] == 0:
 row -= 1
 matrix[row][col] = spiral
 total -= 1
 spiral += 1

 # move left -> right
 while col + 1 < n and matrix[row][col + 1] == 0:
 col += 1
 matrix[row][col] = spiral
 total -= 1
 spiral += 1

 return matrix

def printSpiralMatrix(matrix):
 for row in matrix:
 print(*row)

def transposeSpiralMatrix(matrix):
 return [list(x) for x in zip(*matrix)]
Write a Python script to take an array of integers and find the number with the highest frequency. Not applicable def find_most_frequent(numbers):
    frequency_dict = {}
    for n in numbers:
        if n in frequency_dict:
            frequency_dict[n] += 1
        else:
            frequency_dict[n] = 1
            
    max_frequency = 0
    most_frequent = 0
    for k, v in frequency_dict.items():
        if v > max_frequency:
            max_frequency = v
            most_frequent = k
            
    return most_frequent
    
# Usage
numbers = [1, 2, 3, 1, 2, 2]
most_frequent = find_most_frequent(numbers)
print(most_frequent) # Outputs 2
Create an AWS Lambda function in Python that handles GET requests to the URL /hello and responds with a welcome message. Not applicable import json

def lambda_handler(event, context):
    if event['httpMethod'] == 'GET':
        response =  {
            'statusCode': 200,
            'headers': {'Content-Type': 'application/json'},
            'body': json.dumps({'message': 'Welcome!'})
        }
        return response
Write a Python program to calculate a new matrix after the multiplication by a scalar value. Matrix: [ [3,6,2], [9,2,3], [4,8,6] ]
Scalar: 3 def scalar_multiply(matrix, scalar):
    result = [[0,0,0],
              [0,0,0],
              [0,0,0]]
    # iterate through rows
    for i in range(len(matrix)):
         # iterate through columns
         for j in range(len(matrix[0])):
              result[i][j] = matrix[i][j] * scalar
    return result

# 3x3 matrix
matrix = [[3,6,2],
          [9,2,3],
          [4,8,6]]

# scalar value
scalar = 3

# result matrix
result = scalar_multiply(matrix, scalar)

# print the result
for r in result:
    print(r)
Design a function in Python to print a n x n matrix in spiral order. n = 4 def print_spiral_matrix(n):
    matrix = [[0] * n for i in range(n)]
 
    i = 0
    j = 0
 
    top = 0
    left = 0
    right = n - 1
    bottom = n - 1
 
    direction = 0
 
    while top <= bottom and left <= right:
        if direction == 0:
            for j in range(left, right + 1):
                matrix[top][j] = i
                i += 1
            top += 1
            direction = 1
        elif direction == 1:
            for i in range(top, bottom + 1):
                matrix[i][right] = i
                i += 1
            right -= 1
            direction = 2
        elif direction == 2:
            for j in range(right, left - 1, -1):
                matrix[bottom][j] = i
                i += 1
            bottom -= 1
            direction = 3
        elif direction == 3:
            for i in range(bottom, top - 1, -1):
                matrix[i][left] = i
                i += 1
            left += 1
            direction = 0
 
    for i in range(n):
        print(matrix[i])
Write a Python program that multiplies all even numbers in a given list.  def multiplyEvens(numbers):
    # Initialize result 
    result = 1
      
    # Multiply all even elements 
    for x in numbers: 
        if x % 2 == 0: 
            result = result * x 
    return result 
  
# Driver code 
assert multiplyEvens([2, 3, 4, 5, 6]) == 48
Propose a Pythonic solution to the following code # List of non-empty strings
items = ['apple', 'banana', 'cat', 'dog', 'elephant']
for i in range(len(items)):
    print('item ' + str(i) + ' is ' + items[i]) # List of non-empty strings
items = ['apple', 'banana', 'cat', 'dog', 'elephant']
for i, item in enumerate(items):
    print('item ' + str(i) + ' is ' + item)
Write a Python program to optimize an array of numbers so that the sum of elements is maximum and all the elements are greater than 0. [1,-2,3,4,-5] import numpy as np

# Get the input array
arr = [1,-2,3,4,-5]

# Optimize the array so that the sum of elements is maximized
# and all the elements are greater than 0
new_arr = np.max(arr,0)

# Print the optimized array
print("Optimized Array : ",*new_arr)
Using the random module of Python, create a program that prints 10 random numbers between 1 and 100.  import random

for i in range(10):
    x = random.randint(1, 100)
    print(x)
Write a Python program that takes two strings and returns their combined length. word1 = ‘Hello’ 
word2 = ‘world’ def combine_string_lengths(word1, word2): 
  return len(word1) + len(word2)
Create a program in Python to split a string into a list by given character string = 'This is a sample string' def split_string(string, delimiter): 
    return string.split(delimiter) 

print(split_string('This is a sample string', ' '))
Normalize the following text using Python. the     Cat    in  the  hat text = "the Cat in the hat"
text = text.replace('  ', ' ').strip()
print(text)
Create a basic Python script that generates a random password of 12 characters with at least 1 number, 1 special character, and 1 uppercase letter. Not applicable import random
import string

def generate_password():
 chars = string.ascii_letters + string.digits + string.punctuation
 password = ''.join(random.choice(chars) for i in range(12))
 return password

if name == 'main':
 password = generate_password()
 print(password)
Create a command line calculator in Python to perform basic arithmetic operations. Not applicable import sys

def add(x, y):
    return x + y

def substract(x, y):
    return x - y

def multiply(x, y):
    return x * y

def divide(x, y):
    return x / y

# input from command line 
input_str = sys.argv
operation = input_str[1]
num1 = int(input_str[2])
num2 = int(input_str[3])

if operation == 'add':
    print(add(num1, num2))
elif operation == 'substract':
    print(substract(num1, num2))
elif operation == 'multiply':
    print(multiply(num1, num2))
elif operation == 'divide':
    print(divide(num1, num2))
else:
    print('Invalid Operation')
Write a Python program to automatically format and validate user input. Not applicable import re

def validate_input(input):
 # validate pattern:
 pattern = r"^[a-zA-Z]*$"
 # compile regex
 regex = re.compile(pattern)

 # check if input matches pattern
 if(regex.match(input)):
  # format the input
  input = input.lower().capitalize()
  # return formatted input
  return input
 else:
 # return error
 return "Error: Invalid input"
Design a function for ordering a pizza in Python and use it to order a pizza with 3 toppings. Toppings: Pepperoni, Mushroom, Olives def orderPizza(toppings):
    print("Ordering a pizza with the following toppings:")
    for topping in toppings:
      print(topping)
    print("Thank you!")
orderPizza(["Pepperoni", "Mushroom", "Olives"])
Create a new Python class for managing a Chatbot. The class should have methods for checking for greetings, getting user input, and responding to user input. Not applicable class Chatbot:
 def __init__(self):
 self.greeting_keywords = ('hi', 'hello', 'hey', 'hola')

 def check_for_greeting(self, sentence):
 for word in sentence.words:
 if word.lower() in self.greeting_keywords:
 return True

 def get_user_input(self):
 user_input = input('You: ')
 return user_input

 def respond(self, user_input):
 print('Chatbot: ', end='')
 if self.check_for_greeting(user_input):
 print('Hi there!')
Generate a program in Python count the number of words in a given sentence.  def count_words(sentence):
    words = sentence.split(' ')
    return len(words)
Write a Python program to find all unique triplets of number in an array that sums up to 0. [-1, 0, 1, 2, -1, -4] def threeSum(nums): 
 # Find all unique triplets of number in an array that sums up to 0 
 
 res = [] 
 nums.sort() 
 for i in range(len(nums) - 2): 
 # avoid duplicate triplets 
 if i > 0 and nums[i] == nums[i - 1]: 
 continue
 # two pointer 
 l = i + 1 
 r = len(nums) - 1
 while l < r: 
 s = nums[i] + nums[l] + nums[r] 
 if s > 0: 
 r -= 1 
 elif s < 0: 
 l += 1 
 else: 
 res.append((nums[i], nums[l], nums[r])) 
 l += 1 
 r -= 1 
 # handle duplicate
 while l < r and nums[l] == nums[l + 1]: 
 l += 1 
 while l < r and nums[r] == nums[r - 1]: 
 r -= 1 
 return res

array = [-1, 0, 1, 2, -1, -4]

print(threeSum(array))

# Output: [(-1, 0, 1), (-1, -1, 2)]
Create a Python program to find out if a string contains any characters from another given string. String 1: Hello
String 2: eo def contains_chars(str1, str2):
 if any([c in str1 for c in str2]):
 return True
 return False

string1 = "Hello"
string2 = "eo"

print(contains_chars(string1, string2)) // Outputs: True
Optimize a given Python program by remove any code that causes unnecessary performance reduction. for i in range(10000000):
    dig = 0
    num = i
    while num > 0:
          dig = dig + (num % 10)
          num = num // 10 cumulative_sum = 0
while i > 0:
    cumulative_sum += (i % 10) # add the last digit of the number to the cumulative sum
    i //= 10 # truncate the last digit of the number

# Output 
#cumulative_sum will hold the sum of all the digits in the number
Generate a Python code to classify the given text into three categories The input can be a sentence or a paragraph describing a product 

For example:
This phone is great for streaming videos and taking selfies. class ClassifyText:
    def __init__(self, text):
        self.text = text
        
    def classify(self):
        if "streaming videos" in self.text:
            return "video"
        elif "taking selfies" in self.text:
            return "selfie"
        else:
            return "other"
Write a Python program to create a class for handling web requests that returns a response in the UTF-8 encoding. Not applicable import requests

class RequestHandler:
 def __init__(self):
 self.session = requests.Session()
 
 def get(self, url):
 response = self.session.get(url)
 response.encoding = 'utf-8'
 return response
 
 def post(self, url, data):
 response = self.session.post(url, data=data)
 response.encoding = 'utf-8'
 return response
Generate a Python program to convert all characters to lowercase  def convert_to_lowercase(string):
    return string.lower()
Create a Python program to classify an animal into one of four classes (fish, bird, mammal, reptile) based on its characteristics. The animal is cold-blooded, lays eggs, and has scales. """
Create a Python program to classify an animal into one of four classes

"""
# define the characteristics
is_cold_blooded = True
lays_eggs = True
has_scales = True

# determine the animal class
if is_cold_blooded and lays_eggs and has_scales:
    animal_class = 'Reptile'
elif is_cold_blooded and lays_eggs and not has_scales:
    animal_class = 'Bird'
elif is_cold_blooded and not lays_eggs and has_scales:
    animal_class = 'Fish'
elif not is_cold_blooded and not lays_eggs and not has_scales:
    animal_class = 'Mammal'

# print the result
print('The animal belongs to class:', animal_class)
Develop a web application using Django and Python to show a list of names and corresponding contact details.  import os

# Set up Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "myproject.settings")
import django
django.setup()

# Define the web application
from django.http import HttpResponse
def index(request):
    # Create a list of names and contact numbers
    names = ['John', 'Anthony', 'Dave']
    contacts = ['212-555-1234', '212-555-2345', '212-555-3456']
    
    # Build an html table
    html = '<html><table><tr><th>Name</th> <th>Contact Number</th> </tr>'
    for i in range(len(names)):
        html += '<tr><td align=center>' + names[i] + '</td> <td align=center>' + contacts[i] + '</td> </tr>'
    
    # Close the table
    html += '</table></html>'
    return HttpResponse(html)
Write a Python program to create a Tic Tac Toe game.  """
Write a Python program to create a Tic Tac Toe game
"""

# global variables 
board = ["-", "-", "-", 
         "-", "-", "-", 
         "-", "-", "-"] 
game_is_still_going = True 
  
# who is the winner 
winner = None
  
 # whose turn is it 
current_player = "X"


# display board
def display_board(): 
    print(board[0] + " | " + board[1] + " | " + board[2])
    print(board[3] + " | " + board[4] + " | " + board[5]) 
    print(board[6] + " | " + board[7] + " | " + board[8])
  
  
# play a game of tic tac toe 
def play_game(): 
    
    # display initial board 
    display_board() 
  
    # while game is still going 
    while game_is_still_going: 
  
        # assign handle turn to a variable 
        handle_turn(current_player) 
  
        # check if game is finished 
        check_if_game_over()
  
        # flip to another player 
        flip_player() 
          
    # check if winner  
    if winner == "X" or winner == "O": 
        print("Winner is: " + winner) 
    elif winner == None: 
        print("Tie.") 

# handle a single turn of a player 
def handle_turn(player): 
  
    position = input("Choose a position from 1-9: ") 
    position = int(position) - 1
  
    board[position] = player 
  
    display_board() 
  
  
# check win
def check_if_game_over(): 
    check_if_win() 
    check_if_tie() 
  
# check rows, columns and diagonals for a win 
def check_if_win(): 
    # set global variables 
    global winner 
    # check rows 
    row_winner = check_rows() 
    # check columns 
    column_winner = check_columns() 
    # check diagonals 
    diagonal_winner = check_diagonals() 
    if row_winner: 
        # there is a win 
        winner = row_winner 
    elif column_winner: 
        # there is a win 
        winner = column_winner 
    elif diagonal_winner: 
        # there is a win 
        winner = diagonal_winner 
    else: 
        # there is no win 
        winner = None
    return 
  
# check rows for a win 
def check_rows(): 
    # set global varibales 
    global game_is_still_going 
    # check if any of the rows have all the same values (and is not empty) 
    row_1 = board[0] == board[1] == board[2] != "-" 
    row_2 = board[3] == board[4] == board[5] != "-" 
    row_3 = board[6] == board[7] == board[8] != "-" 
    # if any row does have a match, flag that there is a win 
    if row_1 or row_2 or row_3: 
        game_is_still_going = False 
    # return the winner (X or O) 
    if row_1: 
        return board[0] 
    elif row_2: 
        return board[3] 
    elif row_3: 
        return board[6] 
    # or return None if there was no win 
    else: 
        return None
  
# check columns for a win 
def check_columns(): 
    # set global variables 
    global game_is_still_going 
    # check if any of the columns have all the same values (and is not empty) 
    column_1 = board[0] == board[3] == board[6] != "-" 
    column_2 = board[1] == board[4] == board[7] != "-" 
    column_3 = board[2] == board[5] == board[8] != "-" 
    # if any column does have a match, flag that there is a win 
    if column_1 or column_2 or column_3: 
        game_is_still_going = False 
    # return the winner (X or O) 
    if column_1: 
        return board[0] 
    elif column_2: 
        return board[1] 
    elif column_3: 
        return board[2] 
    # or return None if there was no win 
    else: 
        return None
  
# check diagonals for a win 
def check_diagonals(): 
    # set global variables 
    global game_is_still_going 
    # check if any of the diagonals have all the same values (and is not empty) 
    diagonal_1 = board[0] == board[4] == board[8] != "-" 
    diagonal_2 = board[2] == board[4] == board[6] != "-" 
    # if any diagonal does have a match, flag that there is a win 
    if diagonal_1 or diagonal_2: 
        game_is_still_going = False 
    # return the winner (X or O) 
    if diagonal_1: 
        return board[0] 
    elif diagonal_2: 
        return board[2] 
    # or return None if there was no win 
    else: 
        return None
  
# check if there is a tie 
def check_if_tie(): 
    # set global variables 
    global game_is_still_going 
    # if board is full 
    if "-" not in board: 
        game_is_still_going = False 
    # return true if there is a tie, false if not 
    return

# flip to another player
def flip_player(): 
    # global variables we need 
    global current_player 
    # if current player was x, make it o 
    if current_player == "X": 
        current_player = "O"
    # if current player was o, make it x 
    elif current_player == "O": 
        current_player = "X"

if __name__ == '__main__':
    play_game()
Given a list of strings and a letter, write a python program that returns the strings that contain the given letter in upper case. strings = ['civic', 'legion', 'elite', 'necrop', 'dark soul']
letter = 'e' def sort_upper(strings, letter):
    result = []
    for string in strings:
        if letter in string and string.upper() == string:
            result.append(string)
    return result

strings = ['civic', 'legion', 'elite', 'necrop', 'dark soul']
letter = 'e'

print(sort_upper(strings, letter))
Generate an API for an ecommerce site where users can list products with an GET request and add products POST. Not applicable import flask
from flask import request, jsonify

app = flask.Flask(__name__)
app.config["DEBUG"] = True

products = [

{'id': 0,
'name': 'iPhone',
'price': 600},

{'id': 1,
'name': 'Macbook',
'price': 1200},

{'id': 2,
'name': 'iPad',
'price': 400},

]

@app.route('/', methods=['GET'])
def home():
    return '''<h1>Products API</h1>
<p>A prototype API for fetching products.</p>'''

# GET request
@app.route('/api/v1/resources/products/all', methods=['GET'])
def api_all():
    return jsonify(products)

# GET request by id
@app.route('/api/v1/resources/products', methods=['GET'])
def api_id():
    # Check if an ID was provided as part of the URL.
    # If ID is provided, assign it to a variable.
    # If no ID is provided, display an error in the browser.
    if 'id' in request.args:
        id = int(request.args['id'])
    else:
        return "Error: No id field provided. Please specify an id."

    # Create an empty list for our results
    results = []

    # Loop through the data and match results that fit the requested ID.
    # IDs are unique, but other fields might return many results
    for product in products:
        if product['id'] == id:
            results.append(product)

    # Use the jsonify function from Flask to convert our list of
    # Python dictionaries to the JSON format.
    return jsonify(results)

# POST request
@app.route('/api/v1/resources/products/add', methods=['POST'])
def api_add():
        # Check form data as json
        product_data = request.get_json()

        # Adding product
        max_id = products[-1]['id'] + 1
        product_data['id'] = max_id
        products.append(product_data)

        # Result message
        return jsonify({
        'message': 'Product successfully added.',
        'products': products
    })

app.run()
Write a Python program to find the most common words in a given list of texts. [
    "This is a test.",
    "This is another test.",
    "This is a different test."
] import collections 

texts = [
    "This is a test.",
    "This is another test.",
    "This is a different test."
]

# split the text into words
words = []
for text in texts:
    words.extend(text.split())

# count the frequencies of each word
word_freq = collections.Counter(words)

# get the most common words
most_common_words = word_freq.most_common(3)

for word, count in most_common_words:
    print('{}: {}'.format(word, count))

#Output:
#This: 3
#is: 3
#a: 2
Generate a sentence in Python that uses a for loop to iterate over a list of strings. strings = ['apple', 'banana', 'cherry'] for s in strings:
    print(f'I like to eat {s}!')
Generate a list of all prime numbers below 100 with Python.  def getPrimes(n):
    primes = []
    for num in range(2, n + 1):
        for idx in range(2, num):
            if num % idx == 0:
                break
        else:
            primes.append(num)
    return primes

print(getPrimes(100))
Can you provide a Python script to automatically generate a 5 character long random alphanumeric string?  import string
import random

def generate_random_string(length=5):
  letters = string.ascii_letters + string.digits
  return ''.join(random.choice(letters) for _ in range(length))
Write a Python program to create a symmetric matrix (with the same elements along the diagonal axis) from a given list of integers. [1,2,3] input_list = [1,2,3]

num_elements = len(input_list)

def create_symmetric_matrix(input_list):
    matrix = [[0 for x in range(num_elements)] for y in range(num_elements)]
    
    for i in range(num_elements):
        for j in range(num_elements):
            if i == j:
                matrix[i][j] = input_list[i]
            else:
                matrix[i][j] = input_list[j]
                
    return matrix

res = create_symmetric_matrix(input_list)
print(res)
Write a Python program to generate random data and create a scatterplot.  """
Generate random data and create a scatterplot
"""

import matplotlib.pyplot as plt
import numpy as np

# Generate 1000 random points
np.random.seed(0)
x = np.random.rand(1000)
y = np.random.rand(1000)

# Create a scatter plot
plt.scatter(x,y)
plt.show()
Classify a given Python program as object-oriented programming. class Employee:
 name = ""
 age = 0

def __init__(self):
 pass

def set_name(self, n):
 self.name = n

def set_age(self, a):
 self.age = a

def display_age(self):
 print(self.age) Yes, this is an example of object-oriented programming, as it defines a class Employee with appropriate instance variables (name and age) as well as methods that can be used to manipulate those variables (like setting or displaying them).
Design and develop an algorithm in Python to generate a Sudoku puzzle board. Not applicable # Function to generate a 9x9 Sudoku puzzle board
def generate_sudoku():
    board = [[0 for x in range(9)] for y in range(9)] # Gnerate the board
    options = [1, 2, 3, 4, 5, 6, 7, 8, 9] # Array of all possible options 
    for x in range(9):
        for y in range(9):
            # Get all the valid options
            valid_options = getValidOptions(board, x, y)
            # Get a random option from the valid options
            random_option = random.choice(valid_options)
            # Place the random option in the board
            board[x][y] = random_option
    return board
 
# Function to get all valid options for a particular cell
def getValidOptions(board, x, y):
    possibilities = [1, 2, 3, 4, 5, 6, 7, 8, 9]
    for i in range(9):
        # Remove the row numbers
        if board[x][i] in possibilities:
            possibilities.remove(board[x][i])
        # Remove the column numbers
        if board[i][y] in possibilities:
            possibilities.remove(board[i][y])
 
    # Calculate the 3 X 3 matrix
    unit_x_start = int((x / 3)) * 3
    unit_y_start = int((y / 3)) * 3
    for i in range(3):
        for j in range(3):
            if board[unit_x_start + i][unit_y_start + j] in possibilities:
                possibilities.remove(board[unit_x_start + i][unit_y_start + j])
    return possibilities
Write a Python program to convert an integer number to words.  from num2words import num2words

def int_to_words(num):
    return num2words(num)
Write a Python program to reverse an array. Input Array: [1, 2, 3, 4, 5] # create a function to reverse an array
def reverseArray(arr):
    # initialize start and end index
    start = 0
    end = len(arr) - 1
  
    # loop until start index is less than end index
    while start < end:
        # swap the elements
        arr[start], arr[end] = arr[end], arr[start]
        # increment start index
        start += 1
        # decrement end index
        end -= 1

# array to be reversed
arr = [1, 2, 3, 4, 5]

# calling the function
reverseArray(arr)

# print the reversed array
print(arr) # Output: [5, 4, 3, 2, 1]
Write a function in Python that takes a string and determines the longest palindrome in it. itsracecarthatmadethetoot def longestPalindrome(s): 
    n = len(s) 
    table = [[0 for x in range(n)] for y in range(n)]
  
    # All substrings of length 1 are palindromes 
    maxLength = 1
    i = 0
    while (i < n): 
        table[i][i] = True
        i = i + 1
  
    # check for substring of length 2. 
    start = 0
    i = 0
    while (i < n - 1): 
        if (s[i] == s[i + 1]): 
            table[i][i + 1] = True
            start = i 
            maxLength = 2
        i = i + 1
  
    # Check for lengths greater than 2. k is length 
    # of substring 
    k = 3
    while (k <= n): 
        # Fix the starting index 
        i = 0
        while (i < (n - k + 1)): 
              
            # Get the ending index of substring from 
            # starting index i and length k 
            j = i + k - 1
  
            # checking for sub-string from ith index to 
            # jth index iff str[i+1] to str[j-1] is a 
            # palindrome 
            if (table[i + 1][j - 1] and s[i] == s[j]): 
                table[i][j] = True
  
                if (k > maxLength): 
                    start = i 
                    maxLength = k 
            i = i + 1
        k = k + 1
    print ("Longest palindrome substring is: ")
    print (s[start:start + maxLength]) 
  
    return maxLength
Develop a Python script to rank an array of integers in ascending order.  def sort_array(array):
    for i in range(len(array)):
        min_val = min(array[i:])
        min_index = array.index(min_val)
        array[i], array[min_index] = array[min_index], array[i]
    return array

array = [3, 5, 1, 9, 6, 4]
res = sort_array(array)
print(res)
Import pandas and time, and read in three CSV files. Merge the dataframes on datetime, lat, and lon. Filter the dataframe to include only rows with lat between 49 and 51 and lon between -125.52 and -120.2. Group the filtered dataframe by lat and lon, and calculate the mean of the Tair column. Write the execution time to a log file.  
# coding: utf-8

# In[1]:

import pandas as pd
import time
from sys import argv

logfile = argv[1]
filesize = argv[2]


# # Python Pandas Benchmark

# In[3]:


prefix = "file:////Users/tony/Dropbox/Projects/UW/cse599c-17sp-projects/spark-advantage/data/"

if(filesize == 'original'):
    tairfname     = "Tair_WA_nohead.csv"
    tsoilfname    = "Tsoil_WA_nohead.csv"
    tsurfacefname = "Tsurface_WA_nohead.csv"
elif (filesize == 'medium'):
    tairfname     = "Tair_WA_nohead.MEDIUM.csv"
    tsoilfname    = "Tsoil_WA_nohead.MEDIUM.csv"
    tsurfacefname = "Tsurface_WA_nohead.MEDIUM.csv"
elif (filesize == "small"):
    tairfname     = "Tair_WA_nohead.SMALL.csv"
    tsoilfname    = "Tsoil_WA_nohead.SMALL.csv"
    tsurfacefname = "Tsurface_WA_nohead.SMALL.csv"



startTime = time.time()



tair = pd.read_csv(prefix+tairfname)
tsoil = pd.read_csv(prefix+tsoilfname)
tsurface = pd.read_csv(prefix+tsurfacefname)

joined = tair.merge(tsoil, on=["datetime", " lat", " lon"]).merge(tsurface, on=["datetime", " lat", " lon"])

joined.columns = [name.strip() for name in joined.columns]
joined[['lat', 'lon']] = joined[['lat', 'lon']].apply(pd.to_numeric)

seattle = joined[(joined['lon'] > -125.52) & \
                 (joined['lon'] < -120.2)  & \
                 (joined['lat'] > 49.0)    & \
                 (joined['lat'] < 51.0)]

seattle.groupby(by=['lat', 'lon'])['Tair'].mean()

exptime = time.time() - startTime
with open(logfile, 'a') as log:
    log.write(str(exptime)+'\n')
Create a function in Python to perform a linear search on a list of numbers. def linear_search(numbers, x): def linear_search(numbers, x):
    """This function will perform a linear search on a list of numbers and return the index of the number if it is present in the list."""
    for i in range(len(numbers)):
        if numbers[i] == x:
            return i 
    # if the number is not found
    return -1
Create a class in Python for a Pizza. The Pizza class should have attributes for size, crust, and toppings Not applicable class Pizza:
 def __init__(self, size, crust, *toppings):
 self.size = size
 self.crust = crust
 self.toppings = toppings

 def describe_pizza(self):
 print(f"This pizza is a {self.size}-inch pizza with a {self.crust} crust and the following toppings:")
 for topping in self.toppings:
 print(f"- {topping}")

my_pizza = Pizza(12, 'thin', 'mushrooms', 'olives', 'pepperoni')
my_pizza.describe_pizza()
Automate this manual process using Python scripting. Every day, we manually check the prices of products listed on a specific website. import requests
import pandas as pd
import json

url = 'https://www.example.com/'

response = requests.get(url)
products = json.loads(response.content)

price_df = pd.DataFrame(columns=['Product', 'Price'])

for product in products:
    product_name = product['name']
    product_price = product['price']
    price_df = price_df.append({'Product': product_name, 'Price': product_price}, ignore_index=True)

price_df.to_csv('product_price.csv', index=False)
Write a Python script for finding the maximum and minimum value in a given list. [1,5,6,8,7] list = [1,5,6,8,7]
min_val = min(list)
max_val = max(list)

print("Minimum value in list is: %d"%min_val)
print("Maximum value in list is: %d"%max_val)
Write a Python program to generate random passwords of length 8 using alphabet, numbers, and symbols. Not applicable import string
import random

def generate_password():
 chars = string.ascii_letters + string.digits + string.punctuation
 password = ''.join(random.choice(chars) for _ in range(8))
 return password

print(generate_password())
Create an AI program that recognizes handwritten letters and digits using Python. Not applicable # imports
import tensorflow as tf
from tensorflow import keras

# load the MNIST dataset
mnist = keras.datasets.mnist
# Split the dataset into training and testing sets
(x_train, y_train), (x_test, y_test) = mnist.load_data()
# Preprocess the data
x_train, x_test = x_train / 255.0, x_test / 255.0

# create a model
model = keras.Sequential()
# add a convolution layer
model.add(keras.layers.Conv2D(28, kernel_size=(3,3), input_shape=(28, 28, 1)))
# add a max pooling layer
model.add(keras.layers.MaxPool2D(pool_size=(2, 2)))
# add a flatten layer
model.add(keras.layers.Flatten())
# add a dense layer
model.add(keras.layers.Dense(128, activation='relu'))
# add an output layer
model.add(keras.layers.Dense(10, activation='softmax'))

# compile the model
model.compile(optimizer='adam', 
 loss='sparse_categorical_crossentropy',
 metrics=['accuracy'])

# train the model
model.fit(x_train, y_train, epochs=5)

# evaluate the model
model.evaluate(x_test, y_test)
Write a Python program to simulate a chatbot that can answer simple questions about coding  """
Program to simulate a chatbot that can answer simple questions about coding
"""

import random 

def chatbot(): 
    # list of predefined responses for a given question 
    responses = { 
        "what is coding" : ["Coding is the process of creating instructions using a programming language to tell a computer what to do.", 
                            "Coding is the process of writing a set of instructions that can be executed by a computer or a machine."], 
        "what are the benefits of coding" : ["Coding helps develop problem-solving skills, promotes analytical thinking, encourages creativity, and develops various digital literacy skills.", 
                                            "Coding can help develop logic, develop math skills, and create a more well-rounded perspective in life."], 
        "how long does it take to learn coding": ["The amount of time it takes to learn coding depends on the individual and their experience level. Generally speaking, it can take anywhere from a few weeks to several years to become a proficient coder."] 
    } 

    print("Hello, I am your coding chatbot. How can I help you?") 

    while True: 
        user_input = input() 

        if user_input in responses: 
            response = random.choice(responses[user_input])
            print(response) 
        else: 
            print("I'm sorry, I don't understand your question. Please try asking me in a different way.") 

if __name__ == "__main__": 
    chatbot()
Optimize the following Python code for best runtime. def is_prime(n):
    for i in range(2, n):
        if (n % i) == 0:
            return False
    return True def is_prime(n):
    if n == 1:
        return False
    if n in (2, 3):
        return True
    if not (n & 1) and n > 2:
        return False
    for i in range(3, int(n**0.5)+1, 2):
        if n % i == 0:
            return False
    return True
Develop a Python program to add two matrices of different sizes matrix1 = [[1, 2],
           [1, 2],
           [2, 4]]

matrix2 = [[1, 3],
           [2, 3]] # define a function 
def addMatrix(matrix1, matrix2): 
    # creating an empty matrix 
    result = [[0, 0], 
              [0, 0], 
              [0, 0]] 
  
    # iterating rows 
    for i in range(len(matrix1)): 
          
        # iterating columns 
        for j in range(len(matrix1[0])): 
            result[i][j] = matrix1[i][j] + matrix2[i][j] 
    return (result) 
   
# given matrices   
matrix1 = [[1, 2], 
           [1, 2],
           [2, 4]]
  
matrix2 = [[1, 3], 
           [2, 3]]
  
# printing result 
print("Writing a program to add two matrices of different sizes: ")
 
print(addMatrix(matrix1, matrix2))
Create a Python program to generate Fibonacci sequence of a given length.  def generateFibo(length):
    fibo = [0, 1]
    for i in range(2, length):
        fibo.append(fibo[i-2] + fibo[i-1])
    return fibo

if __name__ == '__main__':
    print(generateFibo(10)) # [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
Generate a Python code snippet to make a copy of a given list. list_a = [1, 2, 3, 4, 5] list_b = list_a[:]
Create a python function that takes a list as an argument and returns a list with all the values doubled. lst = [2, 4, 6] def double_list(lst):
    return [x*2 for x in lst]
Create a Python script to extract all emails from a given list of web urls. urls: ["http://example.com", "http://example.org"] import re
import requests

urls = ["http://example.com", "http://example.org"]

for url in urls:
 r = requests.get(url)
 emails = re.findall(r'[\w\.-]+@[\w\.-]+', r.text)
 print(emails)
Write an efficient Python program to find the second largest element in an array. [14, 46, 47, 86, 92, 52, 48, 36, 66, 85] def secondLargestElement(arr):
  # Sort the array in ascending order 
  arr.sort() 
    
  # Return the second last element 
  return arr[-2] 

# Driver code 
arr = [14, 46, 47, 86, 92, 52, 48, 36, 66, 85] 

print(secondLargestElement(arr))
Given a tweet text, write a Python program to classify the tweet as either positive or negative. Tweet example: "I am really enjoying this course!" import nltk
import re
from nltk.sentiment.vader import SentimentIntensityAnalyzer

def classify_tweet(text):
 tokenized_text = nltk.word_tokenize(text)
 tag = nltk.pos_tag(tokenized_text)
 lemmatizer = nltk.WordNetLemmatizer()
 lemmas = [lemmatizer.lemmatize(word) for word, tag in tag]

 sentiment_analyzer = SentimentIntensityAnalyzer()
 sentiment = sentiment_analyzer.polarity_scores(' '.join(lemmas))

if sentiment['compound'] < 0:
 print('Negative')
elif sentiment['compound'] > 0:
 print('Positive')
else:
 print('Neutral')

classify_tweet("I am really enjoying this course!")
# Output: Positive
Test the following Python code and identify a bug not_a_number = 'A123'
number = int(not_a_number) This code will result in a `ValueError` because `int()` cannot convert the string 'A123' into an integer. To fix this, you can use `try/except` statements to catch the error and handle it appropriately.

try: 
 number = int(not_a_number)
except ValueError as e:
 print(f'Error converting {not_a_number} to an integer: {e}')
Design a function in Python that takes a string and a search term and returns the count of matches of the search term within the target string. targetString = "the quick brown fox jumped over the lazy dog"
searchTerm = "the" def countSearchTerm(targetString, searchTerm):
    count = 0
    currentIndex = targetString.find(searchTerm)
    while (currentIndex != -1):
        count += 1
        currentIndex = targetString.find(searchTerm, currentIndex + len(searchTerm))
    return count
Port a Python code snippet to Java. def add(a, b):
    return a + b public class Add {
    public static int add(int a, int b) {
        return a + b;
    }
}
Write a RNN in Python to classify email messages into two classes: Spam and Not Spam. [
  {'message': 'This is an important offer - act now!', 'label': 'spam'},
  {'message': 'You have been chosen to win a prize', 'label': 'spam'},
  {'message': 'To complete your order, please follow the link below', 'label': 'spam'},
  {'message': 'See the attached report for details', 'label': 'not_spam'},
  {'message': 'I will be away for the next few days', 'label': 'not_spam'}
] import tensorflow as tf
from tensorflow.keras.preprocessing.text import one_hot
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, Dense, Dropout, LSTM

# Step 1: Preprocess the data
input_data = [
  {'message': 'This is an important offer - act now!', 'label': 'spam'},
  {'message': 'You have been chosen to win a prize', 'label': 'spam'},
  {'message': 'To complete your order, please follow the link below', 'label': 'spam'},
  {'message': 'See the attached report for details', 'label': 'not_spam'},
  {'message': 'I will be away for the next few days', 'label': 'not_spam'}
]

# one-hot encoding
labels = [data['label'] for data in input_data]
labels_one_hot_encoded = [one_hot(label, 2) for label in labels]

# text encoding
messages = [data['message'] for data in input_data]
messages_encoded = [one_hot(message, 100) for message in messages]

# padding
messages_padded = pad_sequences(messages_encoded, maxlen=128, padding='pre')

labels_encoded = pad_sequences(labels_one_hot_encoded, maxlen=2, padding='post')

# creating the model
model = Sequential()
model.add(Embedding(input_dim=100, output_dim=128, input_length=messages_padded.shape[1]))

model.add(LSTM(128))
model.add(Dense(2, activation='softmax'))
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

model.fit(x=messages_padded, y=labels_encoded, epochs=10, batch_size=32)
Create a Python class for parsing email addresses. Not applicable import re

class EmailParser:
 def __init__(self, email):
 self.email = email
 
 def parse_username(self):
 return re.search('(.*)@', self.email).group(1)
 
 def parse_domain(self):
 return re.search('@(.*)', self.email).group(1)

# Usage
parser = EmailParser("john@example.com")
print(parser.parse_username())
# john
print(parser.parse_domain())
# example.com
Design a Python function to print a given string in reverse order. "Hello world" def reverse_string(text): 
    # Convert string to list 
    characters = list(text) 
  
    # Create new empty list to reverse the string
    rev_characters = [] 
  
    for char in characters: 
        rev_characters.insert(0, char) 
      
    # Convert the list back to 
    # the reversed string
    rev_text = ''.join(rev_characters) 
  
    return rev_text 

# Driver code 
text = "Hello world"

# Print the reversed string 
print(reverse_string(text))
Design a program in Python to split a list of strings into two halves.  def split_list(string_list):
    mid = len(string_list) // 2
    return string_list[:mid], string_list[mid:]
Write a Python program to delete keys from a dictionary whose value is equal to a given value. my_dict = {'a':1, 'b':2, 'c':3, 'd':2}
value = 2 def delete_keys(my_dict, value):
    """This function deletes keys from a dictionary whose value is equal to a given value."""
    keys_to_remove = []
    for key, val in my_dict.items():
        if val == value:
            keys_to_remove.append(key)
    for key in keys_to_remove:
        del my_dict[key]
    return my_dict

my_dict = {'a':1, 'b':2, 'c':3, 'd':2}
value = 2

new_dict = delete_keys(my_dict, value)
print(new_dict)
Create a function in Python to solve this Leetcode problem. Problem: Given an array of integers arr and an integer k, find the k closest elements to a given value x in the array. 

If the elements close to x are greater than x, sort them in increasing order while maintaining their original order. 

If the elements close to x are smaller than x, sort them in decreasing order while maintaining their original order. def kClosestValues(arr, x, k):
    closestPrimes = []
    diff = float("inf")
    for num in arr:
        currentDiff = abs(num - x)
        if currentDiff <= diff:
            if currentDiff < diff:
                closestPrimes = []
            closestPrimes.append(num)
            diff = currentDiff
    if closestPrimes[0] > x:
        closestPrimes.sort()
    else:
        closestPrimes.sort(reverse=True)
    return closestPrimes[:k]
Write a Python program to summarize a long text into a shorter version using natural language processing techniques. <input> The fox is a small to medium-sized mammal belonging to several genera of the family Canidae. Its coat colour ranges from pale red to very dark brown. The fox lives in almost every biome, but its main territory is the forests of the northern hemisphere. Foxes are omnivores, meaning they eat both plants and animals. They are mainly active at night and often hunt for their food.</input> import nltk
import numpy as np
from nltk.tokenize import sent_tokenize, word_tokenize
from nltk.corpus import stopwords

# Initialize input data
text = "<input> The fox is a small to medium-sized mammal belonging to several genera of the family Canidae. Its coat colour ranges from pale red to very dark brown. The fox lives in almost every biome, but its main territory is the forests of the northern hemisphere. Foxes are omnivores, meaning they eat both plants and animals. They are mainly active at night and often hunt for their food.</input>"
 
# Generate a summary using NLTK
words = word_tokenize(text)
stopwords = set(stopwords.words('english'))
words_without_stopwords = [word for word in words if not word in stopwords]
words_with_scores = nltk.FreqDist(words_without_stopwords)
sentences_with_scores = {sent: sum([words_with_scores[word] for word in word_tokenize(sent) if word in words_with_scores]) for sent in sent_tokenize(text)}
best_sent = max(sentences_with_scores, key=sentences_with_scores.get)

# Print the summary
print(best_sent)
# Output: Foxes are omnivores, meaning they eat both plants and animals. They are mainly active at night and often hunt for their food.
Develop an AI chatbot in Python with natural language processing capabilities. Not applicable #import necessary libraries
import string
import random
from nltk.corpus import wordnet

#define the respond function
def respond(sentence):
    bot_response=''
    sentence=sentence.lower()  #Convert to lowercase
 
    #check for greetings
    for word in sentence.split():
        if word in GREETING_INPUTS:
            bot_response=random.choice(GREETING_RESPONSES)
            return bot_response
 
    #check for farewells
    for word in sentence.split():
        if word in FAREWELL_INPUTS:
            bot_response=random.choice(FAREWELL_RESPONSES)
            return bot_response
 
    #check for matching words
    res=wordnet.synsets(word)
    if len(res)>0:
        bot_response=random.choice(MATCH_RESPONSES)
        return bot_response
 
    else:
        bot_response=random.choice(NOMATCH_RESPONSES)
        return bot_response
    
#list of inputs
GREETING_INPUTS = ("hello", "hi", "greetings", "sup", "what's up",)
FAREWELL_INPUTS = ("bye", "farewell", "see you later",)
MATCH_RESPONSES = ("Yes, I understand.", "Yes, I agree with you.", "I find that interesting.", "That's intriguing.",)
NOMATCH_RESPONSES = ("I'm not sure I understand.", "I'm not sure what you mean.", "Can you please explain that further?")

#sample call to respond
bot_response = respond("What's happening?")
print(bot_response)
# Output: I'm not sure what you mean.
Fill in the blanks to create a Python program to calculate the total number of words in a list. words = ["Hello", "World", "!"] words = ["Hello", "World", "!"]

total_words = 0
for word in words:
____ total_words = total_words + ____

print(total_words)

# Output: 3

total_words = 0
for word in words:
    length = len(word)
    total_words = total_words + length

print(total_words)

# Output: 3
Rewrite the following python code to be more concise while still producing the same output. for i in range(10):
 for j in range(10):
 print("------------") for i in range(10):
 print("------------\n"*10)
Create a Python program to log the current time (in the given timezone) every 20 minutes. Timezone: America/Los_Angeles import time
import datetime
from pytz import timezone

def logtime(tz):
 while True:
 currtime = datetime.datetime.now(tz)
 print("The current time is", currtime.strftime("%H:%M:%S"))
 time.sleep(60 * 20)

logtime(timezone('America/Los_Angeles'))
Sort a python dictionary by value. d = {1: 'a', 3: 'b', 2: 'c'} def sort_dict_by_value(d):
    # Convert the dictionary into a list of tuples
    d_list = [(key, value) for key, value in d.items()]
    # Sort the list by the second element of the tuple
    sorted_d = sorted(d_list, key=lambda x: x[1])
    # Convert the list of tuples back into a dictionary
    sorted_dict = dict(sorted_d)
    return sorted_dict

if __name__ == "__main__":
    d = {1: 'a', 3: 'b', 2: 'c'}
    print(sort_dict_by_value(d))
Create a Python program to zip two lists of same size into one dictionary. list1 = [1,2,3]
list2 = [4,5,6] list1 = [1,2,3]
list2 = [4,5,6]
 
zip_dict = dict(zip(list1, list2))
print(zip_dict) # {1: 4, 2: 5, 3: 6}
Write a code in Python for computing the edit distance between two strings.  def edit_distance(str1, str2):
    m = len(str1)
    n = len(str2)

    dp = [[ 0 for x in range(n+1)] for x in range(m+1)]

    for i in range(m+1):
        for j in range(n+1):
            if i == 0:
                dp[i][j] = j
            elif j == 0:
                dp[i][j] = i
            elif str1[i-1] == str2[j-1]:
                dp[i][j] = dp[i-1][j-1]
            else:
                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])
    
    return dp[m][n]
Create a Python program to generate a random password with at least 8 characters, of which at least one lowercase, one uppercase, one numeric, and one special character. Not applicable import string
import random

def generate_password():
  characters = string.ascii_letters + string.digits + string.punctuation
  password = ''.join(random.choice(characters) for i in range(8))
  lowercase = [c for c in password if c.islower()]
  uppercase = [c for c in password if c.isupper()]
  digits = [c for c in password if c.isdigit()]
  special = [c for c in password if c in string.punctuation]
  if len(lowercase) == 0 or len(uppercase) == 0 or len(digits) == 0 or len(special) == 0:
    return generate_password()
  return password

print(generate_password())
Create a Python program to compare two list and return a new combined list list_a = [1, 2, 3]
list_b = [4, 5, 6] def combine_list(list_a, list_b):
    combined_list = []
    for a in list_a:
        combined_list.append(a)
    for b in list_b:
        combined_list.append(b)
    return combined_list
Generate all permutations of a string in Python.  """
Generate all permutations of a string in Python.
"""

def permutations(string): 
    if len(string) == 1: 
        return string 
  
    perm_list = [] # resulting list 
    for perm in permutations(string[1:]): 
        for i in range(len(string)): 
            perm_list.append(perm[:i] + string[0:1] + perm[i:]) 
  
    return perm_list

string = "ABC"
permutations = permutations(string)
print(permutations)

# Output:
# ['ABC', 'ACB', 'BAC', 'BCA', 'CAB', 'CBA']
Write a Python program to list the factors of a given integer. Number= 24 # Python program to list the factors of a given number 
  
# Function to print the factors of a given number 
def print_factors(x): 
  
   print("The factors of",x,"are:") 
   for i in range(1, x + 1): 
       if x % i == 0: 
           print(i) 
  
# Change this value for a different result.  
num = 24
  
# uncomment the following line to take input from the user  
#num = int(input("Enter a number: "))  
  
print_factors(num)
Develop a python script to print all the numbers between 1 and 100  for i in range(1,101):
  print(i)
Create a data structure in Python to efficiently store and retrieve customer profiles. Customer profile information could include:
- Customer name
- Date of birth
- Address
- Phone number
- Credit Card details class Customer:
    def __init__(self, name, date_of_birth, address, phone_number, credit_card_details):
        self.name = name
        self.date_of_birth = date_of_birth
        self.address = address
        self.phone_number = phone_number
        self.credit_card_details = credit_card_details

class CustomerDatabase:
    def __init__(self):
        self.customers = {}
    
    def add_customer(self, customer):
        self.customers[customer.name] = customer
    
    def get_customer(self, name):
        return self.customers.get(name)
Write a Python program to automate web form filling.  from selenium import webdriver
browser = webdriver.Chrome()

# navigate to website
browser.get("website_url")

# fill form
name_field = browser.find_element_by_id("name")
name_field.send_keys("John Doe")

email_field = browser.find_element_by_id("email")
email_field.send_keys("example@domain.com")

age_field = browser.find_element_by_id("age")
age_field.send_keys("25")

# submit form
submit_button = browser.find_element_by_id("submit")
submit_button.click()
Write a Python script to print the size and color of shoes in a list. shoes = [('size', 10), ('color', 'blue'), ('size', 8), ('color', 'green')] def print_size_color(shoes):
    for size, color in shoes:
        print('size:', size, 'color:', color)

print_size_color(shoes)
Design a reinforcement learning agent for a given game using Python. A game description. import numpy as np 

# Create the agent class
class ReinforcementLearningAgent:
    def __init__(self, environment, alpha=0.1, gamma=0.9):
        self.env = environment 
        self.q_table = np.zeros(self.env.state_space + (self.env.action_space,))
        self.alpha = alpha 
        self.gamma = gamma

    def get_best_action(self, state):
        return np.argmax(self.q_table[state])

    def update_q_table(self, state, action, next_state, reward):
        q_update = reward + self.gamma * np.max(self.q_table[next_state]) - self.q_table[state][action]
        self.q_table[state][action] += self.alpha * q_update
Create a web-crawler in Python to extract links from a web page. Web page URL: http://www.example.com import urllib.request 
from bs4 import BeautifulSoup

#Providing the url as an argument to urlopen() 
url = "http://www.example.com"
html = urllib.request.urlopen(url).read() 
soup = BeautifulSoup(html, features = 'html.parser') 

# extracting links from the web page 
links = [] 
for link in soup.findAll('a'): 
    links.append(link.get('href')) 

print(links)
Generate a Python class that stores the details of customer orders.  class Order:
 def __init__(self, customer_name, customer_address, order_items):
 self.customer_name = customer_name 
 self.customer_address = customer_address
 self.order_items = order_items
 
 def get_order_details(self):
 return f"Customer name: {self.customer_name}, Address: {self.customer_address}, Order items: {self.order_items}"
Write a Python function to multiply two given numbers.  def multiply(num1, num2):
    return num1 * num2
Create a list comprehension expression for adding two lists in Python. list1 = [1, 2, 3]
list2 = [4, 5, 6] list3 = [list1[i] + list2[i] for i in range(len(list1))]
Write a python function to compare two strings and return 1 if the strings are anagrams, 0 if not. "bob", "bob" def is_anagram(string1, string2):
    string1 = sorted(string1.replace(" ", "").lower())
    string2 = sorted(string2.replace(" ", "").lower())
    
    if string1 == string2:
        return 1
    else:
        return 0
Create a Python program that multiplies two input numbers and prints the result. a = 3
b = 4 def multiply(a, b):
    result = a * b
    print(result)

multiply(a, b)
Generate a Python program to find the value of two positions in an array that have the greatest difference. A list of integers [7, 1, 3, 8, 25] def max_difference(arr):
    # Initialize max_difference to a negative value
    max_difference = -float("inf")

    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            diff = abs(arr[i] - arr[j])
            if diff > max_difference:
                max_difference = diff
    return max_difference

result = max_difference([7, 1, 3, 8, 25])
print(result)
Construct a python code structure to compute the distance between two points in a 3D coordinate system. Point 1: (3, 4, 9)
Point 2: (-5, -6, -7) import math

# Define a function to calculate the distance between two points
def distance(x1, y1, z1, x2, y2, z2):
  # Compute the length of each side
  a = x2 - x1
  b = y2 - y1
  c = z2 - z1
  
  # Compute the distance
  d = math.sqrt(a**2 + b**2 + c**2)
  
  return d

# Call the function with the two points
d = distance(3, 4, 9, -5, -6, -7)

# Print the distance
print(d)
Create a python script to calculate the moving average of the given data Data: [2, 3, 5, 10, 11] def moving_average(data, num_points):
    moving_average_list = []
    for i in range(0, len(data)-num_points+1):
        window_sum = 0
        for j in range(i, i+num_points):
            window_sum += data[j]
        moving_average_list.append(window_sum/num_points)
    return moving_average_list
Create a Python program to split a given string into two parts according to a given character. Str = "apple-banana-orange"
Char = "-" def split_string(s, char):
    new_list = s.split(char)
    return new_list

result = split_string("apple-banana-orange", "-")
print(result)
Construct a loop in Python that iterates over a given list of strings and prints each string. ["apple", "banana", "cherry"] strings = ["apple", "banana", "cherry"]

for string in strings:
    print(string)
Generate a Python class to handle an employee's details and facilitate their salary calculation.  class Employee:
    def __init__(self, name, rate_per_hour, hours_worked):
        self.name = name
        self.rate_per_hour = rate_per_hour
        self.hours_worked = hours_worked
    
    def calculate_salary(self):
        return self.rate_per_hour * self.hours_worked
Build a Python program to read the following data and generate the running average of temperature after every 10 minutes. time temperature
10:00 21
10:10 22
10:20 21
10:30 19
10:40 24
10:50 21 def running_average(data):
    time_list = []
    current_average = 0
    num_values = 0
    for t, c in data:
        time_list.append(t)
        current_average += c
        num_values += 1
        if t in time_list[-10:]:
            print("The running average of temperature after %s is %f" %(t, current_average/num_values))

data = [('10:00', 21), ('10:10', 22), ('10:20', 21), ('10:30', 19), ('10:40', 24), ('10:50', 21)]

running_average(data)
Write a Python program to implement a simple game of rock paper scissors. The program should include a function to randomly generate a move for the computer and another function to calculate the winner. Not applicable import random

def generate_computer_move():
    moves = ['rock', 'paper', 'scissors']
    return random.choice(moves)

def calculate_winner(player_move, computer_move):
    if player_move == computer_move:
        return 'draw'

    elif player_move == 'rock' and computer_move == 'scissors':
        return 'player'
    elif player_move == 'paper' and computer_move == 'rock':
        return 'player'
    elif player_move == 'scissors' and computer_move == 'paper':
        return 'player'

    else:
        return 'computer'
Write a python program that sums up all the values from a list of dictionaries data = [{'key1':1, 'key2':2}, {'key1':2, 'key2':5}] def sum_dictionaries(data):
  total = 0
  for dic in data:
    total += sum(dic.values())
  return total
Modify the following Python code for calculating the factorial of a number. def factorial(n):
    fact = 1
    for i in range(1,n+1):
        fact = fact*i
    return fact def factorial(n):
    if n == 0:
        return 1
    else:
        fact = 1
        for i in range(1,n+1):
            fact = fact*i
        return fact
Generate an efficient implementation of quicksort in Python. No input. def quicksort(arr):
    if len(arr) <= 1:
        return arr
        
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)

result = quicksort([3,6,8,10,1,2,1])
print(result)
Write a Python program to classify the given list of words into two categories: positive and negative words.  positive_words = ["happy", "glad", "love", "joyful", "grateful"]
negative_words = ["sad", "angry", "depressed", "hopeless", "heartbroken"]

def classify_words(words):
    positive = []
    negative = []
    for word in words:
        if word in positive_words:
            positive.append(word)
        else:
            negative.append(word)
    return positive, negative
Generate a function in Python that adds two input numbers.  def add(x, y):
    return x + y
Make a prediction model in Python to classify the class of a credit score  # Import the necessary packages
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier

# Load the dataset
data = pd.read_csv('credit_score_data.csv')
X = data.drop('credit_class', axis=1)
y = data['credit_class']

# Encode labels
y = LabelEncoder().fit_transform(y)

# Split dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

# Create and train the model
model = RandomForestClassifier()
model.fit(X_train, y_train)

# Evaluate the model with the test set
y_preds = model.predict(X_test)
print(metrics.accuracy_score(y_test, y_preds))
Create a code in Python to generate a random English word.  import random

words = ["hello", "world", "hi", "moon", "sun"]

random_word = random.choice(words)

print("Random word: " + random_word)
Create a Python script to evaluate an expression given as a string. Expression string: "2 * (3 + 1)" # input expression as a string
expr = "2 * (3 + 1)"

# Evaluate the expression using eval()
result = eval(expr)

# print the result
print("Result:", result)
Write a python program to extract the non-vowel words in a sentence. This machine learning project is challenging. def extract_words(sentence):
    non_vowel_words = []
    words = sentence.split()
    vowels = ['a','e','i','o','u','A','E','I','O','U']
    for word in words:
        if not any(char in vowels for char in word):
            non_vowel_words.append(word) 
    return non_vowel_words
Create a python program to capitalize words in a string. String: "enter the dragon" def capitalize_words(string):
    words = string.split(' ')
    capitalized_words = [word.capitalize() for word in words]
    return ' '.join(capitalized_words)

print(capitalize_words('enter the dragon'))
Create a class in Python which calculates the cost of a given item based on its size and weight.  class CostCalculator:
    def __init__(self, size, weight):
        self.size = size
        self.weight = weight
    
    def calculate_item_cost(self):
        cost = self.size * self.weight * 0.1
        return cost
Use Dijkstra's algorithm to find the shortest path from a given vertex to another. Graph = {
    'A': {'B': 4, 'C': 2}, 
    'B': {'A': 4, 'D': 5}, 
    'C': {'A': 2, 'D': 8, 'G': 10}, 
    'D': {'B': 5, 'C': 8, 'E': 2}, 
    'E': {'D': 2, 'F': 3}, 
    'F': {'E': 3, 'G': 7}, 
    'G': {'C': 10, 'F': 7}
}
Starting Vertex: A 
Destination Vertex : G # Python program to find shortest path
# using Dijkstra's Algorithm 
  
import math 
  
#function to find the shortest path 
def dijkstra(graph, src, dest, V): 
    # dist[i] will hold the shortest distance from src to i 
    dist = [math.inf] * V 

    # sptSet[i] will true if vertex i is 
    # included / in shortest path tree or 
    # shortest distance from src to i is finalized 
    sptSet = [False] * V 

    # Initialize all distances as INFINITE and 
    # stpSet[] as false 
    dist[src] = 0

    # Find shortest path for all vertices 
    for _ in range(V): 
        u = minDistance(dist, sptSet) 
        sptSet[u] = True

        # update dist value of adjacent vertices 
        # of the picked vertex. 
        for v in range(V): 
            if graph[u][v] and sptSet[v] == False and \
            dist[v] > dist[u] + graph[u][v]: 
                    dist[v] = dist[u] + graph[u][v] 

    # print the constructed distance array 
    print("Vertex distance from Source")
    for node in range(V): 
        print(node, '\t', dist[node]) 

    # Get the shortest path from src to dest
    path = getPath(dist, dest, src)
    return path

def getPath(dist, dest, src):
    path = [dest]
    while dest != src:
        for i in range(V):
            if dist[dest] - dist[i] == graph[i][dest]:
                path.append(i)
                dest = i
    path.reverse()
    return path
 
def minDistance(dist, sptSet): 
    min = math.inf
    for v in range(V): 
        if dist[v] < min and sptSet[v] == False: 
            min = dist[v] 
            min_index = v 
    return min_index

V = 7
# Print the shortest path
print("Shortest Path: {}".format(dijkstra(Graph, 0, 6, V)))
Create a Web Scrapper using Python to collect a list of all the phone numbers from a specific website. "https://www.example.com/" import requests
from bs4 import BeautifulSoup

url = "https://www.example.com/"
r  = requests.get(url)
data = r.text
soup = BeautifulSoup(data, 'html.parser')

phone_numbers = []
for tag in soup.find_all('a'):
 text = tag.text.replace(" ", "").replace("-","")
 if (text.isdigit() and len(text) == 10):
 phone_numbers.append(text)

print("Phone Numbers: ", phone_numbers)
Write a Python program that reads a text document and performs tokenization followed by part-of-speech (POS) tagging. text.txt

The quick brown fox jumps over the lazy dog. import nltk

def tokenize_and_tag(filename):
 tokens = nltk.word_tokenize(open(filename).read())
 tagged_tokens = nltk.pos_tag(tokens)
 print(tagged_tokens)

tokenize_and_tag('text.txt')

# Output: [('The', 'DT'), ('quick', 'JJ'), ('brown', 'NN'), ('fox', 'NN'), ('jumps', 'VBZ'), ('over', 'IN'), ('the', 'DT'), ('lazy', 'JJ'), ('dog', 'NN'), ('.', '.')]
Create a Python program to filter an array by a given criteria. criteria = x % 5 == 0
array = [1, 2, 5, 10, 15, 20, 25, 30] # Function to filter an array by a given criteria
def filter_array(array, criteria):
 # Create an empty list
 filtered_array = []
 # Iterate through the array
 for value in array:
  # Check if it matches the criteria
  if criteria(value):
   # If it matches, add it to the list
   filtered_array.append(value)

 # Return the filtered array
 return filtered_array

# Input criteria
def criteria(x):
 return x % 5 == 0

result = filter_array(array, criteria)
print(result) # Outputs [5, 10, 15, 20, 25, 30]
Generate a random number in Python between 2 inclusive numbers. int min = 1;
int max = 6; import random

num = random.randint(min, max)
print(num)
Generate a class definition for a "Car" object in Python. The object should have attributes for brand, horsepower, and color. Not applicable class Car:
 def __init__(self, brand, horsepower, color):
 self.brand = brand
 self.horsepower = horsepower
 self.color = color

 def get_brand(self):
 return self.brand

 def set_brand(self, brand):
 self.brand = brand

 def get_horsepower(self):
 return self.horsepower

 def set_horsepower(self, horsepower):
 self.horsepower = horsepower

 def get_color(self):
 return self.color

 def set_color(self, color):
 self.color = color
Given a string containing words separated by spaces, write a Python function to remove any duplicates. "I have to go go shopping shopping" def remove_duplicates(string):
words = string.split(" ")
unique_words = set(words)
return " ".join(unique_words)

remove_duplicates("I have to go go shopping shopping") # "I have to go shopping"
Write a python program that takes in two strings, s1 and s2, and returns a Boolean based on if s1 is a substring of s2. s1 = 'foo'
s2 = 'foobar' def is_substring(s1, s2):
    return s1 in s2

substring = is_substring('foo', 'foobar')

print(substring) # Output: True
Create a text tokenizer using regular expression in Python.  import re
 
def tokenizeText(text):
    tokens = re.findall(r'\w+', text)
    return tokens
Create an algorithm in Python to search an element from a given array of integers. arr = [3, 5, 6, 9, 11] def searchElement(arr, element):
    for i in range(len(arr)):
        if arr[i] == element:
            return i
    return -1
Write a Python program to extract the last two digits of the given array of integers. arr = [30, 2993, 10056] res = []
for num in arr:
    res.append(num%100)
print(res) # [30, 93, 56]
Create a Python program to print out the nth row of Pascal's Triangle  def nth_row_pascal(n):
    row = [1]
    for k in range(max(n,0)):
        row.append(row[k] * (n-k) // (k+1))
    return row
Transform the following data frame in Python. df = [
    {'name': 'Bob', 'age': 25},
    {'name': 'Mary', 'age': 18},
    {'name': 'John', 'age': 32},
] import pandas as pd

df = pd.DataFrame(df)

#Transform the dataframe
df['age_group'] = [ "under 20" if a < 20
   else "20-35" if a < 35
   else "over 35"
   for a in df['age']]
Create a python program to Reverse Engineer an API and find its endpoints. http://example.com/api import requests

url = 'http://example.com/api'
response = requests.get(url)

if response.status_code == 200:
    # Find the API endpoints
    data = response.json()
    endpoints = data.get('endpoints')
    print(endpoints)
Prepare a Python program to categorize sentences according to their sentiment. The program should first use the TextBlob library to detect the sentiment of each sentence and then classify them to Positive, Negative, and Neutral sentiment. The service was excellent from textblob import TextBlob

text = "The service was excellent"

sentiment = TextBlob(text).sentiment
print("Sentiment: {}".format(sentiment))

if sentiment.polarity > 0:
 print("Positive")
elif sentiment.polarity == 0:
 print("Neutral")
else:
 print("Negative")
Create a function in Python to return the media according to the following criteria: Given a list of numbers [1, 4, 7, 8, 10, 15, 21], def get_median(num_list):
    sorted_list = sorted(num_list)
    length = len(sorted_list)
    if (length % 2 == 0):
        median = (sorted_list[length//2] + sorted_list[length//2 -1])/2.0
    else:
        median = sorted_list[length//2]
    return median
Compute the best single stock portfolio for a given dataset with Python.  import pandas as pd
from scipy.optimize import minimize

# read in data
df = pd.read_csv('data.csv')

# objective function
def obj_func(weights, mean_returns, covariance_matrix):
    # compute portfolio mean return
    portfolio_mean_return = np.dot(mean_returns, weights)
    
    # compute portfolio variance
    portfolio_variance = np.sqrt(np.dot(weights.T, np.dot(covariance_matrix, weights)))
    
    # return the negative of the Sharpe ratio
    return -(portfolio_mean_return / portfolio_variance)

# minimize function
def minimize_func(mean_returns, covariance_matrix):     
    # define initial weights
    init_weights = np.array([1/len(mean_returns)] * len(mean_returns))
    
    # define constraints
    constraints = ({'type': 'eq', 'fun': lambda x: np.sum(x) - 1},
                   {'type': 'ineq', 'fun': lambda x: x})
    
    # minimize the objective function
    results = minimize(obj_func, init_weights, args=(mean_returns, covariance_matrix),
                       method='SLSQP', constraints=constraints)
    
    return results.x

# optimize and get optimal weights
weights = minimize_func(df.mean(), df.cov())
print(weights)
Maximize a given function subject to the given constraints. f(x) = x1^2 + x2^2
subject to: x1 + x2 <= 2 We can maximize the given function by solving the given constraints as a linear programming problem. We can use an optimization library in Python to solve this problem. We can also use the Simplex algorithm to solve this problem. The optimal solution is (1,1), which gives a maximum value of 2.
Write a Python program to sort a dictionary by key.  def sort_dict_by_key(d):
    """Sort a dictionary by key."""
    return {k: d[k] for k in sorted(d)}
Edit a Python program to make a simple quiz game. The program should ask 3 questions and when all of the questions have been answered it should provide feedback depending on the number of correct answers. question_1_text = "What color is the sky?"
question_1_possible_answers = ["blue", "green", "red"]
question_1_correct_answer = "blue"

question_2_text = "What shape is the Earth?"
question_2_possible_answers = ["square", "sphere", "triangle"]
question_2_correct_answer = "sphere"

question_3_text = "What is the capital of France?"
question_3_possible_answers = ["Paris", "London", "Madrid"]
question_3_correct_answer = "Paris" questions = [
 {
 'question': question_1_text,
 'possible_answers': question_1_possible_answers,
 'correct_answer': question_1_correct_answer
 },
 {
 'question': question_2_text,
 'possible_answers': question_2_possible_answers,
 'correct_answer': question_2_correct_answer
 },
 {
  'question': question_3_text,
  'possible_answers': question_3_possible_answers,
  'correct_answer': question_3_correct_answer
 }
]

correct_answers = 0

for question in questions:
 print(question['question'])
 for answer in question['possible_answers']:
 print(answer)
 user_answer = input('Your answer: ')
 if user_answer == question['correct_answer']:
 correct_answers += 1

if correct_answers == 3:
 print('You got all 3 questions right!')
elif correct_answers == 2:
 print('You got 2 questions right!')
elif correct_answers == 1:
 print('You got 1 question right!')
else:
 print('You got no questions right!')
Write a Python program to calculate the sum of two given integers, but only if both of them are even. num1 = 6
num2 = 8 def sum_of_two_ints(a,b): 
    if (a % 2 == 0 and b % 2 == 0): 
        return a+b 
    else: 
        return "Wrong input"

print(sum_of_two_ints(num1,num2))
Design a function in Python that takes two lists as input and returns the elements in common. list1 = [2, 3, 4, 5]
list2 = [1, 2, 4, 5] list1 = [2, 3, 4, 5]
list2 = [1, 2, 4, 5]

def common_elements(list1, list2):
    result = []
    for item in list1:
        if item in list2:
            result.append(item)
    return result

print(common_elements(list1, list2))
Format the given string with line breaks and indentations to make it a valid Python code. for i in range(10) print(i) for i in range(10):
  print(i)
Write a Python script that will take in a user's input in a textbox and return the most frequent words, in descending order. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. import re 
import operator

user_input = input("Please enter a sentence: \n")
words = re.findall(r'\w+', user_input) 
word_frequency = {} 

for word in words: 
	if word in word_frequency: 
		word_frequency[word] += 1 
	else: 
		word_frequency[word] = 1

# Sort words by frequency in descending order
sorted_words = sorted(word_frequency.items(), key=operator.itemgetter(1), reverse=True) 

print("Most Frequent Words: \n")
for k,v in sorted_words:
	print(k + ": " + str(v))
Create a Python program that reads a matrix of size nxn and prints out the transpose of the matrix. n = 5 def transpose(m): 
  
    result = [[0 for x in range(len(m))] for y in range(len(m[0]))] 
  
    # iterate through rows of m 
    for i in range(len(m)): 
        # iterate through columns of m 
        for j in range(len(m[0])): 
            result[j][i] = m[i][j] 
  
    return result 
  
# input matrix 
matrix = [ 
            [1, 2, 3], 
            [4, 5, 6], 
            [7, 8, 9] 
          ] 
  
# display output 
print(transpose(matrix))
Create an object-oriented Python program which finds the most frequently occurring words in a given text. The program should take a string as input and return a list of strings containing the words and the count of their occurrences. "This is a sentence. This is another sentence. This is the last sentence." import collections

def find_frequent_words(text):
 words = text.split()
 word_counts = collections.Counter(words)
 
 # Get the most frequent words
 most_frequent = word_counts.most_common()
 
 return most_frequent

# Example output: [('This', 3), ('is', 3), ('a', 1), ('sentence.', 3), ......]
Develop an algorithm in Python to find longest increasing contiguous subarray of a given array. [2, 6, 4, 8, 10] def find_longest_increasing_subarray(arr): 
    n = len(arr) 
  
    # Initialize overall max 
    max_len = 1
  
    # Initialize starting point of current subarray 
    start_index = 0
  
    # Initialize ending point of current subarray 
    end_index = 0
  
    # Initialize current max 
    curr_max = 1
  
    # Traverse array elements 
    for i in range(1, n): 
  
        # If element is greater than previous one 
        if arr[i] > arr[i - 1]: 
            curr_max += 1
              
        # Else Reset current max and 
        # starting point of current subarray 
        else: 
            if curr_max > max_len: 
                max_len = curr_max 
                start_index = i - curr_max 
                end_index = i - 1
            curr_max = 1
          
    # Compare the last maximum length with 
    # overall maximum length 
    if curr_max > max_len: 
        max_len = curr_max 
        start_index = n - curr_max 
        end_index = n - 1
          
    # Print starting and ending index of longest 
    # increasing contiguous subarray 
    print("Longest increasing contiguous " + 
          "subarray is [",  
          arr[start_index], "..", arr[end_index], 
          "] of length", max_len)
          
# Driver code
arr = [2, 6, 4, 8, 10]
find_longest_increasing_subarray(arr)
Develop a Python program to create a frequency table for an array of integer elements. arr = [1,1,3,5,3,3,5] from collections import Counter

def frequency(arr):
    """
    Develop a Python program to create a frequency table for an array of integer elements
    """
    return Counter(arr)

if __name__ == '__main__':
    arr = [1,1,3,5,3,3,5] 
    print(frequency(arr))
Create a program to print the multiplication table for a given number in Python.  """
Create a program to print the multiplication table for a given number in Python
"""

def multiplication_table(n):
    for i in range(1, 11):
        print(n, 'x', i, '=', n*i)

if __name__=="__main__":
    multiplication_table(5)
Write a function in Python to find out the longest word in a string  def longestWord(str):
    words = str.split()
    max_len = 0
    for word in words:
        if len(word) > max_len:
            max_len = len(word)
    for word in words:
        if len(word) == max_len:
            return word
Create a Python function that takes two lists as parameters, and returns the first list with each element doubled. list1: [1, 2, 3] 
list2: [4, 5, 6] def double_list(list1,list2):
  for i in range(len(list1)):
    list1[i] *= 2
  return list1

list1 = [1, 2, 3] 
list2 = [4, 5, 6]

print(double_list(list1,list2))
Create a python code to check if an integer is a power of two 16 def isPowerOfTwo(number):
    return (number > 0) and ((number & (number - 1)) == 0)

print(isPowerOfTwo(16))
Generate a code in Python to classify the gender of a given name.  def classify_gender(name):
 genders = {
 'male': ['john', 'peter', 'mark'],
 'female': ['alice', 'anna', 'jane']
 }
 for key, names in genders.items():
 if name in names:
 return key
 return 'unknown'
Design a program in Python which takes in a string and encypts it using Caesar Cipher. "Hello world", key 5 def encrypt(text, key):
    encrypted_text = ""
 
    for i in range(len(text)):
        char = text[i]
 
        if (char.isupper()):
            encrypted_text += chr((ord(char) + key - 65) % 26 + 65)
        else:
            encrypted_text += chr((ord(char) + key - 97) % 26 + 97)
 
    return encrypted_text

text = "Hello World" 
key = 5

print("Encrypted Text: ", encrypt(text, key))
Create a Python program that takes two strings as input, checks if the two strings are anagrams of each other, and prints the output. listen, silent def is_anagram(str1, str2):
    str1 = str1.replace(" ", "").lower()
    str2 = str2.replace(" ", "").lower()

    if len(str1) != len(str2):
        return False

    count = {}

    for letter in str1:
        if letter in count:
            count[letter] += 1
        else:
            count[letter] = 1
    
    for letter in str2:
        if letter in count:
            count[letter] -= 1
        else:
            count[letter] = 1
    
    for k in count:
        if count[k] != 0:
            return False
        
    return True

str1 = input("Enter the first string: ")
str2 = input("Enter the second string: ")

if is_anagram(str1, str2):
    print("The strings are anagrams.")
else:
    print("The strings are not anagrams.")
Create a python code to check if all characters are unique in a given string string = 'abcdefeb' def is_unique(string):
    chars = set()
    for char in string:
        if char in chars:
            return False
        else:
            chars.add(char)
    return True

print(is_unique(string))
Create a class in Python that provides methods to add, subtract, multiply and divide two integers.  class Calc:
    def __init__(self, num1, num2):
        self.num1 = num1
        self.num2 = num2
 
    def add(self):
        return self.num1 + self.num2
 
    def sub(self):
        return self.num1 - self.num2
 
    def mul(self):
        return self.num1 * self.num2
 
    def div(self):
        return self.num1 / self.num2

calc = Calc(4, 5)
print(calc.add())
print(calc.sub())
print(calc.mul())
print(calc.div())
Develop an efficient Python program to find the longest common sub-sequence from two given strings. String1 = "ACDFSCD" 
String2 = "ACBCD" def LongestCommonSubsequence(X, Y, m, n): 
 if m == 0 or n == 0:
 return 0; 
 elif X[m-1] == Y[n-1]:
 return 1 + LongestCommonSubsequence(X, Y, m-1, n-1); 
 else:
 return max(LongestCommonSubsequence(X, Y, m, n-1), LongestCommonSubsequence(X, Y, m-1, n)); 
 
# Driver Code 
X = "ACDFSCD"
Y = "ACBCD"
m = len(X) 
n = len(Y) 
print(LongestCommonSubsequence(X, Y, m, n))
Create a GUI for a Python program that calculates the area of a rectangle. The GUI should allow users to enter the length and width of the rectangle, and it should provide a button for calculating the area. Not applicable import tkinter as tk

root = tk.Tk()

length_label = tk.Label(text="Length:")
length_label.grid(row=0, column=0)
length_entry = tk.Entry()
length_entry.grid(row=0, column=1)

width_label = tk.Label(text="Width:")
width_label.grid(row=1, column=0)
width_entry = tk.Entry()
width_entry.grid(row=1, column=1)

def area():
 area = float(length_entry.get()) * float(width_entry.get())
 area_label = tk.Label(root, text="Area: " + str(area))
 area_label.grid(row=2, column=0, columnspan=2)

calc_button = tk.Button(text="Calculate", command=area)
calc_button.grid(row=2, column=1)

root.mainloop()
Create a simple Python script that logs the current date and time when run. Not applicable import datetime

print(f'Current Date and Time: {datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")}')
Create an optimizer in Python to maximize the output of a given function.  import numpy as np

def optimize(func, initial_params):
    params = initial_params
    best_params = None
    best_score = -np.inf
    while True:
        # Update current parameters
        params = update(params)
        # Calculate score
        score = func(params)
        # Check if improved result
        if score > best_score:
            best_params = params
            best_score = score
        # If result does not improve, exit loop
        else:
            break
    return best_params
Write a Python script to find out the sum of all the divisors of a given number. 16 def divisor_sum(n):
    sum = 0
    for i in range(1, n+1):
        if n % i == 0:
            sum += i
    return sum

n = 16
result = divisor_sum(n)
print(result)
Design a Python program to compute the maximum sum of any subpolygon within a given array of N points N = 5
points = [[1, 2], [2, 8], [4, 6], [8, 0], [7, -1]] def max_subpolygon_sum(N, points):
  maximum_sum = 0
  for i in range(N):
    for j in range(i+1, N):
      for k in range(j+1, N):
        for l in range(k+1, N):
          current_sum = points[i][0] + points[j][1] + points[k][0] + points[l][1]
          maximum_sum = max(maximum_sum, current_sum)
  return maximum_sum

max_sum = max_subpolygon_sum(N, points)
print(f'The maximum sum of any subpolygon within the given array of points is {max_sum}.')
Write a Python program to check if an item exists in a list using a given condition. list = [1, 2, 3, 4]
condition = lambda x: x % 2 == 0 def check_item(lst, condition): 
	for item in lst:
 		if condition(item): 
 			return True 
	return False

result = check_item([1, 2, 3, 4], lambda x : x % 2 == 0) 
print(result)
Implement an algorithm in Python that takes an array of numbers and returns the maximum value in the array. [2, 5, 8, 10, 4] def find_max(arr):
    max_val = arr[0]
    
    for num in arr:
        if num > max_val:
            max_val = num
    return max_val

result = find_max([2, 5, 8, 10, 4])
print(result)
Create a Python program to find the maximum profit of a stock given its maximum and minimum price. The maximum and minimum price of the stock are 12 and 9 respectively def getMaxProfit(maxPrice, minPrice): 
    # Calculate the maximum profit 
    return maxPrice - minPrice 
  
# Driver code 
maxPrice = 12
minPrice = 9
  
print(getMaxProfit(maxPrice, minPrice))
Create a lambda expression in Python to filter a list of integer greater than 50. [45, 12, 52, 89, 33, 99] list1 = [45, 12, 52, 89, 33, 99]
filtered_list = list(filter(lambda x: x > 50, list1))

print(filtered_list)
Find a bug in the given Python program and fix it. def get_times_table(x):
  times_table = []
  for i in range(10):
      times_table[i] = x * i
  return times_table def get_times_table(x):
  times_table = []
  for i in range(10):
      times_table.append(x * i)
  return times_table
Generate a Python code snippet to calculate the Levenshtein distance between two strings. Not applicable # Calculate the Levenshtein Distance between two strings
def levenshteinDistance(str1, str2):
    # Make sure they are the same length
    if len(str1) > len(str2):
        str1, str2 = str2, str1

    # Initialize an empty matrix
    matrix = [[0] * (len(str2) + 1)] * (len(str1) + 1)

    # Fill in the first row and column
    for i in range(len(str1) + 1):
        matrix[i][0] = i
    for j in range(len(str2) + 1):
        matrix[0][j] = j

    # Calculate the rest of the matrix 
    for i in range(1, len(str1) + 1):
        for j in range(1, len(str2) + 1):
            if str1[i - 1] == str2[j - 1]:
                cost = 0
            else:
                cost = 1
            matrix[i][j] = min(matrix[i - 1][j] + 1, matrix[i][j - 1] + 1, 
                         matrix[i - 1][j - 1] + cost)

    # Return the resultant matrix
    return matrix[-1][-1]
What is the most memory efficient way to iterate through a large list of objects in Python?  The most memory efficient way to iterate through a large list of objects in Python is to use an iterator. Iterators are more memory-efficient because they only store a single value at a time and can be used instead of the whole collection, which was held by the list. An iterator is accessed using the iter() function and is used in a for loop to loop through the items in the list.

for obj in iter(large_list_of_objects):
    # Do something with the object
Write a function in Python that merges two string and removes the duplicates. string_1 = 'one'
string_2 = 'two' def merge_strings(string_1, string_2):
    s = set(string_1 + string_2)
    merged_string = ''.join(s)
    return merged_string

merged_string = merge_strings(string_1, string_2)
print(merged_string)

'''
Output:
onetwo
'''
Create a python program to concatenate n strings and return the concatenated string input_strings = ["Hello", "World", "!"] def concatenate_strings(input_strings):
    output_string = ""
    for string in input_strings:
        output_string += string
    return output_string
Rewrite the following C++ function to Python. int multiply(int a, int b)
{
    int result = a * b;
    return result;
} def multiply(a, b):
    result = a * b
    return result
Generate a program in Python to find the median of a list of numbers. [5, 8, 2, 7, 4] def median(nums):
    nums.sort()
    length = len(nums)
 
    if length % 2 == 0:
        return (nums[length//2] + nums[(length//2)-1])/2.0
    else:
        return nums[length//2] 

list = [5, 8, 2, 7, 4]
med = median(list)
print('The median of the list is ' + str(med))
Create a Python program to generate random passwords that contains numbers, alphabets (upper and lower) and special characters  import random
 
# define string of all characters
string = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+~<>?'
 
# specify length of random password
length = 8
 
# generate random password
random_password = ""
for i in range(length):
    random_password = random_password + random.choice(string)

print(random_password)
Implement a Pythong program to concatenate two strings.  string1 = "Welcome"
string2 = "to the world"
 
def concat(string1 , string2): 
	return string1 + string2
  
print(concat(string1, string2))
Generate a Python dictionary of given word frequencies. [('cat', 2), ('dog', 5), ('bird', 3)] wordFrequencies = {
 'cat': 2,
 'dog': 5,
 'bird': 3
}
Construct a while-loop in Python that prints all the even numbers between 0 and 20  i = 0

while i <= 20:
    if i % 2 == 0:
        print(i)
    i += 1
Rewrite a Python code snippet to take advantage of vectorization. # Compute list of squared values
my_list = [1,2,3,4,5]
out_list = []

for element in my_list:
    out_list.append(pow(element,2)) # Compute list of squared values using vectorization
my_list = [1,2,3,4,5]

out_list = [pow(element,2) for element in my_list]
Develop a Python class that reads and stores a list of integers. [1, 2, 3, 4, 5] class ListOfInts:
    def __init__(self, numbers):
        self.numbers = numbers
    
    def get_list(self):
        return self.numbers
Solve this recursion problem in python. Problem: Given an array of integers, find the sum of its elements.

For example, if the array ar = [1, 2, 3], then 1 + 2 + 3 = 6. def sum(arr):
    if not arr:
        return 0
    else:
        return arr[0] + sum(arr[1:])
Write a Python program to sort a dictionary by key  def sort_dict_by_key(sample):
    # Create a sorted list of keys
    sorted_keys = sorted(sample.keys())
    # Iterate over the sorted sequence
    for key in sorted_keys:
        # Generate key-value pair
        print (key, sample[key])

sample = {'c':10, 'a':8, 'b':12, 'e':3, 'd':4}
sort_dict_by_key(sample)
Rewrite the following program in Python. # C++ Program to print prime factors 
void printPrimeFactors(int n) 
{ 
     // Print the number of 2s that divide n 
     while (n % 2 == 0) 
     { 
        cout << 2 << " "; 
        n = n/2; 
     } 
 
     // n must be odd at this point.  So we can skip  
     // one element (Note i = i +2) 
     for (int i = 3; i <= sqrt(n); i = i + 2) 
     { 
        // While i divides n, print i and divide n 
        while (n % i == 0) 
        { 
            cout << i << " "; 
            n = n/i; 
        } 
     } 
 
     // This condition is to handle the case whien n  
     // is a prime number greater than 2 
     if (n > 2) 
        cout << n << " "; 
} def printPrimeFactors(n):
    # Print the number of 2s that divide n
    while n % 2 == 0:
        print(2, end=" ")
        n = n/2
  
    # n must be odd at this point.  So we can skip
    # one element (note i = i + 2) 
    for i in range(3, int(math.sqrt(n))+1, 2):
        # While i divides n, print i and divide n
        while n % i == 0:
            print(i, end=" ")
            n = n/i
    # This condition is to handle the case when n
    # is a prime number greater than 2
    if n > 2:
        print(n, end=" ")
Generate a for loop in Python to print numbers from 1 to 10  for i in range(1,11):
    print(i)
Write a python script that sorts a list of strings by length. ['the', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog'] def sort_strings_by_length(strings):
    # Sort strings by length in ascending order
    strings.sort(key=len)
    return strings
Write a Python program that takes in three numbers as input and determines which number is the maximum.  def max_number(a,b,c):
  max = a
  if b > max:
    max = b
  if c > max:
    max = c
  return max

print(max_number(1,5,3))
Can you convert a given dictionary into a string using Python? {"foo": "bar", "hello": "world"} dictionary_string = str({"foo": "bar", "hello": "world"})
Convert the data model to a Markdown file by running the provided Python script. The resulting Markdown file will contain tables listing all metrics and sources that can be used with Quality-time, as well as the supported combinations of metrics and sources with their corresponding parameters and configurations.  """Script to convert the data model in a Markdown file."""

import json
import pathlib
import re
import sys

TYPE_DESCRIPTION = dict(
    url="URL",
    string="String",
    multiple_choice="Multiple choice",
    password="Password",
    integer="Integer",
    date="Date",
    single_choice="Single choice",
    multiple_choice_with_addition="Multiple choice with addition",
)


def html_escape(text: str) -> str:
    """Escape < and >."""
    return text.replace("<", "&lt;").replace(">", "&gt;")


def get_data_model():
    """Return the data model."""
    module_dir = pathlib.Path(__file__).resolve().parent
    server_src_path = module_dir.parent.parent / "components" / "server" / "src"
    sys.path.insert(0, str(server_src_path))
    from data_model import DATA_MODEL_JSON  # pylint: disable=import-error,import-outside-toplevel

    return json.loads(DATA_MODEL_JSON)


def markdown_link(url: str, anchor: str = None) -> str:
    """Return a Markdown link."""
    anchor = anchor or url
    return f"[{anchor}]({url})"


def markdown_table_row(*cells: str) -> str:
    """Return a Markdown table row."""
    return f"| {' | '.join([html_escape(cell) for cell in cells])} |\n"


def markdown_table_header(*column_headers: str) -> str:
    """Return a Markdown table header."""
    headers = markdown_table_row(*column_headers)
    separator = markdown_table_row(*[":" + "-" * (len(column_header) - 1) for column_header in column_headers])
    return "\n" + headers + separator


def markdown_header(header: str, level: int = 1) -> str:
    """Return a Markdown header."""
    return ("\n" if level > 1 else "") + "#" * level + f" {header}\n"


def metrics_table(data_model, universal_sources: list[str]) -> str:
    """Return the metrics as Markdown table."""
    markdown = markdown_table_header("Name", "Description", "Default target", "Scale(s)", "Default tags", "Sources¹")
    for metric in sorted(data_model["metrics"].values(), key=lambda item: str(item["name"])):
        direction = {"<": "≦", ">": "≧"}[metric["direction"]]
        unit = "% of the " + metric["unit"] if metric["default_scale"] == "percentage" else " " + metric["unit"]
        target = f"{direction} {metric['target']}{unit}"
        if len(metric["scales"]) == 1:
            scales = metric["default_scale"]
        else:
            scales = ", ".join(
                [
                    f"{scale} (default)" if scale == metric["default_scale"] else scale
                    for scale in sorted(metric["scales"])
                ]
            )
        tags = ", ".join(metric["tags"])
        sources = []
        for source in metric["sources"]:
            if source not in universal_sources:
                source_name = data_model["sources"][source]["name"]
                sources.append(f"[{source_name}]({metric_source_slug(data_model, metric, source)})")
        markdown += markdown_table_row(
            metric["name"], metric["description"], target, scales, tags, ", ".join(sorted(sources))
        )
    markdown += "\n"
    return markdown


def sources_table(data_model, universal_sources: list[str]) -> str:
    """Return the sources as Markdown table."""
    markdown = markdown_table_header("Name", "Description", "Metrics")
    for source_key, source in sorted(data_model["sources"].items(), key=lambda item: str(item[1]["name"])):
        source_name = f"[{source['name']}]({source['url']})" if "url" in source else source["name"]
        if source_key in universal_sources:
            metrics = "¹"
        else:
            metrics = ", ".join(
                [
                    f"[{metric['name']}]({metric_source_slug(data_model, metric, source_key)})"
                    for metric in data_model["metrics"].values()
                    if source_key in metric["sources"]
                ]
            )
        markdown += markdown_table_row(source_name, source["description"], metrics)
    markdown += "\n"
    return markdown


def metric_source_slug(data_model, metric, source) -> str:
    """Return a slug for the metric source combination."""
    source_name = data_model["sources"][source]["name"]
    return f"#{metric['name']} from {source_name}".lower().replace(" ", "-")


def metric_source_table(data_model, metric_key, source_key) -> str:
    """Return the metric source combination as Markdown table."""
    markdown = markdown_table_header("Parameter", "Type", "Values", "Default value", "Mandatory", "Help")
    for parameter in sorted(
        data_model["sources"][source_key]["parameters"].values(), key=lambda parameter: str(parameter["name"])
    ):
        if metric_key in parameter["metrics"]:
            name = parameter["name"]
            parameter_type = TYPE_DESCRIPTION[parameter["type"]]
            default_value = parameter["default_value"]
            if isinstance(default_value, list):
                if not default_value and parameter["type"] in ("single_choice", "multiple_choice"):
                    default_value = f"_all {parameter['short_name']}_"
                else:
                    default_value = ", ".join(default_value)
            if parameter["type"] in ("single_choice", "multiple_choice"):
                values = ", ".join(sorted(parameter["values"]))
            else:
                values = ""
            mandatory = "Yes" if parameter["mandatory"] else "No"
            help_url = markdown_link(parameter["help_url"]) if "help_url" in parameter else parameter.get("help", "")
            markdown += markdown_table_row(name, parameter_type, values, default_value, mandatory, help_url)
    markdown += "\n"
    return markdown


def metric_source_configuration_table(data_model, metric_key, source_key) -> str:
    """Return the metric source combination's configuration as Markdown table."""
    configurations = data_model["sources"][source_key].get("configuration", {}).values()
    relevant_configurations = [config for config in configurations if metric_key in config["metrics"]]
    if not relevant_configurations:
        return ""
    markdown = markdown_table_header("Configuration", "Value")
    for configuration in sorted(relevant_configurations, key=lambda config: str(config["name"])):
        name = configuration["name"]
        values = ", ".join(sorted(configuration["value"], key=lambda value: value.lower()))
        markdown += markdown_table_row(name, values)
    markdown += "\n"
    return markdown


def data_model_as_table(data_model) -> str:
    """Return the data model as Markdown table."""
    markdown = markdown_header("Quality-time metrics and sources")
    markdown += (
        "\nThis document lists all [metrics](#metrics) that *Quality-time* can measure and all "
        "[sources](#sources) that *Quality-time* can use to measure the metrics. For each "
        "[supported combination of metric and source](#supported-metric-source-combinations), it lists the "
        "parameters that can be used to configure the source.\n"
    )
    markdown += markdown_header("Metrics", 2)
    markdown += metrics_table(data_model, universal_sources := ["manual_number"])
    markdown += markdown_header("Sources", 2)
    markdown += sources_table(data_model, universal_sources)
    markdown += "¹) All metrics with the count or percentage scale can be measured using the 'Manual number' source.\n"
    markdown += markdown_header("Supported metric-source combinations", 2)
    for metric_key, metric in data_model["metrics"].items():
        for source_key in metric["sources"]:
            if source_key not in universal_sources:
                markdown += markdown_header(f"{metric['name']} from {data_model['sources'][source_key]['name']}", 3)
                markdown += metric_source_table(data_model, metric_key, source_key)
                markdown += metric_source_configuration_table(data_model, metric_key, source_key)
    markdown = re.sub(r"\n{3,}", "\n\n", markdown)  # Replace multiple consecutive empty lines with one empty line
    return re.sub(r"\n\n$", "\n", markdown)  # Remove final empty line


if __name__ == "__main__":
    data_model_md_path = pathlib.Path(__file__).resolve().parent.parent / "METRICS_AND_SOURCES.md"
    with data_model_md_path.open("w") as data_model_md:
        data_model_md.write(data_model_as_table(get_data_model()))

How would you create a 3D Array in python?  A 3D array can be created using the numpy.array() method in Python and specifying three dimensions, such as:

array_3d = numpy.array([[[0, 0, 0], [1, 1, 1], [2, 2, 2]],
                       [[3, 3, 3], [4, 4, 4], [5, 5, 5]],
                       [[6, 6, 6], [7, 7, 7], [8, 8, 8]]])
Write a Python program to create a Fibonacci sequence of n-length.  def fibonacci(n):
  if n == 0:
    return 0
  elif n == 1:
    return 1
  else:
    return fibonacci(n-1) + fibonacci(n-2)

for i in range(10):
  print(fibonacci(i))
Create a binary search program in Python to find a given number in a given array. Array: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
Number: 4 def binary_search(arr, num):
    """
    Function to use binary search to find a given number in a given array.

    Arguments:
    arr -- input array
    num -- number to be found

    Returns:
    res -- boolean value
    """

    # Initialize boolean variable
    res = False

    # Find the mid-point of the array
    mid = int(len(arr)/2)

    # initialize the beginning and end of the array
    start = 0
    end = len(arr) - 1

    # If the number is in the array, set boolean as True
    if num == arr[mid]:
        res = True

    # If the number is less than the mid-point of the array, 
    # make the end of the array the mid-point - 1
    elif num < arr[mid]:
        end = mid - 1

    # Else, make the start of the array the mid-point + 1
    else:
        start = mid + 1

    # If the start and the end of the array have not met each other, 
    # make a recursive call to the binary search function
    if start <= end:
        return binary_search(arr[start:end+1], num)

    return res
Write Python code to compute the shortest common supersequence (SCS) of two given strings. str1 = "abac"
str2 = "baba def findSCS(str1, str2, m, n): 
    if m == 0: 
        return n 
    if n == 0: 
        return m 
    if str1[m - 1] == str2[n - 1]: 
        return 1 + findSCS(str1, str2, m - 1, n - 1) 
    else: 
        return 1 + min(findSCS(str1, str2, m, n - 1), 
                       findSCS(str1, str2, m - 1, n)) 
  
def SCS(str1, str2): 
    return findSCS(str1, str2, len(str1), len(str2))
Generate a Python script for replacing a substring in a given string. String = "Hello World"
Substring = "Hello"
Replacement Substring = "Goodbye" new_str = str.replace("Hello","Goodbye")
print(new_str)
Create a program that implements the following pseudocode and express it in Python for x in range(1, 10):
    if x < 4:
        print("Low")
    else:
        print("High") for x in range(1, 10):
    if x < 4:
        print("Low")
    else:
        print("High")
Suggest a completion for the following Python code so that it prints the characters in a string in reverse order. my_str = "Hello World"

for i in my_str = "Hello World"

for i in range(len(my_str)-1, -1, -1):
    print(my_str[i], end="")
Write a Python program to generate a random number between 1 and 10.  import random 

random_num = random.randint(1, 10)  
print(random_num)
Create a program to detect plagiarism using Python.  import difflib

def detect_plagiarism(text1, text2):
    sequenceMatcher = difflib.SequenceMatcher(None, text1, text2)
    matchPercentage = sequenceMatcher.ratio() * 100
    return matchPercentage

detect_plagiarism("This is a sample text", "This is a sample text.")
Create a Python class called Department with three instance variables: name, employees, and budget. Not applicable class Department:
 def __init__(self, name, employees=[], budget=0):
  self.name = name
  self.employees = employees
  self.budget = budget

 def set_name(self, name):
  self.name = name

 def add_employee(self, employee):
  self.employees.append(employee)

 def set_budget(self, budget):
  self.budget = budget
Write a Python program to generate all subsets of a given set.  def generate_subset(input_set):
    subsets = [[]]
 
    for elem in input_set:
        n = len(subsets)
        for i in range(n):
            current_subset = subsets[i]
            subsets.append(current_subset + [elem])
 
    return subsets
Create an object-oriented Python program for creating a vending machine. The program should have classes for creating items, updating items, and calculating item prices. Not applicable class Item():
    def __init__(self, name, price, quantity):
        self.name = name
        self.price = price
        self.quantity = quantity

    def update_item(self, quantity):
        self.quantity += quantity
        
    def get_item_price(self):
        return self.price * self.quantity

class VendingMachine():
    def __init__(self, items):
        self.items = items

    def calculate_total_price(self, items):
        total_price = 0
        for item in items:
            total_price += item.get_item_price()
        return total_price

# Create your items
coke = Item('Coke', 1.00, 1)
chips = Item('Chips', 0.75, 1)

# Create your Vending machine 
vending_machine = VendingMachine([coke, chips])

# Calculate total price
price = vending_machine.calculate_total_price([coke, chips])

print(price) 

Output:
1.75
Using Python, implement a Pig Latin translator. The translator should accept a word as input and return its Pig Latin equivalent. word = "Python" def pig_latin(word):
 vowels = "aeiou"
 if word[0] in vowels: 
 return word + 'way'
 else:
 return word[1:] + word[0] + 'ay'

pig_latin_word = pig_latin(word)
print(pig_latin_word) # Output: ythonPay
Write a PYTHON program to find the profit or loss after selling a product. cost_price = 10
selling_price = 15 def find_profit(cost_price, selling_price):
    profit = selling_price - cost_price
    return profit
Write a Python program to find a substring in a string.  def find_substring(source, substring):
    '''This function returns the start index of a substring in given string '''
    if substring not in source:
        return -1
    i=0
    while i < len(source):
        if source[i] == substring[0]:
            flag = True
            for j in range(len(substring)):
                if substring[j] != source[i+j]:
                    flag = False
                    break
            if flag:
                return i
        i += 1
    return -1
Create a Django application with two models: Post and Comment. Each Post should have a title, text, and a list of associated Comment objects. Not applicable from django.db import models

# Create your models here.
class Post(models.Model):
 title = models.CharField(max_length=255)
 text = models.TextField()

class Comment(models.Model):
 post = models.ForeignKey(Post, on_delete=models.CASCADE)
 text = models.TextField()

# In your migrations file:

from django.db import migrations, models

def create_posts_and_comments(apps, schema_editor):
 Post = apps.get_model('app', 'Post')
 Comment = apps.get_model('app', 'Comment')

 post = Post.objects.create(
 title='My first post',
 text='Hello world!'
 )

 Comment.objects.create(
 post=post,
 text='Nice post!'
 )

class Migration(migrations.Migration):
 dependencies = [
 # other dependencies
 ]

 operations = [
 migrations.CreateModel(
 name='Post',
 fields=[
 ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
 ('title', models.CharField(max_length=255)),
 ('text', models.TextField()),
 ],
 ),
 migrations.CreateModel(
 name='Comment',
 fields=[
 ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
 ('post', models.ForeignKey(on_delete=models.CASCADE, to='app.Post')),
 ('text', models.TextField()),
 ],
 ),
 migrations.RunPython(create_posts_and_comments)
 ]
Write a Python Script to find all pairs of numbers in a list that have a sum equal to the target value. list = [2, 4, 6, 8], target = 10 def findPair(lst, target): 
    for i in range(0, len(lst)): 
        for j in range(i + 1, len(lst)): 
            if lst[i] + lst[j] == target: 
               return print(lst[i],",", lst[j]) 
    
list = [2, 4, 6, 8] 
target = 10
findPair(list, target)
Design and implement a class in Python that merges two sorted lists in linear time. list1: [2, 5, 6]
list2: [1, 8, 10] class MergeSort:
    # Merges two sorted lists
    def merge(self, list1, list2):
        i = 0
        j = 0
        merged_list = []
        while i < len(list1) and j < len(list2):
            if list1[i] <= list2[j]:
                merged_list.append(list1[i])
                i += 1
            else:
                merged_list.append(list2[j])
                j += 1

        # Lists might be of different lengths, so append the rest of the elements
        if i < len(list1):
            merged_list += list1[i:]
        elif j < len(list2):
            merged_list += list2[j:]

        return merged_list


# Test
list1 = [2, 5, 6]
list2 = [1, 8, 10]

ms = MergeSort()
print(ms.merge(list1, list2))
Develop a Python program to decrypt the given messages using a key? message: "AB cDE@5sfg90~!", key: 6 def decrypt(message, key):
    decrypted_message = ""
    
    for char in message:
        ascii_value = ord(char)
        decrypted_char = chr(ascii_value - key)
        decrypted_message += decrypted_char
    
    return decrypted_message

message = "AB cDE@5sfg90~!"
key = 6

decrypted_message = decrypt(message, key)
print(decrypted_message)
Create a Python program to calculate the sum of two numbers, given their positions in a given list. [1, 4, 5, 8, 9], positions = 3, 5 def sum_positions(numbers, pos1, pos2):
 sum = numbers[pos1] + numbers[pos2]
 return sum

numbers = [1, 4, 5, 8, 9]
positions = (3, 5)
print(sum_positions(numbers, positions[0], positions[1]))
Design an algorithm in Python for finding the longest string in an input. ['cat', 'dog', 'elephant'] def longest_string(strings):
    longest_len = 0
    longest_str = ''
    for s in strings:
        str_len = len(s)
        if str_len > longest_len:
            longest_str = s
            longest_len = str_len
    return longest_str

strings = ['cat', 'dog', 'elephant']
longest_str = longest_string(strings)
print(longest_str)
Write a Python program to generate a simple Maze game where the player starts at position (0,0) and needs to find the goal position (4,4) by navigating the maze. Not applicable # Maze Class 
class Maze: 
  
    # Maze constructor 
    def __init__(self): 
        self.n = 5
        self.maze = [[ 1, 0, 0, 0, 1 ], 
                     [ 1, 1, 1, 0, 1 ], 
                     [ 0, 0, 0, 0, 0 ], 
                     [ 0, 1, 1, 1, 1 ], 
                     [ 0, 1, 0, 0, 1 ]] 
   
    # function to print the maze 
    def printMaze(self): 
        for i in range(self.n): 
            for j in range(self.n): 
                print(self.maze[i][j], end =" ") 
            print () 
   
    # function to check if maze is solved or not 
    def isSolved(self, x, y): 
        if x == self.n - 1 and y == self.n - 1: 
            return True
        return False

# Driver Function 
if __name__ == "__main__": 
    mazeObj = Maze() 
    mazeObj.printMaze() 
    print("Is the maze solved? :", 
          mazeObj.isSolved(0, 0))
Create a python script to check if a given name is valid or not.  def is_name_valid(name):
    # Check if the name contains only alphabets
    if name.isalpha():
        return True
    return False

name = 'John'
print(is_name_valid(name))
Create a natural language processing program in Python that can generate features for a given text. Example text: "This is a sample text about natural language processing." from sklearn.feature_extraction.text import CountVectorizer

# Define the text
text = ["This is a sample text about natural language processing."]

# Create a CountVectorizer to generate feature vectors
vectorizer = CountVectorizer()

# Generate feature vectors
features = vectorizer.fit_transform(text)

# Print the feature vector
print(features.toarray())
Read the following pseudocode and generate a Python program to complete the given task. Given a list of numbers, print the numbers in reverse order numbers = [1, 2, 3, 4, 5]
 
numbers.reverse()
 
for num in numbers:
    print(num)
Write a Python program to generate n-grams of the given text with a window size of 3. The quick brown fox jumps over the lazy dog from collections import Counter


def generate_ngrams(text, window_size):
    text = text.lower().split(' ')
    ngrams = []
    for n in range(window_size, len(text)+1):
        for i in range(len(text)-n+1):
            ngrams.append(' '.join(text[i:i+n]))
    return Counter(ngrams)


text = "The quick brown fox jumps over the lazy dog"
window_size = 3

ngrams_count = generate_ngrams(text, window_size)

print('\nNGRAMS COUNT:',ngrams_count)

# Output
# NGRAMS COUNT: Counter({'the quick brown': 3,
#            'quick brown fox': 2,
#            'over the lazy': 1,
#            'brown fox jumps': 1,
#            'fox jumps over': 1,
#            'the lazy dog': 1,
#            'jumps over the': 1,
#            'quick brown fox jumps': 1})
Generate a program using Python that takes a user-defined dictionary with string values and returns the reversed key-value mappings. The dictionary is: {"one": "apple","two": "banana","three": "pear" } myDict = {"one": "apple","two": "banana","three": "pear" }

reverseMyDict = {}

for key, value in myDict.items():
 reverseMyDict[value] = key

print(reverseMyDict) # Output: {'apple': 'one', 'banana': 'two', 'pear': 'three'}
Write a Python program to optimize a list of numbers so that every follower is greater than its predecessor. [3, 8, 2, 6, 10] def optimized_list(arr):
n = len(arr)
for i in range(n):
 j = i+1
 while(j < n):
  if arr[i] > arr[j]:
   temp = arr[i]
   arr[i] = arr[j]
   arr[j] = temp
  j+=1
 
return arr
 
arr = [3, 8, 2, 6, 10]
result = optimized_list(arr)
print(result) #[2, 3, 6, 8, 10]
Create a basic Machine Learning model in Python using Scikit Learn. The model should take the number of bedrooms and lot size of a house as input and predict the price of the house. Number of Bedrooms: 3
Lot Size: 10000 import numpy as np
import matplotlib.pyplot as plt
from sklearn import linear_model

#generate dataset containing input and output
bedrooms = [3,2,4,2,3,4]
lot_sizes = [10000,20000,30000,40000,50000,60000]
prices = [20000,25000,30000,35000,40000,45000]

#reshape the data
bedrooms_data = np.array(bedrooms).reshape(-1,1)
lot_sizes_data = np.array(lot_sizes).reshape(-1,1)

#train the model
model = linear_model.LinearRegression()
model.fit(bedrooms_data,lot_sizes_data)

#predict
predicted_price = model.predict([[3,10000]])

#print the predicted price
print(predicted_price)
Write a Python program which takes an input string, removes all non-alphanumeric characters, and prints all of the words used in the string along with the number of times each word appears? This is some text with many words in it. words = []

# remove all non-alphanumeric characters
for char in string:
 if char.isalnum():
 words.append(char)

# count number of times each word is used
word_count = {}
for word in words:
 if word in word_count:
 word_count[word] += 1
 else:
 word_count[word] = 1

for k,v in word_count.items():
 print('{} : {}'.format(k,v))
Write a Python program to filter out unique elements from an array. arr = [3, 6, 3, 2, 7, 5, 6] arr = [3, 6, 3, 2, 7, 5, 6]

def unique_elements(arr):
  return list(set(arr))

unique_arr = unique_elements(arr)
print(unique_arr)
Create a function in Python that takes a number n and returns the sum of its digits. 378 def sum_of_digits(n):
    sum = 0
    while n:
        sum += n % 10
        n //= 10
    return sum

print(sum_of_digits(378))
Create a Python program to implement a selection sort algorithm  def selection_sort(arr): 
    n = len(arr) 
  
    # One by one move boundary of unsorted subarray 
    for i in range(n): 
        # Find the minimum element in unsorted array 
        min_index = i 
        for j in range(i+1, n): 
            if arr[min_index] > arr[j]: 
                min_index = j 
  
        # Swap the found minimum element with the first element         
        arr[i], arr[min_index] = arr[min_index], arr[i] 
  
    return arr
Create a visualisation for the following dataset in Python using Matplotlib. movie_name,distance
Jareth and Sarah, 77.4
Garreth and Martha, 4.3
Pam and Joe, 22.6 import matplotlib.pyplot as plt

movie_name = ['Jareth and Sarah', 'Garreth and Martha', 'Pam and Joe']
distance = [77.4, 4.3, 22.6]

plt.bar(movie_name, distance)
plt.xlabel('Movie Name')
plt.ylabel('Distance (miles)')
plt.title('Movie Name vs Distance')
plt.show()
Implement a function in Python that takes an array of strings and returns a list of all strings that have length greater than 6 ["testing", "this","array"] def getStringsWithLength(array):
    output = []
    for x in array:
        if len(x) > 6:
            output.append(x)
    return output

print(getStringsWithLength(["testing", "this","array"]))
Write a Python program to store and display information about a restaurant. The restaurant is called 'The Olive' and it has a Chinese and Thai cuisine. class Restaurant:
   def __init__(self, name, cuisine):
        self.name = name
        self.cuisine = cuisine

restaurant = Restaurant('The Olive', 'Chinese and Thai')

print('Name of the restaurant: ', restaurant.name)
print('Cuisine served in the restaurant: ', restaurant.cuisine)
Write a Python program to parse the given HTML data and print out each HTML tag. <html> 
 <head> 
 <title>Parse HTML</title> 
 </head> 
 <body> 
 <h1>Header</h1> 
 <p>This is a paragraph</p> 
 <h2>Sub-header</h2> 
 </body> 
  </html> import re

# Regex to match HTML tags
pattern = re.compile('<[^>]+>')

# Input HTML data
html = """
<html> 
 <head> 
 <title>Parse HTML</title> 
 </head> 
 <body> 
 <h1>Header</h1> 
 <p>This is a paragraph</p> 
 <h2>Sub-header</h2> 
 </body> 
  </html>
"""

# Match and print all HTML tags
print('HTML Tags:')
for tag in re.findall(pattern, html):
  print(tag)
Create a functional programming program to calculate the value of the Fibonacci number up to the n-th number in Python. The number should be 9. def fibonacci(n):
 if n < 0:
 raise ValueError("Negative number")
 if n == 0 or n == 1:
 return n
 return fibonacci(n-1) + fibonacci(n-2)
 
# calculate 9th Fibonacci number
print(fibonacci(9))
Write a Python program to optimize a function for finding the minimum value using an evolutionary algorithm such as differential evolution. def function(x):
 return x**2 - 0.5 * x - 2 import random
import numpy as np

def differential_evolution(f, bounds, mut=0.8, crossp=0.7, popsize=20, its=1000):

 # Initialization
 dim = len(bounds)
 population = np.random.rand(popsize, dim)
 min_b, max_b = np.asarray(bounds).T
 diff = np.fabs(min_b - max_b)
 population_denorm = min_b + population * diff

 fitness = np.asarray([f(ind) for ind in population_denorm])

 best_idx = np.argmin(fitness)
 best = population_denorm[best_idx]

 for i in range(its):
 for j in range(popsize):

 # Mutation
  idxs = [idx for idx in range(popsize) if idx != j]
 a, b, c = population[np.random.choice(idxs, 3, replace = False)]
 mutation = a + mut * (b - c)
 mutation = np.clip(mutation, 0, 1)

 # Crossover
 cross_points = np.random.rand(dim) < crossp
 if not np.any(cross_points):
   cross_points[np.random.randint(0, dim)] = True
 trial = np.where(cross_points, mutation, population[j])
 trial_denorm = min_b + trial * diff

 # Selection
 f = f(trial_denorm)
 if f < fitness[j]:
   fitness[j] = f
   population[j] = trial
   if f < fitness[best_idx]:
     best_idx = j
     best = trial_denorm

 # Printing
 print("Iteration: {}, Best Value: {:.4f}".format(i, f))

 return best

# Function to optimize
def function(x):
 return x**2 - 0.5 * x - 2

# Search Space
bounds = [(-10, 10)]

# Run the optimization
result = differential_evolution(function, bounds)
print("Optimized Value: {:.4f}".format(function(result)))
Write a Python code for sorting a list of integers in ascending order. [5,2,7,3,1] list=[5,2,7,3,1]
list.sort()
print(list)
Write a script in Python to evaluate an expression with multiple operators. expression = "2 + 3 - 5 * 4 + 7 / 6" # Initialize the expression
expression = "2 + 3 - 5 * 4 + 7 / 6"

# Evaluate the expression
result = eval(expression)

# Print the result
print("Result of the expression:", result)
Create a class in python that has three attributes and two methods  class MyClass:
    def __init__(self, a, b, c):
        self.a = a
        self.b = b
        self.c = c
    
    def add(self):
        return self.a + self.b + self.c
    
    def multiply(self):
        return self.a * self.b * self.c
Create a basic bot in Python that can respond to various queries. Not applicable import re

bot_greeting = "Hello! I am a bot. I'm here to help you."
bot_unknown = "I'm sorry, I don't understand. Please ask me something else."

def respond(message):
    if "hi" in message.lower():
        return bot_greeting
    elif "how are you" in message.lower():
        return "I'm doing well, thanks for asking!"
    elif "what can you do" in message.lower():
        return "I can answer questions about myself, like who created me or what language I'm written in."
    elif re.search("[Aa]re you .*", message):
        return "I'm just a bot, so I don't have feelings."
    else:
        return bot_unknown
Tackle the task of optimizing a given Python program for faster execution. # Program to find the sum of two numbers
def add_numbers(a, b):
    return a + b # Program to find the sum of two numbers
def add_numbers(a, b):
    # Use bitwise operators instead of normal arithmetic operations
    # as they are much faster and more efficient 
    return a ^ b if a <= b else b ^ a if b <= a else a ^ b
Compute the sum of two matrices in Python. matrix_1 = [[1, 2, 3], [4, 5, 6]]
matrix_2 = [[7, 8, 9], [10, 11, 12]] import numpy as np

matrix_1 = np.array(matrix_1)
matrix_2 = np.array(matrix_2)

result = np.add(matrix_1, matrix_2)

## Output: [[ 8 10 12], [14 16 18]]
Write a Python script to find the maximum and the minimum value in a given list.  def find_max_min(lst):
 max_val = max(lst)
 min_val = min(lst)
 return max_val, min_val
Create a Python script to classify text into two categories using a pretrained machine learning model. [
    "This article discusses climate change in Europe.",
    "This article discusses the economic impact of the coronavirus pandemic."
] import sklearn
import numpy as np

# load the classifier
clf = sklearn.svm.SVC()

# load the pre-trained classifier
with open('classifier.pkl', 'rb') as f:
    clf = pickle.load(f)

def classify_text(texts):
    # compile the inputs into a single array
    data = np.array(texts)
    
    # predict the labels
    labels = clf.predict(data)
    
    return labels

labels = classify_text([
    "This article discusses climate change in Europe.",
    "This article discusses the economic impact of the coronavirus pandemic."
])

print(labels) # -> ['Climate Change', 'Economic Impact']
Create a REST API using Python Flask that returns a JSON list of numbers from 1 to 10 when a get request is made to the endpoint /list. Not applicable from flask import Flask, jsonify

app = Flask(__name__)

@app.route("/list", methods=["GET"])
def get_list():
 numbers = list(range(1, 11))
 return jsonify(numbers)

app.run()
Write a script in python that outputs all even numbers between 0 and 10.  for number in range(0,11):
  if (number % 2 == 0):
    print(number)
Create a loop to print out the following pattern in Python.  for i in range(1, 6):
    print("*" * i)
    for j in range(1, i+1):
        print(j, end="")
    print()
Create a Python function that takes in one integer argument and returns an integer with the absolute value. number = -3 def getAbsoluteValue(number):
    if (number < 0):
        return number * -1
    else:
        return number

print(getAbsoluteValue(-3)) # Outputs 3
Create a Python program that implements a binary search on a given array of integers. arr = [3, 14, 25, 34, 51, 52, 74] def binarysearch(arr, x): 
    low = 0
    high = len(arr) - 1
    mid = 0
  
    while low <= high: 
  
        mid = (high + low) // 2
  
        # Check if x is present at mid 
        if arr[mid] < x: 
            low = mid + 1
  
        # If x is greater, ignore left half 
        elif arr[mid] > x: 
            high = mid - 1
  
        # If x is smaller, ignore right half 
        else: 
            return mid 
  
    # If we reach here, then the element 
    # was not present 
    return -1
Program an algorithm in Python to calculate the largest sum of non-adjacents from an unsorted array.  def largestSumNonAdjacent(arr):
  incl = 0
  excl = 0
 
  for i in arr: 
    new_excl = max(incl, excl) 
    incl = excl + i 
    excl = new_excl 
    
  return max(incl, excl)
Develop a script to create a class with a constructor in Python.  class ClassName:
    def __init__(self):
        self.data = []
Write a Python program to generate a square matrix with random values from 0 to 9. 4 (Size of matrix) import random

def matrix(size):
  matrix = [[0 for i in range(size)] for j in range(size)]
  for i in range(size):
    for j in range(size):
      matrix[i][j] = random.randint(0, 9)
  return matrix

result = matrix(4)
for row in result:
  print(row)
Create a Python script to send an email.  import smtplib

def send_email(sender, recipient, subject, message):
    # set up the audience and message
    message = """\

From: %s
To: %s
Subject: %s

%s
""" % (sender, recipient, subject, message)

    # set up the SMTP connection and send the message
    session = smtplib.SMTP('smtp.example.com', 25)
    session.login("sender_username", "sender_password")
    session.sendmail(sender, recipient, message)
    session.quit()
Create a neural network in Python to classify the sexes of animals using their heights. Not applicable import numpy as np
from sklearn.datasets import make_blobs
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import keras
from keras.models import Sequential
from keras.layers import Dense

# Generate some fake data
X, y = make_blobs(n_samples=100, n_features=2, centers=2, random_state=1)
X, y = np.hstack((X, y[:, np.newaxis])), y

# Split data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)

# Scale the data
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Build the model
model = Sequential()
model.add(Dense(4, activation='relu', input_shape=(3,)))
model.add(Dense(4, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

# Compile the model
model.compile(loss='binary_crossentropy', 
 optimizer='adam', 
 metrics=['accuracy'])

# Train the model
model.fit(X_train_scaled, y_train, epochs=20, verbose=0)

# Evaluate the model
test_loss, test_acc = model.evaluate(X_test_scaled, y_test, verbose=0)
print('test acc:', test_acc)
Create an algorithm in Python that takes a 2D array of Boolean values as an argument, and computes the number of connected islands on the grid. grid = [
    [True,  False, False],
    [False, True,  False],
    [False, False, True ]
] def countIslands(grid):  
      
    n = len(grid) 
    if n == 0:  
        return 0
  
    m = len(grid[0]) 
  

    count = 0
    for i in range(n): 
        for j in range(m): 
            if grid[i][j] == True: 
                DFS(grid,i,j) 
                count += 1

    return count

def DFS(grid,i,j): 
    if i<0 or j<0 or i>=len(grid) or j>=len(grid[0]) or grid[i][j]==False:
        return 
    grid[i][j]= False
    DFS[grid,i+1,j] 
    DFS[grid,i,j+1] 
    DFS[grid,i-1,j] 
    DFS[grid,i,j-1]
To generate reST documentation for Sphinx from Evennia source code, follow these steps:
1. Install etinenned's sphinx autopackage script to a folder named "autogen" in the same directory as this script using the command "hg clone https://bitbucket.org/etienned/sphinx-autopackage-script autogen".
2. Create a directory tree "code/" containing one directory for every package in the PACKAGE dictionary below.
3. Set EVENNIA_DIR to point to an Evennia root dir.
4. Run this script.
5. A new folder sphinx/source/code will be created with the reST sources.
6. To make a link to the code from the doc front page, edit docs/sphinx/sources/index.rst to reference code/modules. Note that this may not work properly at the moment.  #! /usr/bin/python 
#
# Auto-generate reST documentation for Sphinx from Evennia source
# code.
# 
# Uses etinenned's sphinx autopackage script. Install it to folder
# "autogen" in this same directory:
#
#   hg clone https://bitbucket.org/etienned/sphinx-autopackage-script autogen
#
# Create a directory tree "code/" containing one directory for every
# package in the PACKAGE dictionary below. Make sure EVENNIA_DIR
# points to an Evennia root dir.  Then just run this script. A new
# folder sphinx/source/code will be created with the reST sources.
#
# Note - this is not working very well at the moment, not all sources
# seems to be properly detected and you get lots of errors when
# compiling. To nevertheless make a link to the code from the doc
# front page, edit docs/sphinx/sources/index.rst to reference
# code/modules.
#


import os, subprocess, shutil

EVENNIA_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

SPHINX_DIR = os.path.join(os.path.join(EVENNIA_DIR, "docs"), "sphinx")
SPHINX_SRC_DIR = os.path.join(SPHINX_DIR, "source")
SPHINX_CODE_DIR = os.path.join(SPHINX_SRC_DIR, "code")

CONVERT_DIR = os.path.join(SPHINX_DIR, 'src2rest')
AUTOGEN_EXE = os.path.join(CONVERT_DIR, os.path.join("autogen", "generate_modules.py"))

def src2rest():
    """
    Run import 
    """
    try:
        shutil.rmtree(SPHINX_CODE_DIR)
        print "Emptied old %s." % SPHINX_CODE_DIR
    except OSError:
        pass 
    os.mkdir(SPHINX_CODE_DIR)
       
    inpath = EVENNIA_DIR
    outpath = SPHINX_CODE_DIR
    excludes = [r".*/migrations/.*", r"evennia\.py$", r"manage\.py$", 
                r"runner\.py$", r"server.py$", r"portal.py$"]
        
    subprocess.call(["python", AUTOGEN_EXE, 
                     "-n", "Evennia",
                     "-d",  outpath,
                     "-s", "rst",
                     "-f",
                     inpath] + excludes)

if __name__ == '__main__':

    try:
        src2rest()
    except Exception, e:
        print e
        print "Make sure to read the header of this file so that it's properly set up."

Write a Python program to generate a random color palette of five colors. Not applicable import random

# List of ten random colors
colors = ["#000000", "#FFFFFF", "#A52A2A", "#008080", "#DAA520", "#008000", "#FF00FF", "#808080", "#800000", "#808000", "#FFC0CB"]

# Function that randomly selects five colors from the list
def generate_colors():
 random.shuffle(colors)
 palette = colors[:5]
 return palette

# Generates and prints random color palette
print (generate_colors())
Design a program in Python that merges two sorted lists into a single sorted list. list1 = [1, 3, 5]
list2 = [2, 4, 6] def merge_lists(list1, list2):
    merged_list = [] 
    i, j = 0, 0
    while i < len(list1) and j < len(list2):
        if list1[i] < list2[j]:
            merged_list.append(list1[i]) 
            i += 1
        else:
            merged_list.append(list2[j]) 
            j += 1
    merged_list.extend(list1[i:])
    merged_list.extend(list2[j:])
    return merged_list
Generate a Python class to represent a person's medical information. The class should have fields for name, age, weight, height, and medical conditions. Not applicable class Patient:
 def __init__(self, name, age, weight, height, medical_conditions):
  self.name = name
  self.age = age
  self.weight = weight
  self.height = height
  self.medical_conditions = medical_conditions

def get_bmi(self):
 return self.weight / (self.height * self.height)

patient = Patient("John Doe", 30, 180, 1.80, ["diabetes", "hypertension"])
print(patient.get_bmi()) # 22.5
Write a Python script to print the frequency of occurrence of characters in a given string. text = "Hello World" def char_frequency(text):
    chars = {}
    for c in text:
        if c not in chars:
            chars[c] = 0
        chars[c] += 1
    return chars
    
print(char_frequency(text))
Fix the bug in this Python code. def swap(a, b):
  a, b = b, a

x = 10
y = 20

swap(x, y)

print(x, y) def swap(a, b):
  temp = a
  a = b
  b = temp

x = 10
y = 20

swap(x, y)

print(x, y)
Create a function in Python to normalize a vector. vector = [1, 5, 2, 8, 9, 4] def normalize(vector):
    norm = np.linalg.norm(vector)
    normalized = []
    for i in vector:
        normalized.append(i/norm)
    return normalized

vector = [1, 5, 2, 8, 9, 4]

normalized_vector = normalize(vector)
print(normalized_vector) # [0.10938925979875006, 0.5469462984987499, 0.21877851959750005, 0.8750559279949998, 1.0000000000000002, 0.43693269989949995]
Create a Python script to find the person with the highest grade in a classroom. [
 {'name': 'John', 'grade': 85},
 {'name': 'Alice', 'grade': 95},
 {'name': 'Bob', 'grade': 70},
 {'name': 'Sam', 'grade': 80}
] highest_grade_person = max(students, key=lambda x:x['grade'])
print("The student with highest grade is {}".format(highest_grade_person))
Write a Python program to determine whether or not a given string is a palindrome. "racecar" def isPalindrome(s):

 # remove whitespaces
 s = ''.join(s.split())

 # reverse string
 rev = s[::-1]

 # compare
 if rev == s:
 return True
 return False

if isPalindrome("racecar"):
 print('String is a palindrome')
else:
 print('String is not a palindrome')
Create a function in Python to calculate the average of a given list [9, 8, 7]. [9, 8, 7] def calculate_average(lst): 
 sum = 0
 for el in lst: 
  sum += el
 return sum / len(lst) 
 
 avg = calculate_average([9, 8, 7]) 
 print(avg) 
# Output: 8.0
Create a Python dictionary named ``my_dict`` that associates the string "John" with the age 20 and the string "Maria" with the age 25.  my_dict = {
    'John': 20,
    'Maria': 25
}
Create a Python script to clean the given text and make it ready for processing. text = "This is the teXt for procesSsing! 
Some puncT!_UATion must be removed. 
Let's, Trim the whitespace too.. 
Please preServe the cases as is." text_cleaned = "This is the text for processing!
Some punctuation must be removed.
Lets Trim the whitespace too.
Please preserve the cases as is."
Write a function in Python that takes in a two dimensional list of words and computes the longest word chain. [['a', 'b', 'c'],
 ['b', 'd', 'e'],
 ['f', 'g', 'h']] def longestChain(words_list):
  longest_chain = []
  current_chain = []

  for row in words_list:
    for i in range(len(row)-1):
      c1, c2 = row[i], row[i+1]
      if c1 not in current_chain:
        current_chain.append(c1)
      current_chain.append(c2)
    if len(current_chain) > len(longest_chain):
      longest_chain = current_chain
    current_chain = []
  
  return longest_chain

longestChain([['a', 'b', 'c'],
              ['b', 'd', 'e'],
              ['f', 'g', 'h']]) #returns ['a', 'b', 'd', 'e', 'f', 'g', 'h']
Find the number 10 in a string using a Python regular expression. String: "This string contains the number 10 in it" re.search("10", "This string contains the number 10 in it")
Write a Python script to parse a JSON string and convert it into an array of strings. Not applicable import json

def parse_json(json_string):
  json_data = json.loads(json_string)

  result = []
  for key, value in json_data.items():
    result.append(f'{key}: {value}')

  return result
Develop a program in Python for converting a base 10 number to binary. 17 def decimalToBinary(n):
    binary = 0
    power = 1
    
    while (n != 0):
        last_bit = n % 2
        binary = binary + last_bit * power
        n = n // 2
        power = power * 10
 
    return binary

n = 17
print('Binary Representation of', n, 'is', decimalToBinary(n))
Create a Python program to optimize a given set of four variables using the simulated annealing optimization algorithm. Variables: x1, x2, x3, x4 import numpy as np
import random
import simanneal

# Optimization function
def optimize(state):
 x1, x2, x3, x4 = state
 value = x1**2 + x2**2 - 3*x3 + x4**2
 return -value

# Simulated Annealing Algorithm
init_state = [1.0, 1.0, 1.0, 1.0]
schedule = simanneal.Annealer(optimize, init_state)
schedule.steps = 1000
result = schedule.anneal()

# Print results
print("Optimized variables: ")
print("x1 = {0}".format(result[0]))
print("x2 = {0}".format(result[1]))
print("x3 = {0}".format(result[2]))
print("x4 = {0}".format(result[3]))
Generate a correct program in Python to perform two dimensional binary search arr = [[1, 5, 8], [2, 15, 20], [3, 25, 30], [11, 13, 16]] def binarySearch2D(arr, key):
    start = 0
    end = len(arr) - 1
    while start <= end:
        mid = (start + end) // 2
        if arr[mid][0] == key:
            return True
        elif arr[mid][0] > key:
            end = mid - 1
        else:
            start = mid + 1
    return False

arr = [[1, 5, 8], [2, 15, 20], [3, 25, 30], [11, 13, 16]]
key = 3

if binarySearch2D(arr, key):
    print(True) 
else :
    print(False)
Using given data, generate random user reviews and ratings for a movie in Python. data = [{
  "movie_name": "Inception"
  "movie_id": "213121",
  "users": ["Alice", "Bob", "John"]
}]; reviews = {
  "Alice":{
   "rating": random.randint(1, 5),
   "review": "I watched 'Inception' and I thought it was great!"
  },
  "Bob":{
   "rating": random.randint(1, 5),
   "review": "I watched 'Inception' and it was just okay."
  },
  "John":{
   "rating": random.randint(1, 5),
   "review": "I didn't enjoy 'Inception' as much as some others."
  }
}
Write code in Python that takes a given dictionary and returns the difference of the maximal and minimal values of the dictionary. {'a': 5, 'b': -2, 'c': 3} def calculate_difference(input_dict):
    max_val = max(input_dict.values())
    min_val = min(input_dict.values())
    return max_val - min_val

input_dict = {'a': 5, 'b': -2, 'c': 3}
difference = calculate_difference(input_dict)
print(difference)
Create a Python program to identify anagrams in a given list of strings. ["ab","ba","dog","god"] def anagrams(words):
    anagram_list = []
    for word1 in words:
        for word2 in words:
            if word1 != word2 and sorted(word1) == sorted(word2):
                anagram_list.append([word1,word2])
    return anagram_list

list_of_words = ["ab","ba","dog","god"]
print(anagrams(list_of_words))
Generate a Python program that sorts a given array using the bubble sort algorithm. Array to be sorted: [5, 7, 1, 9, 3] def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        swapped = False
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1] :
                arr[j], arr[j+1] = arr[j+1], arr[j]
                swapped = True
        if swapped == False:
            break
    return arr

arr = [5, 7, 1, 9, 3]
arr = bubble_sort(arr)
print ("Sorted array :") 
for i in range(len(arr)): 
    print ("%d" %arr[i]),
Design a machine learning algorithm in python that predicts the price of a product.  import pandas as pd 
from sklearn.model_selection import train_test_split 
from sklearn.linear_model import LinearRegression 
from sklearn.metrics import mean_absolute_error 

# Read in data 
data = pd.read_csv('data.csv') 

# Split data into dependent and independent variables 
X = data.iloc[:, :-1].values 
y = data.iloc[:, -1].values 

# Split data into training and testing datasets 
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) 

# Train the model 
regressor = LinearRegression() 
regressor.fit(X_train, y_train) 

# Make predictions on the test data
y_pred = regressor.predict(X_test) 

# Calculate the mean absolute error 
mae = mean_absolute_error(y_test, y_pred) 

# Print results 
print('Mean absolute error: %.2f' % mae)
Develop a Python script to generate a set of random numbers within a given range.  import random

start = int(input("Enter start range: "))
end = int(input("Enter end range: "))
numbers = int(input("Enter the amount of numbers: "))

result = random.sample(range(start, end), numbers)

print("Randomly generated numbers:", result)
Write a web scraper in Python that extracts the price of Apple's iPhone from an e-commerce website. Link to an e-commerce website that sells Apple's iPhone:  
https://store.apple.com/us/buy-iphone/iphone-11 import requests
from bs4 import BeautifulSoup

link = 'https://store.apple.com/us/buy-iphone/iphone-11'

page = requests.get(link)
soup = BeautifulSoup(page.content, 'html.parser')

price = soup.find('span', id='pricing-product-price-value').text
print(price)
Design a web scraper using Python's BeautifulSoup library that extracts data from HTML sites. Not applicable #Import libraries 
import requests 
from bs4 import BeautifulSoup 

#Make a request to the url 
url = 'http://www.example.com'

r = requests.get(url)
soup = BeautifulSoup(r.content, 'html.parser') 

#Extract data 
data = [] 

for x in soup.find_all('div', class_="data-cell"): 
 data.append(x.text.strip()) 

#Print the data 
print(data)
Write a python program that sorts the list using insertion sort algorithm. unsorted_list = [10, 2, 6, 8, 5, 4, 9, 7, 3, 1] def insertion_sort(input_list):
    # creating a copy of input list so that the original list is not modified
    sorted_list = input_list.copy()
    # Iterating through input list and inserting elements in the right place in the sorted list
    for i in range(1, len(sorted_list)):
        j = i-1
        key = sorted_list[i] 
        while sorted_list[j] > key and j >= 0:
            sorted_list[j+1] = sorted_list[j]
            j -= 1
        sorted_list[j+1] = key

    return sorted_list

sorted_list = insertion_sort(unsorted_list)
Write a python program to find the top 5 most expensive items in the given list of products. [{"id":1, "name":"iPad", "price":500},
 {"id":2, "name":"Headphones", "price":200},
 {"id":3, "name":"Laptop", "price":1000},
 {"id":4, "name":"iPhone", "price":700},
 {"id":5, "name":"TV", "price":800}] import operator

products = [{"id":1,"name":"iPad","price":500},{"id":2,"name":"Headphones","price":200},{"id":3,"name":"Laptop","price":1000},{"id":4,"name":"iPhone","price":700},{"id":5,"name":"TV","price":800}]

sorted_products = sorted(products, key=operator.itemgetter('price'), reverse=True)

top_5_expensive_items = sorted_products[:5]

for item in top_5_expensive_items:
    print("The most expensive item is " + item['name'] + " with a price of " + str(item['price']) + ".")
Generate a Python program to fetch data from a website.  import requests

def main():
    url = 'https://www.example.com'
    
    r = requests.get(url)
    if r.status_code == 200:
        content = r.content
        print(content)
    else:
        print("Failed to fetch data.")

if __name__ == "__main__":
    main()
Create a Python script to generate random passwords. The script should take one parameter, an integer representing the length of the password, and should return a random string of the specified length. Length: 8 import string
import random

def generate_password(length):
 password = ''
 for i in range(length):
 password += random.choice(string.ascii_letters + string.digits)
 return password

print(generate_password(8))
Write Python code to remove all the vowels from a given string. string = 'Hello World!' def remove_vowels(string):
    # Replace all the vowels with empty string
    without_vowels = string.replace('a', '').replace('e', '').replace('i', '').replace('o', '').replace('u', '') 
    return without_vowels

if __name__ == '__main__':
    print(remove_vowels('Hello World!'))
Create an HTTP GET request in Python.  import requests

resp = requests.get("http://example.com")
Develop a Python script to calculate the standard deviation of a list of numbers. [3, 8, 19, 24, 7, 50] import statistics

# Store the list of numbers 
number_list = [3, 8, 19, 24, 7, 50]
 
# Calculate the standard deviation  
stdev = statistics.stdev(number_list) 
 
# Print the standard deviation 
print(stdev)
Identify the type of an expression in Python. x = "Apple" The expression x is of type string.
Generate a Python script to play a simple game of tic-tac-toe.  import random
 
def display_board(board):
    print('   |   |')
    print(' ' + board[7] + ' | ' + board[8] + ' | ' + board[9])
    print('   |   |')
    print('-----------')
    print('   |   |')
    print(' ' + board[4] + ' | ' + board[5] + ' | ' + board[6])
    print('   |   |')
    print('-----------')
    print('   |   |')
    print(' ' + board[1] + ' | ' + board[2] + ' | ' + board[3])
    print('   |   |')

def player_choice(board):
    position = 0
    
    while position not in [1,2,3,4,5,6,7,8,9] or not space_check(board, position):
        position = int(input('Choose your next position: (1-9) '))
        
    return position

def place_marker(board, marker, position):
    board[position] = marker

def win_check(board, mark):
    return ((board[7] == mark and board[8] == mark and board[9] == mark) or
            (board[4] == mark and board[5] == mark and board[6] == mark) or
            (board[1] == mark and board[2] == mark and board[3] == mark) or
            (board[7] == mark and board[4] == mark and board[1] == mark) or
            (board[8] == mark and board[5] == mark and board[2] == mark) or 
            (board[9] == mark and board[6] == mark and board[3] == mark) or
            (board[7] == mark and board[5] == mark and board[3] == mark) or
            (board[9] == mark and board[5] == mark and board[1] == mark))

def space_check(board, position):
    return board[position] == ' '

def full_board_check(board):
    for i in range(1,10):
        if space_check(board, i):
            return False
    return True

def main():
    print('Welcome to Tic Tac Toe!')
 
    while True:
        # Reset the board
        theBoard = [' '] * 10
        player1_marker, player2_marker = player_input()
        turn = choose_first()
        print(turn + ' will go first.')
        
        play_game = input('Are you ready to play? Enter Yes or No.')
        
        if play_game.lower()[0] == 'y':
            game_on = True
        else:
            game_on = False

        while game_on:
            if turn == 'Player 1':
                # Player1's turn.
                
                display_board(theBoard)
                position = player_choice(theBoard)
                place_marker(theBoard, player1_marker, position)

                if win_check(theBoard, player1_marker):
                    display_board(theBoard)
                    print('Congratulations! You have won the game!')
                    game_on = False
                else:
                    if full_board_check(theBoard):
                        display_board(theBoard)
                        print('The game is a draw!')
                        break
                    else:
                        turn = 'Player 2'

            else:
                # Player2's turn.
                
                display_board(theBoard)
                position = player_choice(theBoard)
                place_marker(theBoard, player2_marker, position)

                if win_check(theBoard, player2_marker):
                    display_board(theBoard)
                    print('Player 2 has won!')
                    game_on = False
                else:
                    if full_board_check(theBoard):
                        display_board(theBoard)
                        print('The game is a draw!')
                        break
                    else:
                        turn = 'Player 1'

        if not replay():
            break

def player_input():
    marker = ''
    
    while not (marker == 'X' or marker == 'O'):
        marker = input('Player 1: Do you want to be X or O? ').upper()

    if marker == 'X':
        return ('X', 'O')
    else:
        return ('O', 'X')

def choose_first():
    if random.randint(0, 1) == 0:
        return 'Player 2'
    else:
        return 'Player 1'

def replay():
    return input('Do you want to play again? Enter Yes or No: ').lower().startswith('y')

main()
Create a function in Python to compute the factorial of a number.  def factorial(n):
    if n == 1:
        return 1
    else:
        return n * factorial(n-1)
Write a Python program to calculate the standard deviation of a given list of numbers. [1, 2, 3, 4] def calculate_sd(lst):
    avg = sum(lst) / len(lst)
    return (sum([(x - avg)**2 for x in lst]) / len(lst)) ** 0.5
Write an optimization routine for a function using Python. The function is f(x) = 2x^2 – 4x. import numpy as np

def optimize(f, x_init):
 # Set the learning rate
 learning_rate = 0.01
 
 # Initiate the function and its derivative
 x = x_init
 f_x = f(x)
 f_prime_x = 2*x - 4
 
 # Repeat the optimization routine
 for i in range(1000):
 # Calculate the new x
 x_new = x - learning_rate * f_prime_x
 
 # Calculate the new f(x)
 f_x_new = f(x_new)
 
 # Update the values if the new f(x) is greater
 if f_x_new > f_x:
 x = x_new
 f_x = f_x_new
 f_prime_x = 2*x - 4
 
return x

# Call the function
x_opt = optimize(lambda x: 2*(x**2) - 4*x, 10)
print('The optimized x is:', x_opt)
Suggest a way to get a substring of a given string in Python.  def substring(string, start, end):
    '''This function takes a string, start index and end index, and returns the substring between the two given indexes.'''
    return string[start:end]
Generate code for a linked list in Python  class ListNode(object):
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution:
    def print_linkedlist(self, head):
        while head.next != None:
            head = head.next
            print(head.val)
Given a url, write a Python program to count the total number of words in all webpages associated with that url. https://www.example.com import urllib.request
from bs4 import BeautifulSoup

url = 'https://www.example.com'

html = urllib.request.urlopen(url).read()
soup = BeautifulSoup(html, 'html.parser')
total_words = 0

for link in soup.find_all('a'):
    new_url = link.get('href')
    new_html = urllib.request.urlopen(url + new_url).read()
    soup2 = BeautifulSoup(new_html, 'html.parser')

    words = soup2.get_text().split(' ')
    total_words += len(words)

print(total_words)
Create a function to generate a unique 6 digit number.  # Python program to generate 
# a unique 6 digit number 
import random 
def generate_number(): 
      
    # Choose a random number 
    # between 10000 and 99999 
    random_number = random.randint(10000, 99999) 
  
    # Return the random number 
    return random_number 
  
# Driver Code 
if __name__ == "__main__": 
    print(generate_number())
Write a Python program to convert ratings in a list of strings to a float. ['4.5', '3.0', '2.5', '4.0'] def str_to_float(ratings):
    return [float(x) for x in ratings]
Create a Python class for a basic calculator with addition, subtraction and multiplication operations.  class Calculator:
    def __init__(self):
        """Initialize the calculator"""
        self.result = 0
    
    def add(self, a, b):
        """Add two numbers"""
        self.result = a + b
        return self.result
    
    def subtract(self, a, b):
        """Subtract two numbers"""
        self.result = a - b
        return self.result
    
    def multiply(self, a, b):
        """Multiply two numbers"""
        self.result = a * b
        return self.result
Write a python class to represent a 'Person' with the following properties. Name, Age, Gender class Person:
    def __init__(self, name, age, gender):
        self.name = name
        self.age = age
        self.gender = gender
        
    def get_name(self):
        return self.name
    
    def get_age(self):
        return self.age
    
    def get_gender(self):
        return self.gender

# Test person
person = Person("John", 30, "Male")

# Print person information
print("Name:", person.get_name())
print("Age:", person.get_age())
print("Gender:", person.get_gender())
We have a list of names and scores as shown below. Write a Python program to print out a list of names and their corresponding average scores list = [['Bob', 43, 54, 66], ['James', 53, 45, 42], ['Grace', 43, 44, 59], ['Martin', 42, 42, 51]] def getAverageScores(list):
    output = []
    for item in list:
        name = item[0]
        scores = item[1:]
        average_score = sum(scores) / len(scores)
        output.append([name, average_score])
    
    return output

list = [['Bob', 43, 54, 66], ['James', 53, 45, 42], 
        ['Grace', 43, 44, 59], ['Martin', 42, 42, 51]]

averageScores = getAverageScores(list)
print("Name: Average Score")
for item in averageScores:
    print("{}: {:.2f}".format(item[0], item[1]))
Develop a program in Python to delete a node in a linked list. Head of the linked list = 1->2->3->4
Node to delete = 2 # Node class 
class Node: 
  
    # Function to initialise the node object 
    def __init__(self, data): 
        self.data = data  # Assign data 
        self.next = None  # Initialize next as null 
  
  
# Linked List class 
class LinkedList: 
  
    # Function to initialize head 
    def __init__(self): 
        self.head = None
  
    # This function prints contents of linked list 
    # starting from head 
    def printList(self): 
        temp = self.head 
        while (temp): 
            print(temp.data) 
            temp = temp.next
  
    # Function to delete node at position 'index'
    def delete_node(self, index):
  
        # Initialize temp and prev
        temp = self.head 
        prev = None
  
        # Check if index is valid
        if temp is None or index < 0: 
            return
  
        # If index is 0, delete the first node
        if index == 0: 
            self.head = temp.next
            temp = None
            return 
  
        # Find the node before the node to be deleted
        for i in range(index): 
            prev = temp 
            temp = temp.next
  
        # Unlink the node from linked list 
        prev.next = temp.next
        temp = None
  
  
# Driver Program 
llist = LinkedList()
  
# Create the list 1->2->3->4
llist.head = Node(1) 
second = Node(2) 
third = Node(3) 
fourth = Node(4) 

llist.head.next = second;  # Link first node with second 
second.next = third;  # Link second node with the third node 
third.next = fourth;  # Link third node with the fourth node 

# Delete the node at positions 2
llist.delete_node(2)
Create an algorithm in Python that takes a list of strings as input and checks whether the strings meet a certain length requirement. word_list = ["cat", "hello", "moon"] def checkLength(word_list, min_length):
    """
    Checks all words in a list to ensure they are at least a certain length
 
    Args:
        word_list (List[str]): List of words to be evaluated
        min_length (int): Minimum length of words accepted
    Returns:
        (bool): True if all words meet the minimum length criteria, False otherwise
    """
    for word in word_list:
        if len(word) < min_length:
            return False

    return True

word_list = ["cat", "hello", "moon"]
min_length = 3

is_valid = checkLength(word_list, min_length)

print(is_valid) # True
Write a Python function to check whether a year is leap year or not.  def is_leap_year(year):
  if (year % 4 == 0):
  if (year % 100 == 0):
      if (year % 400 == 0):
          return True
      else:
          return False
  else:
      return True
  else:
      return False

year = int(input("Enter a year: "))

if is_leap_year(year):
  print(year, "is a leap year")
else:
  print(year, "is not a leap year")
Construct a function in Python to print the sum of two numbers.  def print_sum(a, b):
    """Print the sum of two numbers."""
    print(a + b)
Write a Python code to calculate the factorial of a given number using memoization.  def factorial_memoization(n): 

	#Creating table to store result 
	factorial_table = [1] * (n+1) 

	# Calculating factorial and storing in 
	# the table 
	for i in range(1, n+1): 
		factorial_table[i] = i * factorial_table[i - 1] 

	return factorial_table[n] 

result = factorial_memoization(5)
print(result)
Create a Python program to generate all combinations of 3 elements from an array. array = [1, 2, 3, 4] def comb3(arr):
    result = []
    for i in range(len(arr)):
       for j in range(i+1, len(arr)):
           for k in range(j+1, len(arr)):
               t = [arr[i],arr[j],arr[k]]
               result.append(t)
    return result
Create a Python program that takes in a list of numbers and finds the closest number to a given number. [2, 4, 7, 8], 5 def find_closest(nums, target):
 closest_num = float('inf')
 for num in nums:
  if abs(target - num) < abs(target - closest_num):
   closest_num = num
 return closest_num

nums = [2, 4, 7, 8]
target = 5

print(find_closest(nums, target))
Generate a class in Python that deals with database operations for a Customer model. The class should include methods for writing to the database, querying from the database, and deleting from the database. Not applicable import sqlite3

class CustomerData:
 
    def __init__(self):
        self.db = sqlite3.connect('customers.db')
 
    def write(self, customer):
        with self.db:
            self.db.execute('INSERT INTO customers VALUES(?, ?)', (customer.name, customer.age))
        return customer
 
    def get(self, customer_name):
        with self.db:
            row = self.db.execute('SELECT * FROM customers WHERE name=?', (customer_name,)).fetchone()
            if row:
                return Customer(*row)
            else:
                return None
 
    def delete(self, customer_name):
        with self.db:
            self.db.execute('DELETE FROM customers WHERE name=?', (customer_name,))
 
class Customer:
 
    def __init__(self, name, age):
        self.name = name
        self.age = age
 
    def __str__(self):
        return f'{self.name}, {self.age}'
Use regex in Python to extract all the words in a string and calculate the total number of words in the string. This is an example string import re

text = "This is an example string"
words = re.findall(r'\w+', text)
print("Total words: " + str(len(words)))
Create a Python plugin that stops players from spectating and quickly joining the 'free' team to avoid strafe time. The plugin should have three hooks: "player_disconnect", "team_switch_attempt", and "team_switch". The "player_disconnect" hook should set a 15-second delay for the player to join after disconnecting. The "team_switch_attempt" hook should stop the player from joining if the spec delay is true. The "team_switch" hook should set a delay on joining when the player joins spectator and stop the player from joining if they try to join the 'free' team before the 15-second delay is up. Use the minqlx.delay decorator to allow the player to join after 15.1 seconds.  # This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

"""
Stops people spectating then quickly joining the 'free' team.
This is to stop people firing a rocket, then spectating and joining then
using the knockback from the rocket which would count as a strafe time.
"""

import minqlx


class spec_delay(minqlx.Plugin):
    def __init__(self):
        super().__init__()
        self.add_hook("player_disconnect", self.handle_player_disconnect)
        self.add_hook("team_switch_attempt", self.handle_team_switch_attempt)
        self.add_hook("team_switch", self.handle_team_switch)
        self.spec_delays = set()

    def handle_player_disconnect(self, player, reason):
        """Sets spec delay when a player disconnects."""
        self.spec_delays.add(player.steam_id)
        self.allow_join(player)

    def handle_team_switch_attempt(self, player, old_team, new_team):
        """Stops the player joining if spec delay is true."""
        if new_team != "spectator" and old_team == "spectator" and player.steam_id in self.spec_delays:
            player.tell("^6You must wait 15 seconds before joining after spectating")
            return minqlx.RET_STOP_EVENT

    def handle_team_switch(self, player, old_team, new_team):
        """Sets a delay on joining when the player joins spectator"""
        if new_team == "spectator" and old_team == "free":
            # Set spec delay
            self.spec_delays.add(player.steam_id)
            self.allow_join(player)
        # This is only needed to stop \team s; team f
        elif new_team == "free" and old_team == "spectator" and player.steam_id in self.spec_delays:
            player.tell("^6You must wait 15 seconds before joining after spectating")
            return minqlx.RET_STOP_EVENT

    @minqlx.delay(15.1)
    def allow_join(self, player):
        """Allows the player to join after 15.1 seconds."""
        try:
            self.spec_delays.remove(player.steam_id)
            player.center_print("^6You can join now")
        except KeyError:
            return
        except AttributeError:
            return

Create a Python code to delete the last element in a list. [1, 2, 2, 4, 4] def delete_last(lst):
    return lst[:-1]

result = delete_last([1, 2, 2, 4, 4])
print(result)
Write an algorithm in Python to calculate the nth prime number. Not applicable def nth_prime(n):
 primes = [2]

num = 3
while len(primes) < n:
 isPrime = True
 for prime in primes:
 if num % prime == 0:
 isPrime = False
 break
 if isPrime:
 primes.append(num)
 num += 2

return primes[n-1]

#Example
print(nth_prime(100))
Develop a Python program to generate a random sequence of alphabets.  import random

def generate_sequence():
    sequence = ""
    for _ in range(20):
        char = chr(random.randint(97, 122))
        sequence += char
    return sequence

output = generate_sequence()
print(output)
Optimize a Python program to check for prime numbers def isPrime(n):
  for i in range(2, n):
    if n % i == 0:
      return False
  return True

num = 23
if isPrime(num):
  print("Number is prime")
else:
  print("Number is not prime") def isPrime(n):
 if n <= 1:
 return False
 for i in range(2, int(n ** 0.5) + 1):
 if n % i == 0:
 return False
 return True

num = 23
if isPrime(num):
 print("Number is prime")
else:
 print("Number is not prime")
Create a Python script that takes a minimum and maximum temperature range as input and outputs the longest period of time with temperatures falling in this range. minTemperature = 20
maxTemperature = 30 def computeMaxTemperatureRange(minTemperature, maxTemperature):
    max_range = 0
    start_index = 0
    end_index = 0
    temp_range = 0
    
    for i, temp in enumerate(temperature_list):
        if temp < minTemperature or temp > maxTemperature:
            if temp_range > max_range:
                max_range = temp_range
                end_index = i - 1
            temp_range = 0
        else: 
            if temp_range == 0:
                start_index = i
            temp_range += 1
    
    print('Longest period of time in temperature range is from index {0} to {1}'.format(start_index, end_index))
    print('Time range = {0} days'.format(max_range))
Create a Python code to generate a string containing the multiplying table for any given number up to ten.  def generate_multiplication_table(num):
    """
    Generates a string with the multiplication table of a given number up to ten.
    @param num: int
    @return: str
    """
    table_str = ""

    for i in range(1, 11):
        result = num * i
        table_str += f"{num} * {i} = {result}\n"
    return table_str
Create a Dockerfile that will run the program you wrote in Task 4. Not applicable FROM python:3.7
RUN mkdir -p /usr/src/app
WORKDIR /usr/src/app
EXPOSE 8080
COPY . /usr/src/app
RUN pip install -r requirements.txt
ENTRYPOINT ["python", "scrape.py"]
Create a GUI application in Python that shows the current date and time.  import tkinter as tk
from tkinter import font
import datetime
 
window = tk.Tk()
 
window.title("Current Date and Time")
 
helv36 = font.Font(family='Helvetica', size=36, weight='bold')
 
time = datetime.datetime.now().strftime("%H:%M:%S")
date = datetime.datetime.now().strftime("%d/%m/%Y")
 
clock_frame = tk.Frame(
    master = window,
    relief = tk.RAISED,
    borderwidth = 1)
clock_frame.pack(fill = tk.BOTH)
 
date_label = tk.Label(
    master = clock_frame,
    text = date,
    font = helv36)
date_label.pack(side = tk.TOP, expand = True)
 
time_label = tk.Label(
    master = clock_frame,
    text = time,
    font = helv36)
time_label.pack(side = tk.BOTTOM, expand = True)
 
window.mainloop()
Using the provided pseudocode, write a program in Python that checks if a given number is a prime number.  def is_prime(num):
    if num <= 1:
        return False

    for i in range(2, num):
        if num % i == 0:
            return False

    return True

num = 7
result = is_prime(num)
print(result)
Create a Python program to convert a list of strings to a dictionary. The dictionary keys should be the characters of the strings and the values should be the lengths of the strings. strings = ['hello', 'world', 'computer'] strings = ['hello', 'world', 'computer']

dictionary = {}

for string in strings:
 for char in string:
  dictionary[char] = len(string)

print(dictionary)  # {'h': 5, 'e': 5, 'l': 5, 'o': 5, 'w': 5, 'r': 5, 'd': 5, 'c': 8, 'm': 8, 'u': 8, 't': 8, 'p': 8, 'e': 8, 'r': 8}
Create a python program that encrypts a message. message = 'Hello World!' #library to generate random numbers 
import random 
#library to perform string operations  
import string 
# function to encrypt the string  
def encryptMessage(message): 
    # convert message to uppercase 
    message = message.upper()  
    # make a list of possible characters 
    chars = string.ascii_uppercase  
    #stores the encrypted form of the message 
    encryptedMessage = "" 
    # loops through the message 
    for char in message: 
        if char in chars: 
            # finds the corresponding position of character 
            position = chars.find(char) 
            # takes a random element from alphabet list 
            newposition = random.randrange(0,26) 
            # replace the character by the character in new position 
            encryptedMessage += chars[newposition] 
    return encryptedMessage 
# Driver Code 
encryptedMessage = encryptMessage(message)  
print(encryptedMessage)
This code defines a Python class called PcaPlotVector that inherits from BaseCClass and has several methods for accessing and manipulating data. To use this code, import the necessary modules from ert.cwrap, ert.enkf, and ert.util. Then, create an instance of the PcaPlotVector class with the required arguments: an integer component, a Matrix object for the principal component matrix, and a Matrix object for the observation principal component matrix. The resulting object can be used to access the data stored in the matrices, including the size, individual values, observation value, and singular value. When finished using the object, call the free() method to release the memory allocated for it.  from ert.cwrap import BaseCClass, CWrapper
from ert.enkf import ENKF_LIB
from ert.util import Matrix


class PcaPlotVector(BaseCClass):

    def __init__(self, component, principal_component_matrix, observation_principal_component_matrix):
        assert isinstance(component, int)
        assert isinstance(principal_component_matrix, Matrix)
        assert isinstance(observation_principal_component_matrix, Matrix)

        c_pointer = PcaPlotVector.cNamespace().alloc(component, principal_component_matrix, observation_principal_component_matrix)
        super(PcaPlotVector, self).__init__(c_pointer)


    def __len__(self):
        """ @rtype: int """
        return PcaPlotVector.cNamespace().size(self)


    def __getitem__(self, index):
        """
        @type index: int
        @rtype: float 
        """
        assert isinstance(index, int)
        return PcaPlotVector.cNamespace().get(self, index)

    def __iter__(self):
        cur = 0
        while cur < len(self):
            yield self[cur]
            cur += 1

    def getObservation(self):
        """ @rtype: float """
        return PcaPlotVector.cNamespace().get_obs(self)

    def getSingularValue(self):
        """ @rtype: float """
        return PcaPlotVector.cNamespace().get_singular_value(self)
        

    def free(self):
        PcaPlotVector.cNamespace().free(self)



cwrapper = CWrapper(ENKF_LIB)
cwrapper.registerType("pca_plot_vector", PcaPlotVector)
cwrapper.registerType("pca_plot_vector_obj", PcaPlotVector.createPythonObject)
cwrapper.registerType("pca_plot_vector_ref", PcaPlotVector.createCReference)

PcaPlotVector.cNamespace().alloc   = cwrapper.prototype("c_void_p pca_plot_vector_alloc(int, matrix, matrix)")
PcaPlotVector.cNamespace().free    = cwrapper.prototype("void pca_plot_vector_free(pca_plot_vector)")
PcaPlotVector.cNamespace().size    = cwrapper.prototype("int pca_plot_vector_get_size(pca_plot_vector)")
PcaPlotVector.cNamespace().get     = cwrapper.prototype("double pca_plot_vector_iget_sim_value(pca_plot_vector, int)")
PcaPlotVector.cNamespace().get_obs = cwrapper.prototype("double pca_plot_vector_get_obs_value(pca_plot_vector)")
PcaPlotVector.cNamespace().get_singular_value = cwrapper.prototype("double pca_plot_vector_get_singular_value(pca_plot_vector)")



Design an API in Python for a simple store where customers can search for products. The API should have the following features: searching for products by name or by category, displaying information about a product, and adding a product to user's cart. Not applicable # Store API
# app.py
from flask import Flask
from flask_restful import Api, Resource, reqparse

app = Flask(__name__)
api = Api(app)

products = [
    {"name": "laptop", "category": "electronics", "price": 899.99},
    {"name": "iphone", "category": "electronics", "price": 999.99},
    {"name": "headphones", "category": "electronics", "price": 99.99}
]

# product
class Product(Resource):
    def get(self, name):
        for product in products:
            if name == product['name']:
                return product, 200
        return {"message": "Product not found"}, 404

    def post(self, name):
        parser = reqparse.RequestParser()
        parser.add_argument('category')
        parser.add_argument('price')
        args = parser.parse_args()

        for product in products:
            if product['name'] == name:
                return {"message": "Product with name {} already exists".format(name)}, 400

        product = {
            "name": name, 
            "category": args['category'],
            "price": args['price']
        }
        products.append(product)
        return products[-1], 201

    def put(self, name):
        parser = reqparse.RequestParser()
        parser.add_argument('category')
        parser.add_argument('price')
        args = parser.parse_args()

        for product in products:
            if product['name'] == name:
                product['category'] = args['category']
                product['price'] = args['price']
                return product, 200
        return {"message": "Product not found"}, 404

# products
class ProductList(Resource):
    def get(self):
        return products, 200

api.add_resource(Product, "/product/<string:name>")
api.add_resource(ProductList, "/products")

if __name__ == '__main__':
    app.run(debug=True)
Create a text analysis library in Python that utilizes a Transformer model to tokenize words and labels the sentiment of each token text = "This was a great experience." # Import the required packages
import nltk
from transformers import *

# Load the pretrained model
model = BertTokenizer.from_pretrained('bert-base-cased')

# Tokenize the input text
input_ids = model.encode(text)

# Construct the text analysis library
text_analysis = {
    'tokens': model.convert_ids_to_tokens(input_ids),
    'sentiments': model.polarity_scores(input_ids)
}

# Print the library
print(text_analysis)
Write a quicksort algorithm in python.  def quicksort(array):
    if len(array) < 2:
        return array
    else:
        pivot = array[0]
        less = [i for i in array[1:] if i <= pivot]
        greater = [i for i in array[1:] if i > pivot]
 
        return quicksort(less) + [pivot] + quicksort(greater)
Create a Python program to generate a random number between 1 to 100.  import random

number = random.randint(1, 100)
print(number)
Develop a Python program to send a mail notification when a certain event is triggered.  import smtplib

# Chnage this variable when the event is triggered
message_sent = False

if not message_sent:
    # Replace sender_email and receiver_email with valid email
    sender_email = "SENDER EMAIL"
    receiver_email = "RECEIVER EMAIL"
    message = "The event has been triggered."
    
    server = smtplib.SMTP('smtp.gmail.com', 587)
    server.ehlo()
    server.starttls()
    server.login(sender_email, "YOUR PASSWORD")
    server.sendmail(sender_email, receiver_email, message)
    message_sent = True
Create an algorithm to determine if two strings have the same character set in Python. Strings: "paris" and "sapir" def same_charset(str1, str2):
	
	str1 = sorted(str1) 
	str2 = sorted(str2)
 
	if(str1 == str2):
		return True
	else:
		return False
Create a web server using Python's built-in HTTPD framework  """
from http.server import HTTPServer, BaseHTTPRequestHandler

class MyServer(HTTPServer):
    def __init__(self, server_address, handler_class):
        super().__init__(server_address, handler_class)

class MyHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response_only(200)
        self.end_headers()
        self.wfile.write("Hello, world!".encode("utf-8"))

if __name__=="__main__":
    HOST, PORT = "localhost", 8002

    server = MyServer((HOST, PORT), MyHandler)
    print("Start server at http://{}:{}".format(HOST, PORT))
    server.serve_forever()
"""
Create a Python script to calculate the circumference of a circle given its radius. radius = 5 def calc_circumference(radius):
  circumference = 2 * 3.14 * radius
  return circumference
  
circumference = calc_circumference(radius)
print(circumference)
Generate a Python class to store a database table into memory. Table Name: "People"
Columns: "id", "name", "age", "gender", "address" class People:
    def __init__(self, id, name, age, gender, address):
        self.id = id
        self.name = name
        self.age = age
        self.gender = gender
        self.address = address

    def get_data(self):
        data = {
            'id': self.id,
            'name': self.name,
            'age': self.age,
            'gender': self.gender,
            'address': self.address
        }
        return data

    def set_data(self, data):
        self.id = data['id']
        self.name = data['name']
        self.age = data['age']
        self.gender = data['gender']
        self.address = data['address']
Create a graphical representation of a given string using Python. Hello World! import matplotlib.pyplot as plt 

# initializing string
string = "Hello World!"

# declaring x, yaxis 
X = range(len(string)) 
Y = [ord(i) for i in string] 

# making a graph 
plt.plot(X, Y) 
plt.title('Graphical representation of String : ' + string) 

plt.show()
Create a class in Python which implements a linked list data structure.  # Node class
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

# LinkedList class
class LinkedList:
    def __init__(self):
        self.head = None
    
    def is_empty(self):
        return self.head == None
    
    def add(self, data):
        node = Node(data)
        node.next = self.head
        self.head = node

    def remove(self):
        if self.is_empty():
            return None
        data = self.head.data
        self.head = self.head.next
        return data
Generate a Python program to implement binary search on the given sorted array. [2, 3, 5, 6, 8, 9] def binary_search(arr, target):
    low = 0
    high = len(arr) - 1
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1
    return -1
Generate Python code to calculate the Mean Squared Error (MSE) between a given set of predicted values and actual values. y_true = [2.2, 3.7, 4.1, 5.7]
y_pred = [1.8, 2.3, 2.9, 5.9] def calculate_mse(y_true, y_pred):
    mse = 0
    for i in range(len(y_true)):
        mse += (y_true[i] - y_pred[i])**2
    mse = mse / len(y_true)
    return mse

mse=calculate_mse(y_true, y_pred)
print(mse)
# Output: 0.44000000000000006
Write an algorithm for detecting a cycle in a linked list in Python. Not applicable def detectLoop(head):
    # Base Case: List is empty
    if head is None:
        return False
    
    # Initialize slow and fast pointers
    slow = head
    fast = head
    
    while slow and fast and fast.next:
        slow = slow.next
        fast = fast.next.next
        
        # If slow and fast meet at same point then loop is found
        if slow == fast:
            return True
        
    return False
Develop a function in Python that sorts a dictionary by value in descending order. dictionary = {'a': 10, 'b': 20, 'c': 5} def sort_dict_by_value(dict): 
    sorted_dict = dict(sorted(dict.items(), key = lambda kv: kv[1], reverse = True)) 
    return sorted_dict

sorted_dict = sort_dict_by_value(dictionary)
print(sorted_dict)
Create a program using Python to check if two strings are anagrams. s1 = "listen"
s2 = "silent" def are_anagrams(s1, s2): 
      
    # get lengths of both strings 
    n1 = len(s1) 
    n2 = len(s2) 
      
    # if lengths not equal, strings are not anagrams 
    if n1 != n2: 
        return False
  
    # sort both strings  
    s1 = sorted(s1) 
    s2 = sorted(s2) 
  
    # linearly compare characters of both strings 
    for i in range(0, n1): 
        if s1[i] != s2[i]: 
            return False
  
    return True 
  
s1 = "listen"
s2 = "silent"
if are_anagrams(s1,s2):
    print("The strings are anagrams of each other.")
else: 
    print("The strings are not anagrams of each other.")
Create a program in Python that takes a list of strings as input, sorts the strings in alphabetical order, and prints out the list in reverse alphabetical order. Sample List: ["cat","bird","dog","zebra","ant"] # create a list
sample_list = ["cat", "bird", "dog", "zebra", "ant"]
 
# sort the list
sample_list.sort()
 
# reverse the list
sample_list.reverse()
 
# print the reversed list
print(sample_list)
# ['zebra', 'dog', 'cat', 'bird', 'ant']
Write an AI-based program in Python that can analyze a text and produce a sentiment score for the text. 'This product is a great example of quality craftsmanship and excellent engineering.' from textblob import TextBlob

text = 'This product is a great example of quality craftsmanship and excellent engineering.'
blob = TextBlob(text)

sentiment_score = blob.sentiment.polarity

if sentiment_score > 0:
 print('Positive sentiment')
elif sentiment_score < 0:
 print('Negative sentiment')
else:
 print('Neutral sentiment')
Generate a valid Python script to replace every element in a list by a specified integer  def replace_list_items(list_X,value):
    new_list=[]
    for element in list_X:
        new_list.append(value)
    return new_list
Write a Python program to generate a Web page containing all the digits arranged in a 3x3 matrix structure.  <html>
    <head>
        <title>Digit 3x3 Matrix</title>
        <style>
            table{
                border:1px solid black; 
                width: 50px; 
                height:50px;
            }
        </style>
    </head>
    <body>
        <h1>Digit 3x3 Matrix</h1>
        <table>
            <tr>
                <td>1</td><td>2</td><td>3</td>
            </tr>
            <tr>
                <td>4</td><td>5</td><td>6</td>
            </tr>
            <tr>
                <td>7</td><td>8</td><td>9</td>
            </tr>
        </table>
    </body>
</html>
Design and implement an API in Python for an online store application.  from flask import Flask, jsonify, request
 
app = Flask(__name__)

@app.route('/products', methods=['GET'])
def get_all_products():
    # query database
    products = []
    # format result
    return jsonify(products)

@app.route('/products/<int:product_id>', methods=['GET'])
def get_product(product_id):
    # query database
    product = {}
    # format result
    return jsonify(product)

@app.route('/products', methods=['POST'])
def create_product():
    # get data from request
    data = request.get_json()
    # save to database
    # format result
    return jsonify({'message': 'Product added successfully.'}), 201

@app.route('/products/<int:product_id>', methods=['PUT'])
def update_product(product_id):
    # get data from the request
    data = request.get_json()
    # update data in the database
    # format the result
    return jsonify({'message': 'Product successfully updated.'})

@app.route('/products/<int:product_id>', methods=['DELETE'])
def delete_product(product_id):
    # delete data from the database
    # format the result
    return jsonify({'message': 'Product successfully deleted.'})
Design a Simple Calculator class in Python that contains methods for addition, subtraction, multiplication and division.  class Calculator:
    def __init__(self):
        # initialization code
    
    def add(self, x, y):
        return x + y
    
    def subtract(self, x, y):
        return x - y
    
    def multiply(self, x, y):
        return x * y
    
    def divide(self, x, y):
        return x / y
Write a Python program to recommend movies according to user preferences. Not applicable import pandas as pd

#read the data
movies = pd.read_csv('movies.csv')
ratings = pd.read_csv('ratings.csv')

#calculate the mean rating for each movie
mean_movie_rating = ratings.groupby('movie_id', as_index=False).mean()

#merge the two dataframes
movies_with_rating = movies.merge(mean_movie_rating, on='movie_id')

#sort by rating
movies_with_rating.sort_values(by='rating', ascending=False, inplace=True)

#recommend movies
recommendations = movies_with_rating[movies_with_rating.rating >= 4]
print(recommendations)
Develop a solution in Python to convert the Roman numeral representation of a number to its numerical equivalent. IV def convertRoman(chars):
    # We will use a dictionary to reference Roman numerals
    roman = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000} 
    int_value = 0
    
    for i in range(len(chars)): # Loop through each Roman numeral
        numer = roman[chars[i]] # Get the numerical equivalent of the Roman numeral
        if (i+1)<len(chars) and roman[chars[i+1]] > numer: # Check if the Roman numeral is followed by a larger one 
            int_value -= numer # If yes, subtract the value of the numeral
        else:
            int_value += numer # Else, add it
    return int_value

chars = 'IV' 
print (convertRoman(chars))
Propose and implement a method to sort a list of varied size nested lists in Python. Sample input: [[2,6],[1],[3,4,5]] def sortList(lists):
 sortedList = [sorted(lst) for lst in lists]
 sortedList.sort(key = len)
 return sortedList

lists = [[2,6],[1],[3,4,5]]
print(sortList(lists)) // prints [[1],[2,6],[3,4,5]]
Convert a C++ program to a Python program. #include <iostream>

int main()
{
    std::cout << "Hello World!";
    return 0;
} print("Hello World!")
Construct a code snippet for Python to check whether a number is even or odd.  def is_even(n):
    if n % 2 == 0:
        print("Even")
    else:
        print("Odd")

is_even(4)
Implement a custom iterator in Python for a given data structure. Tree data structure class TreeIterator:
    def __init__(self, root):
        self.root = root
        self.stack = []
        self.current = None

    def __iter__(self):
        return self

    def __next__(self):
        # Case 1: there is a left-subtree
        if self.current is None:
            if self.root is not None:
                self.stack.append(self.root)
                self.current = self.root.left
            else:
                # Tree is empty
                raise StopIteration
        # Case 2: there is a right-subtree
        elif self.current.right is not None:
            self.stack.append(self.current.right)
            self.current = self.current.right.left
        # Case 3: there is no right-subtree and no left-subtree
        elif self.stack:
            self.current = self.stack.pop()
        else:
            # It's the end of the traversal
            self.current = None
            raise StopIteration
        return self.current.value
Modify a Python program to encrypt a string using the XOR Cipher. current program:
def xor_strings(xs, ys):
    return "".join(chr(ord(x) ^ ord(y)) for x, y in zip(xs, ys))

password = "TestPassword"
string = "TopSecret"

print(xor_strings(password, string)) def xor_strings(xs, ys):
    output = ""
    for i in range(0, len(xs)):
        output += format(ord(xs[i]) ^ ord(ys[i]), '02x').upper()

    return output

password = "TestPassword"
string = "TopSecret"

print(xor_strings(password, string))
Design a code generator to convert a Python code into Javascript code. def hello_world():
 print("Hello World") function helloWorld() {
 console.log("Hello World");
}
Create a web scraper in Python that loads a website page and extracts a particular string of text. URL: https://www.example.com/
Text to extract: "Hello, world!" import requests
from bs4 import BeautifulSoup
 
url = "https://www.example.com/"
page = requests.get(url)
 
soup = BeautifulSoup(page.content, 'html.parser')
text = soup.find(string="Hello, world!")
print(text)
Develop a Python function that takes a list of numbers and returns the minimum value. [10, 5, 20, -20, 30] def findMinValue(numlist): 

    minVal = numlist[0] 
  
    for i in numlist: 
        if i < minVal: 
            minVal = i 
  
    return minVal 

numlist = [10, 5, 20, -20, 30] 
print(findMinValue(numlist))
Create a Python program that searches a list of words for a given pattern. words = ["cat", "dog", "mouse", "camel"]
pattern = "ca*" pattern = "ca*"

found_words = []

for word in words:
    if fnmatch.fnmatch(word, pattern):
        found_words.append(word)

print(found_words)

# Output: ["cat", "camel"]
Write a function in Python that accepts a list of numbers and returns the  highest and lowest values in the list. numbers = [2, 18, 9, 22, 10, 17, 24] def max_min(numbers):
  '''returns a tuple containing highest and lowest values in a given list'''
  return (max(numbers), min(numbers))
Write a Python program to implement the Tower of Hanoi problem.  def hanoi(disc, source, auxiliary, target):
    if disc > 0:
        # Move n - 1 discs from source to auxiliary 
        hanoi(disc - 1, source, target, auxiliary)
        # Move the last disc from source to target
        print("Move the disc from {} to {}".format(source, target))
        # Move the n - 1 discs from auxiliary to target
        hanoi(disc - 1, auxiliary, source, target)

hanoi(3, 'A', 'B', 'C')
Implement a Python class to sort a given array of integers using Insertion Sort. [5, 2, 4, 1, 3] class InsertionSort:
    def sort(self, arr): 
        for i in range(1, len(arr)): 
            key = arr[i] 
            j = i-1
            while j >=0 and key < arr[j] : 
                    arr[j+1] = arr[j] 
                    j -= 1
            arr[j+1] = key
        return arr

InsertionSort().sort([5, 2, 4, 1, 3])
Produce a unit test report in Python for a program to find the mean of an array. Sample array: [1, 2, 3, 4, 5] import unittest

def calculate_mean(numbers):
    return sum(numbers)/len(numbers)

class MeanCalculationTest(unittest.TestCase):
    def setUp(self):
        self.sample_array = [1, 2, 3, 4, 5]

    def test_mean_calculation(self):
        self.assertEqual(calculate_mean(self.sample_array), 3)

if __name__ == '__main__':
    unittest.main()
Write a Python function to find all possible permutations of a string.  def find_permutations(input_string):
    """Return all possible permutations of a given string."""

    permutations = []
    if len(input_string) == 1:
        permutations.append(input_string)
    else:
        for i in range(len(input_string)):
            current_char = input_string[i]
            remaining_string = input_string[:i] + input_string[i+1:]
            for permutation in find_permutations(remaining_string):
                permutations.append(current_char + permutation)
    return permutations
Interpret the result of the given linear regression model in Python.  # import libraries 
import numpy as np 
import statsmodels.api as sm 

# predictors 
x = np.array([4.26, 6.16, 5.74, 6.52, 4.02, 5.35, 5.75, 5.77, 5.26, 6.30]) 

# target 
y = np.array([13.44, 10.62, 6.78, 10.93, 8.58, 8.03, 7.39, 8.50, 9.72, 11.95]) 

# add a column of ones to the predictors 
X = sm.add_constant(x) 

# fit the linear regression model 
model = sm.OLS(y, X).fit() 

# print the result of linear regression model 
print(model.summary())

# interpretation 
# The coefficient for x is -1.209, this means that for each unit increase in x, there is a corresponding reduction of 1.209 units in the target y. 
# The intercept is 8.719, which means that even when x is 0, the target value is 8.719. 
# The R-squared value of 0.895 indicates that 89.5 % of variation in target is explained by the linear regression model.
Create a Python program to compute the primes between 1 and n n = 15 import math
 
def primes(n):
    if n < 2:
        return []
    
    size = int(math.sqrt(n)) + 1
    sieve = bytearray([True]) * size
    for i in range(2, size):
        if sieve[i]:
            for j in range(i*i, size, i):
                sieve[j] = False
  
    primes = [i for i in range(2, size) if sieve[i]]
    return [p for p in primes if p <= n]
 
if __name__ == '__main__':
    n = 15
    print(primes(n))

# Output: [2, 3, 5, 7, 11, 13]
Create a Python script that takes an array with n elements and shuffles it. n = 10 import random

def shuffle(lst):
    random.shuffle(lst)
    return lst

arr = [i for i in range(10)]
print(shuffle(arr))
Generate the python code that check if the given element is in a list. list = [1, 2, 3, 4] def check_list(list, element):
    if element in list:
        print(element, "is in the list")
    else:
        print(element, "is not in the list")
Design an algorithm in Python to find the longest substring without repeating characters. String = "codefortesting" def longestSubstringWithoutRepeatingCharacters(str):
    maxLength = 0
    hashMap = dict()
    start = 0

    for i in range(len(str)):
        if str[i] in hashMap:
            start = max(hashMap[str[i]], start)

        maxLength = max(maxLength, i - start + 1)
        hashMap[str[i]] = i + 1

    return maxLength
Generate code to encrypt a message using the AES algorithm in Python. Not applicable from Crypto.Cipher import AES

key = b'0123456789ABCDEF'

def encryptAES(message):
 cipher = AES.new(key, AES.MODE_ECB)
 ciphertext = cipher.encrypt(message)
 return ciphertext
 
message = b'Encrypt this message'
encrypted_message = encryptAES(message)
print(encrypted_message)
Generate a python program to parse a string and extract the number of vowels. Input string: “Hello World!" def count_vowels(s):
    vowels = ["a", "e", "i" , "o", "u"]
    count = 0 
    for character in s.lower():
        if character in vowels:
            count += 1
    print("Number of vowels :", count)
Create a Python program that takes a list of numbers as input and sorts them by their greatest occurring number. [4, 7, 3, 5, 3, 4, 5, 3, 7] [3, 3, 3, 4, 4, 5, 5, 7, 7]

Python Code:

def sort_by_greatest_occurrence(nums):
    num_freq = {}
    for num in nums:
        num_freq[num] = num_freq.get(num, 0) + 1
    sorted_freq = sorted(num_freq.items(), key=lambda x: x[1], reverse=True)
    sorted_nums = []
    for num, _ in sorted_freq:
        sorted_nums += [num] * num_freq[num]
    return sorted_nums

nums = [4, 7, 3, 5, 3, 4, 5, 3, 7]
print(sort_by_greatest_occurrence(nums))
Build a Python script to compare two strings and determine which string is the longest. "Hello\nWorld" def longest(str1, str2):
    if len(str1) > len(str2):
        return str1
    elif len(str2) > len(str1):
        return str2
    else:
        return 'Strings are equal length.'

str1 = 'Hello'
str2 = 'World'

print(longest(str1, str2))
# Output: World
Write a python program to classify the sentiment of a given piece of text. The government has done a tremendous job in handling the pandemic situation. import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer

def classify_sentiment(text):
    sid = SentimentIntensityAnalyzer()
    score = sid.polarity_scores(text)
    if score['compound'] >= 0.05:
        return 'positive'
    elif score['compound'] <= - 0.05:
        return 'negative'
    else:
        return 'neutral'

sentiment = classify_sentiment("The government has done a tremendous job in handling the pandemic situation.")
print(sentiment)
# Output: positive
Design an algorithm in Python to solve the traveling salesman problem.  def tsp(graph): 
  
    # Set initial values: 
    best_path = [] 
    best_path_cost = float('Inf') 
  
    # Iterate through all the possible paths: 
    for i in range(1 << len(graph[0])): 
  
        # Generate the binary string: 
        path = [] 
        for j in range(len(graph[0])): 
            if (i & (1 << j)) > 0: 
                path.append(j) 
  
        # Calculate the cost of the path: 
        cost = 0
        k = 0
        for j in range(len(path)): 
            if j+1 < len(path): 
                cost += graph[path[j]][path[j+1]] 
            else: 
                cost += graph[path[j]][path[0]] 
  
        # Check if the cost of the path is less than the 
        # current best path cost: 
        if cost < best_path_cost: 
            best_path_cost = cost 
            best_path = path 
  
    return best_path, best_path_cost
Edit the given Python program to handle a KeyError. my_dict = {
 'key1' : 'value1',
 'key2': 'value2'
 
}

value2 = my_dict['key3'] my_dict = {
 'key1' : 'value1',
 'key2': 'value2'
 
}

try:
 value2 = my_dict['key3']
except KeyError:
 print(f"The key 'key3' does not exist in the dictionary.")
Create a Python program to calculate the factorial of a given integer. 5 def factorial(n):
    if n == 0:
        return 1

    return n * factorial(n-1)

result = factorial(5)
print(result)
Suggest how to make the following Python loop execute faster. def find_list_difference(list1, list2):
    diff = []
    for item in list1:
        if item not in list2:
            diff.append(item)
    return diff def find_list_difference(list1, list2):
    diff = []
    list2_set = set(list2)
    for item in list1:
        if item not in list2_set:
            diff.append(item)
    return diff
Create a Python class for a basic calculator that performs addition and subtraction. Not applicable class Calculator:
    def __init__(self):
        pass
    
    def add(self, a, b):
        return a + b
    
    def subtract(self, a, b):
        return a - b
    
calc = Calculator()
print(calc.add(10, 5)) # 15
print(calc.subtract(10, 5)) # 5
Can you develop a Python program that creates a dictionary of students with their names and grades as the key-value pair? [{'name':'John', 'grade':'A'}, 
{'name':'Steve', 'grade':'B'}, 
{'name':'Bob', 'grade':'C'}] data = [{'name':'John', 'grade':'A'}, 
        {'name':'Steve', 'grade':'B'}, 
        {'name':'Bob', 'grade':'C'}]

# Create a dictionary of students
student_dict = {}
for student in data:
    student_dict[student['name']] = student['grade']

# Print the dictionary
print(student_dict)
Create an algorithm in Python that finds the minimum number of coins required to make a given amount of money. amount = 15 # coins in denominations of 1, 5, 10
def numberOfCoins(amount):
   coins = [1,5,10]
   c = len(coins)-1
   count = 0
   while amount>0:
      if (amount >= coins[c]):
         count += amount // coins[c]
         amount %= coins[c]
      c -= 1
   return count   

# Driver Code    
if __name__ == "__main__":  
   amount = 15
   coins = [1,5,10]
   print("Minimum coins required is",numberOfCoins(amount))
Write a Python program to find all numbers in a list and replace them with their product. [1, 2, 3, 4, 5] my_list = [1, 2, 3, 4, 5]
new_list = [x * y for x, y in zip(my_list, my_list[1:] + [1])]
You need to write a Python program to print the Fibonacci series.  def fibonacci_series(n): 
    a = 0
    b = 1
    if n < 0: 
        print("Incorrect input") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2, n+1): 
            c = a + b 
            a = b 
            b = c 
        return b 

for n in range(0, 10): 
    print(fibonacci_series(n))
Generate a Python program which takes two lists and returns a list which contain only the items which are shared between the two lists [1, 2, 3], [3, 4, 5] def find_intersection(list1, list2):
    intersection = []
    for item1 in list1:
        for item2 in list2:
            if item1 == item2:
                intersection.append(item1)
    return intersection

list1 = [1, 2, 3]
list2 = [3, 4, 5]
result = find_intersection(list1, list2)
print(result)
Create a program in Python to output all the n-digit Armstrong numbers. n = 3 def armstrong_numbers(n):
 # Generate numbers up to 10^n
 for i in range(10**(n - 1), 10**n):
  # Convert the number to a list of digits
  digits = [int(d) for d in str(i)]
 
  # Calculate the sum of the nth powers of the digits
  sum_of_nth_powers = 0
  for d in digits:
   sum_of_nth_powers += d**n
 
  # If the sum is equal to the original number, it is an Armstrong number
  if sum_of_nth_powers == i:
   print(i)
 
n = 3
armstrong_numbers(n)

# Output 
153 
370 
371 
407
Create a Python function to sort a list of strings alphabetically. my_list = ["apple", "orange", "banana"] def sort_list(list):
    list.sort()
    return list
    
sort_list(my_list)
Write a Python program to create a flag made up of stars (*). flagSize = 5 # Generate a flag made up of *
flagString = ""

for i in range(flagSize):
    flagString += "*"

print(flagString)
Create a Python program to print out a multiplication table. The table should print out the first 10 multiples of a given number. 2 number = int(input("Please enter a number:"))

for i in range(1, 11):
 print(f'{number} * {i} = {number*i}')
Implement a Python script to split a string into a list of words.  def split_string(string): 
 return string.split() 

print(split_string("Hello, World!")) # ["Hello,", "World!"]
Develop a program using Python and TensorFlow to perform sentiment analysis of a given text.  import tensorflow as tf 
from tensorflow import keras
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences

tokenizer = Tokenizer(num_words=1000, oov_token="<OOV>")

text = "I am so excited to work on this project"

tokenizer.fit_on_texts([text])

word_index = tokenizer.word_index 
sequences = tokenizer.texts_to_sequences([text])

padded = pad_sequences(sequences, padding='post', maxlen=5)

model = tf.keras.Sequential([
    tf.keras.layers.Embedding(len(word_index), 8, input_length=5),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(8, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid'),
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
model.fit([padded], [1], epochs=100)
Create a Python function to detect if a string contains a duplicate character.  def contains_duplicate(s):
    counts = dict()
    for ch in s:
        if ch in counts:
            return True
        counts[ch] = 1
    return False
Define a function in Python to check if a number is even.  def is_even(num): 
    if num % 2 == 0: 
        return True 
    else: 
        return False
Create a Python script for replacing all the vowels in a string with underscores.  def replace_vowels(string): 
    vowels = ('a', 'e', 'i', 'o', 'u') 
    for x in string.lower(): 
        if x in vowels: 
            string = string.replace(x, "_") 
    return string
Come up with a Python code to generate a report Given employee data, generate a report of employee salary information. def generate_report(data):
    # create an empty output dictionary
    output = {}

    # Iterate over the data
    for employee in data:
        # get the employee name
        name = employee['name']

        # get the employee salary
        salary = employee['salary']

        # add the salary info to the output dictionary
        output[name] = salary

    # return the output of the report
    return output
Write an algorithm in Python to calculate the sum of the numbers of a list and store the result in a dictionary. list = [1, 4, 8, 10] sum_dict = {}

def sum_list(list):
 total = 0
 for num in list:
 total += num
 sum_dict["sum"] = total
 return sum_dict

sum_dict = sum_list(list)
Create a neural network for natural language processing (NLP) in Python. Not applicable import numpy as np
import keras
from keras.datasets import reuters
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation
from keras.preprocessing.text import Tokenizer

# Set the number of words per document
num_words = 1000

# Load data
(x_train, y_train), (x_test, y_test) = reuters.load_data(num_words=num_words, test_split=0.2)

# Vectorize input data
tokenizer = Tokenizer(num_words=num_words)
x_train = tokenizer.sequences_to_matrix(x_train, mode='binary')
x_test = tokenizer.sequences_to_matrix(x_test, mode='binary')

# One-hot encoding for labels
y_train = keras.utils.to_categorical(y_train, 46)
y_test = keras.utils.to_categorical(y_test, 46)

# Build the model
model = Sequential()
model.add(Dense(512, input_shape=(num_words,)))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(46))
model.add(Activation('softmax'))

model.compile(loss='categorical_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

# Train the model
model.fit(x_train, y_train,
          batch_size=32,
          epochs=10,
          verbose=1,
          validation_data=(x_test, y_test))

# Evaluate the model
score = model.evaluate(x_test, y_test,
                       batch_size=32, verbose=1)

print('Test score:', score[0])
print('Test accuracy:', score[1])
Construct a basic GUI calculator in Python.  import tkinter as tk

window = tk.Tk()
window.title("Calculator")
window.geometry("400x220")
window.resizable(0, 0)

def num(n):
    o.insert("end", n)

def res():
    x = o.get()
    try:
        res = eval(x)
        o.delete(0, "end")
        o.insert("end", res)
    except Exception as e:
        o.delete(0, "end")
        o.insert("end", "Error")

def clear():
    o.delete(0, "end")

o = tk.Entry(font="Arial 15 bold", width=20, bd=5, bg="steelblue")
o.grid(row=0, columnspan=15)

b1 = tk.Button(text="1", font="Arial 10 bold", width=10, bg="white", command=lambda x=1: num(x)).grid(row=1, column=0)
b2 = tk.Button(text="2", font="Arial 10 bold", width=10, bg="white", command=lambda x=2: num(x)).grid(row=1, column=1)
b3 = tk.Button(text="3", font="Arial 10 bold", width=10, bg="white", command=lambda x=3: num(x)).grid(row=1, column=2)
b4 = tk.Button(text="4", font="Arial 10 bold", width=10, bg="white", command=lambda x=4: num(x)).grid(row=2, column=0)
b5 = tk.Button(text="5", font="Arial 10 bold", width=10, bg="white", command=lambda x=5: num(x)).grid(row=2, column=1)
b6 = tk.Button(text="6", font="Arial 10 bold", width=10, bg="white", command=lambda x=6: num(x)).grid(row=2, column=2)
b7 = tk.Button(text="7", font="Arial 10 bold", width=10, bg="white", command=lambda x=7: num(x)).grid(row=3, column=0)
b8 = tk.Button(text="8", font="Arial 10 bold", width=10, bg="white", command=lambda x=8: num(x)).grid(row=3, column=1)
b9 = tk.Button(text="9", font="Arial 10 bold", width=10, bg="white", command=lambda x=9: num(x)).grid(row=3, column=2)
b0 = tk.Button(text="0", font="Arial 10 bold", width=10, bg="white", command=lambda x=0: num(x)).grid(row=4, column=1)

add = tk.Button(text="+", font="Arial 10 bold", width=10, bg="white", command=lambda x="+": num(x)).grid(row=1, column=3)
sub = tk.Button(text="-", font="Arial 10 bold", width=10, bg="white", command=lambda x="-": num(x)).grid(row=2, column=3)
mul = tk.Button(text="*", font="Arial 10 bold", width=10, bg="white", command=lambda x="*": num(x)).grid(row=3, column=3)
div = tk.Button(text="/", font="Arial 10 bold", width=10, bg="white", command=lambda x="/": num(x)).grid(row=4, column=3)

eql = tk.Button(text="=", font="Arial 10 bold", width=10, bg="white", command=res).grid(row=4, column=2)
c   = tk.Button(text="C", font="Arial 10 bold", width=10, bg="white", command=clear).grid(row=4, column=0)

window.mainloop()
Identify errors and write fix for the following python code def uppercase_letter_count(string):
    count = 0
    for c in string
        if c.isupper():
            count += 1
    return count def uppercase_letter_count(string):
    count = 0
    for c in string: # Added missing colon
        if c.isupper():
            count += 1
    return count # Removed an unnecessary '-'
Generate a python script that takes a list of integer values, and reverse the order of elements in the list  def reverse_list(lst):
    return lst[::-1]
Develop an algorithm in Python for inserting an element into a given sorted array. sortedArray = [1, 5, 9, 12, 15]
x = 7 def insertSort(sortedArray, x): 
    n = len(sortedArray) 
    sortedArray.append(x) 
    for i in range(n-1, -1, -1): 
        if sortedArray[i] > x: 
            sortedArray[i + 1] = sortedArray[i] 
            sortedArray[i] = x 
    return sortedArray

print(insertSort(sortedArray, x))
Write a function in Python to find the kth smallest element in an unsorted array. input_array = [7, 2, 5, 9, 6], k = 4 def kth_smallest(input_array, k):
    input_array.sort()
    return input_array[k-1]
Create a function in Python that takes a string input and converts it to Pig Latin.  def to_pig_latin(sentence):
    result = ""
    words = sentence.split()
    for word in words:
        # Check if the word starts with a vowel
        if word[0] in "aeiou":
            result += word + "way "
        # If not, move the first letter to the end and add 'ay'
        else:
            result += word[1:] + word[0] + "ay "
    return result

print(to_pig_latin("This is a sentence"))
Write a Python program to print the following pattern in each row.  for i in range(1, 5):
    for j in range(1, i+1):
        print(i, end=" ")
    print()
Generate a Python class called Circle that stores the radius of a circle and calculates the area.  class Circle:

    def __init__(self, radius):
        self.radius = radius

    def calculateArea(self):
        return 3.14159 * self.radius * self.radius
Create a command-line tool in Python that can calculate the sum of two numbers. Not applicable import argparse

# Create a parser
parser = argparse.ArgumentParser()
# Add the arguments
parser.add_argument('--num1', type=int, help='First number')
parser.add_argument('--num2', type=int, help='Second number')
# Execute the parse_args() method
args = parser.parse_args()

#Calculate the sum
sum = args.num1 + args.num2
#Print the sum
print(sum)
Generate a Python program to create a histogram from a data set. [2, 4, 5, 3, 5, 6, 8, 2] import matplotlib.pyplot as plt
 
data = [2, 4, 5, 3, 5, 6, 8, 2]
plt.hist(data, bins = 5) 
 
plt.title("Histogram") 
plt.xlabel("Values")
plt.ylabel("Frequency")
plt.show()
Create an efficient Python function to find the longest common substring between two strings. String1 = "hello world", String2 = "hola world" def longest_common_substring (str1, str2):
  # maxstr is the longest common substring 
  maxstr = ""
 
   # calculate the length of both strings 
  len1 = len(str1) 
  len2 = len(str2) 

  # reversed loop to iterate throught both strings 
  for i in range(len1,0,-1):
    for j in range(len2,0,-1): 
  
      # find the longest matching string 
      if (str1[len1-i:] == str2[len2-j:j+i]): 
        if (len(maxstr) < i): 
          maxstr = str1[len1-i:]
          break

  return maxstr 
  
# Test code
print(longest_common_substring("hello world", "hola world"))

# Output
# lo world
Generate random integers within a given range in Python.  import random
def generate_random_integers(start, end):
    return random.randint(start, end)

generate_random_integers(1, 10); //Output: 8
Write a Python function to generate the Fibonacci series till n-th term.  def Fibonacci(n): 
	a = 0
	b = 1
	if n < 0: 
		print("Incorrect input") 
	elif n == 0: 
		return a 
	elif n == 1: 
		return b 
	else: 
		for i in range(2,n): 
			c = a + b 
			a = b 
			b = c 
		return b 

result = Fibonacci(7) 
print(result)
Create an application with a GUI interface using Python for displaying the weather conditions for a chosen city. Not applicable import tkinter as tk
import requests

# Create the window and set its title
window = tk.Tk()
window.title("Weather App")

# Create a label for entering the city name
city_label = tk.Label(text="City")
city_label.grid(column=0, row=0)

# Create a textbox for entering the city name
city_text = tk.StringVar()
city_entry = tk.Entry(textvariable=city_text)
city_entry.grid(column=1, row=0)

# Create a function for fetching and displaying the weather
def show_weather():
  city = city_text.get()
  # Fetch the weather from API module
  api_key = "API KEY"
  url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&units=imperial&appid={api_key}"
  response = requests.get(url)
  weather = response.json() 

  # Display the weather in the label
  label.configure(text=weather)

# Create a button for fetching the weather
button = tk.Button(text="Show Weather", command=show_weather)
button.grid(column=1, row=1)

# Create a label for displaying the weather
label = tk.Label(text="")
label.grid(column=0, row=1, columnspan=2)

# Start the window
window.mainloop()
Create a Python program that takes in a sentence as an input and prints out the same sentence in Pig Latin. The quick brown fox def pig_latin(sentence):
 words = sentence.split()
 translated_words = []
 for word in words:
 translated_words.append(word[1:] + word[0] + "ay")
 return " ".join(translated_words)
 
sentence = input("Enter a sentence to translate: ")
print(pig_latin(sentence))
Create a Python class that takes a list as input and returns a sorted list as output. [5, 2, 7, 3] class SortList:
    def __init__(self, lst):
        self.lst = lst
        
    def sort_list(self):
        self.lst.sort()
        return self.lst
Find the average of the numbers 10 and 15 in a python program.  def average(x, y):
 return (x + y) / 2

result = average(10, 15)
print(result)
Create a function in Python to compute a Fibonacci sequence. The function should take as input a positive integer n and return the nth Fibonacci number 10 def fibonacci(n): 
 if n < 0: 
  print("Incorrect input") 
 elif n == 0: 
  return 0
 elif n == 1: 
  return 1
 else: 
  return fibonacci(n-1) + fibonacci(n-2) 

print(fibonacci(10))
Write a Python program to calculate the area of a circle when a user inputs its radius. Radius = 10 def calculate_area_circle(radius): 
    pi = 3.14
    area = pi * (radius * radius) 
    return area 
  
# Output
print("Area of circle is: ", calculate_area_circle(10))
Create a web service using the Flask microframework in Python to return the information of a specific product {
 "productId": "1234",
 "name": "Apple iPhone 11 Pro Max",
 "price": "$999.99",
 "description": "The latest iPhone from Apple with powerful A13 Bionic chip, triple camera lens, and more"
} from flask import Flask, jsonify

app = Flask(name)

products = {
 'productId': '1234',
 'name': 'Apple iPhone 11 Pro Max',
 'price': '$999.99',
 'description': 'The latest iPhone from Apple with powerful A13 Bionic chip, triple camera lens, and more'
}

@app.route('/product', methods=['GET'])
def get_product():
 return jsonify(products)

if name == 'main':
 app.run(debug=True)
Create a Python program that can generate random passwords using the given criteria? Password length: 8
Include at least one lowercase character
Include at least one uppercase character
Include at least one number import random

def generate_password(length):
    upper_case_characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    lower_case_characters = 'abcdefghijklmnopqrstuvwxyz'
    numbers = '0123456789'
    chars = upper_case_characters + lower_case_characters + numbers

    password = ''

    secure_random = random.SystemRandom()
    for c in range(length):
        password += secure_random.choice(chars)

    return password

print(generate_password(8))
Write a Python script for developing a simple calculator.  import operator

ops = {
 "+": operator.add,
 "-": operator.sub,
 "*": operator.mul,
 "/": operator.truediv
}

while True:
 print("\nEnter 'q' to exit.")
 num1 = input("\nEnter a number: ")
 if num1 == 'q':
 break
 op = input("Enter an operator: ")
 num2 = input("Enter another number: ")
 
 answer = ops[op](float(num1), float(num2))
 print("The answer is:", answer)
Implement an algorithm in Python that ranks the top 5 most influential Bloggers in a given space. A dataset containing information on bloggers such as: name, number of followers, content, topics, etc. import networkx as nx 

def rank_influential_bloggers(data):
 G = nx.Graph()

 # Create a NetworkX graph based on the given dataset
 # ...

 # Calculate the influence of each node in the graph
 influencer_scores = nx.pagerank(G)

 # Sort the influencer scores in descending order
 sorted_influence_scores = sorted(influencer_scores.items(), key=lambda x: x[1], reverse=True)

 # Get the top 5 most influential bloggers
 top_influencers = [tuple[0] for tuple in sorted_influence_scores[:5]]

 return top_influencers
Create a Python program which takes two lists as input and outputs all the elements which appear in both lists. list1 = [1, 2, 3] 
list2 = [3, 4, 5] def list_intersection(list1, list2):
  return [item for item in list1 if item in list2]

list1 = [1, 2, 3] 
list2 = [3, 4, 5]

intersectedList = list_intersection(list1, list2)

print(intersectedList)

# Output: [3]
Write a Python function to display the current time, formatted such that it will read "It is currently 11:15am".  import time

def display_time():
    time_string = time.strftime('%I:%M%p', time.localtime())
    return f'It is currently {time_string}'
Update the below Python script to perform binary search on a given array of integers. def binary_search(arr, x):
 n = len(arr)
 # print all elements
 for i in range(n):
 print(arr[i], end = " ") def binary_search(arr, x):
 n = len(arr)
 
 # Sort the given array in ascending order
 arr.sort()
 
 # print all elements
 for i in range(n):
 print(arr[i], end = " ")
 
 #binary search
 start = 0
 end = n-1
 
 while start <= end:
    mid = (start + end) // 2
    if x == arr[mid]:
 return mid 
 elif x > arr[mid]:
 start = mid + 1
 else:
 end = mid - 1
 
 return -1
Can you develop a python code to print all combination of size r of an array? Array: ["A","B","C"]
r = 2 def combinations(arr, r): 
    # Get the length of array 
    n = len(arr) 
      
    # Create an array to store indexes of elements 
    # taken for combination 
    data = [0]*r 
      
    combinationUtil(arr, data, 0, n-1, 0, r) 
      
# arr[]  -->> Input Array 
# data[] -->> Temporary array to store current combination 
# start & end -->> Staring and Ending indexes in arr[] 
# index -->> Current index in data[]  
# r -->> Size of a combination to be printed 
def combinationUtil(arr, data, start, end, index, r): 
    # Current combination is ready to be printed, print it 
    if (index == r): 
        for j in range(r): 
            print(data[j], end = " ") 
        print() 
        return
  
    # Replace index with all possible elements. The condition 
    # "end-i+1 >= r-index" makes sure that including one element 
    # at index will make a combination with remaining elements 
    # at remaining positions 
    i = start
    while(i <= end and end - i + 1 >= r - index): 
        data[index] = arr[i] 
        combinationUtil(arr, data, i + 1, end, index + 1, r) 
        i += 1

combinations(["A","B","C"], 2)
# A B 
# A C 
# B C
Create an automatic speech recognition system in Python. Not applicable # Import modules
import speech_recognition as sr

# Record audio
r = sr.Recognizer()
with sr.Microphone() as source:
 print('Say something!')
 audio = r.listen(source)

# Transform the audio file into text
text = r.recognize_google(audio)

print('You said: ', text)
Create a program in Python using the Flask framework that displays a page with a button, and when the button is pressed, it sends a notification to the user's Google Calendar. Not applicable from flask import Flask, render_template
from googleapiclient.discovery import build

app = Flask(__name__)

@app.route('/')
def index():
 return render_template('index.html')

@app.route('/notify')
def notify():
 # Create a Google Calendar service object.
 service = build('calendar', 'v3')
 
 # Create the notification.
 notification = {
  'type': 'notification',
  'title': 'Reminder',
  'body': 'Don\'t forget to do your task!'
 }
 
 service.events().insert(calendarId='primary', body=notification).execute()
 
 return 'Reminder set successfully!'

if __name__ == '__main__':
 app.run(debug=True)
Extract the 2nd and 3rd element from a given list in Python. list = [1, 2, 3, 4, 5] new_list = list[1:3]
Construct a Python program that verifies if the given input number is even or odd.  # Program checking if the input number is even or odd
num = int(input("Please enter a number: "))

# Check if the number is even or odd
if num % 2 == 0:
    print(str(num) + " is an even number.")
else:
    print(str(num) + " is an odd number.")
Implement an algorithm in Python to remove duplicate elements from a given list. list = [1,4,4,4,5,5,5,6,7] def removeDuplicates(list): 
    uniqueList = []  
    for item in list: 
        if item not in uniqueList: 
            uniqueList.append(item) 
    return uniqueList 

print(removeDuplicates([1,4,4,4,5,5,5,6,7]))
Compose a program in Python to iterate through a list of integers and creates a new list which contains the square of each number of the first list [1, 2, 3, 4] def squared_list(input_list): 
    output_list = [x ** 2 for x in input_list] 
    return output_list 

input_list = [1, 2, 3, 4]
output_list = squared_list(input_list) 
print(output_list)
Construct a single line of code in python to get the last element of a list [1, 8, 3, 10, 5] last_element = [1, 8, 3, 10, 5][-1]
Write a python code to implement a min-heap.  class MinHeap:
    def __init__(self):
        self.heap= []
 
    def parent(self, i):
        return int((i - 1) / 2)
 
    def insertKey(self, k):
        self.heap.append(k)     
        i = len(self.heap)-1
        self.fix_up(i)
 
    def fix_up(self, i):
        while i != 0 and self.heap[self.parent(i)] > self.heap[i]:
            self.heap[i], self.heap[self.parent(i)] = self.heap[self.parent(i)], self.heap[i]
            i = self.parent(i)
 
    def extractMin(self):
        if len(self.heap) == 0:
            return -1
        min_elem = self.heap[0]
        if len(self.heap) > 1:
            self.heap[0] = self.heap.pop()
            self.fix_down(0)
        else:
            self.heap.pop()
        return min_elem
 
    def fix_down(self, i):
        left = 2*i + 1
        right = 2*i + 2
        min_i = i
        if left < len(self.heap) and self.heap[min_i] > self.heap[left]:
            min_i = left
        if right < len(self.heap) and self.heap[min_i] > self.heap[right]:
            min_i = right
        if min_i != i:
            self.heap[min_i], self.heap[i] = self.heap[i], self.heap[min_i]
            self.fix_down(min_i)
Write code to establish a connection between a Python backend and a MySQL database. Host = 'localhost'
Username = 'root'
Password = '123456'
Database = 'sample_database' import mysql.connector 
  
#Create MySQL Connection 
connection = mysql.connector.connect(host = Host, database = Database, user = Username, password = Password) 

#Check whether connection is established or not
if connection.is_connected(): 
    print("Connection established successfully")
Analyze this Python code and suggest any improvements. def calc_sum(a, b): 
    return a + b

sum = 0 
for i in range(5): 
    sum += calc_sum(i, i + 1)

print(sum) def calc_sum(a, b): 
    return a + b

sum = 0 
for i in range(5): 
    sum += calc_sum(i, i + 1)

print(sum) 

# Suggested fix:
sum = 0 
for i in range(0, 5):    # Use the range(start, stop) syntax
    sum += sum + calc_sum(i, i + 1)

print(sum)
Write a Python program to generate and print a random list of size n. 8 import random

def generate_random_list(n):
    random_list = []
    for i in range(n):
        random_list.append(random.randint(0, 100))
    return random_list

n = 8
random_list = generate_random_list(n)
print(random_list)
Create a Python function that takes a list and an integer as inputs and returns a new list with every item in the original list multiplied by the integer. list = [3, 2, 1]
integer = 5 def multiply_list(lst, i):
  return [j * i for j in lst]

result = multiply_list(list, integer)
print(result) # [15, 10, 5]
Create a function in Python that takes a list of numbers as an input and sorts them in ascending order. [5, 1, 3, 9, 4, 2] def sortAscending(arr):
    
    # loop through the array
    for i in range(len(arr)): 
        # find the minimum value in the array 
        min_idx = i 
        for j in range(i+1, len(arr)): 
            if arr[min_idx] > arr[j]: 
                min_idx = j 
                
        # swap the found minimum element with the first element       
        arr[i], arr[min_idx] = arr[min_idx], arr[i] 
  
    return arr
Edit the given Python code to make it work for a list of dictionaries. list_data = [{'id': 1, 'name': 'Tom'}, {'id': 2, 'name': 'Bob'}]

for element in list_data:
  print(element) list_data = [{'id': 1, 'name': 'Tom'}, {'id': 2, 'name': 'Bob'}]

for element in list_data:
  print(element['name'])
Convert hierarchical xml files to csv using Python. The code takes in an input file or port and converts the xml file to csv format. It only makes sense if the hierarchy has low depth. The output can be split into different files for the first hierarchy level using the -p or --split option. The output file name can be specified using the -o or --output option. The separating character for fields can be specified using the -s or --separator option, and the quoting character for fields can be specified using the -q or --quotechar option. The code also supports schema validation using an xsd schema specified using the -x or --xsd option and the -a or --validation option.  #!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
@file    xml2csv.py
@author  Jakob Erdmann
@author  Michael Behrisch
@author  Laura Bieker
@date    2013-12-08
@version $Id: xml2csv.py 22608 2017-01-17 06:28:54Z behrisch $

Convert hierarchical xml files to csv. This only makes sense if the hierarchy has low depth.

SUMO, Simulation of Urban MObility; see http://sumo.dlr.de/
Copyright (C) 2013-2017 DLR (http://www.dlr.de/) and contributors

This file is part of SUMO.
SUMO is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or
(at your option) any later version.
"""

from __future__ import print_function
from __future__ import absolute_import
import os
import sys
import socket
import collections
from optparse import OptionParser
import xml.sax
try:
    import lxml.etree
    import lxml.sax
    haveLxml = True
except ImportError:
    haveLxml = False

import xsd

PY3 = sys.version_info > (3,)


class NestingHandler(xml.sax.handler.ContentHandler):

    """A handler which knows the current nesting of tags"""

    def __init__(self):
        self.tagstack = []

    def startElement(self, name, attrs):
        self.tagstack.append(name)

    def endElement(self, name):
        self.tagstack.pop()

    def depth(self):
        # do not count the root element
        return len(self.tagstack) - 1


class AttrFinder(NestingHandler):

    def __init__(self, xsdFile, source, split):
        NestingHandler.__init__(self)
        self.tagDepths = {}  # tag -> depth of appearance
        self.tagAttrs = collections.defaultdict(
            collections.OrderedDict)  # tag -> set of attrs
        self.renamedAttrs = {}  # (name, attr) -> renamedAttr
        self.attrs = {}
        self.depthTags = {}  # child of root: depth of appearance -> tag list
        self.rootDepth = 1 if split else 0
        if xsdFile:
            self.xsdStruc = xsd.XsdStructure(xsdFile)
            if split:
                for ele in self.xsdStruc.root.children:
                    self.attrs[ele.name] = []
                    self.depthTags[ele.name] = [[]]
                    self.recursiveAttrFind(ele, ele, 1)
            else:
                self.attrs[self.xsdStruc.root.name] = []
                self.depthTags[self.xsdStruc.root.name] = []
                self.recursiveAttrFind(
                    self.xsdStruc.root, self.xsdStruc.root, 0)
        else:
            self.xsdStruc = None
            xml.sax.parse(source, self)

    def addElement(self, root, name, depth):
        if name not in self.tagDepths:
            if len(self.depthTags[root]) == depth:
                self.tagDepths[name] = depth
                self.depthTags[root].append([])
            self.depthTags[root][depth].append(name)
            return True
        if name not in self.depthTags[root][depth]:
            print("Ignoring tag %s at depth %s" %
                  (name, depth), file=sys.stderr)
        return False

    def recursiveAttrFind(self, root, currEle, depth):
        if not self.addElement(root.name, currEle.name, depth):
            return
        for a in currEle.attributes:
            if ":" not in a.name:  # no namespace support yet
                self.tagAttrs[currEle.name][a.name] = a
                anew = "%s_%s" % (currEle.name, a.name)
                self.renamedAttrs[(currEle.name, a.name)] = anew
                attrList = self.attrs[root.name]
                if anew in attrList:
                    del attrList[attrList.index(anew)]
                attrList.append(anew)
        for ele in currEle.children:
            self.recursiveAttrFind(root, ele, depth + 1)

    def startElement(self, name, attrs):
        NestingHandler.startElement(self, name, attrs)
        if self.depth() >= self.rootDepth:
            root = self.tagstack[self.rootDepth]
            if self.depth() == self.rootDepth and root not in self.attrs:
                self.attrs[root] = []
                self.depthTags[root] = [[]] * self.rootDepth
            if not self.addElement(root, name, self.depth()):
                return
            # collect attributes
            for a in sorted(list(attrs.keys())):
                if a not in self.tagAttrs[name] and ":" not in a:
                    self.tagAttrs[name][a] = xsd.XmlAttribute(a)
                    if not (name, a) in self.renamedAttrs:
                        anew = "%s_%s" % (name, a)
                        self.renamedAttrs[(name, a)] = anew
                        self.attrs[root].append(anew)


class CSVWriter(NestingHandler):

    def __init__(self, attrFinder, options):
        NestingHandler.__init__(self)
        self.attrFinder = attrFinder
        self.options = options
        self.currentValues = collections.defaultdict(lambda: "")
        self.haveUnsavedValues = False
        self.outfiles = {}
        self.rootDepth = 1 if options.split else 0
        for root in sorted(attrFinder.depthTags):
            if len(attrFinder.depthTags) == 1:
                if not options.output:
                    options.output = os.path.splitext(options.source)[0]
                if not options.output.isdigit() and not options.output.endswith(".csv"):
                    options.output += ".csv"
                self.outfiles[root] = getOutStream(options.output)
            else:
                if options.output:
                    outfilename = options.output + "%s.csv" % root
                else:
                    outfilename = os.path.splitext(
                        options.source)[0] + "%s.csv" % root
                self.outfiles[root] = open(outfilename, 'w')
            if (PY3):
                self.outfiles[root].write(str.encode(
                    options.separator.join(map(self.quote, attrFinder.attrs[root])) + "\n"))
            else:
                self.outfiles[root].write(
                    options.separator.join(map(self.quote, attrFinder.attrs[root])) + "\n")

    def quote(self, s):
        return "%s%s%s" % (self.options.quotechar, s, self.options.quotechar)

# the following two are needed for the lxml saxify to work
    def startElementNS(self, name, qname, attrs):
        self.startElement(qname, attrs)

    def endElementNS(self, name, qname):
        self.endElement(qname)

    def startElement(self, name, attrs):
        NestingHandler.startElement(self, name, attrs)
        if self.depth() >= self.rootDepth:
            root = self.tagstack[self.rootDepth]
#            print("start", name, root, self.depth(), self.attrFinder.depthTags[root][self.depth()])
            if name in self.attrFinder.depthTags[root][self.depth()]:
                for a, v in attrs.items():
                    if isinstance(a, tuple):
                        a = a[1]
#                    print(a, dict(self.attrFinder.tagAttrs[name]))
                    if a in self.attrFinder.tagAttrs[name]:
                        if self.attrFinder.xsdStruc:
                            enum = self.attrFinder.xsdStruc.getEnumeration(
                                self.attrFinder.tagAttrs[name][a].type)
                            if enum:
                                v = enum.index(v)
                        a2 = self.attrFinder.renamedAttrs.get((name, a), a)
                        self.currentValues[a2] = v
                        self.haveUnsavedValues = True

    def endElement(self, name):
        if self.depth() >= self.rootDepth:
            root = self.tagstack[self.rootDepth]
#            print("end", name, root, self.depth(), self.attrFinder.depthTags[root][self.depth()], self.haveUnsavedValues)
            if name in self.attrFinder.depthTags[root][self.depth()]:
                if self.haveUnsavedValues:
                    if(PY3):
                        self.outfiles[root].write(str.encode(self.options.separator.join(
                            [self.quote(self.currentValues[a]) for a in self.attrFinder.attrs[root]]) + "\n"))
                    else:
                        self.outfiles[root].write(self.options.separator.join(
                            [self.quote(self.currentValues[a]) for a in self.attrFinder.attrs[root]]) + "\n")
                    self.haveUnsavedValues = False
                for a in self.attrFinder.tagAttrs[name]:
                    a2 = self.attrFinder.renamedAttrs.get((name, a), a)
                    del self.currentValues[a2]
        NestingHandler.endElement(self, name)


def getSocketStream(port, mode='rb'):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind(("localhost", port))
    s.listen(1)
    conn, addr = s.accept()
    return conn.makefile(mode)


def getOutStream(output):
    if output.isdigit():
        return getSocketStream(int(output), 'wb')
    return open(output, 'wb')


def get_options():
    optParser = OptionParser(
        usage=os.path.basename(sys.argv[0]) + " [<options>] <input_file_or_port>")
    optParser.add_option("-s", "--separator", default=";",
                         help="separating character for fields")
    optParser.add_option("-q", "--quotechar", default='',
                         help="quoting character for fields")
    optParser.add_option("-x", "--xsd", help="xsd schema to use")
    optParser.add_option("-a", "--validation", action="store_true",
                         default=False, help="enable schema validation")
    optParser.add_option("-p", "--split", action="store_true",
                         default=False, help="split in different files for the first hierarchy level")
    optParser.add_option("-o", "--output", help="base name for output")
    options, args = optParser.parse_args()
    if len(args) != 1:
        optParser.print_help()
        sys.exit()
    if options.validation and not haveLxml:
        print("lxml not available, skipping validation", file=sys.stderr)
        options.validation = False
    if args[0].isdigit():
        if not options.xsd:
            print("a schema is mandatory for stream parsing", file=sys.stderr)
            sys.exit()
        options.source = getSocketStream(int(args[0]))
    else:
        options.source = args[0]
    if options.output and options.output.isdigit() and options.split:
        print(
            "it is not possible to use splitting together with stream output", file=sys.stderr)
        sys.exit()
    return options


def main():
    options = get_options()
    # get attributes
    attrFinder = AttrFinder(options.xsd, options.source, options.split)
    # write csv
    handler = CSVWriter(attrFinder, options)
    if options.validation:
        schema = lxml.etree.XMLSchema(file=options.xsd)
        parser = lxml.etree.XMLParser(schema=schema)
        tree = lxml.etree.parse(options.source, parser)
        lxml.sax.saxify(tree, handler)
    else:
        xml.sax.parse(options.source, handler)

if __name__ == "__main__":
    main()

Create a new class in Python, named 'Car', that contains two attributes, 'make' and 'model'.  class Car:
    def __init__(self, make, model):
        self.make = make
        self.model = model
Create a function in Python that takes an array and returns the element at the middle index. [1, 2, 3, 4, 5] def returnMiddle(arr):
    if len(arr) % 2 == 0:
        return (arr[int(len(arr) / 2) - 1] + arr[int(len(arr) / 2)])/2
    else:
        return arr[int(len(arr) / 2)]
 print(returnMiddle([1, 2, 3, 4, 5]))
Create a Python web scraper that extracts the title, author, and content of articles from a website. The URL of a sample website to scrap is:
https://example.com/articles import requests
import bs4

url = 'https://example.com/articles'

# Fetch the page
response = requests.get(url)
html_soup = bs4.BeautifulSoup(response.text, 'html.parser')

# Extract list of articles from the page
articles = html_soup.find_all('article')

# Iterate over the articles
for article in articles:
 # Extract the title, author, and content
 title = article.find('h2').text
 author = article.find('p', {'class': 'author'}).text
 content = article.find('p', {'class': 'content'}).text
 
 # Print out the extracted values
 print("Title:", title)
 print("Author:", author)
 print("Content:", content)
Write a Python program to find the first non-repeated character of a given string. string = "teststring" def first_non_repeated_char(string):
    for ch in string:
        if string.count(ch) == 1:
            return ch
For a given list of numbers, generate a python code that finds the largest number in the list. [7, 5, 2, 9, 1] def find_max(arr):
    max_number = 0

    for i in arr:
        if i > max_number:
            max_number = i
    return max_number
Write a Python program to check that a string contains only a specified set of characters. string = 'abcdefghijklmn'
specified_characters = 'abcde' def checkString(string, specified_characters):
    for char in string:
        if char not in specified_characters:
            return False
    return True

string = 'abcdefghijklmn'
specified_characters = 'abcde'

if(checkString(string, specified_characters)):
    print("String contains only specified characters")
else:
    print("String does not contain only specified characters")
Use Python to create a program that takes in a user input string and outputs the reverse of the string.  def reverse_string(input_string):
  reversed_string = ""
  for char in input_string:
    reversed_string = char + reversed_string
  return reversed_string
Write a function in Python that takes two positive integers, a and b, and returns a random number between 1 and a^b.  def random_int(a, b):
    random_number = random.randint(1, a**b)
    return random_number
Develop a Python function that can detect loops in a given linked list. Linked List: head -> 1 -> 2 -> 3 -> 4 -> 5 def detectLoop(head):
    slow_p = head 
    fast_p = head 
    while(slow_p and fast_p and fast_p.next): 
        slow_p = slow_p.next
        fast_p = fast_p.next.next
        if slow_p == fast_p:
            return True
    return False
Design a Python algorithm to find the largest element in a list. lst = [3, 45, 18, 5, 9] def find_largest_element(lst):
   largest_element = None
   for elem in lst:
      if largest_element is None or largest_element < elem:
         largest_element = elem
  return largest_element

largest_element = find_largest_element(lst)
print(largest_element) # 45
Write an open-ended Python program to create a text mining model.  import nltk
import sklearn

# load the data 
data = list(nltk.corpus.gutenberg.sents('melville-moby_dick.txt'))

# pre-process the data to remove stopwords, punctuation, numbers and special characters, and lowercase it
processed_data = [nltk.word_tokenize(str(sentence)) for sentence in data] 
processed_data = [nltk.pos_tag(sentence) for sentence in processed_data]

# create the features for the model 
featuresets = [(nltk.pos_tag(sentence), category) for sentence, category in processed_data]

# split the data into training and testing sets
training_set = featuresets[:int(len(featuresets)*0.8)]
testing_set = featuresets[int(len(featuresets)*0.8):]

# create the text mining model using Naive Bayes 
text_classifier = SklearnClassifier(naive_bayes.MultinomialNB())
 
# Train the model 
text_classifier.train(training_set)

# Test the accuracy of the model 
print('Text Mining Model Accuracy: ', nltk.classify.accuracy(text_classifier, testing_set))
Implement an algorithm in Python to sort a list of integers. List: [3, 9, 8, 5, 6, 4, 2, 1, 10, 7] def sort(arr):
 for i in range(len(arr)):
 min_idx = i
 for j in range(i+1, len(arr)):
 if arr[min_idx] > arr[j]:
 min_idx = j
 arr[i], arr[min_idx] = arr[min_idx], arr[i]

list = [3, 9, 8, 5, 6, 4, 2, 1, 10, 7]
sort(list)
print(list) # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
Construct a Python class to represent a point in the Cartesian plane.  class Point:
    def __init__ (self, x=0, y=0):
        self.x = x
        self.y = y
 
    def __str__ (self):
        return "({0},{1})".format(self.x,self.y)
 
    def distance_from_origin (self):
        return ((self.x ** 2) + (self.y ** 2)) ** 0.5
Create a machine learning algorithm in Python to classify flowers by their petal size.  from sklearn.svm import SVC
from sklearn.datasets import load_iris

# Load the iris dataset 
iris = load_iris()
 
# Create the X (features) and y (target) arrays
X = iris.data
y = iris.target

# Split the dataset into test and train
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)
 
# Train the SVC classifier
svm_model_linear = SVC(kernel = 'linear', C = 1).fit(X_train, y_train)

# Create predictions 
predictions = svm_model_linear.predict(X_test)
Create a module for a python program that sanitizes user input. This module should strip away whitespace, remove HTML tags and special characters, convert ASCII characters to Unicode characters, and convert strings to lowercase. my string = '<Strin>G &#3238; !@#$%^' import re

# strip whitespace
def strip_whitespace(s):
 return s.strip()

# remove HTML tags
def remove_html_tags(s):
 return re.sub('<[^>]*>', '', s)

# remove special characters
def remove_special_chars(s):
 return re.sub('[^\w\s]', '', s)

# convert ASCII characters to unicode characters
def convert_ascii_to_unicode(s):
 return s.encode('unicode-escape').decode('utf-8')

# convert strings to lowercase
def to_lower(s):
 return s.lower()

# sanitize user input
def sanitize_string(s):
 s = strip_whitespace(s)
 s = remove_html_tags(s)
 s = remove_special_chars(s)
 s = convert_ascii_to_unicode(s)
 s = to_lower(s)
 return s

# Example
my_string = '<Strin>G &#3238; !@#$%^'
my_string = sanitize_string(my_string)
print(my_string)
Design a class in Python to represent a car using attributes like `year`, `make` and `model`.  class Car:
    def __init__(self, year, make, model):
        self.year = year
        self.make = make
        self.model = model
    
    def get_details(self):
        print(f"{self.year} {self.make} {self.model}")
Optimize a given code in Python to run faster. def factorial(n):
    fact = 1
    while n > 0:
        fact *= n
        n -= 1
    return fact def factorial(n):
    fact = 1
    while n > 1:
        fact *= n
        n -= 1
    return fact

# Eliminated unnecessary check for n > 0, as n will always be greater than 0 before the loop begins. This makes the function run faster.
Create an algorithm in Python to find the smallest common multiple of two numbers. 9, 12 def smallestCommonMultiple(n1, n2):
 n1_factors = set(getFactors(n1));
 n2_factors = set(getFactors(n2));

 # Get the union of the two sets,
 # then find the product of the union set
 scm = 1;
 for factor in n1_factors.union(n2_factors):
  scm *= factor;

 return scm;

# A method to return the factors of a number
def getFactors(n):
 factors = [];
 for i in range(2, n+1):
  if n % i == 0:
   factors.append(i);
   n //= i;

 return factors;

# Testing
print(smallestCommonMultiple(9, 12)) # Outputs 36
Write a Python script to parse a webpage to extract the weights from a table containing the weights of animals. Table to scrape:

Animal | Weight
-------------
Lion | 200 kg
Tiger | 150 kg
Elephant | 1000 kg import requests
from bs4 import BeautifulSoup
 
url = 'https://example.com'
 
response = requests.get(url)
soup = BeautifulSoup(response.text, 'html.parser')
 
weights = {}
 
for row in soup.select('table tr'):
 cells = row.find_all('td')
 if len(cells) == 2:
  animal = cells[0].text.strip()
  weight = cells[1].text.strip()
  weights[animal] = weight
 
print(weights)
# {'Lion': '200 kg', 'Tiger': '150 kg', 'Elephant': '1000 kg'}
Create a Python script that given a list of strings and a target string, returns the strings from the list that contain the target string. ['hello world', 'good bye', 'hello', 'hello planet'], 'hello' target = 'hello'
list_strings = ['hello world', 'good bye', 'hello', 'hello planet']

results = [string for string in list_strings if target in string]

print(results)
# Output: ['hello world', 'hello', 'hello planet']
Write a Python program to take a list of integers and sort them in ascending order using insertion sort. [4, 3, 7, 2, 1] def insertion_sort(arr):
 for index in range(1,len(arr)):
 key = arr[index]
 j = index-1
 while j >=0 and key < arr[j]:
 arr[j+1] = arr[j]
 j -= 1
 arr[j+1] = key

arr = [4, 3, 7, 2, 1]
insertion_sort(arr)
print(arr)

# Output: [1, 2, 3, 4, 7]
Implement a text classification model in Python using the Keras library. The model should be able to classify a sentence as expressing positive or negative sentiment. corpus = ["It is a wonderful day today","the weather is extremely bad today"]
labels = [1, 0] import numpy as np

from keras.preprocessing.text import Tokenizer
from keras.preprocessing import sequence
from keras.models import Sequential
from keras.layers import Dense, Embedding, LSTM

corpus = ["It is a wonderful day today",
"the weather is extremely bad today"]
labels = np.array([1, 0])

# tokenize corpus
tokenizer = Tokenizer()
tokenizer.fit_on_texts(corpus)
X = tokenizer.texts_to_sequences(corpus)
X = sequence.pad_sequences(X, maxlen=10)

# build model
model = Sequential()
model.add(Embedding(len(tokenizer.word_index)+1, 100, input_length=10))
model.add(LSTM(100, dropout=0.2, recurrent_dropout=0.2))
model.add(Dense(1, activation='sigmoid'))
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

# train the model
model.fit(X, labels, batch_size=1, epochs=20)

# test the model
test_sentence = "today the weather is horrible"
test_tokenized = tokenizer.texts_to_sequences([test_sentence])
test_tokenized = sequence.pad_sequences(test_tokenized, maxlen=10)
predict = model.predict(test_tokenized)
print(predict[0])
Write a class to represent an Employee in Python.  class Employee:
    def __init__(self, name, age, salary):
        self.name = name
        self.age = age
        self.salary = salary

   def get_name(self):
        return self.name

   def get_age(self):
        return self.age

   def get_salary(self):
        return self.salary
Optimize a Python function that takes two strings and counts the number of times the first string occurs in the second string.  def count_occurences(s1, s2):
    count = 0
    for i in range(len(s2) - len(s1) + 1):
        if s2[i:i + len(s1)] == s1:
            count += 1
    return count

if __name__ == '__main__':
    s1 = 'aa'
    s2 = 'aaaaaa'
    count = count_occurences(s1, s2)
    print(count)
Write a Python program which accepts the user's first and last name and print them in reverse order with a space between them.  def reverse_name_order(first_name, last_name):
    print(last_name + " " + first_name)

first_name = input("Enter your first name: ")
last_name = input("Enter your last name: ")
reverse_name_order(first_name, last_name)
Create a Python program to count the occurrence of each character in a given string and return a dictionary object.  def count_characters(string):
    chars = {}
    for char in string:
        if char in chars:
            chars[char] += 1
        else:
            chars[char] = 1
    return chars
Write a python program that sorts a list of numbers in descending order. list_numbers = [8, 4, 6, 10, 3] list_numbers = [8, 4, 6, 10, 3]

list_numbers.sort(reverse=True)

print(list_numbers) # Output: [10, 8, 6, 4, 3]
Write a Python program to calculate the maximum profit for a given stock over a given time period. The data consists of 7 days of stock data including an opening and closing price for each day.

[9, 11, 8, 12, 10, 15, 8] def max_profit(stock):
  current_max, max_profit = 0, 0
  for i in range(1, len(stock)):
    current_max = max(0, current_max + stock[i] - stock[i - 1])
    max_profit = max(current_max, max_profit)
  return max_profit

profit = max_profit([9, 11, 8, 12, 10, 15, 8])
print(f"The maximum profit is: {profit}")
Create a function in Python to solve the following constraint problem. Given two arrays of integers, find the number of elements in the intersection of the two sets. def intersection(arr1,arr2): 
    result = 0
    resultSet = set(arr1) & set(arr2)
    result = len(resultSet)
    return result
Write a python program for text processing tasks such as to reverse the text of every line. line1:  Welcome to Text Processing
line2: This is fun line1: emocleW ot gnirtS ecnerefxeT
line2: sI si nuf
Create an AI chatbot in Python using Dialogflow which returns a web search result when a user asks "How do I fix my broken window?". Not applicable import dialogflow
import json
import requests

# Define the Dialogflow intent
def detect_intent_from_text(text, language_code, project_id, session_id):
 session_client = dialogflow.SessionsClient()
 session = session_client.session_path(project_id, session_id)
 text_input = dialogflow.types.TextInput(text=text, language_code=language_code)
 query_input = dialogflow.types.QueryInput(text=text_input)
 response = session_client.detect_intent(session=session, query_input=query_input)
 return response.query_result

# Define web search logic
def search_web(query):
 URL = "https://www.google.com/search"
 PARAMS = {'q': query}
 response = requests.get(url=URL, params=PARAMS)
 result = response.text
 return result

# Define the main function
def main():
 # Setup Dialogflow parameters
 language_code = 'en-US'
 project_id = 'dialogflowproject-ghyvgx'
 session_id = 'test'

# Pass user query to Dialogflow
 text = 'How do I fix my broken window?'
 response = detect_intent_from_text(text, language_code, project_id, session_id)
 intent = response.intent.display_name
 parameters = response.parameters

# If intent is web search, search the web
 if intent == 'web search':
 query = parameters.get('query')
 result = search_web(query)
 print(result)

# Call the main function
if __name__ == '__main__':
 main()
Define a python class to represent an employee with the following attributes: name, age and salary.  class Employee:
    def __init__(self, name, age, salary):
        self.name = name
        self.age = age
        self.salary = salary
Generate a python function that takes a dataframe as its input and returns the sum of all values in the dataframe. import pandas as pd

df = pd.DataFrame([[3, 4, 5], [1, 2, 3], [4, 5, 6]], 
                   columns = ['A', 'B', 'C']) def sum_dataframe(df):
 total = 0
 for col in df.columns:
 total += df[col].sum()

 return total
 
# Example usage
print(sum_dataframe(df)) # prints 18
Write a Python program to generate a unique set of random numbers from an existing list of numbers. [1, 2, 3, 4, 5, 6, 7] import random

numbers = [1, 2, 3, 4, 5, 6, 7] 
random_numbers = set()

while len(random_numbers) < 4:
    random_numbers.add(random.choice(numbers))

print(random_numbers)
Write a Python script to calculate the sum of two numbers. num1 = 5
num2 = 10 num1 = 5
num2 = 10
total = num1 + num2

print(total)
Create a Machine Learning model in Python for predicting the probability of a loan applicant defaulting. The dataset contains the following columns:
Age, Education, Income Level, Default Status import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier

#Read the dataset
df = pd.read_csv('loan_data.csv')

#Split the dataset into train and test sets
X = df.drop('Default Status', axis=1)
y = df['Default Status']
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)

#Create a Decision Tree Classifier
dt = DecisionTreeClassifier(max_depth=3, random_state=42)
dt.fit(X_train, y_train)

#Compute the accuracy on the test set
accuracy = dt.score(X_test, y_test)

#Print the accuracy
print(accuracy)
Come up with a Python program to print out the sum of all the numbers from 0 to a given number.  def sum_numbers(n):
    total = 0
    for i in range(n+1):
        total += i
    return total

print(sum_numbers(20))
Design 3 user-defined functions in Python which compute the smallest, largest, and average of a list of numbers? [3, 5, 7, 9, 11] def smallest_of_list(nums):
    smallest = float("inf")
    for num in nums:
        if num < smallest:
            smallest = num
    return smallest

def largest_of_list(nums):
    largest = float("-inf")
    for num in nums:
        if num > largest:
            largest = num
    return largest

def avg_of_list(nums):
    sum = 0
    for num in nums:
        sum += num
    return sum/len(nums)
Design a program in Python to print the first 8 elements in the Fibonacci series.  def FibonacciSeries(n): 
      
    # Taking 1st two fibonacci nubers as 0 and 1 
    Fibonacci = [0, 1] 
      
    # Adding previous two numbers in the series 
    # and storing it 
    while len(Fibonacci) < n: 
        Fibonacci.append(sum(Fibonacci[-2:])) 
      
    return Fibonacci[:n] 
  
# Driver code 
n = 8
Fibonacci = FibonacciSeries(n) 
print(Fibonacci)
Code an algorithm in Python to solve the following: Find the two largest numbers in a set of numbers.  def findLargest(nums):
  largest1 = float('-inf')
  largest2 = float('-inf')
  
  for num in nums:
    if num > largest2:
      if num > largest1:
        largest2 = largest1
        largest1 = num
      else:
        largest2 = num
  
  return largest1, largest2

findLargest([1, 5, 2, 9, 6, 8]) // 9,8
Create a code editor program in Python to easily format code and highlight syntax.  import tkinter as tk
from tkinter import filedialog, Text, Menu

# root window configuration
root = tk.Tk()
root.title("Code Editor")

# text area where code is written
textArea = Text(root, relief="sunken")
textArea.grid(row=0, column = 0, columnspan=3, padx = 5, pady = 5, sticky = "nsew")

# sets the scrollbar x y
scrollbar = tk.Scrollbar(textArea)
textArea.configure(xscrollcommand=scrollbar.set)
scrollbar.config(command=textArea.yview)
scrollbar.grid(row=0, column=3, sticky='nsew')

# open file
def open_file():
    global filename
    filename = filedialog.askopenfilename(defaultextension=".txt", filetypes=[("All Files", "*.*"), ("Text Files", "*.txt")])
    if filename == "":
        filename = None
    else:
        root.title(f"Code Editor - {filename}")
        textArea.delete(1.0, tk.END)
        f = open(filename, "r")
        textArea.insert(1.0, f.read())
        f.close()

# save file
def save_file():
    if filename == None:
        save_as()
    else:
        f = open(filename, "w")
        f.write(textArea.get(1.0, tk.END))
        f.close()

# save as file
def save_as():
    global filename
    filename = filedialog.asksaveasfilename(initialfile="Untitled.txt", defaultextension=".txt", filetypes=[("All Files", "*.*"), ("Text Files", "*.txt")])
    f = open(filename, "w")
    f.write(textArea.get(1.0, tk.END))
    f.close()

# creating the statusbar
statusBar = tk.Label(root, text="Status Bar")
statusBar.grid(row=1, column=0, columnspan=3, sticky="ew")

# creating the menubar
menubar = Menu(root)
root.config(menu=menubar)

# creating the options for the file menu
fileMenu = Menu(menubar)
menubar.add_cascade(label="File", menu=fileMenu)
fileMenu.add_command(label="Open", command=open_file)
fileMenu.add_command(label="Save", command=save_file)
fileMenu.add_command(label="Save As", command=save_as)

# coding syntax highlighting
textArea.configure(bg="grey", fg="white")

# loop to run application
root.mainloop()
Design a function in Python that removes any characters from a given string that appears 2 or more times. "aabcdbb" def remove_duplicates(string): 
    res = "" 
    for ch in string: 
        if string.count(ch) < 2: 
            res += ch 
    return res

string = "aabcdbb"
print(remove_duplicates(string))  # prints acdb
The given code contains several functions for reconciling gene trees to a species tree. To reconcile a gene tree to a MUL-tree, use the "mulRecon" function. This function takes in a MUL-tree and a dictionary of gene trees, and returns the minimum score and the corresponding mapping for each gene tree. To collapse groups in the gene trees before reconciling, use the "collapseGroups" function. This function takes in the MUL-tree, a dictionary of gene trees, and some other parameters, and returns a dictionary of collapsed groups for each gene tree. Finally, the "reconLCA" function is the main algorithmic function for LCA reconciliation mapping. It takes in a gene tree, a species tree, and some other parameters, and returns the minimum score and the corresponding mapping.  #!/usr/bin/python
#############################################################################
# The main algorithmic functions for MUL-reconciliation mapping.
# Gregg Thomas
# Fall 2015, Combo algorithm implemented Spring 2016
#############################################################################

import os, itertools, recontree as RT, mul_tree as MT, reconcore as RC, gene_tree as GT, global_vars as globs
import pickle

#############################################################################

def reconLCA(lca_ginfo, sinfo, lca_maps, retmap=False):
# The LCA reconciliation mapping algorithm.

	internal_nodes = RT.sortNodes(lca_ginfo);
	# Sort the internal nodes for a post order traversal.

	score = 0;

	if retmap:
		dups, losses = {}, {};
		for g in lca_ginfo:
			dups[g], losses[g] = 0, 0;

	for g in internal_nodes:
		g = "<" + str(g) + ">";
		d1, d2 = RT.getDesc(g, lca_ginfo);
		is_dup = 0;
		g_clade = RT.getClade(g, lca_ginfo);
		clade_maps = [];
		for g_tip in g_clade:
			clade_maps.append(lca_maps[g_tip][0]);
		# Get the species in the clade of the current node. Then get all
		# the possible maps from those species.

		lca_maps[g].append(RT.LCA(clade_maps,sinfo)[0]);

		if lca_maps[g][0] == lca_maps[d1][0] or lca_maps[g][0] == lca_maps[d2][0]:
			if retmap:
				dups[g] += 1;
			score += 1;
			is_dup = 1;
		#Now, if the map of g is identical to one of its descendants, it is a duplication node.

		cur_depth = len(RT.nodeDepth(lca_maps[g][0],sinfo))

		if lca_ginfo[g][2] == 'root':
			if retmap:
				losses[g] += cur_depth;
			score += cur_depth;
		# The number of losses at the root of the gene tree is equal to the depth of its map.

		d1_depth = len(RT.nodeDepth(lca_maps[d1][0],sinfo));
		d1_loss = (d1_depth - cur_depth - 1) + is_dup;
		score += d1_loss
		if retmap:
			losses[d1] += d1_loss;

		d2_depth = len(RT.nodeDepth(lca_maps[d2][0],sinfo))
		d2_loss = (d2_depth - cur_depth - 1) + is_dup;
		score += d2_loss;
		if retmap:
			losses[d2] += d2_loss;
		# Counting losses for each of the descendents of the current node.

	if retmap:
		return lca_maps, dups, losses;
	return score;
	# Return the total number of duplication nodes.

#############################################################################
def getSis(gs_node, check_node, check_clade, gs_dict):
# Gets the hybrid and copy sister species.

	d1, d2 = RT.getDesc(gs_node, gs_dict);
	if d1 == check_node:
		sis_node = d2;
	elif d2 == check_node:
		sis_node = d1;

	sis_clade = RT.getClade(sis_node, gs_dict);
	if any(c in check_clade for c in sis_clade):
		return [];
	else:
		return sis_clade;

#############################################################################
def collapseGroups(mul_input, gene_trees_filtered_cg, spec_type_cg, v, pickle_dir, nmt):
# The collapseGroups function goes through all gene tree-MUL-tree combos to collapse the groups.

	mul_num, mul_tree = mul_input;
	
	if v == 1:
		print("# " + RC.getDateTime() + " --> Collapsing groups for MUL-tree # " + str(mul_num) + " / " + str(nmt));

	if mul_num == 0:
		return mul_num, [];

	gt_groups = {};

	mt, minfo, hybrid_clade, hybrid_node, copy_node = mul_tree[0], mul_tree[1], mul_tree[2], mul_tree[3], mul_tree[4];

	for gene_num in gene_trees_filtered_cg:
		gene_tree = gene_trees_filtered_cg[gene_num];
		if len(gene_tree) == 1:
			continue;
		# If the gene tree was previously filtered, the list will only contain the filter message and it should be skipped here.

		gt,ginfo = gene_tree;
		internal_nodes = RT.sortNodes(ginfo);
		# Sort the internal nodes for a post order traversal.

		singles, groups = {}, {};

		for g in ginfo:
			if ginfo[g][2] == 'tip':
				if g[g.rfind("_")+1:] in hybrid_clade:
					cur_anc = ginfo[g][1];
					anc_clade = RT.getClade(cur_anc, ginfo);
					anc_clade.remove(g);
					singles[g] = anc_clade;
		# First, all hybrid species nodes in the gene tree are added to the singles list.
		## GETS SINGLETONS

		for g in internal_nodes:
			g = "<" + str(g) + ">";
			# Next, for any non-tip node, we find out if the species that define it can be grouped

			d1, d2 = RT.getDesc(g, ginfo);
			d1_clade = RT.getClade(d1, ginfo);
			d1_spec_clade = [spec[spec.rfind("_")+1:] for spec in d1_clade];
			d2_clade = RT.getClade(d2,ginfo);
			d2_spec_clade = [spec[spec.rfind("_")+1:] for spec in d2_clade];
			# The clades for the descendants of both nodes are retrieved, and their corresponding
			# species are stored.

			if all(s in hybrid_clade for s in d1_spec_clade) and all(s in hybrid_clade for s in d2_spec_clade):
			# If the descendants from both nodes are all hybrid clade species, then we may be able to group them.
				if not any(s in d2_spec_clade for s in d1_spec_clade):
				# However, only if there is not more than one copy of a species among the clades can they be grouped.
					cur_clade = RT.getClade(g, ginfo);
					cur_anc = ginfo[g][1];
					anc_clade = RT.getClade(cur_anc, ginfo);
					anc_clade = [spec for spec in anc_clade if spec not in cur_clade];

					cur_nodes = RT.getCladeNode(g, ginfo);
					for node in cur_nodes:
						if node in groups:
							del groups[node];

					groups[g] = [cur_clade, anc_clade];
			## CHECKS GROUPINGS

		for group in groups:
			for g in groups[group][0]:
				if g in singles:
					del singles[g];
		# Removes any singles that are in a group.

		final_groups = [];
		for node in groups:
			final_groups.append(groups[node]);
		for single in singles:
			final_groups.append([[single], singles[single]]);
		# Restructures the final groups and adds singles.

		sisters = {};

		if spec_type_cg == 's':
			mul_hybrid_node = [n for n in minfo if set(RT.getClade(n, minfo)) == set(hybrid_clade)][0];
			copy_clade = [c + "*" for c in hybrid_clade];
			mul_copy_node = [n for n in minfo if set(RT.getClade(n, minfo)) == set(copy_clade)][0];
			# The copy clade is defined.
		elif spec_type_cg == 'm':
			copy_clade = RT.getClade(copy_node, minfo);
			mul_hybrid_node = hybrid_node;
			mul_copy_node = copy_node;

		hybrid_anc = minfo[mul_hybrid_node][1];
		copy_anc = minfo[mul_copy_node][1];

		sisters[''] = getSis(hybrid_anc, mul_hybrid_node, copy_clade, minfo);
		sisters['*'] = getSis(copy_anc, mul_copy_node, hybrid_clade, minfo);
		# These lines get any sister species from the hybrid and copy clades in the MUL-tree and that
		# clade's corresponding map. If there are no sisters, it stores an empty list.

		groups, fixed_groups = [], [];

		for group in final_groups:
			group_sis = [spec[spec.rfind("_")+1:] for spec in group[1]];
			if group_sis == []:
				groups.append(group[0]);
				continue;

			if all(spec in sisters[''] for spec in group_sis):
				fixed_groups.append([group[0],'']);
			elif all(spec in sisters['*'] for spec in group_sis):
				fixed_groups.append([group[0],'*']);
			else:
				groups.append(group[0]);
		# This checks the sister species of all the groups for the gene tree. If all the sister species
		# of a group are also in the sister species of the hybrid or copy clade in the MUL-tree, then we
		# can fix the mapping of that node.
		## FINDS FIXED SISTER GROUPS

		gt_groups[gene_num] = [groups, fixed_groups];
		# Adding the groups and fixed groups to the current gt_groups.

	groupoutfile = os.path.join(pickle_dir, str(mul_num) + "_groups.pickle");
	pickle.dump(gt_groups, open(groupoutfile, "wb"));
	del groups, fixed_groups, final_groups, gene_trees_filtered_cg, gt_groups;

#############################################################################
def mulRecon(mul_input, gene_trees, v, pickle_dir, nmt, retmap=False):
# The basis of the MUL-reconciliation algorithm is that there are now nodes that
# have more than one possible map. We try all combinations of mappings for these
# nodes and find which combination(s) results in the most parsimonious mutation score
# (# duplication + # losses).
#
# A few prelminary steps are taken to ensure the quickest mapping groups:
# 	1.  Identify whether the hybrid or copy clade in the MUL-tree have sister groups. If so, we can use
#		them to fix similar nodes in the gene tree.
#	2.  Find nodes that contain only one or zero copies of the hybrid node species and species from one
#		of the sister groups. Fix the mappings of these nodes.
#	3.  Any other nodes that contain only one or zero copies of the hybrid node species can be grouped
#		and should be mapped consistently, though we will still have to try both maps.
#	4.  Remaining single hybrid nodes must be tried with both maps.
#
# Once these steps are done (in the collapseGroups function), a list of node groups is obtained, for
# which we generate every combination of map and try to reconcile to the MUL-tree. A score is obtained
# for each combination and the minimum score is kept as the correct map.

	mul_num, mul_tree = mul_input
	#main_output, det_output, min_num, min_score, min_maps, multiple_maps = {}, [], '', 9999999, {}, 0;
	# mulpicklefile = os.path.join(pickle_dir, str(mul_num) + "_tree.pickle");
	# mul_tree = pickle.load(open(mulpicklefile, "rb"));

	if v == 1:
		print("# " + RC.getDateTime() + " --> Reconciling to MUL-tree # " + str(mul_num) + " / " + str(nmt));

	min_maps = {};
	total_score = 0;

	if mul_num != 0:
		groupfilename = os.path.join(pickle_dir, str(mul_num) + "_groups.pickle");
		cur_groups = pickle.load(open(groupfilename, "rb"));

	for gene_num, gene_tree in gene_trees.items():
		gt, ginfo = gene_tree;

		gene_score = 99999;
		min_maps[gene_num] = [];

		if mul_num == 0:
			sinfo = mul_tree[1];

			init_maps = {};
			for g in ginfo:
				if ginfo[g][2] == 'tip':
					speclabel = g[g.rfind("_")+1:];
					init_maps[g] = [speclabel];
				else:
					init_maps[g] = [];
			# Initialize the maps.

			if retmap:
				maps, node_dups, node_loss = reconLCA(ginfo, sinfo, init_maps, retmap);
				num_dups = sum(node_dups.values());
				num_loss = sum(node_loss.values());
				gene_score = num_dups + num_loss;
				min_maps[gene_num].append([gene_score, num_dups, num_loss, maps, node_dups, node_loss]);
			else:
				gene_score = reconLCA(ginfo, sinfo, init_maps);

			total_score += gene_score;
			# Some counting.

		else:
			mt, minfo, hybrid_clade, hybrid_node, copy_node, = mul_tree[0], mul_tree[1], mul_tree[2], mul_tree[3], mul_tree[4];
			# Aggregate variables for the current GENE tree.

			gt_groups, gt_fixed = cur_groups[gene_num][0], cur_groups[gene_num][1];

			num_groups = len(gt_groups);
			# Retrieve gene tree info and collapsed groups for this gene tree-MUL-tree combo

			for combo in itertools.product(['','*'], repeat=num_groups):
			# We get all combinations of mappings for each node group. This is the time constraining step.
				group_map = [];
				for i in range(len(combo)):
					for node in gt_groups[i]:
						group_map.append(node + combo[i]);
				# This builds the current map for each group.

				for fixed in gt_fixed:
					for node in fixed[0]:
						group_map.append(node + fixed[1]);
				# This adds the fixed maps onto the current combination of group mappings.

				# Now we do LCA mapping for the current combination of maps for the hybrid clade species.
				maps = {};
				for g in ginfo:
					if ginfo[g][2] == 'tip':
						speclabel = g[g.rfind("_")+1:];
						if g in group_map:
							maps[g] = [speclabel];
						# If the node is in a hybrid clade, use the map in the current combination.
						elif g + "*" in group_map:
							maps[g] = [speclabel + "*"];
						else:
							maps[g] = [speclabel];
						# Otherwise, the map is just the species label.

					else:
						maps[g] = [];
					# And if the node is not a tip, the map is empty.

				if retmap:
					maps, node_dups, node_loss = reconLCA(ginfo, minfo, maps, retmap);
					num_dups = sum(node_dups.values());
					num_loss = sum(node_loss.values());
					cur_score = num_dups + num_loss;
					if cur_score <= gene_score:
						if cur_score < gene_score:
							gene_score = cur_score;
							min_maps[gene_num] = [];
						min_maps[gene_num].append([gene_score, num_dups, num_loss, maps, node_dups, node_loss])
				else:
					cur_score = reconLCA(ginfo, minfo, maps);
					if cur_score < gene_score:
						gene_score = cur_score;
				# Once the current maps have been initialized, we can simply call the normal LCA mapping algorithm
			## End mapping of one gene tree.

			total_score += gene_score;
	## End mapping all gene trees.

	if retmap:
		return min_maps;
	else:
		return mul_num, total_score;

# #############################################################################

# A couple ways to get the map combos:

# combo_ind = list(itertools.product(['','*'], repeat=len(node_ind)));
# if v == -2:
#	print "num combos", len(combo_ind);
# combos = list(itertools.product(['','*'], repeat=len(node_ind)));

# Old loading:
# if v == 0 and numiters > 100:
# 	numbars, donepercent = RC.loadingBar(itercount, numiters, donepercent, numbars);
# 	itercount = itercount + 1;
# # Only the loading bar displays when the program is running if -v is set to 0.























Reconstruct the following Python function such that the output is reduced to one line. def calculate_sum(numbers):
    result = 0
    for i in range(len(numbers)):
        result += numbers[i]
    return result def calculate_sum(numbers):
    return sum(numbers)
Write a Python program to identify all sets of factors of a given number.  def get_factors(number):
    factors = []
    for i in range(1, number + 1):
        if number % i == 0:
            factors.append([i, int(number/i)])
    return factors

print(get_factors(45)) # Output: [[1, 45], [3, 15], [5, 9], [9, 5], [15, 3], [45, 1]]
Write a Python program to group a given list of integers into sublists of given size. list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], size = 3 def group_list(mylist, n): 
  
    newlist = [] 
      
    # create a list of indices for sublists 
    indices = list(range(0, len(mylist), n))  
      
    # create sublists too 
    for start in indices: 
        end = start + n
          
        newlist.append(mylist[start:end])  
          
    return newlist 
  
# Driver code 
list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 
size = 3
  
print(group_list(list, size)) 
# [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]
Write a Python program to arrange two dictionaries in order of their keys. dct1 = {'a':1, 'b':2, 'c':3}
dct2 = {'e':4, 'd':5, 'f':6} def sort_dicts_by_keys(dct1, dct2):
    result = {}
    keys = sorted(list(dct1.keys()) + list(dct2.keys()))
    for key in keys:
        if key in dct1:
            result[key] = dct1[key]
        else:
            result[key] = dct2[key]
        
    return result
Modify the following Python program to check whether a given string is a palindrome  def is_palindrome(str):
    str = str.replace(" ", "")
    return str == str[::-1] 

while True:
    input_str = input("Enter a string: ")
    result = is_palindrome(input_str)
    if result:
        print("{} is a palindrome".format(input_str))
    else:
        print("{} is not a palindrome".format(input_str))
    ans = input("Do you want to enter more strings (y/n)?")
        if ans == 'n':
            break
Create a Python script that checks whether a given string is a palindrome. "malayalam" def isPalindrome(str): 
    # Run loop from 0 to len/2 
    for i in range(0, len(str)//2): 
        if str[i] != str[len(str)-i-1]: 
            return False
    return True
  
# main
myStr = "malayalam"

ans = isPalindrome(myStr) 
  
if ans: 
    print("The given string is a palindrome") 
else: 
    print("The given string isn't a palindrome")
Build an artificial neural network in Python to predict the price of a house  import numpy as np
from tensorflow.keras import models, layers

#create basic model
def create_model():
    model = models.Sequential()
    model.add(layers.Dense(128, activation = 'relu', input_dim = 18))
    model.add(layers.Dense(64, activation = 'relu'))
    model.add(layers.Dense(32, activation = 'relu'))
    model.add(layers.Dense(1))
    model.compile(optimizer = 'rmsprop', loss = 'mse', metrics=['mae'])
    return model

#train model
model = create_model()
model.fit(X_train, y_train, epochs = 100, batch_size = 32)
Write a code to compare two complex numbers in Python. z1 = 2+3j
z2 = 2-3j def compare_complex_numbers(z1, z2):
    if z1.real == z2.real and z1.imag == z2.imag:
        return 'z1 and z2 are equal'
    else:
        return 'z1 and z2 are not equal'
Write a function in Python to calculate the sum of the digits in a given number.  def sum_digits(num):
    total = 0
    while num > 0:
        digit = num % 10
        total += digit
        num = num // 10
    return total
Create a mathematical expression solver function in Python. "2 + 2" def expression_solver(expression):
    '''This function solves a given mathematical expression'''

    return eval(expression)

expression = "2 + 2"

result = expression_solver(expression)

print(result) # 4
Build an AI classifier in Python to detect the sentiment of a given sentence. The input dataset contains 1000 sentences. import nltk
from nltk.tokenize import word_tokenize

# load data
sentences = [<input dataset>]
sentiments = [<ground truth sentiments>]

# create training and test datasets
X_train, X_test, y_train, y_test = train_test_split(sentences, sentiments, test_size=0.25, random_state=42)

# prepare datasets for vectorization
word_counter = Counter(word for sentence in X_train for word in word_tokenize(sentence[1])) 

# vectorize the datasets using word count
vectorizer = TfidfVectorizer(max_features=1000, stop_words='english', max_df=0.5,
                             min_df=2, tokenizer=word_tokenize).fit(X_train)
X_train_vec = vectorizer.transform(X_train)
X_test_vec = vectorizer.transform(X_test)

# fit the classifier using the vectorized train dataset
clf = MultinomialNB().fit(X_train_vec, y_train)

# predict the test dataset
y_pred = clf.predict(X_test_vec)
Create a function in Python to normalize a given set of tokens.  def normalize_tokens(tokens):
    return [tok.lower() for tok in tokens]
Write a function in Python to get the number of occurrences of a particular character in a given sentence. sentence = "Hello world!"
character = 'l' def count_occurrences(sentence, character): 
    return sentence.count(character)
Write a Python program that creates a dictionary with a list as a key  def make_dict_from_list(list_key): 
    dictionary = {}
    for element in list_key:
        dictionary[element] = []
    return dictionary
Write a Python program to align the text in columns. text = "This is a test text to be aligned in columns" def align_columns(text):
        words = text.split(" ")
        max_len = 0
        for w in words:
            if len(w) > max_len:
                max_len = len(w)
        for i, w in enumerate(words):
            words[i] = w.ljust(max_len) 
        return " ".join(words)

if __name__ == '__main__':
    text = "This is a test text to be aligned in columns"
    print("Aligned in columns:", align_columns(text))
Develop a RNN in Python to classify a given text as Positive, Neutral or Negative. This is a very good restaurant import tensorflow as tf
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences

# Preprocessing
tokenizer = Tokenizer()
tokenizer.fit_on_texts([text])
words = tokenizer.word_index
sequence = tokenizer.texts_to_sequences([text])
padded_sequence = pad_sequences(sequence, maxlen=20)

# Network Architecture
model = tf.keras.Sequential([
    tf.keras.layers.Embedding(len(words)+1, 32, input_length=20),
    tf.keras.layers.LSTM(64),
    tf.keras.layers.Dense(3, activation='softmax')
])

# Training the model
model.compile(optimizer='adam', 
              loss='categorical_crossentropy', 
              metrics=['accuracy'])
model.fit(padded_sequence, labels, epochs=10)
Develop a code to rate sentiments in a given text using Python.  # sentiment_rating function takes in a string of text 
# and returns a sentiment score from -1 to 1
def sentiment_rating(text):
    # Create a sentiment analyzer object
    sentiment_analyzer = SentimentIntensityAnalyzer()
 
    # Calculate the sentiment score
    sentiment_score = sentiment_analyzer.polarity_scores(text)

    return sentiment_score['compound']
Create a program to parse a JSON object into a Python dictionary.  import json

def parse_json(json_obj):
    json_dict = json.loads(json_obj)
    return json_dict
Create a Python program that accepts a sentence as an input and prints out the number of vowels present in that sentence. This is a sentence. def count_vowels(sentence):
    vowels = "aeiouAEIOU"
    count = 0
    for character in sentence:
        if character in vowels:
            count += 1
    return count

sentence = input("Enter a sentence: ")

vowel_count = count_vowels(sentence)
print(f"Number of vowels in the sentence is {vowel_count}")
Create a Text-to-Speech Python application to read out a simple sentence.  import pyttsx3

def text_to_speech(sentence):
    engine = pyttsx3.init()
    engine.say(sentence)
    engine.runAndWait()
    
text_to_speech("Hello, this is a simple sentence")
Develop a Python program that uses a series of if-elif-else statements to act on the input data Input a string and the program should convert it to uppercase letters. def convert_to_uppercase(data):
    if type(data)==str:
        return data.upper()
    else:
        print("Input must be a string")
Create a web scraper with Python BeautifulSoup library for gathering data from a website. Not applicable import requests
from bs4 import BeautifulSoup

page = requests.get('http://example.com')
soup = BeautifulSoup(page.content, 'html.parser')

data = []

for item in soup.find_all('div', class_='item'):
 title = item.find('h3').get_text()
 description = item.find('p').get_text()
 
 data.append({
 'title': title,
 'description': description
 })
 
print(data)
Fix the following python code. def remove_vowel(string):
    vowels = ('a', 'e', 'o', 'u')
    for x in vowels: 
        txt = string.replace(x, "")
    return txt def remove_vowel(string):
    vowels = ('a', 'e', 'o', 'u')
    for x in vowels: 
        string = string.replace(x, "")
    return string
Write a function in Python to find all words in a string that are 4 characters in length. The quick brown fox jumps over the lazy dog def find_words(text):
 
 # find all words in the string
 words = text.split(' ')
 
 # filter out words that are not 4 characters long
 filtered_words = [word for word in words if len(word) == 4]
 
 return filtered_words
 
# example
text = 'The quick brown fox jumps over the lazy dog'
words = find_words(text)
 
print(words)
 
# output: ['quick', 'brown', 'over', 'lazy']
Create a data structure in Python to store details of an employee.  # Define the Employee class
class Employee:
    def __init__(self, name, email, id, salary):
        self.name = name 
        self.email = email
        self.id = id
        self.salary = salary
# Create an empty dictionary to store employee details
employee_details = {}
In Python, generate a function that takes two arguments (a list and a number) and prints out the first two elements of the list that have a length greater than the second argument. list_of_words = ['apple', 'banana', 'carrot', 'durian'] 
integer = 4 def print_long_words(list_of_words, integer):
  long_words = []
  for word in list_of_words:
    if len(word) > integer:
      long_words.append(word)
  if len(long_words)>1:
    print(long_words[0], long_words[1])
  else:
    print('No words found with length greater than ', integer)
Convert the following python code into a Java program (15 lines or less). def fact(n):
    if n < 0:
        return 0
    if n == 0:
        return 1
    return n * fact(n - 1) public class Factorial {
    public static int fact(int n) {
        if (n < 0) {
            return 0;
        }

        if (n == 0) {
            return 1;
        }

        return n * fact(n - 1);
    }
}
Create a function in Python that returns the unique elements in a given array. [1, 4, 2, 1, 5, 4] def unique(arr): 
  unique_arr = [] 
  for i in arr: 
    if i not in unique_arr: 
      unique_arr.append(i) 
  return unique_arr
Create a Python script that takes a list of email addresses as input and prints a filtered list of email addresses that belong to a particular domain. list = ["john@gmail.com", "sarah@yahoo.com", "bob@microsoft.com", "sophie@gmail.com"] filtered_list = [email for email in list if email.endswith("@gmail.com")]

print(filtered_list)
# Output: ["john@gmail.com", "sophie@gmail.com"]
Generate a program in Python to print the union of two given sets. [1, 2, 3], [2, 3, 4, 5] def union_sets(set1, set2):
    return list(set(set1) | set(set2))

set1 = [1, 2, 3]
set2 = [2, 3, 4, 5]

print(union_sets(set1, set2)
Create a Python function, that when called with a string argument, will return all of the possible substrings of that string. Not applicable def all_substrings(string):
  sub_strings = []
  for i in range(len(string)):
    for j in range(i+1, len(string)+1):
      sub_strings.append(string[i:j])
  return sub_strings
Write a basic web scraper in Python using the BeautifulSoup library. The scraper should take as input a URL and output the text on the page. Input URL: https://en.wikipedia.org/wiki/Web_scraping import requests
from bs4 import BeautifulSoup

url = "https://en.wikipedia.org/wiki/Web_scraping" 
response = requests.get(url)
soup = BeautifulSoup(response.text, 'html.parser')

text = soup.find_all('p')
for t in text:
    print(t.text)
Create a Python program to take a list of numbers and set any negative numbers to 0. [2, 5, -8, 0, 1, -6] def set_negative_to_zero(arr):
    new_arr = []
    for num in arr:
        if num < 0:
            new_arr.append(0)
        else:
            new_arr.append(num)
    return new_arr

result = set_negative_to_zero([2, 5, -8, 0, 1, -6])
print(result)
Write a Python function to create a list of 10 random numbers between 0 and 100.  import random

def create_random_list():
 result = []
 for i in range(10):
  result.append(random.randint(0, 100))
 return result
Write a PostgreSQL query that returns the title and author of all blog posts with the keyword "Python". title (varchar), content (text), author (varchar) SELECT title, author
FROM BlogPost
WHERE content LIKE '%Python%';
Write a Python function to find the intersection of two given sets. set1 = [1, 2, 3, 4], set2 = [2, 3, 4, 5] def intersection(set1, set2): 
    return [i for i in set1 if i in set2]
Create a function in Python that takes in a number, n, and prints out the nth term of the Fibonacci sequence. n = 10 def fibonacci(n):
  a = 0
  b = 1
  if n < 0:
    print("Incorrect input")
  elif n == 0:
    return a
  elif n == 1:
    return b
  else:
    for i in range(2,n):
      c = a + b
      a = b
      b = c
    return b
  
print(fibonacci(10))
Given a list of integers, write a Python function to find the largest consecutive sum of elements in the list. nums = [1, 2, -5, 9, 0, 10] def largest_consecutive_sum(nums):
    max_sum = 0
    total_sum = 0
    for num in nums:
        total_sum += num
        if total_sum > max_sum:
            max_sum = total_sum
    return max_sum
The code is a Python module for the SKiDL library. To use it, import the necessary functions and classes from the module. The module contains a class `SkidlCfg` for handling SKiDL configuration, a function `get_kicad_lib_tbl_dir` for getting the path to the global fp-lib-table file, and a number of global variables and functions for working with SKiDL. To prevent creation of output files, call the `no_files` function with the default Circuit object.  # -*- coding: utf-8 -*-

# MIT license
#
# Copyright (C) 2016 by XESS Corp.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from __future__ import absolute_import, division, print_function, unicode_literals

import json
import os
from builtins import open, super

from future import standard_library

from . import tools  # Import EDA tool-specific stuff.
from .circuit import Circuit
from .common import *
from .defines import *
from .logger import erc_logger, get_script_name, logger
from .part_query import footprint_cache
from .pin import Pin
from .utilities import *

standard_library.install_aliases()


class SkidlCfg(dict):
    """Class for holding SKiDL configuration."""

    CFG_FILE_NAME = ".skidlcfg"

    def __init__(self, *dirs):
        super().__init__()
        self.load(*dirs)

    def load(self, *dirs):
        """Load SKiDL configuration from JSON files in given dirs."""
        for dir in dirs:
            path = os.path.join(dir, self.CFG_FILE_NAME)
            path = os.path.expanduser(path)
            path = os.path.abspath(path)
            try:
                with open(path) as cfg_fp:
                    merge_dicts(self, json.load(cfg_fp))
            except (FileNotFoundError, IOError):
                pass

    def store(self, dir="."):
        """Store SKiDL configuration as JSON in directory as .skidlcfg file."""
        path = os.path.join(dir, self.CFG_FILE_NAME)
        path = os.path.expanduser(path)
        path = os.path.abspath(path)
        with open(path, "w") as cfg_fp:
            json.dump(self, cfg_fp, indent=4)


def get_kicad_lib_tbl_dir():
    """Get the path to where the global fp-lib-table file is found."""

    paths = (
        "$HOME/.config/kicad",
        "~/.config/kicad",
        "%APPDATA%/kicad",
        "$HOME/Library/Preferences/kicad",
        "~/Library/Preferences/kicad",
    )
    for path in paths:
        path = os.path.normpath(os.path.expanduser(os.path.expandvars(path)))
        if os.path.lexists(path):
            return path
    return ""


###############################################################################
# Globals that are used by everything else.
###############################################################################

# Get SKiDL configuration.
skidl_cfg = SkidlCfg("/etc", "~", ".")

# If no configuration files were found, set some default lib search paths.
if "lib_search_paths" not in skidl_cfg:
    skidl_cfg["lib_search_paths"] = {tool: ["."] for tool in ALL_TOOLS}

    # Add the location of the default KiCad part libraries.
    try:
        skidl_cfg["lib_search_paths"][KICAD].append(os.environ["KICAD_SYMBOL_DIR"])
    except KeyError:
        logger.warning(
            "KICAD_SYMBOL_DIR environment variable is missing, so the default KiCad symbol libraries won't be searched."
        )

    # Add the location of the default SKiDL part libraries.
    default_skidl_libs = os.path.join(
        os.path.dirname(os.path.abspath(__file__)), "libs"
    )
    skidl_cfg["lib_search_paths"][SKIDL].append(default_skidl_libs)

# Shortcut to library search paths.
lib_search_paths = skidl_cfg["lib_search_paths"]

# If no configuration files were found, set some default footprint search paths.
if "footprint_search_paths" not in skidl_cfg:
    dir_ = get_kicad_lib_tbl_dir()
    skidl_cfg["footprint_search_paths"] = {tool: [dir_] for tool in ALL_TOOLS}

# Cause the footprint cache to be invalidated if the footprint search path changes.
def invalidate_footprint_cache(self, k, v):
    footprint_cache.reset()


skidl_cfg["footprint_search_paths"] = TriggerDict(skidl_cfg["footprint_search_paths"])
skidl_cfg["footprint_search_paths"].trigger_funcs[KICAD] = invalidate_footprint_cache

# Shortcut to footprint search paths.
footprint_search_paths = skidl_cfg["footprint_search_paths"]

# Set default toolset being used with SKiDL.
def set_default_tool(tool):
    """Set the ECAD tool that will be used by default."""
    skidl_cfg["default_tool"] = tool


def get_default_tool():
    return skidl_cfg["default_tool"]


if "default_tool" not in skidl_cfg:
    set_default_tool(KICAD)

# Make the various EDA tool library suffixes globally available.
lib_suffixes = tools.lib_suffixes

# Definitions for backup library of circuit parts.
BACKUP_LIB_NAME = get_script_name() + "_lib"
BACKUP_LIB_FILE_NAME = BACKUP_LIB_NAME + lib_suffixes[SKIDL]

# Boolean controls whether backup lib will be searched for missing parts.
QUERY_BACKUP_LIB = INITIAL_QUERY_BACKUP_LIB = True


def set_query_backup_lib(val):
    """Set the boolean that controls searching for the backup library."""
    global QUERY_BACKUP_LIB
    QUERY_BACKUP_LIB = val


def get_query_backup_lib():
    return QUERY_BACKUP_LIB


# Backup lib for storing parts in a Circuit.
backup_lib = None


def set_backup_lib(lib):
    """Set the backup library."""
    global backup_lib
    backup_lib = lib


def get_backup_lib():
    return backup_lib


@norecurse
def load_backup_lib():
    """Load a backup library that stores the parts used in the circuit."""

    global backup_lib

    # Don't keep reloading the backup library once it's loaded.
    if not backup_lib:
        try:
            # The backup library is a SKiDL lib stored as a Python module.
            exec(open(BACKUP_LIB_FILE_NAME).read())
            # Copy the backup library in the local storage to the global storage.
            backup_lib = locals()[BACKUP_LIB_NAME]

        except (FileNotFoundError, ImportError, NameError, IOError):
            pass

    return backup_lib


# Create the default Circuit object that will be used unless another is explicitly created.
builtins.default_circuit = Circuit()
# NOCONNECT net for attaching pins that are intentionally left open.
builtins.NC = default_circuit.NC  # pylint: disable=undefined-variable

# Create calls to functions on whichever Circuit object is the current default.
ERC = default_circuit.ERC
erc_assert = default_circuit.add_erc_assertion
generate_netlist = default_circuit.generate_netlist
generate_xml = default_circuit.generate_xml
generate_schematic = default_circuit.generate_schematic
generate_svg = default_circuit.generate_svg
generate_graph = default_circuit.generate_graph
reset = default_circuit.reset
backup_parts = default_circuit.backup_parts

# Define a tag for nets that convey power (e.g., VCC or GND).
POWER = Pin.drives.POWER


def no_files(circuit=default_circuit):
    """Prevent creation of output files (netlists, ERC, logs) by this Circuit object."""
    circuit.no_files = True
    erc_logger.stop_file_output()
    logger.stop_file_output()

Write a Python program to combine two nested dictionaries into one. dict1 = {'x': 10, 'y': 20}
dict2 = {'a': 5, 'b': 10} combined_dict = {**dict1, **dict2}
Refactor a Python program to improve its readability and maintainability. The program is given below.

def main():
    result = []
    for item in range(10):
        if item % 3 == 0:
            result.append(item * item)
    return result def main():
    result = [item * item for item in range(10) if item % 3 == 0]
    return result
Create a Python class to represent a family tree.  class FamilyTree:
    def __init__(self):
        self.nodes = []

    def add_node(self, node):
        self.nodes.append(node)

    def get_all_descendants(self, node):
        descendants = []
        for n in self.nodes:
            if n.parent == node:
                descendants.append(n)
                descendants.extend(self.get_all_descendants(n))
        return descendants
Write a Python program to swap keys and values in a given dictionary.  def swap_dict_keys_values(d):
  d_new = dict()
  for key, value in d.items():
    d_new.setdefault(value,[]).append(key)
  return d_new
Develop a prototype of a geographic information system in Python.  import geopandas
import matplotlib.pyplot as plt

# Read in the shapefile of nations
world = geopandas.read_file(geopandas.datasets.get_path('naturalearth_lowres'))

# Set up the base figure
fig, ax = plt.subplots(figsize=(12, 8))
# Set up the title of the map as a subplot
ax.set_title("Geographic Information System", fontdict={'fontsize': 20}, loc='left')

# Display the world map
world.plot(ax=ax, color='white', edgecolor='black')

# Display a legend
ax.legend(loc='upper right')

# Show the map
plt.show()
Write an Algorithm in Python that takes in a comma-separated string of numbers and returns the sum of the numbers. '1,2,3' def sumString(s):
 nums = s.split(',')
 total = 0
 for num in nums:
 total += int(num)
 return total
Create a functions in Python that takes a string as an argument and outputs an array of strings that are all palindromes comprised of all the letters in the argument string. "abacad" def palindromeArray(s): 
	res = [] 
	for i in range(1 << len(s)): 
		temp = "" 
		for j in range(len(s)): 
			# Check if jth bit is set in i 
			if (i & (1 << j)) > 0:
				temp = temp + s[j] 
		# Check if temp is palindrome
		if (temp == temp[::-1]):
			res.append(temp) 
	return res

print(palindromeArray("abacad")) 
# Output: ['a', 'aa', 'ada', 'aca', 'aba']
Write a function in Python which takes one string as input and checks if the string starts with a vowel. String "abc" def start_vowel(input_string):
    vowel_list = ["a", "e", "i", "o", "u"] 
    if input_string[0] in vowel_list: 
      print("String starts with a vowel") 
    else:
      print("String does not start with a vowel")

start_vowel("abc")
Use a given class to deserialize a JSON response into a Python dictionary. import json
from some_library import Deserializer

class MyDeserializer(Deserializer):
    pass

response = '{"data": "abc"}' class MyDeserializer(Deserializer):
    def deserialize(self, response):
        return json.loads(response)

deserializer = MyDeserializer()
deserialized_data = deserializer.deserialize(response)

print(deserialized_data)
Develop a text classification algorithm in Python using NLP techniques. Not applicable #import the necessary libraries
import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.ensemble import RandomForestClassifier

#load the data and split it into train and test sets
df = pd.read_csv('data.csv')
train_data = df[:int(df.shape[0]*0.7)]
test_data = df[int(df.shape[0]*0.7):]

#instantiate the CountVectorizer
vectorizer = CountVectorizer(stop_words='english', max_features=1000)

#fit and transform the training data
train_vectors = vectorizer.fit_transform(train_data['text'], train_data['label'])

#transform the test data
test_vectors = vectorizer.transform(test_data['text'])

#instantiate the RandomForestClassifier
classifier = RandomForestClassifier(n_estimators=10)

#fit the model to the training data
classifier.fit(train_vectors, train_data['label'])

#predict the class labels for the test data
predictions = classifier.predict(test_vectors)

#calculate and output the accuracy score
score = classifier.score(test_vectors, test_data['label'])
print("The accuracy score is: {:.2f}".format(score))
Generate a Python program to generate JSON output for reading all the records from a given table in the database. Sample table 1 with columns: id, name, and address import sqlite3
import json

conn = sqlite3.connect('database.db')
c = conn.cursor()
c.execute('SELECT * FROM table1 WHERE 1')
rows = c.fetchall()

data = []
for row in rows:
  record = {
    'id': row[0], 
    'name': row[1], 
    'address': row[2]
  }
  data.append(record)

json_data = json.dumps(data)
print(json_data)
Construct a python program which prints the reverse of the given string  def reverse_string(s): 
    string = "" 
    for i in s: 
        string = i + string 
    return string
Create a binary tree in Python.  class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left = None
        self.right = None
    
    def add_child(self, val):
        if self.val:
            if val < self.val:
                if self.left is None:
                    self.left = TreeNode(val)
                else:
                    self.left.add_child(val)
            elif val > self.val:
                if self.right is None:
                    self.right = TreeNode(val)
                else:
                    self.right.add_child(val)
        else:
            self.val = val
Create a Python program to filter out all negative numbers from a list.  def filter_negative(data):
    """Filters out all negative numbers from a list"""
    return [x for x in data if x >= 0]
Generate a program using Python that checks for duplicate values in a given list.  def contains_duplicates(given_list):
    seen = set()
    for x in given_list:
        if x in seen:
            return True
        seen.add(x)
    return False
Generate a binary tree with 4 levels in Python. Not applicable class Node: 
    def __init__(self, data): 
        self.data = data  
        self.left = None
        self.right = None
  
def generateTree(root, level): 
    if level == 1: 
        root.left = Node(2*level) 
        root.right = Node(2*level + 1) 
    else: 
        root.left = Node(2*level) 
        root.right = Node(2*level + 1) 
        generateTree(root.left, level-1) 
        generateTree(root.right, level-1)

root = Node(0) 
level = 4
generateTree(root, level)
Generate a Python script for a query to fetch data from a given MySQL table. Table Name: Products
Columns: product_id, name, price import mysql.connector

db = mysql.connector.connect(
 host="localhost",
 user="root",
 passwd="password",
 database="dbname"
)

mycursor = db.cursor()

sql = "SELECT product_id, name, price FROM Products"

mycursor.execute(sql)

myresult = mycursor.fetchall()

for row in myresult:
  print(row)
Build a tree structure for an online course program using HTML, CSS and JavaScript.  <html>
  <head>
    <title>Course Tree</title>
    <style>
      ul {
        list-style: none;
      }
    </style>
  </head>
  <body>
    <ul>
      <li>Programming
        <ul>
          <li>Python
            <ul>
              <li>Basics</li>
              <li>Data Structures</li>
              <li>Advanced Topics</li>
            </ul>
          </li>
          <li>Javascript
            <ul>
              <li>Basics</li>
              <li>Object Oriented Programming</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>Design 
        <ul>
          <li>UI/UX Design
            <ul>
              <li>Wireframing</li>
              <li>Prototyping</li>
              <li>Visual Design</li>
            </ul>
          </li>
          <li>Graphic Design
            <ul>
              <li>Logo Design</li>
              <li>Illustration</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </body>
</html>
Create a python code to remove duplicates from a given list while preserving the order.  def remove_duplicates(data):
    """Removes duplicates from a given list while preserving the order."""
    seen = set()
    result = []
    for x in data:
        if x not in seen:
            seen.add(x)
            result.append(x)
    return result
Develop an AI chatbot using Python and TensorFlow which interacts with the user to provide user-specific recommendations. Not applicable # Import the necessary packages
import tensorflow as tf
import numpy as np 
import pandas as pd 
import random

# Initialize the neural network
model = tf.keras.Sequential([ 
      tf.keras.layers.Dense(8, input_shape=(8,), activation='relu'), 
      tf.keras.layers.Dense(8, activation='relu'), 
      tf.keras.layers.Dense(1, activation='sigmoid') 
]) 

# Compile the model 
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy']) 

# Load the dataset 
x_data = pd.read_csv('data.csv')

# Train the model 
model.fit(x_data, epochs=10)

# Start a conversation
while True:
    user_input = input("User:")
    if user_input == "Goodbye":
        break
    else:
        # Generate a random response
        response_index = random.randint(0, len(responses) - 1)
        bot_response = responses[response_index]
        # Use the model to predict the user response to the bot's message
        prediction = model.predict([[user_input]])
        # If prediction is high, generate a recommendation
        if prediction[0][0] > 0.5:
            recommendation = generate_recommendation()
            bot_response = recommendation
        print("Bot:", bot_response)
Given a binary tree, you need to write a Python program to print out all the nodes at each level.  def print_level_order(root):
    if root is None:
        return

    queue = []

    queue.append(root)
    while(len(queue) > 0):
        print(queue[0].data, end=" ")
        node = queue.pop(0)

        if node.left is not None:
            queue.append(node.left)

        if node.right is not None:
            queue.append(node.right)
Can you design a function in Python which takes two string arguments and checks that two strings are anagrams or not? s1 = "restful"
s2 = "fluster" def is_anagram(str1, str2):
    if (len(str1) != len(str2)):
        return False
    
    list1 = sorted(list(str1)) 
    list2 = sorted(list(str2)) 
  
    for i in range(0, len(str1)): 
        if (list1[i] != list2[i]): 
            return False
  
    return True
Make a prediction model in Python and classify a given set of data into two different categories Data: 
[1, 2, 3, 4, 5]

Category 1: Even
Category 2: Odd def predict_model(arr):
    labels = []
    for num in arr:
        if num % 2 == 0:
            labels.append('Even')
        else:
            labels.append('Odd')
    return labels

result = predict_model([1, 2, 3, 4, 5])
print(result)
Generate a program which accepts a sentence as an input and returns the total number of characters in it? "<noinput>" # Python program to find number of characters in a sentence 
  
# Function to calculate number of characters 
def find_char(s): 
    return(len(s)) 
  
# Taking the sentence from the user 
str = input("Enter a sentence: ") 
  
# Calling the function 
count = find_char(str) 
  
# Printing the result 
print("Number of characters:", count)
Create a basic Machine Learning model in Python to predict the probability of click-throughs for an ad based on user data. Not applicable #load Libraries
import pandas as pd
from sklearn.model_selection import train_test_split

#load Data
data = pd.read_csv('user_data.csv')

#split Data
X = data[['age', 'gender', 'interest']]
y = data['click']
x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

#train Model
from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
model.fit(x_train, y_train)

#evaluate Model
from sklearn.metrics import accuracy_score

y_pred = model.predict(x_test)
print('Accuracy: ', accuracy_score(y_test, y_pred))
Write a Python program to filter out the words containing in a list that are 6 characters long. words = ['banana', 'apple', 'jacket', 'house', 'turtle'] filtered_words = [ word for word in words if len(word) == 6 ]
Create a regex pattern that matches two different words and prints out the second word if found. text = "Learn Python now or learn Java later pattern = r"learn (Python|Java) (\w+)" 
match = re.search(pattern, text) 
if match: 
    print(match.group(2)) # Prints "now" or "later"
Write a script in Python to filter out the strings containing the character 'x'. ['abc', 'efg', 'X', 'xyz', 'xabc'] def filter_x(list):
    new_list = []

    # iterate through the list 
    for i in list:
        if 'x' not in i:
            # add the string not containing x
            new_list.append(i)
    return new_list

list = ['abc', 'efg', 'X', 'xyz', 'xabc']
filtered_list = filter_x(list)
print("The list after filtering: ", filtered_list)
Create a Python class to implement linked list add, delete, and print functionalities.  class Node:
 def __init__(self, dataval=None):
   self.dataval = dataval
   self.nextval = None

class SLinkedList:
 def __init__(self):
  self.headval = None

# Function to add node
 def addNode(self, dataval):
  NewNode = Node(dataval)
  if self.headval is None:
   self.headval = NewNode
   return
  laste = self.headval
  while(laste.nextval):
   laste = laste.nextval
  laste.nextval=NewNode

# Function to print the linked list
 def listprint(self):
  printval = self.headval
  while printval is not None:
   print (printval.dataval),
   printval = printval.nextval

# Function to delete a node
 def DeleteNode(self, dataval):
  deletenode = self.headval
  if deletenode.dataval == dataval:
   self.headval = deletenode.nextval
   deletenode = None
   return

  prevnode = None
  while deletenode.dataval != dataval:
   prevnode = deletenode
   deletenode = deletenode.nextval

  prevnode.nextval = deletenode.nextval
  deletenode = None
Create a Python data structure to store customer details in a dictionary {
  "id": 1,
  "name": "John",
  "email": "john@example.com"
} customers = { 
  1: {
    "name": "John",
    "email": "john@example.com"
  }
}
How would you design a Python program that checks if a number is divisible by three? 45 def is_divisible(n):
    if n % 3 == 0:
        return True
    else:
        return False

num = 45
check_divisible = is_divisible(num)

if check_divisible:
    print("Number is divisible by three.")
else:
    print("Number is not divisible by three.")
Find all solutions to the rubik's cube using an algorithm in Python.  from collections import deque

# A state is represented as a dictionary
# Keys are upper-case letters R, L, U, etc.
# Values are 3-tuples of length, position, orientation
# Each 3-tuple corresponds to a row of length length,
#   which is positioned at position and oriented to orientation 
def gen_solve(state):
    # Generates a list of steps to solve the Rubiks Cube
    solve_steps = []
 
    # Search the tree to solve the Rubiks Cube
    search_queue = deque([state])
    while search_queue:
        cur_state = search_queue.popleft()
        # Generate the neighbors of the current state
        neighbors = generate_neighbors(cur_state)
        # Check each neighbor
        for neighbor in neighbors:
            # If the neighbor is the solved state,
            # add all the neighbor's parent steps to the result
            if is_solved(neighbor):
                solve_steps += get_parent_steps(neighbor)
            # Otherwise, add the neighbor's parent steps
            # and the neighbor to the queue
            else:
                search_queue.append(neighbor)
    return solve_steps
Write a function in Python that encodes a string using a simple algorithm. Text string:  "Hello" def encodeString (text):
    encoded_string = ''
    for char in text:
        encoded_char = ord(char) + 3
        encoded_string += chr(encoded_char)

    return encoded_string

encodeString("Hello")  # khoor
How could you remove duplicates from a list in Python?  """
Remove duplicates from a list in Python
"""

# Input list 
lst = [1, 1, 2, 3, 3, 4, 5, 5]

# Create a new list by converting the existing list to set 
new_lst = list(set(lst))

# Print the new list 
print(new_lst)  # Output: [1, 2, 3, 4, 5]
Write a class definition in Python for a custom object called “Employee”, which has two data members: “name”, a String, and “salary”, an integer.  class Employee: 
    def __init__(self, name, salary): 
        self.name = name 
        self.salary = salary 
  
# Driver Code  
e1 = Employee("John", 15000) 
e2 = Employee("Mary", 12000) 
  
print(e1.name) 
print(e1.salary)
Generate a Python class for a race car that has the attributes of engine, transmission, and color.  """
Generate a Python class for a race car that has the attributes of engine, transmission, and color
"""

class RaceCar:
    """
    A class to represent a race car with engine, transmission, and color attributes
    """
    
    def __init__(self, engine, transmission, color):
        """
        Initialize the race car with engine, transmission, and color attributes
        
        Parameters:
        engine (string): The type of engine
        transmission (string): The type of transmission
        color (string): The color of the car
        """
        self.engine = engine
        self.transmission = transmission
        self.color = color
    
    def __str__(self):
        """
        Return a string representation of the race car
        """
        return f"Race car with {self.engine} engine and {self.transmission} transmission; color is {self.color}"
Create a Python program to mark a character as asterisk (*) if it's the same as the previous one? test_string = "SSSSSSSSSShellllllllllllooooooooo" def mark_asterisk(input):
    res = ""
    temp = input[0]
    for char in input:
        if char == temp:
            res += '*'
        else:
            res += char
            temp = char
    return res
Create a program in Python using pygame library to build a simple game  import pygame
 
# Define some colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
 
# Call this function so the Pygame library can initialize itself
pygame.init()
 
# Create an 800x600 sized screen
screen = pygame.display.set_mode([800, 600])
 
# Set the title of the window
pygame.display.set_caption('My Game')
 
clock = pygame.time.Clock()
 
# Set positions of graphics
background_position = [0, 0]
 
# Load and set up graphics.
background_image = pygame.image.load("image.jpg").convert()
 
# Set positions of graphics
player_image = pygame.image.load("player.jpg").convert()
player_position = [100,100]
 
#Iterate through the loop until the user clicks the close button.
done = False
 
while not done:
    # --- Event Processing
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            done = True
 
        # --- Drawing Code    
    # First, clear the screen to white. 
    screen.fill(WHITE)
 
    #Draw the background
    screen.blit(background_image, background_position)
 
    #Draw the character
    screen.blit(player_image, player_position)
 
    # Go ahead and update the screen with what we've drawn.
    pygame.display.flip()
 
    # Limit frames per second
    clock.tick(60)
 
# Be IDLE friendly
pygame.quit()
Create a Python program to filter an array of numbers based on certain criteria. [1,2,3,4,5,6,7,8,9,10], Criteria: Greater than 5 def filter_numbers(numbers, criteria):
    filtered_numbers = []
    for number in numbers:
        if (criteria == 'greater than') and (number > 5):
            filtered_numbers.append(number)
    return filtered_numbers
 
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
filtered_numbers = filter_numbers(numbers, 'greater than')
print(filtered_numbers) #[6, 7, 8, 9, 10]
Construct a Python class named “Car” that has 3 fields: top_speed, make, and color.  class Car:
    def __init__(self, top_speed, make, color):
        self.top_speed = top_speed
        self.make = make
        self.color = color
This code defines a Python class for binding DNS policy labels to DNS policies. To use this code, import the necessary modules and create an instance of the dnspolicy_dnspolicylabel_binding class. Set the name and other properties of the DNS policy and use the get() method to retrieve the DNS policy label bindings. Use the count() method to count the number of DNS policy label bindings configured on the NetScaler. Use the count_filtered() method to count the number of filtered DNS policy label bindings.  #
# Copyright (c) 2008-2015 Citrix Systems, Inc.
#
#   Licensed under the Apache License, Version 2.0 (the "License")
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#

from nssrc.com.citrix.netscaler.nitro.resource.base.base_resource import base_resource
from nssrc.com.citrix.netscaler.nitro.resource.base.base_resource import base_response
from nssrc.com.citrix.netscaler.nitro.service.options import options
from nssrc.com.citrix.netscaler.nitro.exception.nitro_exception import nitro_exception

from nssrc.com.citrix.netscaler.nitro.util.nitro_util import nitro_util

class dnspolicy_dnspolicylabel_binding(base_resource) :
	""" Binding class showing the dnspolicylabel that can be bound to dnspolicy.
	"""
	def __init__(self) :
		self._boundto = ""
		self._priority = 0
		self._activepolicy = 0
		self._gotopriorityexpression = ""
		self._labeltype = ""
		self._labelname = ""
		self._name = ""
		self.___count = 0

	@property
	def boundto(self) :
		"""Location where policy is bound.
		"""
		try :
			return self._boundto
		except Exception as e:
			raise e

	@boundto.setter
	def boundto(self, boundto) :
		"""Location where policy is bound.
		"""
		try :
			self._boundto = boundto
		except Exception as e:
			raise e

	@property
	def name(self) :
		"""Name of the DNS policy.
		"""
		try :
			return self._name
		except Exception as e:
			raise e

	@name.setter
	def name(self, name) :
		"""Name of the DNS policy.
		"""
		try :
			self._name = name
		except Exception as e:
			raise e

	@property
	def priority(self) :
		"""Specifies the priority of the policy.
		"""
		try :
			return self._priority
		except Exception as e:
			raise e

	@property
	def labelname(self) :
		"""Name of the label to invoke if the current policy rule evaluates to TRUE.
		"""
		try :
			return self._labelname
		except Exception as e:
			raise e

	@property
	def gotopriorityexpression(self) :
		"""Expression specifying the priority of the next policy which will get evaluated if the current policy rule evaluates to TRUE.
		"""
		try :
			return self._gotopriorityexpression
		except Exception as e:
			raise e

	@property
	def labeltype(self) :
		"""Type of policy label invocation.<br/>Possible values = reqvserver, resvserver, policylabel.
		"""
		try :
			return self._labeltype
		except Exception as e:
			raise e

	@property
	def activepolicy(self) :
		"""Indicates whether policy is bound or not.
		"""
		try :
			return self._activepolicy
		except Exception as e:
			raise e

	def _get_nitro_response(self, service, response) :
		""" converts nitro response into object and returns the object array in case of get request.
		"""
		try :
			result = service.payload_formatter.string_to_resource(dnspolicy_dnspolicylabel_binding_response, response, self.__class__.__name__)
			if(result.errorcode != 0) :
				if (result.errorcode == 444) :
					service.clear_session(self)
				if result.severity :
					if (result.severity == "ERROR") :
						raise nitro_exception(result.errorcode, str(result.message), str(result.severity))
				else :
					raise nitro_exception(result.errorcode, str(result.message), str(result.severity))
			return result.dnspolicy_dnspolicylabel_binding
		except Exception as e :
			raise e

	def _get_object_name(self) :
		""" Returns the value of object identifier argument
		"""
		try :
			if (self.name) :
				return str(self.name)
			return None
		except Exception as e :
			raise e



	@classmethod
	def get(cls, service, name) :
		""" Use this API to fetch dnspolicy_dnspolicylabel_binding resources.
		"""
		try :
			obj = dnspolicy_dnspolicylabel_binding()
			obj.name = name
			response = obj.get_resources(service)
			return response
		except Exception as e:
			raise e

	@classmethod
	def get_filtered(cls, service, name, filter_) :
		""" Use this API to fetch filtered set of dnspolicy_dnspolicylabel_binding resources.
		Filter string should be in JSON format.eg: "port:80,servicetype:HTTP".
		"""
		try :
			obj = dnspolicy_dnspolicylabel_binding()
			obj.name = name
			option_ = options()
			option_.filter = filter_
			response = obj.getfiltered(service, option_)
			return response
		except Exception as e:
			raise e

	@classmethod
	def count(cls, service, name) :
		""" Use this API to count dnspolicy_dnspolicylabel_binding resources configued on NetScaler.
		"""
		try :
			obj = dnspolicy_dnspolicylabel_binding()
			obj.name = name
			option_ = options()
			option_.count = True
			response = obj.get_resources(service, option_)
			if response :
				return response[0].__dict__['___count']
			return 0
		except Exception as e:
			raise e

	@classmethod
	def count_filtered(cls, service, name, filter_) :
		""" Use this API to count the filtered set of dnspolicy_dnspolicylabel_binding resources.
		Filter string should be in JSON format.eg: "port:80,servicetype:HTTP".
		"""
		try :
			obj = dnspolicy_dnspolicylabel_binding()
			obj.name = name
			option_ = options()
			option_.count = True
			option_.filter = filter_
			response = obj.getfiltered(service, option_)
			if response :
				return response[0].__dict__['___count']
			return 0
		except Exception as e:
			raise e

	class Labeltype:
		reqvserver = "reqvserver"
		resvserver = "resvserver"
		policylabel = "policylabel"

class dnspolicy_dnspolicylabel_binding_response(base_response) :
	def __init__(self, length=1) :
		self.dnspolicy_dnspolicylabel_binding = []
		self.errorcode = 0
		self.message = ""
		self.severity = ""
		self.sessionid = ""
		self.dnspolicy_dnspolicylabel_binding = [dnspolicy_dnspolicylabel_binding() for _ in range(length)]


Create a RESTful API endpoint in Python with Flask that returns a list of items. The endpoint should return a list of books (with fields for title and author). from flask import Flask, jsonify

app = Flask(__name__)

@app.route('/books', methods=['GET'])
def get_books():
 books = [
 {
 'title': 'The Great Gatsby',
 'author': 'F. Scott Fitzgerald'
 },
 {
 'title': 'The Catcher in the Rye',
 'author': 'J. D. Salinger'
 },
 {
 'title': 'To Kill a Mockingbird',
 'author': 'Harper Lee'
 }
 ]
 
 return jsonify(books)

if __name__ == '__main__':
 app.run(debug=True)
Write a Python program to remove the characters which have odd index values of a given string. Hello World def remove_odd_index_characters(string):
    result = ""
    for i in range(len(string)):
        if i % 2 == 0:
            result += string[i]
    return result

print(remove_odd_index_characters("Hello World"))
Design an artificial neural network that recognizes handwritten digits using Keras and Python. Not applicable import keras
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers.convolutional import Conv2D, MaxPooling2D

# Load the MNIST data set
from keras.datasets import mnist
(train_images, train_labels), (test_images, test_labels) = mnist.load_data()

# Rescale images to value between 0 and 1
train_images = train_images / 255
test_images = test_images / 255

# dtype is based on data type of input images
train_images = train_images.astype('float32')
test_images = test_images.astype('float32')

# Reshape the data
train_images = train_images.reshape(60000, 28, 28, 1)
test_images = test_images.reshape(10000, 28, 28, 1)

# Label encoding
train_labels = keras.utils.to_categorical(train_labels, 10)
test_labels = keras.utils.to_categorical(test_labels, 10)

# Model Architecture Design
model = Sequential()
model.add(Conv2D(32, kernel_size=(3, 3),
                  activation='relu',
                  input_shape=(28, 28, 1)))
model.add(MaxPooling2D())
model.add(Flatten())
model.add(Dense(128, activation='relu'))

# Add a softmax layer with 10 output units:
model.add(Dense(10, activation='softmax'))

# Compile the model
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

# Train the model
model.fit(train_images, train_labels, epochs=5)

# Test the model
model.evaluate(test_images, test_labels)
Code a basic genetic algorithm in Python that solves a mathematical equation. Equation: x^2 + x = 13 import random

# Define the equation
def calc_fitness(x): 
 return x**2 + x - 13

# Initialize the population
population = []

for _ in range(10):
 population.append(random.uniform(0, 10))

# Define the mutation function
def mutate(x):
 return x + random.uniform(-1, 1)

# Perform genetic algorithm
while True:
 # Calculate the fitness of each chromosome in the population
 population_fitness = [calc_fitness(x) for x in population]

 # Check if any chromosome matches the equation
 if 0 in population_fitness:
  break

 # Select the fittest chromosome
 fittest_idx = population_fitness.index(min(population_fitness))
 fittest = population[fittest_idx]

 # Create a new generation by mutating the fittest chromosome
 new_generation = [mutate(fittest) for _ in range(10)]

 # Replace the old population with the new one
 population = new_generation

# Print the fittest chromosome
print(f'Solution: {fittest}')
Write a Python script to read an array from the user and then determine the mean and median of the array. arr = [10, 15, 20, 25, 30, 35] def mean_median(arr): 
      arr_sum = 0 
      for i in range(len(arr)): 
            arr_sum += arr[i] 
      
      mean = arr_sum/len(arr) 
    
      arr = sorted(arr) 
      if len(arr) % 2 != 0: 
            median = arr[floor(len(arr)/2)] 
      else: 
            median = (arr[len(arr)//2] + arr[len(arr)//2 - 1]) / 2
      
      return mean, median

mean, median = mean_median(arr) 
print("Mean =", mean) 
print("Median =", median)
Write a Python function that selects which kind of data type (float, integer, string) each element of a list is.  def infer_data_type(my_list):
    output_list = []
    for item in my_list:
        if type(item) == int:
            output_list.append('integer')
        elif type(item) == float:
            output_list.append('float')
        else:
            output_list.append('string')
    return output_list
Create a Python program that generates a random number between 5-15.  import random

x = random.randint(5,15)
print(x)
Craft a Python program to extract characters from the odd positions of a given string.  def extract_odd_pos(string):
    odd_position = ""
    for i in range(len(string)):
        if i%2 == 0:
            odd_position += string[i]
    return odd_position
Change the following Python code to work with python 3 and print output “My name is Mary”. print 'My name is Mary' print('My name is Mary')
Create a Python script to parse the given HTML page. <html>
    <head>
        <title>Parsing example</title>
    </head>
    <body>
        <h1>Heading</h1>
        <ul>
            <li>Item 1</li>
            <li>Item 2</li>
        </ul>
        <p>This is a paragraph.</p>
    </body>
</html> from bs4 import BeautifulSoup

html_doc = """
<html>
    <head>
        <title>Parsing example</title>
    </head>
    <body>
        <h1>Heading</h1>
        <ul>
            <li>Item 1</li>
            <li>Item 2</li>
        </ul>
        <p>This is a paragraph.</p>
    </body>
</html>
"""

soup = BeautifulSoup(html_doc, 'html.parser')

heading = soup.find("h1").get_text()
items = soup.find_all("li")
para = soup.find("p").get_text()

print("Heading: " + heading)
print("Items:")
for item in items:
    print("- " + item.get_text())
print("Paragraph: " + para)
Create a function in Python to tokenize an English sentence.  """
Tokenize an English sentence
"""

import nltk

def tokenize(sentence):
    tokens = nltk.word_tokenize(sentence)
    return tokens

if __name__ == '__main__':
    sentence = "This is a sentence."
    print(tokenize(sentence))
Create a Python program that scrapes data from a web page and stores the data in a spreadsheet. Not applicable import requests
from lxml import html
import openpyxl

# Setup the web page URL
url = 'https://example.com/data.html'

# Scrape the web page
response = requests.get(url)
html_data = html.fromstring(response.text)

# Create an Excel workbook
wb = openpyxl.Workbook()
sheet = wb.active

# Read the data from the web page and store it in the workbook
data_table = html_data.xpath('//table')
for i, row in enumerate(data_table[0].xpath('./tbody/tr'), 1):
 for j, cell in enumerate(row.xpath('./td'), 1):
 sheet.cell(row=i, column=j, value=cell.text_content().strip())

# Save the workbook
wb.save("data.xlsx")
Write a function in Python that takes in two numbers and finds the greatest common divisor of them.  def gcd(a, b): 
    if b == 0: 
        return a 
    return gcd(b, a % b) 

a = 10
b = 25
print ("GCD of", a, "and", b, "=", gcd(a, b))
Create a Python program to copy elements of one array into another array. Array 1=[1,2,3,4] array_1 = [1,2,3,4] 
array_2 = [] 
  
# Copying all the elements 
for i in range(0, len(array_1)): 
    array_2.append(array_1[i]) 
     
print ("Elements Copied from the Array1 to Array2 are : " + str(array_2))
Create a Python program to optimize the running time of a program using memoization. # k: as an input parameter
# f: a recursive function def memoize(f, k):
    memo = dict()
 
    def helper(x):
        if x not in memo:            
            memo[x] = f(x)
        return memo[x]
 
    return helper(k)
Generate a python program to swap the first and last element of a list list_of_numbers = [4, 5, 7, 8, 6] def swap(list_of_numbers):
    list_of_numbers[0], list_of_numbers[-1] = list_of_numbers[-1], list_of_numbers[0]
    return list_of_numbers
Create a HTML page to explain why a particular programming language is the best choice.  <html>
<head>
  <title>Why Choose Python programming language?</title>
  <style>
    body { background-color: #eeeeee; }
  </style>
</head>
<body>
  <h1>Why Choose Python programming language?</h1>
  <p>
    Python is a highly popular programming language that is used for many tasks, from web development to data science. It is versatile, user-friendly and easy to learn. The language has an extensive library of modules for different tasks, which make it great for developing complex applications quickly. Its syntax is simple and concise and it is great for rapid prototyping. Its strong support for object oriented programming makes it a great choice for developers who want to develop robust and divided applications.
  </p>
</body>
</html>
Create a list of all prime numbers from 1 to 1000 using Python.  # Create an empty list 
prime_list = []

# loop 1 to 1000
for num in range(2,1001):
    prime = True
    for i in range(2,num):
        if (num % i == 0):
           prime = False
    if prime:
       prime_list.append(num)

print("Prime numbers from 1 to 1000 are:")
print(prime_list)
Write a Python program to scroll a given message on the console. message = 'Hello World!' def scrollMessage(message): 
    for char in message: 
        for i in range(100): 
            print (char, end = " ")
        print("")


# Input
message = 'Hello World!'

# Output
scrollMessage(message)
Design a Python class that represents a taxi.  class Taxi:
    
    def __init__(self, capacity, license_number):
        self.capacity = capacity
        self.license_number = license_number
        self.passengers = []
    
    def add_passenger(self, passenger):
        if self.capacity > len(self.passengers):
            self.passengers.append(passenger)
            return True
        else:
            return False
Write a Python script to consume a web API and create a visualization. Example web API - https://jsonplaceholder.typicode.com/todos import requests
import matplotlib.pyplot as plt

# Make a GET request to the API.
response = requests.get('https://jsonplaceholder.typicode.com/todos')

# Create an empty dictionary to store userID's and the number of their completed todos.
completed_todos_by_user = {}

# Loop through the response data to count completed todos for each userID.
for todo in response.json():
    if (todo['completed']):
        try:
            completed_todos_by_user[todo['userId']] += 1
        except KeyError:
            completed_todos_by_user[todo['userId']] = 1

# Create a list of x values (userID's) and a list of y values (total completed todos).
x_values = list(completed_todos_by_user.keys())
y_values = list(completed_todos_by_user.values())

# Create a bar chart to demonstrate the data.
plt.bar(x_values, y_values)
plt.title('Completed Todos by User')
plt.xlabel('UserID')
plt.ylabel('Completed Todos')
plt.show()
Using the data provided, write a Python program to find and print the root of the quadratic equation ax2 + bx + c = 0 a = 1, b = 5, c = 6 import math

a = 1
b = 5
c = 6

# calculate the discriminant
d = (b**2) - (4*a*c)

# find the two solutions 
sol1 = (-b-math.sqrt(d))/(2*a)
sol2 = (-b+math.sqrt(d))/(2*a)

print('The solutions are {0} and {1}'.format(sol1, sol2))
Create an algorithm in Python for counting the number of islands in a given grid. An island is defined as a group of 1's (land) connected horizontally or vertically. [[1, 1, 0, 0, 0],
 [0, 1, 0, 0, 1],
 [1, 0, 0, 1, 1],
 [0, 0, 0, 0, 0],
 [1, 0, 1, 0, 1]] def countIslands(grid):
 count = 0

 for i in range(len(grid)):
  for j in range(len(grid[0])):
   if grid[i][j] == 1:
    dfs(grid, i, j)
    count += 1

 return count

def dfs(grid, r, c):
 if r < 0 or c < 0 or r >= len(grid) or c >= len(grid[0]) or grid[r][c] == 0:
  return
 grid[r][c] = 0
 dfs(grid, r+1, c)
 dfs(grid, r, c+1)
 dfs(grid, r-1, c)
 dfs(grid, r, c-1)

print(countIslands([[1, 1, 0, 0, 0],
                    [0, 1, 0, 0, 1],
                    [1, 0, 0, 1, 1],
                    [0, 0, 0, 0, 0],
                    [1, 0, 1, 0, 1]]))
// Output: 5
Generate Python code to get all unique items in a nested dictionary. dict1 = {
    "key1": [1,2],
    "key2": [2,3],
    "key3": {
        "key4": [3,4]
    }
} def get_all_keys(input_dict):
    keys = set()
    if isinstance(input_dict, dict):
        keys.update(input_dict.keys())
        for v in input_dict.values():
            keys.update(get_all_keys(v))
    return keys

dict1 = {
    "key1": [1,2],
    "key2": [2,3],
    "key3": {
        "key4": [3,4]
    }
}

unique_items = get_all_keys(dict1)
print(unique_items)
Generate a python program to build a REST API to perform CRUD operations on a database table named 'products'.  import flask
from flask import request, jsonify
import sqlite3

app = flask.Flask(__name__)
app.config["DEBUG"] = True

def dict_factory(cursor, row):
    d = {}
    for idx, col in enumerate(cursor.description):
        d[col[0]] = row[idx]
    return d

@app.route('/', methods=['GET'])
def home():
    return '''<h1>Products REST API</h1>
<p>A prototype API for products.</p>'''

@app.route('/api/v1/resources/products/all', methods=['GET'])
def api_all():
    conn = sqlite3.connect('products.db')
    conn.row_factory = dict_factory
    cur = conn.cursor()
    all_products = cur.execute('SELECT * FROM products;').fetchall()
    return jsonify(all_products)

@app.route('/api/v1/resources/products/create', methods=['POST'])
def api_create():
    data = request.get_json()
    name = data['name']
    price = data['price']
    description = data['description']
    
    conn = sqlite3.connect('products.db')
    cur = conn.cursor()
    cur.execute('INSERT INTO products (name, price, description) VALUES (?, ?, ?)', (name, price, description))
    conn.commit()
    return jsonify({'status': 'success'})

@app.route('/api/v1/resources/products/update/<int:id>', methods = ['PUT'])
def api_update(id):
    data = request.get_json()
    name = data['name']
    price = data['price']
    description = data['description']
    
    conn = sqlite3.connect('products.db')
    cur = conn.cursor()
    cur.execute('UPDATE products SET name=?, price=?, description=? where id=?', (name, price, description, id))
    conn.commit()
    return jsonify({'status': 'success'})

@app.route('/api/v1/resources/products/delete/<int:id>', methods = ['DELETE'])
def api_delete(id):
    conn = sqlite3.connect('products.db')
    cur = conn.cursor()
    cur.execute('DELETE FROM products WHERE id=?', (id, ))
    conn.commit()
    return jsonify({'status': 'success'})

app.run()
Create a method in Python to sort all the elements in the given dictionary in descending order of the values. dictionary = {"A": 30, "B": 40, "C": 20} def sortByValue(dictionary):
    sorted_dict = dict(sorted(dictionary.items(), key=lambda x: x[1], reverse=True))
    return sorted_dict

dictionary = {"A": 30, "B": 40, "C": 20}
result = sortByValue(dictionary)
print(result) # prints {'B': 40, 'A': 30, 'C': 20}
Convert the following code from python 2.x to python 3.x. import csv
csvReader = csv.reader(open("filename.csv", "rb")) import csv

with open("filename.csv", 'r', newline='') as f:
    csvReader = csv.reader(f)
Write a Python class that takes 2 strings as arguments and prints them out in a concatenated form. string1 = "Hello" 
string2 = "World" class ConcatStrings:
    def __init__(self, string1, string2):
        self.string1 = string1
        self.string2 = string2

    def print_concat(self):
        print(self.string1 + self.string2)
Create an algorithm in Python to show all the prime numbers from 0 to 1000.  def is_prime(num): 
    if num <= 1:
        return False 
    for i in range(2,num): 
        if num % i == 0:
            return False 
    return True

for num in range(0,1001):
    if is_prime(num): 
        print(num)
Transform the code snippet into a Python class. def multiply(x, y):
    return x * y class Calculator:
    def __init__(self):
        pass

    def multiply(self, x, y):
        return x * y
Create an object-oriented Python program to display an employee's details  class Employee:

    def __init__(self, name, address, salary):
        self.name = name
        self.address = address
        self.salary = salary
    
    def displayEmployeeDetails(self):
        # This method prints employee details

        print("Employee Details -")
        print("Name: {}".format(self.name))
        print("Address: {}".format(self.address))
        print("Salary: {}".format(self.salary))

employee = Employee("John Doe", "NYC", "10000")
employee.displayEmployeeDetails()
Write a Python program to print out the ASCII table.  def print_ascii_table():
    for i in range(32, 127):
        print(f"Character:{chr(i)}, ASCII Number:{i}")
Create a Python program that takes a number as an input and computes the factorial of that number. 7 def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)
    
num = 7
result = factorial(num)
print(result)
Create a Python program which takes two parameters and outputs the difference between them. 21, 49 def diff(a, b): 
   return abs(a - b) 
  
a = 21
b = 49
  
print(diff(a, b)) # Output 28
Can you generate a Python program that takes a string as input and returns a dictionary with the count of each letter in the string? "hello world" def letter_count(s):
    count = {}
    for c in s:
        if c not in count:
            count[c] = 1
        else:
            count[c] += 1
    return count

s = "hello world"
count = letter_count(s)
print(count) # {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}
Generate a classification model to classify spam messages using logistic regression in python.  """
Generate a classification model to classify spam messages using logistic regression in python
"""

# Import libraries
import pandas as pd
from sklearn.model_selection import train_test_split 
from sklearn.linear_model import LogisticRegression 

# Read the dataset
dataset = pd.read_csv('spam.csv')

# Split the dataset into features and labels
X = dataset.iloc[:, :-1].values 
y = dataset.iloc[:, -1].values

# Split the dataset into training and test data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=1)

# Create a Logistic Regression model and train it
log_reg = LogisticRegression() 
log_reg.fit(X_train, y_train)

# Calculate the accuracy score
accuracy = log_reg.score(X_test, y_test)

print('Accuracy of logistic regression classifier on test set: {:.2f}'.format(accuracy))
Write a Python code to compute the average of all numbers in a list. numbers = [2, 8, 4, 3] def average(numbers):
    total = 0
    for num in numbers:
        total += num
    return total / len(numbers)
Write a Python function to perform a linear search in a given array. array = [2, 3, 41, 64, 1, -5]
target = -5 def linear_search(arr, target):  
    for i in range(len(arr)): 
        if arr[i] == target: 
            return i 
    return -1
Develop an algorithm to print all permutations of a given string in Python. Not applicable def permute(s):
    if len(s) == 1:
        return [s]
    permutations = []
    for i, a in enumerate(s):
        others = s[:i] + s[i+1:]
        for p in permute(others):
            permutations.append(a + p)
    return permutations
Create a program to merge two sorted arrays in Python. [3, 5, 7], [1, 2, 4] def mergeSortedArrays(arr1, arr2):
    l1 = len(arr1)
    l2 = len(arr2)
    l = l1 + l2
    arr = [0] * l

    i = 0
    j = 0
    k = 0

    while (i < l1 and j < l2):
        if (arr1[i] < arr2[j]):
            arr[k] = arr1[i]
            k = k + 1
            i = i + 1
        else:
            arr[k] = arr2[j]
            k = k + 1
            j = j + 1

    while (i < l1):
        arr[k] = arr1[i]
        k = k + 1
        i = i + 1

    while (j < l2):
        arr[k] = arr2[j]
        k = k + 1
        j = j + 1

    return arr

arr1 = [3, 5, 7] 
arr2 = [1, 2, 4] 

print(mergeSortedArrays(arr1, arr2))
Write a Python program to create a string from the last 3 characters of a given string.  def last_characters(string):
 return string[-3:]
Develop an algorithm in Python to find the number of combinations for selecting a team of 8 members out of 20 people.  def combination_of_team(n, k):
    return math.factorial(n)//(math.factorial(k)*math.factorial(n-k))

team_members = 8
total_members = 20

print(combination_of_team(total_members, team_members))
Create a neural network in Python to predict the type of flower given a set of attributes.  import numpy as np
import keras
from keras.models import Sequential
from keras.layers import Dense

# Create a Sequential model
model = Sequential()

# Add a hidden layer
model.add(Dense(20, input_dim=8, kernel_initializer='uniform', activation='relu'))

# Add an output layer
model.add(Dense(3, kernel_initializer='uniform', activation='softmax'))

# Compile the model
model.compile(optimizer=keras.optimizers.Adam(), loss=keras.losses.categorical_crossentropy, metrics=['acc'])

# Fit the model
model.fit(X_train, y_train, batch_size=64, epochs=10, validation_data=(X_test, y_test))
Given two unsorted lists, create a Python program to identify the common elements between them. list1 = [5, 3, 2, 6, 8, 9] 
list2 = [4, 2, 1, 6, 7] def common_elements(list1, list2):
 return [element for element in list1 if element in list2]

common_elements(list1, list2) # Output: [2, 6]
Create a web crawler in Python to find a specific keyword on webpages. keyword = "python" import urllib.request
from bs4 import BeautifulSoup

# target url
url = 'https://www.example.com/'

# create request and obtain html
page = urllib.request.urlopen(url)
html_doc = page.read()

soup = BeautifulSoup(html_doc, 'html.parser')
keywords = soup.find_all(string = lambda text: keyword in text)

# print all sites containing the given keyword
for keyword in keywords:
 print(keyword)
Create a Python script that sets up a communication class and an execution handler to receive and execute instructions from an OCaml process. The script should include methods to convert integers to 8-byte signed integers, convert Python objects to BSON format, and resolve arguments passed to methods. The script should also handle exceptions and send return values back to the OCaml process. Finally, the script should accept command line arguments for the working directory, read pipe path, and write pipe path.  

from time import time
from struct import pack, unpack
import bson, sys, os, codecs
from random import randint
from traceback import print_exc

def int_to_int64_bytes(i):
	return pack('>q', i)

def py_to_bson(val):
	if type(val) is int:
		return bson.int64.Int64(val)
	if sys.version_info.major == 2 and type(val) is str:
		return bson.binary.Binary(val)
	return val

def exit_lymp():
	# closing 'python_log'
	sys.stdout.close()
	exit(0)

# A communication class, could be implemented using other ipc methods,
# it only needs the methods 'send_bytes' and 'get_bytes'
class PipeReaderWriter:

	def __init__(self, read_pipe_name, write_pipe_name):
		self.get_pipes(read_pipe_name, write_pipe_name)

	def get_pipes(self, read_pipe_name, write_pipe_name):
		# Order of open matters, since it is blocking, should match OCaml order
		# 0 to be unbuffered, so we don't have to flush (better performance ?)
		self.write_pipe = open(write_pipe_name, 'wb', 0)
		self.read_pipe = open(read_pipe_name, 'rb', 0)

	def send_bytes(self, byts):
		# '>q' to force signed 8 bytes integer
		self.write_pipe.write(pack('>q', len(byts)))
		#self.write_pipe.flush()
		self.write_pipe.write(byts)
		#self.write_pipe.flush()

	def get_bytes(self):
		# '>q' to force signed 8 bytes integer
		try:
			nb_bytes = unpack('>q', self.read_pipe.read(8))[0]
		except:
			# ocaml process has been terminated
			exit_lymp()
		byts = b'' if sys.version_info.major == 3 else ""
		while len(byts) < nb_bytes:
			byts += self.read_pipe.read(nb_bytes)
		return byts

class ExecutionHandler:

	to_ret_types = {
		int: "i",
		tuple: "t",
		list: "l",
		str: "s",
		float: "f",
		type(None): "n",
		bool: "b",
		bytes: "B"
	}
	# for python 2, unicode is str and str is bytes
	if sys.version_info.major == 2:
		to_ret_types[unicode] = "s"
		to_ret_types[str] = "B"

	def __init__(self, reader_writer):
		self.reader_writer = reader_writer
		self.modules = {}
		self.objs = {}
		self.ref_nb = 0

	def loop(self):
		# don't recursively call .loop, to avoid stack overflow
		while True:
			command_bytes = self.reader_writer.get_bytes()
			if command_bytes == b'done':
				exit_lymp()
			instruction = bson.BSON.decode(bson.BSON(command_bytes))
			try:
				ret = self.execute_instruction(instruction)
				# data may still be in the buffer
				sys.stdout.flush()
				self.send_ret(ret, ret_ref=("R" in instruction))
			except BaseException as e:
				# exception whilst executing, inform ocaml side
				print_exc()
				# data may still be in the buffer
				sys.stdout.flush()
				self.send_ret("", exception=True)

	def ret_to_msg(self, ret, ret_ref):
		msg = {}
		# reference (type not supported or explicitely asked to)
		if ret_ref or (type(ret) not in self.to_ret_types):
			self.ref_nb += 1
			self.objs[self.ref_nb] = ret
			msg["t"] = "r"
			msg["v"] = bson.code.Code(str(self.ref_nb))
		else:
			msg["t"] = self.to_ret_types[type(ret)]
			# tuples are just like lists, but their type "t" is "t" instead of "l"
			if type(ret) is tuple:
				ret = list(ret)
			# if type is list, further resolve
			if type(ret) is list:
				msg["v"] = []
				for elt in ret:
					# ret_ref is false here (would not be in the else otherwise)
					msg["v"].append(self.ret_to_msg(elt, False))
			else:
				msg["v"] = py_to_bson(ret)
		return msg

	def send_ret(self, ret, exception=False, ret_ref=False):
		if exception:
			msg = {}
			msg["t"] = "e"
			msg["v"] = ""
		else:
			msg = self.ret_to_msg(ret, ret_ref)
		msg = bytes(bson.BSON.encode(msg))
		self.reader_writer.send_bytes(msg)

	def resolve_args(self, args):
		named = {}
		i = 0
		for arg in args:
			# resolve named args (list of size 2, first one being a bson.code.Code starting with "!")
			if type(arg) is list and len(arg) == 2 and type(arg[0]) is bson.code.Code and str(arg[0])[0] == "!":
				named[str(arg[0])[1:]] = self.resolve_args([arg[1]])[0][0]
				del args[i]
				continue
			# if bytes
			if type(arg) is bson.binary.Binary:
				args[i] = bytes(arg)
			# resolve reference args (using bson jscode)
			if type(arg) is bson.code.Code:
				args[i] = self.objs[int(arg)]
			if type(arg) is bson.int64.Int64:
				args[i] = int(arg)
			# for python 2, if arg is str, convert to unicode
			if sys.version_info.major == 2 and type(arg) is str:
				args[i] = args[i].decode('utf-8')
			# for python 2, if arg is bytes, convert to str
			if sys.version_info.major == 2 and type(arg) is bson.binary.Binary:
				args[i] = str(arg)
			# if we have a list, we must recursively resolve
			if type(arg) is list:
				args[i] = self.resolve_args(arg)[0]
			# if we have a dict, it is a tuple inside "v"
			if type(arg) is dict:
				args[i] = tuple(self.resolve_args(arg["v"])[0])
			i += 1
		return args, named

	def execute_instruction(self, instruction):
		if "r" in instruction:
			# if we are asked to realease an inexisting of already released reference
			if "d" in instruction and instruction["r"] not in self.objs:
				return None
			# module is the object referenced, later we call getattr to get the method called
			module = self.objs[instruction["r"]]
			# if we were asked to 'detach' (release) the reference
			if "d" in instruction:
				del self.objs[instruction["r"]]
				return None
			# if we were asked to return the reference
			if "g" in instruction:
				return module
		else:
			# python 2 builtin module has a different name
			if sys.version_info.major == 2 and instruction["m"] == "builtins":
				instruction["m"] = "__builtin__"
			if instruction["m"] not in self.modules:
				__import__(instruction["m"])
				self.modules[instruction["m"]] = sys.modules[instruction["m"]]
			module = self.modules[instruction["m"]]
		# set attribute
		if "s" in instruction:
			args, named = self.resolve_args(instruction["a"])
			arg = args[0]
			setattr(module, instruction["f"], arg)
			return None
		func_or_attr = getattr(module, instruction["f"])
		# get attribute
		if "t" in instruction:
			return func_or_attr
		args = instruction["a"]
		args, named = self.resolve_args(args)
		ret = func_or_attr(*args, **named)
		return ret

working_directory = sys.argv[1]
write_pipe_path = sys.argv[2]
read_pipe_path = sys.argv[3]
# changing dir
os.chdir(working_directory)
sys.path.insert(0, working_directory)
# redirect stdout to 'python_log'
sys.stdout = codecs.open('python_log', 'w', encoding='utf-8')
sys.stderr = sys.stdout
communication = PipeReaderWriter(read_pipe_path, write_pipe_path)
handler = ExecutionHandler(communication)
handler.loop()

Implement a stack class in Python.  class Stack:
    def __init__(self):
        self.stack = []
 
    def push(self, x):
        self.stack.append(x)
 
    def pop(self):
        if self.stack == []:
            raise IndexError("pop from an empty stack")
        else:
            return self.stack.pop()
 
    def is_empty(self):
        return self.stack == []
Write a Python program to calculate the total cost of a shopping cart. The program should consider the item prices, quantity, shipping cost, and any applicable taxes. [ 
 {"name": "widget", "price": 10, "quantity": 5 },
 {"name": "thingy", "price": 7, "quantity": 3 },
 {"name": "doodad", "price": 5, "quantity": 2 },
]
Shipping cost: 7.50
Tax rate: 9.5% items = [
 {"name": "widget", "price": 10, "quantity": 5 },
 {"name": "thingy", "price": 7, "quantity": 3 },
 {"name": "doodad", "price": 5, "quantity": 2 },
]

taxRate = 0.095
shippingCost = 7.50

totalCost = 0

for item in items:
 totalCost += item['price'] * item['quantity']

totalCost += totalCost * taxRate
totalCost += shippingCost

print('Total cost:', totalCost)
Given a list of numbers in an array, use the Python slice operator to return the last five elements of the array. [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
b = a[-5:]
print(b)  # [6, 7, 8, 9, 10]
Create an optimization algorithm in Python which finds the smallest number in an array of integers. [20, 8, 7, 22, 32] def find_smallest_int(arr):
    smallest_num = arr[0]
    for num in arr:
        if num < smallest_num:
            smallest_num = num
    return smallest_num
 
arr = [20, 8, 7, 22, 32]
smallest_num = find_smallest_int(arr)
 
print("The smallest number is", smallest_num)
Improve this Python function to double the input array. def double_array(arr):
    return arr def double_array(arr):
    return [element * 2 for element in arr]
Create a functional web scraping application with Python using Scrapy. The application should scrape news headlines from BBC News. Not applicable import scrapy

class BbcSpider(scrapy.Spider):
 name = 'bbc'
 start_urls = ['http://www.bbc.com/news']

def parse(self, response):
 for headline in response.css('h3.align-left'):
 yield {
 'headline': headline.css('a ::text').extract_first(),
 }

next_page = response.css('.load-more__button ::attr(href)').extract_first()
if next_page is not None:
 yield response.follow(next_page, callback=self.parse)
Write an algorithm in Python to merge two sorted lists. list_1 = [3, 5, 7, 11]
list_2 = [2, 4, 6, 8] def merge_list(list_1, list_2):
  merged_list =[]
  while list_1 and list_2:
    if list_1[0] < list_2[0]:
      merged_list.append(list_1.pop(0))
    else:
      merged_list.append(list_2.pop(0))
  merged_list.extend(list_1 if list_1 else list_2)
  return merged_list
Create a program in Python to print all elements of a given set. {10, 20, 30} my_set = {10, 20, 30}
for i in my_set:
    print(i)
Create a code selector for Python.  import tkinter as tk

#Create root window
window = tk.Tk()
window.title('Python Code Selector')

#Create a selection frame
selection_frame = tk.Frame(window, bd=2, relief=tk.SUNKEN)
selection_frame.pack(fill = tk.X)

languages = ['Python 2.7', 'Python 3.4', 'Python 3.6', 'Python 3.7']

#Create a variable to store current language
language_var = tk.StringVar(selection_frame)
language_var.set(languages[0])

#Create a pull down menu
language_dropdown = tk.OptionMenu(selection_frame, language_var, *languages)
language_dropdown.pack(side=tk.LEFT)

#Create a button to accept the selection
accept_button = tk.Button(selection_frame, text='Accept', command=accept_selection)
accept_button.pack(side=tk.RIGHT)

#Create a function to accept the selection
def accept_selection():
	print(language_var.get())

window.mainloop()
Develop a function to delete duplicates from a given string in Python. string="mississippi" def remove_duplicates(string):
    new_string = ""
    for char in string:
        if char not in new_string:
            new_string += char
    return new_string

no_duplicates = remove_duplicates("mississippi")
print(no_duplicates)
Optimize the following python program and reduce its runtime. def find_min(lst):
    return min(lst)

list = [2, 3, 8, 4, 5] def find_min(lst):
    min_val = lst[0]
    for value in lst[1:]:
        if value < min_val:
            min_val = value
    return min_val

list = [2, 3, 8, 4, 5]
Generate an algorithm in Python to count the number of inversions in an array. [3, 5, 2, 1, 4] def count_inversions(arr):
  inv_count = 0
  for i in range(len(arr)):
    for j in range(i + 1, len(arr)):
      if arr[i] > arr[j]:
        inv_count += 1
  return inv_count

arr = [3, 5, 2, 1, 4] 
print(count_inversions(arr))
Create a class in Python to represent a complex number.  class ComplexNumber:
    def __init__(self, real, imaginary):
        self.real = real
        self.imaginary = imaginary

    def __str__(self):
        return "({0} + {1}i)".format(self.real, self.imaginary)
Design a Python class named "Animal" that has three instance variables: species, color and age.  class Animal:
    def __init__(self, species, color, age):
        self.species = species
        self.color = color
        self.age = age
Design a computer program in Python to store and search for items in a shopping list. Not applicable # Shopping list application 

# Declare a list to store all the items 
shopping_list = []

# Function to add item to the list
def add_item(item):
  shopping_list.append(item)
  print("Item added!")

# Function to remove item from the list
def remove_item(item):
  shopping_list.remove(item)
  print("Item removed!")

# Function to search for an item in the list
def search_item(item):
  if item in shopping_list:
    print("Item found.")
  else:
    print("Item not found.")

# Function to display all the items
def display_items():
  print("Here is your list:")
  for item in shopping_list:
    print(item)

# Test functions 
add_item("Milk")
add_item("Bread")
remove_item("Milk")
search_item("Bread")
display_items()

# Output: 
# Item added!
# Item added!
# Item removed!
# Item found.
# Here is your list: 
# Bread
Write a Python program that generates several random passwords with the conditions of: passwords must be at least 8 characters, include a number, a lowercase letter, an uppercase letter, and a special character. Not applicable import string
import random

def generate_password():
    password_length = 8
    all_chars = string.ascii_letters + string.digits + string.punctuation
    password_string = ''.join(random.choice(all_chars) for i in range(password_length))

    return password_string

def has_number(password):
    return any(letter.isdigit() for letter in password)

def has_lowercase(password):
    return any(letter.islower() for letter in password)

def has_uppercase(password):
    return any(letter.isupper() for letter in password)

def has_special_char(password):
    return any(letter in string.punctuation for letter in password)

while True:
    password = generate_password()

    if(has_number(password) and has_lowercase(password) and has_uppercase(password) and has_special_char(password)):
       print('Password generated:', password)
       break
Write a Python code that takes a given list of numbers and returns the mode of that list. List = [1,2,3,4,2,2,2,5] def find_mode(List): 
    max_count = 0
    modes = [] 
    for num in List: 
        current_count = List.count(num) 
        if current_count > max_count: 
            max_count = current_count 
            modes = [num] 
        elif current_count == max_count: 
            modes.append(num) 
    return modes
Implement a python function to remove all special characters from a string. string = “@#$&#() <>, +/” import re

def remove_special_characters(string):
    return re.sub('[^A-Za-z0-9]+', '', string)
The given code is a Python script that translates a Wikivoyage article from one language to another. The script takes the title of the article and the source and destination languages as input and generates a new article in the destination  #!/usr/bin/python
# -*- coding: utf-8 -*-
#  transvoyage.py
#  Version 0.3
#  
#  Copyright 2014 Guénaël Muller <contact@inkey-art.net>
#  
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
# 
#TODO
# - se conformer à la PEP 8
# - commentaires et TODO bilingue.
# - optimisations
# -	traduction inversé amélioré
# - nouveau langages
# - debugage de certains regex et autres


import sys
import os
import subprocess 
import re
import urllib
import argparse

# traductions des types Articles

listTypeFr=('Ville','Région continentale','Région','Pays'   ,'Quartier','Itinéraire','Parc')
listTypeEn=('city' ,'continent'          ,'region','country','district','itinerary' ,'park')


#Equivalences sections
listSectionFr=["Comprendre","Aller" ,"Circuler"  ,"Voir","Faire","Acheter","Manger","Boire un verre / Sortir","Se loger","Aux environs","Travailler","Apprendre","Gérer le Quotidien","Sécurité","Communiquer"]
listSectionEn=["Understand","Get in","Get around","See" ,"Do"   ,"Buy"    ,"Eat"   ,"Drink"                  ,"Sleep"   ,"Go next","Work"           ,"Learn"     ,"Cope"             ,"Stay safe", "Connect"   ]

listSectionFr.extend(["Respecter","Parler","Éléctricité"])
listSectionEn.extend(["Respect","Talk","Electricity"])

listSectionFr.extend(["Se préparer","Étapes","Autres destinations","Lire","Douanes","En taxi","Santé","Monnaie","Villes","Régions","Quartiers","Bureaux d'information touristique"])
listSectionEn.extend(["Prepare","Route","Other destinations","Read","Customs","By taxi","Stay healthy","Currency","Cities","Regions","Districts","Tourist office"])

listSectionFr.extend(['Histoire', 'Paysage', 'Flore et faune',"Climat","Randonnée","Droits d'accès","Droits d'accès","Activités","Météo","Nature"])
listSectionEn.extend(['History', 'Landscape', 'Flora and fauna',"Climate","Hiking","Fees/permits","Fees/Permits","Activities","Weather","Wildlife"])

listSectionFr.extend(['À pied', 'En train', 'En bus',"En avion","En ferry","En bateau","En voiture","En vélo","En vélo","En vélo","En motoneige","En stop"])
listSectionEn.extend(['By foot', 'By train', 'By bus',"By plane","By ferry","By boat","By car","By bicycle","By cycle","By bike","By snowmobile","By thumb"])

listSectionFr.extend(['Bon marché', 'Prix moyen','Prix moyen', 'Luxe','Hôtel','Logements','Dans la nature'])
listSectionEn.extend(['Budget', 'Mid-range','Mid range', 'Splurge','Hotel','Lodging','Backcountry'])

# Équivalence image

listImageFr=["[[Fichier:","[[Fichier:","gauche","droite","vignette","vignette"]
listImageEn=["[[Image:","[[File:","left","right","thumbnail","thumb"]

#Equivalence Listings

#titre listings
listListingDebFr=["Listing","Faire","Voir","Acheter","Manger","Sortir","Se loger","Destination","Aller","Circuler"]
listListingDebEn=["listing","do" ,"see","buy","eat","drink","sleep","listing","listing","listing"]

#paramètres
listListingFr=["nom=","adresse=","téléphone","latitude=","longitude=","email=","direction=","numéro gratuit=","fax=","prix=","description=<!-- ","-->}}","arrivée=","départ=","horaire="]
listListingEn=["name=","address=" ,"phone","lat=","long=","email=","directions=","tollfree=","fax=","price=","content=","}}","checkin=","checkout=","hours="]

#Equivalence Itineraires
listItineraireFr=["Jour ",": De"," à "]
listItineraireEn=["Day ",":"," to "]

#Equivalence Dans
listDansFr=["Dans"]
listDansEn=["IsPartOf"]

#Equivalence Carte

#Debut
listMapDebFr=["ListeRegions","carte=","taillecarte="]
listMapDebEn=["Regionlist","regionmap=","regionmapsize="]

#Paramètres
listMapFr=["nomregion0=","couleurregion0=","elementsregion0=","descriptionregion0="]
listMapEn=["region0name=","region0color=","region0items=","region0description="]

# Tout les regex en string par langue de Destination
RegSFr=["(.*)\[\[(Image|Fichier):(.*)\s*$","(=+)(.*)(=+)(.*)","(.*){{(Listing|Faire|Voir|Acheter|Manger|Boire|Sortir|Se loger|Destination|Aller|Circuler)\s(.*)\s*$","(.*)}}[.\s]*$","{{Dans\|(.*)}}\s*$"]
#               0                                1                                2                                                            3           4 
RegSFr.extend(["^(=+)(.*) à (.*)(=+)\s*$","(.*){{ListeRegions(.*)","(.*)region([0-9]+)=(.*)","{{Avancement\|statut=(ébauche|esquisse|utilisable|guide|étoile)\|type=0}}(.*)","(.*){{Climat(.*)","(.*){{Représentation diplomatique"])
#                         5                  6                        7                                 8                                9                       10
RegSEn=["(.*)\[\[(Image|File):(.*)\s*$", "(=+)(.*)(=+)(.*)","(.*){{(listing|do|see|buy|eat|drink|sleep)\s(.*)\s*$","(.*)}}[.\s]*$","{{IsPartOf\|(.*)}}\s*$"]
#               0                                1                                2                                 3               4 
RegSEn.extend(["^(=+)(.*) to (.*)(=+)\s*$","(.*){{Regionlist(.*)","(.*)region(.*)name=(.*)","{{(outline|usable|guide|stub|star)0}}(.*)","(.*){{Climate(.*)","(.*){{flag|(.*)}}(.*){{Listing(.*)"])
#                         5                  6                        7                                 8                                9                       10

#Avancement
avFr="{{Avancement|statut=esquisse|type=0}}\n" 
avEn="{{outline0}}\n"

#Equivalence climat
listMoisFr=["jan","fev","mar","avr","mai","jui","jul","aou","sep","oct","nov","dec"]
listMoisEn=["jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov","dec"]

listClimatFr=["Climat","description"]
listClimatEn=["Climate","description"]
for mois in listMoisFr :
	listClimatFr.append("tmin-"+mois)
	listClimatFr.append("tmax-"+mois)
	listClimatFr.append("prec-"+mois)
for mois in listMoisEn :
	listClimatEn.append(mois+"low")
	listClimatEn.append(mois+"high")
	listClimatEn.append(mois+"precip")


# Trousse à mots par langues
ListFr=(listTypeFr,listSectionFr,listImageFr,listListingDebFr,listListingFr,listItineraireFr,listDansFr,listMapDebFr,listMapFr,RegSFr,avFr,listClimatFr)
ListEn=(listTypeEn,listSectionEn,listImageEn,listListingDebEn,listListingEn,listItineraireEn,listDansEn,listMapDebEn,listMapEn,RegSEn,avEn,listClimatEn)
#           0         1            2               3           4             5                6              7           8         9    10  11

ListingsSpecialFr={"Villes":"Ville","Autres destinations":"Destinations","Aux environs":"Destinations"}
#lien langage/trousse
ListLang ={"fr":ListFr, "en":ListEn}

#Langue source et destination et contenu récupérer

src=ListEn
dest=ListFr
lang="en"
content=""
section=""
# Pour récupérér le type de l'article (Ville,Itinéraire,Quartier,etc…)
def recupTypeArticle() :
	typeArticle = dest[0][0]
	listRegex = list()
	for mot in src[0] :
		s=src[9][8].replace("0",mot)
		listRegex.append(re.compile(s))

	bOk=True
	for line in content:
		if (not bOk) :
			break
		for i in range (len(listRegex)) :
			if listRegex[i].search(line) :
				typeArticle=dest[0][i]
				bOk=False
				break
	return typeArticle
	
#Pour créer l'entête 
def creationEntete (typeArticle,titre) :
	s=""
	if dest==ListFr : # Si on traduit en français
		s="""{{Bannière page}}
{{Info """+typeArticle+"""
| nom=
| nom local=
| région=
| image=
| légende image=
| rivière=
| superficie=
| population=
| population agglomération=
| année population= 
| altitude=
| latitude=
| longitude=
| zoom=
| code postal=
| indicatif=
| adresse OT=
| horaire OT=
| téléphone OT=
| numéro gratuit OT=
| email OT=
| facebook OT=
| twitter OT=
| URL OT=
| URL officiel=
| URL touristique=
}}
"""
	return s
# Pour récupérer les images (et les traduire)
def recupImage(line) :
	s=line
	for i in range (len(src[2])) :
		s=s.replace(src[2][i],dest[2][i])
	return s
#Pour récupérer les sections et sous-sections
def recupSection(line) :
	s=line
	for i in range (len(src[1])) :
		s=s.replace(src[1][i],dest[1][i])
	return s
#Pour récupérer les listings
def recupListing(line,debut)	:
	s=line
	if debut :
		for i in range (len(src[3])) :
			s=s.replace(src[3][i],dest[3][i])
						
	for i in range (len(src[4])) :
		s=s.replace(src[4][i],dest[4][i])
	return s
	
#Pour récupérer les sections d'étapes
def recupItineraire(line) :
	s=line
	for i in range (len(src[5])) :
			s=s.replace(src[5][i],dest[5][i])
	return s

#Pour récupérer la catégorisation
def recupDans(line) :
	s=line
	for i in range (len(src[6])) :
			s=s.replace(src[6][i],dest[6][i])
	return s

#Pour récupérer les cartes avec régions
def recupMap(line,numMap) :
	s=line
	if numMap == 0 :
		for i in range (len(src[7])) :
				s=s.replace(src[7][i],dest[7][i])
	numPrec=str(numMap-1)
	sNumMap=str(numMap)
	for i in range (len(src[8])):
		src[8][i]=src[8][i].replace(numPrec,sNumMap)
		dest[8][i]=dest[8][i].replace(numPrec,sNumMap)
	if numMap > 0 :
		for i in range (len(src[8])) :
			s=s.replace(src[8][i],dest[8][i])
	return s
def recupClimat(line) :
	s=line
	for i in range (len(src[11])):
		s=s.replace(src[11][i],dest[11][i])
	return s

#Programme en lui même

parser = argparse.ArgumentParser()
parser.add_argument('title',help="nom de la page à convertir" )
parser.add_argument('--src',help="langage source : fr,en,… par défault fr ")
parser.add_argument('--dest',help="langage destination : fr,en,… par défault en ")
parser.add_argument('-d','--debug',action='store_true' ,help="mode debugage : récupération du fichier source en même temps que le résultat")
parser.add_argument('-C','--nocomment',action='store_true' ,help="commentaires désactivé dans le résultat ")

args = parser.parse_args()
bAv=False # Pour savoir si la bannière d'avancement à été placé
result="" # Pou stocké le resultat
#arguments
title=args.title
if args.src and args.src.lower() in ListLang.keys() :
	src=ListLang[args.src.lower()]
	lang=args.src.lower()
if args.dest and args.dest.lower() in ListLang.keys() :
	dest=ListLang[args.dest.lower()]
	
url="https://"+lang+".wikivoyage.org/w/index.php?title="+title+"&action=raw"
content=urllib.urlopen(url).readlines()
# on récupère le type de l'article et on crée l'entête
TypeArticle=recupTypeArticle()
result        +=creationEntete(TypeArticle,title)
# les différents regex
regImg        =re.compile(src[9][0])
regSection    =re.compile(src[9][1])
regListing    =re.compile(src[9][2])
regListingEnd =re.compile(src[9][3])
regDans       =re.compile(src[9][4])
regItineraire =re.compile(src[9][5])
regMap        =re.compile(src[9][6])
regNomRegion  =re.compile(src[9][7])
regClimat     =re.compile(src[9][9])
regDiplomat   =re.compile(src[9][10])
# On ouvre et on lit
i=0
numMap=-1
bClimat=False
bListing=False
for line in content:
	i=i+1
	if numMap>-1 :
		if regNomRegion.search(line) :
			numMap=numMap+1
		result+=recupMap(line,numMap)
		if regListingEnd.search(line) :
			sNumMap=str(numMap)
			for i in range (len(src[8])):
				src[8][i]=src[8][i].replace(sNumMap,"0")
				dest[8][i]=dest[8][i].replace(sNumMap,"0")
			numMap=-1
	if bClimat or regClimat.search(line):
		result+=recupClimat(line)
		bClimat=True
		if regListingEnd.search(line) :
			bClimat=False
	elif bListing :
		s=recupListing(line,False)
		if regListingEnd.search(line) :					
			bListing=False
			if not regListingEnd.search(s) :
				s+="}}"
		result+=s
	elif regDiplomat.search(line) and dest==ListFr :
		s="* {{Représentation diplomatique"
		bListing=True
		result+=s
	elif regMap.search(line) :
		numMap=0
		result+=recupMap(line,numMap)
	elif regItineraire.search(line) :
		result+=recupItineraire(line)
	elif regListing.search(line) :
		s=recupListing(line,True)
		if dest==ListFr and section in ListingsSpecialFr.keys() :
			s=s.replace('Listing',ListingsSpecialFr[section])
		result+=s
		bListing=True
	elif regImg.search(line) :
		result+=recupImage(line)
	elif regSection.search(line) :
		s=recupSection(line)
		if len(s)>3 and s[2] !="=" :
			section=s.replace("==","").replace("\n","")
		result+=s
	elif regDans.search(line) :
		s=dest[10].replace("0",TypeArticle.lower()) #avancement
		result+=s
		bAv=True
		result+=recupDans(line)
if (not bAv) : # Si la bannière avancement n'a toujour pas été placé
	s=dest[10].replace("0",TypeArticle.lower())
	result+=s
# On écrit les fichiers
title=title.replace("/","-")
title=title.replace(".","-")
if args.nocomment is True :
	result=re.sub(r'<!--(.*)(.|\n)(.*)-->',r'\2',result)
with open("./"+title+".txt", "w") as fichier:
	fichier.write(result)
if args.debug is True :
	with open("./"+title+"_src.txt", "w") as fichier:
		fichier.writelines(content)

Write a python program to generate a random password given a set of letters, numbers, and characters. No input import random 
  
  
# All the possible characters 
# that could go into the password 
string = "abcdefghijklmnopqrstuvwxyz01234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()?"
  
# Using the choice function of the 
# random module choose any 
# character randomly from the set of characters 
password =  "".join(random.sample(string, 8)) 
print(password)
Construct a prime number sieve in Python which returns a list of all primes up to a given number. n = 10 def primeSieve(n): 
    prime_list = [True for i in range(n+1)] 
    p = 2
    while (p * p <= n): 
        if (prime_list[p] == True): 
            for i in range(p * 2, n+1, p): 
                prime_list[i] = False
        p += 1
    primes=[] 
    for p in range(2, n): 
        if prime_list[p]: 
            primes.append(p) 
    return primes

print(primeSieve(10))  # [2, 3, 5, 7]
Create a Python script which connects to a MySQL database, runs a query and outputs the results in JSON format. Database name: test
Query: SELECT * FROM users import mysql.connector
import json

db = mysql.connector.connect(
 host="localhost",
 user="yourusername",
 password="yourpassword",
 database="test"
)

cursor = db.cursor()

sql = "SELECT * FROM users"

cursor.execute(sql)

results = cursor.fetchall()

json_data = []

for result in results:
 json_data.append(result)

print(json.dumps(json_data))
Generate a list of 100,000 random numbers from 0 to 1 using NumPy in Python. Not applicable import numpy as np

random_numbers = np.random.uniform(0, 1, 100000)
Create a neural network in Python capable of solving a multiple classification problem.  import tensorflow as tf

# Create an input layer with two input features
inputs = tf.keras.Input(shape=(2,))

# Add a dense layer with three neurons
x = tf.keras.layers.Dense(3, activation='sigmoid')(inputs)

# Add a dense layer with three neurons
outputs = tf.keras.layers.Dense(3, activation='softmax')(x)

# Create the model
model = tf.keras.Model(inputs=inputs, outputs=outputs)

# Compile
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])
Create a sentiment analysis system in Python using NLTK to provide a score of how positive or negative a review is. Not applicable import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer

# Create a SentimentIntensityAnalzyer
analyzer = SentimentIntensityAnalyzer()
 
# Calculate scores
scores = analyzer.polarity_scores(text)

# Print scores
print(scores)
Classify the following statement as true or false:

Python does not allow for recursion. Not applicable False. Python does allow for recursion. Recursion is a technique for iteratively performing a task using a function that calls itself. It is an important technique used in programming for solving complex problems. Recursion can help reduce the amount of code needed to solve a problem, making it easier to read and maintain. Furthermore, it can often times provide more efficient solutions than code that does not use recursion.
Generate a Python dictionary that contains the count of the characters in a given string. "Hello World" def count_chars(string):
    count_dict = {}

    for char in string:
        if char in count_dict:
            count_dict[char] += 1
        else:
            count_dict[char] = 1

    return count_dict

print(count_chars("Hello World"))

# Output: {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1}
Design a class in Python to represent a collection of data points.  class DataPointCollection:
    def __init__(self, data_points=[]):
        self.data_points = data_points

    def add_data_point(self, data_point):
        self.data_points.append(data_point)

    def get_data_points(self):
        return self.data_points
Create a program in Python that takes a string as input and returns a new string with the words of the input string reversed, but with the same order of characters in each word. Not applicable def revString(s):
    # Split the string into words
    words = s.split(' ')
    new_words = []
    # Reverse each word, but keep the order of the characters
    for word in words:
        new_word = ""
        for i in range(len(word)):
            new_word += word[len(word) - i - 1]
        new_words.append(new_word)
    # Join the reversed words
    new_string = ' '.join(new_words)
    return new_string

print(revString("Hello World"))  # prints "olleH dlroW"
Write a Python program for predicting the score of a tennis match given the probabilities of various outcomes. An array of 8 floats representing the probabilities for a player to win a point on their serve, break the opponent's serve, win a game on their serve and break the opponent's serve. import numpy as np

def predict_match_score(probabilities):
    p_serve_win = probabilities[0]
    p_opp_serve_win = probabilities[1]
    p_serve_game_win = probabilities[2]
    p_opp_serve_game_win = probabilities[3]

    expected_score_serve = p_serve_game_win * (4*p_serve_win + 3*p_opp_serve_win)
    expected_score_opp_serve = p_opp_serve_game_win*(4*p_opp_serve_win + 3*p_serve_win)

    total_expected_score = expected_score_serve + expected_score_opp_serve
    return total_expected_score

probabilities = np.random.random(4)
print(predict_match_score(probabilities))
Generate a single Python line to create a list that contains elements from another list. given_list = [1, 2, 3, 4, 5] new_list = [element for element in given_list]
Create a Python script to filter out elements in a list that are divisible by 3. [9, 8, 10, 27, 12, 15] numbers = [9, 8, 10, 27, 12, 15]

def filter_div_by_3(numbers):
    return [num for num in numbers if num % 3 != 0]

filtered_numbers = filter_div_by_3(numbers)
print(filtered_numbers)
Develop a system in Python for generating a monthly report on the most popular webpages.  import requests
from collections import Counter

def generate_report(url):
    # make request to the given URL
    response = requests.get(url)
    if response.status_code == 200:
        # parse the data
        data = response.json()
        # count the occurrences of each URL
        counter = Counter()
        for entry in data:
            counter[entry['url']] += 1
        # get the most popular websites
        most_popular = counter.most_common(10)
        # generate the report
        report = "MONTHLY REPORT\n"
        for url, count in most_popular:
            report += "{}: {} views\n".format(url, count)
        print(report)

generate_report("url")
Optimize a Python program for space efficiency. The program should take input from the command line, and should determine whether a given three-digit number is an Armstrong number or not. ArmstrongNumber(371) import math  
  
def ArmstrongNumber(num): 
  sum = 0 
  temp_num = num 
  digits_count = 0 
  
  while temp_num>0: 
    digits_count += 1  
    temp_num = math.floor(temp_num/10)  
  
  digits_sum = 0 
    
  while num > 0:  
    r = num % 10  
    sum += math.pow(r, digits_count)  
    num = math.floor(num/10)  
      
  if sum == temp_num: 
    print (f'{temp_num} is an Armstrong number') 
  else: 
    print (f'{temp_num} is not an Armstrong number ')  
  
num = int(input("Enter a number: "))
ArmstrongNumber(num)
Create a Python function that takes in a list of words and check if every word in the list is a palindrome. ["abcd", "anna", "mom", "live"] def is_all_palindrome(words):
    for word in words:
        if word == word[::-1]:
            continue
        else:
            return False
    return True

words = ["abcd", "anna", "mom", "live"]

print(is_all_palindrome(words))
Write a Python program to filter a list of strings so that strings containingthe substring "bad" are removed. list_of_string = ["good","bad","weird","great","amazing"] list_of_string = ["good","weird","great","amazing"]

filtered_list = [s for s in list_of_string if "bad" not in s]

print(filtered_list)
Create a function in Python which takes two strings (s1 and s2) and returns the longest common subsequence. s1 = 'dynamic'
s2 = 'programming' def lcs(s1,s2): 
 m = len(s1) 
 n = len(s2) 
 
 # Create a matrix to store results of subproblems 
 matrix = [[0]*(n+1) for i in range(m+1)] 
 
 # Fill in the entries of the matrix 
 for i in range(m+1): 
  for j in range(n+1): 
   if i == 0 or j == 0: 
    matrix[i][j] = 0
   elif s1[i-1] == s2[j-1]: 
    matrix[i][j] = matrix[i-1][j-1] + 1
   else: 
    matrix[i][j] = max(matrix[i-1][j], matrix[i][j-1]) 
 
 # Return the maximum length 
 return matrix[m][n] 

# Driver program 
s1 = "dynamic"
s2 = "programming"
lcs = lcs(s1, s2)
print("The length of LCS is", lcs)
Write a Python program to identify the words with the highest frequency in a given text. At home, the clock ticks and the foot of the stairs def most_frequent_words(text):
    # Split the text into words
    words = text.split() 
    # Create an empty dictionary
    word_counter = {}
    
    # Iterate through each word in the list of words
    for word in words:
        # If the word is already in the dictionary
        if word in word_counter:
            # Add 1 to the count of the word
            word_counter[word] += 1 
        else:
            # Else, set the count of the word to 1
            word_counter[word] = 1
            
    # Sort the dictionary by value
    word_sorted = sorted(word_counter.items(), 
                         key=lambda count: count[1], 
                         reverse=True)
    
    # Return the words with highest frequency
    return [word_sorted[0][0], word_sorted[1][0], 
            word_sorted[2][0]]
Create a function to convert JSON objects to Python dictionaries. {"key1": "value1", "key2": "value2" } import json

def convert_json_to_dict(input_json):
    """
    Convert JSON object to Python dictionary 
    Args: 
        input_json (json): JSON object to be converted 
    Returns: 
        output_dict (dict): Python dictionary with keys and values from input_json
    """

    output_dict = json.loads(input_json)
    return output_dict
Implement an insertion sort algorithm in Python.  def insertion_sort(list):
    for i in range(1,len(list)):
        key = list[i]
        j = i - 1
        while j>=0 and key < list[j]:
            list[j+1] = list[j]
            j-=1
        list[j+1] = key
    return list
Write a Python program to Reverse the word sequence of a given sentence This is a test def reverse_sentence(sent):
    words = sent.split(" ")
    reversed_words = words[::-1]
    result = " ".join(reversed_words)
    return result

sentence = "This is a test"
print(reverse_sentence(sentence))

# Output
test a is This
Implement a cost function with two parameters in Python.  def cost_function(x, y):
    return (x**2 + y**2)
Create a Python code to return the longest common prefix of a given set of strings. ['car', 'cat', 'cow'] def longestCommonPrefix(strings):
    prefix = ""
    min_length = min([len(s) for s in strings])
    for i in range(min_length):
        current_char = strings[0][i]
        for s in strings:
            if s[i] != current_char:
                return prefix
        prefix += current_char
    return prefix

result = longestCommonPrefix(['car', 'cat', 'cow'])
print(result) # Output: 'c'
Create a sorting algorithm that sorts a list of strings alphabetically in Python. ["list", "of", "unsorted", "strings"] def sortAlphabetically(stringList):
  sortedList = sorted(stringList)
  return sortedList

unsortedList = ["list", "of", "unsorted", "strings"]
sortedList = sortAlphabetically(unsortedList)

print(sortedList)
Create a program in Python to generate random numbers.  import random

def generate_random_numbers(n):
    numbers = []
    for _ in range(n):
        numbers.append(random.randint(0, 100))
    return numbers

# Generate 10 random numbers
numbers = generate_random_numbers(10)
print(numbers)
Write a Python program to find the maximum number in a list of numbers. [1, 9, 5, 18, 21, 2] def find_max(nums):
  max_num = nums[0]
  for x in nums:
    if x > max_num:
      max_num = x
  return max_num

print(find_max([1,9,5,18,21,2]))
Write an Naive Bayes classifier in Python for categorizing a customer’s gender given information about their shoe size and shirt size. male: shoe size = 9, shirt size = L
female: shoe size = 6, shirt size = S from sklearn.naive_bayes import GaussianNB

# Create a Gaussian Classifier 
model = GaussianNB()

# Train the model using the training sets 
model.fit([[9, 'L'], 
 [6, 'S']], ["male", "female"]) 

# Predict Output 
predicted= model.predict([[9, 'L']])
print(predicted) # output: ["male"]
Create an HTML page with a form that allows a user to enter the coordinates of two cities and returns the shortest path from source to destination in Python.  <html>
<head>
  <title>Shortest Path Finder</title>
</head>
<body>
  <form method="post" action="pathFinder.py">
    <input type="text" name="source" placeholder="Source City" />
    <input type="text" name="destination" placeholder="Destination City" />
    <input type="submit" value="Get Shortest Path" />
  </form>
</body>
</html>
Write a Python script to input a numeric value and generate the output in a formatted table structure. The table should have 5 rows and 3 columns. for x in range(5):
    for y in range(3):
        col = input("Enter Value: ")
        print(col, end="\t\t")
    print()
Create a Python list containing numbers 8 to 100 in increments of 8.  my_list = [8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 100]
Generate a list of all numbers from 0 to 50 in Python, that are divisible by both 3 and 5.  my_list = [x for x in range(0, 51) if x % 3 == 0 and x % 5 == 0]
Rewrite the following python code so that it can be run as a script. def my_function():
    print("Hello, World!")

if __name__ == '__main__':
    my_function() def my_function():
    print("Hello, World!")

if __name__ == '__main__':
    my_function()

if __name__ == '__main__':
    my_function()
Write a Python program to convert a binary number to decimal.  def bin_to_dec(binary):
    decimal, i, n = 0, 0, 0
    while(binary != 0): 
        dec = binary % 10
        decimal = decimal + dec * pow(2, i) 
        binary = binary//10
        i += 1
    return decimal
Create a basic Python script that computes the sum of two variables and stores the result in a third variable. x = 5
y = 8 # compute the sum of x and y
result = x + y

# store the result in a third variable
z = result

#print the result
print(z) # Output: 13
Write a Python program to remove a specified item from an array. arr = [1,2,3,4] def remove_item(arr, item):
    return [i for i in arr if i != item]

arr = [1,2,3,4]
new_arr = remove_item(arr, 3)
print(new_arr)
Given the following JSON input, write a Python program to calculate the average age of all the users. [
  {
  "name": "Alice",
  "age": 25
  },
  {
  "name": "Bob",
  "age": 30
  },
  {
  "name": "John",
  "age": 20
  }
] import json

users = json.loads(input)
total_age = 0
for user in users:
 total_age += user["age"]

average_age = total_age / len(users)

print(f"Average age of users is {average_age}")
Create a python script to split a string into its word components. String: Hello,World! def split_words(s): 
    words = s.split(" ") 
    return words  
s = "Hello,World!"
words = split_words(s) 
print(words)
Construct a python program that prints a multiplication table given two numbers (x and y). int x = 5; 
int y = 10; int x = 5; 
int y = 10;

for i in range(1, y+1):
    for j in range(1, x+1):
        print('{} x {} = {}'.format(i, j, i*j))
Generate a Python script to classify the given data points according to their label. data_points = [(2,2),(3,3),(4,4)]
labels = ['x', 'y',] def classify_data_points(data_points, labels):
    classified_data_points = []
    for data_point in data_points:
        if data_point[0] == data_point[1]:
            classified_data_points.append((data_point, labels[0]))
        else:
            classified_data_points.append((data_point, labels[1]))
    return classified_data_points
Identify the programming languages used for writing a Python program that scrapes a website for email addresses. Not applicable The languages used for writing a Python program to scrape a website for email addresses would be Python and HTML. Python is used for writing the web scraper and HTML is used to define the structure and content of the website, which the scraper accesses in order to scrape the email addresses.
Create a random number generator in Python.  import random

def generate_random_number():
	# Generate a random number between 0 and 1
    return random.random()
Design a Python class for implementing a stack data structure.  class Stack:

def __init__(self):
    self.items = []

def push(self, item):
    self.items.append(item)

def pop(self):
    return self.items.pop()

def is_empty(self):
    return self.items == []

def peek(self):
    if not self.is_empty():
        return self.items[-1]

def get_stack(self):
    return self.items
Create a command line tool that takes a string argument and prints the reversed version of that string. Not applicable import sys

def reverse_string(string):
 return string[::-1]

def main():
 if len(sys.argv) != 2:
 print("Usage: python reverse_string.py <string>")
 return

 print(reverse_string(sys.argv[1]))

if __name__ == "__main__":
 main()
Write a Python script to download a website and save it to a local folder. Domain name of the website = example.com import requests
from bs4 import BeautifulSoup
import os
import urllib

# Set the URL you want to webscrape from
url = 'https://example.com/'

# Connect to the URL
response = requests.get(url)

# Parse HTML and save to BeautifulSoup object
soup = BeautifulSoup(response.text, 'html.parser')

# Create directory for website
os.mkdir(url.split('//')[-1])

# Changing working directory to website directory
os.chdir(url.split('//')[-1])

# Create HTML file and save content
with open('index.html', 'wb') as f:
 f.write(soup.prettify('utf-8'))

# Get all images
# images = soup.findAll('img') 
images = soup.findAll('img', {'src': True})

# Download images:
for image in images:
 filename = image['src'].split('/')[-1]
 urllib.request.urlretrieve(image['src'], filename)
Create a model in Python using scikit-learn that takes a dataset of user-generated feedback and predicts the sentiment (positive or negative). Not applicable import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB

#load dataset
df = pd.read_csv('data.csv')

#Vectorize the data
cv = CountVectorizer(stop_words='english', max_features=1000)
X = cv.fit_transform(df['text']).toarray()
y = df['sentiment']

#Split the dataset into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

#Train the model
model = MultinomialNB()
model.fit(X_train, y_train)

#Evaluate the model
score = model.score(X_test, y_test)
print(f'Model Accuracy: {score*100}%')
Write a python program to filter a list of strings and return only those which contain the given substring. ["Hello", "World", "Hey"], Substring: "or" def filter_strings(lst, substring):
    filtered_lst = []
    for string in lst:
        if substring in string:
            filtered_lst.append(string)
    return filtered_lst

print(filter_strings(["Hello", "World", "Hey"], "or"))
Write a Python program that uses object-oriented programming to construct a calendar containing several dates and events. Jaunch conference on 4 April 2020, Mothers Day on 10 May 2020 class Calendar:
    def __init__(self):
        self.events = {}

    def add_event(self, date, description):
        if date in self.events:
            self.events[date].append(description)
        else:
            self.events[date] = [description]

    def list_events(self):
        for date, descriptions in self.events.items():
            for description in descriptions:
                print(date, ":", description)

calendar = Calendar()
calendar.add_event("04-04-2020", "Jaunch conference")
calendar.add_event("10-05-2020", "Mothers Day")
calendar.list_events()
Create a PoS tagging tool with Python and NLTK which takes a sentence as an input and tags each word with its part-of-speech (POS) category. The quick brown fox jumps over the lazy dog from nltk.tokenize import word_tokenize
from nltk.tag import pos_tag

sentence = "The quick brown fox jumps over the lazy dog" 
words = word_tokenize(sentence)
print(pos_tag(words))

Output: 
[('The', 'DT'), ('quick', 'JJ'), ('brown', 'NN'), ('fox', 'NN'), ('jumps', 'VBZ'), ('over', 'IN'), ('the', 'DT'), ('lazy', 'JJ'), ('dog', 'NN')]
Compose a code in Python that counts the number of positive integers in a list. numbers = [1, -2, 3, -4, 5] def count_positive_numbers(numbers):
    count = 0
    for num in numbers:
        if num > 0:
            count += 1
    return count
Generate a list of prime numbers between 1 and 20 using a while loop in Python. Not applicable n = 20

# prime number is greater than 1
if n > 1:
    # create an empty list
    prime_numbers = []
    # 2 is the smallest prime number
    i = 2

    while i < n:
        # check if the number is divisible by any number
        # less than it
        for j in range(2,i):
            # if yes, then it's not a prime number
            if i % j == 0:
                break
        else:
            # append the prime number to the list
            prime_numbers.append(i)
        i += 1

# print the list of prime numbers
print(prime_numbers)
# Output: [2, 3, 5, 7, 11, 13, 17, 19]
Create a Python class called 'Car' that contains three attributes, such as 'make', 'model' and 'year'.  class Car():
    def __init__(self, make, model, year):
        self.make = make
        self.model = model
        self.year = year
Create a list of strings in Python based on the following conditions: Input array: ["Apple", "Orange", "Pear", "Watermelon"]
Condition: Return a list of strings that contains elements in the input array that start with "P". [”Pear”, ”Watermelon”]
Generate a Python program which can produce the sum of all even numbers between 0 and n, including zero.  def sum_even_nums(n):
    sum = 0
    for i in range(0, n+1):
        if i%2 == 0:
            sum += i
    return sum
Generate a program written in Python that takes in two numbers from the user and prints out the greatest common divisor of the two. Not applicable def GCD(a, b): 
  
    # base case 
    if (a == 0): 
        return b 
  
    if (b == 0): 
        return a  
  
    # a is greater 
    if (a > b): 
        return GCD(a % b, b)
    else: 
        return GCD(a, b % a) 
  
# Driver Program     
a = 98
b = 56
if(GCD(a, b)): 
    print('GCD of', a, 'and', b, 'is', GCD(a, b)) 
else: 
    print('not found')
Rewrite the following algorithm using Python:  def star_pattern(n):
    # Outer loop to handle number of rows 
    # n in this case 
    for i in range(0, n): 
      
        # Inner loop to handle number of columns 
        # values changing acc. to outer loop 
        for j in range(0, i+1): 
          
            # Printing stars 
            print("* ",end="") 
       
        # Ending line after each row 
        print("\r") 
  
# Driver Code 
n = 5
star_pattern(n)
Create a function in Python that takes 2 lists and returns their intersection. list1 = [1, 4 , 6, 10]
list2 = [2, 10, 8, 6] def intersection(list1, list2): 
    intersection_elements = set(list1) & set(list2) 
    return list(intersection_elements)

intersection_list = intersection(list1, list2)
print(intersection_list)
Create an object-oriented program in Python to represent a game. Not applicable class Game:
 def __init__(self):
 self.players = []
 self.board = None

def add_player(self, player):
 self.players.append(player)

def set_board(self, board):
 self.board = board

def start(self):
 for player in self.players:
 player.turn()

def end(self):
 for player in self.players:
 player.game_over()
Design a Python script to generate a report containing summaries of the data in a table. Table name: orders import pandas as pd 

# Load data from the orders table 
orders = pd.read_csv('orders.csv')

# Generate summary statistics for the orders table 
summary_stats = orders.describe()

# Generate a report containing summary statistics 
report = open('report.html', 'w') 
report.write(summary_stats.to_html()) 
report.close()
Create a ML pipeline using Python to predict the sentiment of a given sentence. Not applicable import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.layers import Embedding, LSTM, Dense, Bidirectional
from tensorflow.keras.models import Sequential
from tensorflow.keras.optimizers import Adam

# load data
train_data = [{'text': 'good morning', 'sentiment': 'positive'}, {'text': 'bad news', 'sentiment': 'negative'}] 

# process data
X_train = np.array([x['text'] for x in train_data]) 
y_train = np.array([x['sentiment'] for x in train_data])

# tokenize words
tokenizer = Tokenizer(num_words=1000) 
tokenizer.fit_on_texts(X_train) 
X_train = tokenizer.texts_to_sequences(X_train) 
X_train = pad_sequences(X_train, padding='post', maxlen=64) 

# create model
model = Sequential([
 Embedding(input_dim=1000, output_dim=128, input_length=64), 
 Bidirectional(LSTM(128)), 
 Dense(128, activation='relu'), 
 Dense(2, activation='softmax') 
]) 

# compile model
model.compile(
 optimizer=Adam(learning_rate=0.001), 
 loss='sparse_categorical_crossentropy', 
 metrics=['accuracy']
)

# fit model
model.fit(X_train, y_train, epochs=10, batch_size=32)

# evaluate
loss, accuracy = model.evaluate(X_train, y_train)
print('Accuracy: %f' % (accuracy*100))
Design an algorithm in Python to generate the Fibonacci series until n.  def Fibonacci(n): 
 a = 0
 b = 1
 if n < 0: 
  print("Incorrect input Given") 
 elif n == 0: 
  return a 
 elif n == 1: 
  return b 
 else: 
  for i in range(2,n): 
   c = a + b 
   a = b 
   b = c 
 return b
Create a scoring system in Python that will output a score between 0 and 10 for a given text based on key words retrieved from a lexicon. A lexicon containing the words ‘happy’, ‘sad’, 'angry'. import re

def score_sentiment(text, lexicon):
    # Convert text to lowercase
    text = text.lower()
    
    # Create a score
    score = 0
    for word in re.findall(r"\w+", text):
        if word in lexicon:
            score += lexicon[word]
    score = float(score) / len(text)
    
    # Convert score to 0-10
    score = score * 10
            
    # Return score
    return round(score, 2)
    
if __name__ == "__main__":
    lexicon = {
        'happy': 1,
        'sad': -1,
        'angry': -3
    }
    text = 'I am feeling happy'
    score = score_sentiment(text, lexicon)
    print ('Score:', score)
Create a chatbot using Python which can respond to a user's query.  import random

def chatbot_response(user_response):
  
  bot_response = ''
 
  if user_response == 'hello':
    bot_response = random.choice(['Hello!', 'Hi.', 'Hey there!'])
  elif user_response == 'how are you?':
    bot_response = 'I am doing well. How about you?'
  elif user_response == 'bye':
    bot_response = 'Bye! It was nice talking to you.'
 
  return bot_response

# Main Program

user_response = input("User: ")

while user_response != 'bye':
  print("Chatbot: " + chatbot_response(user_response))
  user_response = input("User: ")

if user_response == 'bye':
  print("Chatbot: " + chatbot_response(user_response))
Create a Python program to print out an HTML page that displays all prime numbers between 1 and an upper limit. Upper limit = 10 def prime_numbers(upper_limit):
 prime_nums = []
 for i in range(2, upper_limit + 1):
 for j in range(2, i):
 if i % j == 0:
 break
 else:
 prime_nums.append(i)
 return prime_nums

# Create Template
output_html = """ 
<!DOCTYPE html>
<html>
<head>
 <title>Prime Numbers</title>
</head>
<body>
 <h1>Prime Numbers between 1 and {}</h1> 
 <p>
"""

upper_limit = 10
# Calculate prime numbers
prime_nums = prime_numbers(upper_limit)
# Construct HTML
output_html += " <br>".join(str(x) for x in prime_nums)
# Finalize HTML
output_html += """
 </p>
</body>
</html>"""

# Print HTML to screen
print(output_html)
Optimize this Python code for speed. lst = []
 
for i in range(100):
    lst.append(i)
 
for i in lst:
    print(i) lst = list(range(100))
 
for i in lst:
    print(i)
Construct a Python function to remove all instances of an element from a given list of integers. [2,2,3,4,5], 2 def remove_element(nums, x):
   return [y for y in nums if y != x]
Write a Python program to query a provided API and return the result in JSON format. The API URL: https://example.com/api import requests

url = 'https://example.com/api'

response = requests.get(url)

if response.status_code == 200:
 data = response.json()
 print(data)
else:
 print('Error:', response.status_code)
Develop a function in Python to print out the Fibonacci sequence up to the given number n.  def printFibonacci(n):
    if n<0:
        print('Incorrect input')
    elif n==0:
        print(0)
    elif n==1:
        print(0,1)
    else:
        a=0
        b=1
        print(a)
        print(b)
        for i in range(2,n):
            c=a+b
            a=b
            b=c
            print(c)
Write a Python function to calculate the difference between two given dates.  def date_diff(date1, date2):
    date1_stamp = time.mktime(datetime.strptime(date1, "%d/%m/%Y").timetuple())
    date2_stamp = time.mktime(datetime.strptime(date2, "%d/%m/%Y").timetuple())
    difference = abs(date1_stamp - date2_stamp)
    return int(difference/(24*60*60))
Implement a linear search algorithm in Python to find the position of a given element in an array.  def linear_search(arr, element):
    for i in range(len(arr)):
        if arr[i] == element:
            return i
    return -1
Create a class in Python to define a circle object.  class Circle:
    def __init__(self, radius):
        self.radius = radius

    def get_area(self):
        return 3.14 * (self.radius ** 2)
Generate Python code for handling HTTP requests in Flask. Not applicable from flask import Flask
 
app = Flask(__name__)
 
@app.route('/', methods=['GET', 'POST'])
def handle_request():
 if request.method == 'POST':
 # Handles post request
 elif request.method == 'GET':
 # Handles get request
 
 if __name__ == '__main__':
 app.run(debug=True)
Suggest a completion for the following Python code snippet that implements a linear search on an array. def linear_search(arr, target):
    for i in range(len(arr)): def linear_search(arr, target):
    for i in range(len(arr)):
        if (arr[i] == target):
            return i
    return -1
Create a python program that given an input string and an array of strings, returns true if an anagram of the input string exists within the array. input_string="listen"
strings=["enlist","google","inlets","banana"] def anagram_in_list(input_string, strings):
    result = False

    for string in strings:
        if is_anagram(input_string, string):
            result = True
            break
    
    return result


input_string="listen"
strings=["enlist","google","inlets","banana"]

print(anagram_in_list(input_string, strings))
Create a Python code snippet to check if a given number is a prime number. Not applicable def is_prime(num):
    if num > 1:
        for i in range(2, num):
            if (num % i) == 0:
                return False
        else:
            return True
    else:
        return False
Create a Python application for managing bookings for a hotel room. The application should include models for Room (with fields for number, size, and bed type) and Booking (with fields for start date, end date, and guest name). Not applicable class Room(models.Model):
    number = models.IntegerField()
    size = models.IntegerField()
    bed_type = models.CharField(max_length=20)

class Booking(models.Model):
    start_date = models.DateField()
    end_date = models.DateField()
    guest_name = models.CharField(max_length=50)
    room = models.ForeignKey(Room, on_delete=models.CASCADE)

# In your migration file:

class CreateRoomsAndBookings < ActiveRecord::Migration[5.2]
    def change
        create_table :rooms do |t|
            t.integer :number
            t.integer :size
            t.string :bed_type

            t.timestamps
        end

        create_table :bookings do |t|
            t.date :start_date
            t.date :end_date
            t.string :guest_name
            t.references :room, foreign_key: true

            t.timestamps
        end
    end
end
Create a function in Python that will convert a string to all uppercase letters. input_string = "This Is A String" def uppercase_string(input_string):
    return input_string.upper()
Write a Python function that calculates the sum of all even numbers within a given range  def sum_even_in_range(start, end):
    # Initialise the result
    result = 0

    # Loop over the Range
    for i in range(start, end+1):
        # Check if number is even 
        if i % 2 == 0:
            result += i
            
    return result
Write code in python to calculate the sum of every nth element of an array. array = [4, 5, 2, 9, 8, 6, 2, 3, 7, 1]
n = 3 """
Write code in python to calculate the sum of every nth element of an array.
"""

# Function to calculate the sum of every nth element of an array.
def sum_nth(array, n):
    # Initialize the result
    result = 0
    
    # Iterate to increment the result
    i = 0
    while i < len(array):
        result += array[i]
        i += n
        
    return result

if __name__ == '__main__':
    array = [4, 5, 2, 9, 8, 6, 2, 3, 7, 1]
    n = 3
    print(sum_nth(array, n)) # 18
You need to optimize a Python program for faster performance. def sort_number(arr):
    for i in range(len(arr)):
        for j in range(i + 1, len(arr)):
            if arr[i] > arr[j]:
                temp = arr[i]
                arr[i] = arr[j]
                arr[j] = temp def sort_number(arr):
    arr.sort()
Create a web scraper in Python that searches a given website for a specified HTML element. Website: www.example.com
HTML Element: div import requests
from bs4 import BeautifulSoup

url = 'https://www.example.com'
response = requests.get(url)
html = response.content

soup = BeautifulSoup(html, 'html.parser')
for div in soup.find_all('div'):
 print(div.text)
Generate a Python program that recursively prints a string of characters in reverse.  def reverse_string(s):
    if len(s) == 0:
        return
    else:
        print(s[-1], end="")
        reverse_string(s[:-1])
 
# Driver program
string = "Hello World!"
reverse_string(string)
Develop a program in Python to remove all the punctuation from an English sentence. This is an example sentence! def remove_punctuation(sentence):
    punctuations = '''!()-[]{};:'"\,<>./?@#$%^&*_~'''
    clean_sentence = "" 
    for letter in sentence: 
        if letter not in punctuations: 
            clean_sentence += letter 
    return clean_sentence

sentence = "This is an example sentence!"
print(remove_punctuation(sentence))
Create an algorithm in Python that takes a list of strings as input, and returns a new list with all strings that have a length of at least 5 characters. The input list is ['apple', 'cat', 'banana', 'dog', 'potato'] def filter_by_length(input_list):
 result = []
 for item in input_list:
 if len(item) >= 5:
  result.append(item)
 return result

input_list = ['apple', 'cat', 'banana', 'dog', 'potato']
result = filter_by_length(input_list) 
# result = ['apple', 'banana', 'potato']
Design an algorithm in Python to determine the highest scoring word in a given text. The cat runs fast def highest_scoring_word(text): 
    
    # Split the text into words 
    words = text.split() 
  
    # Create a dictionary to store the words 
    # and their corresponding scores 
    scores = {} 
    for word in words: 
        score = 0
        for letter in word: 
            score += ord(letter) - 96 
        scores[word] = score 
  
    # Find the highest score 
    highest_score = 0
    for key, value in scores.items(): 
        if value > highest_score: 
            highest_score = value 
            highest_scoring_word = key 
  
    return highest_scoring_word

# Driver code
text = "The cat runs fast"
print(highest_scoring_word(text))
Configure the following python code to work the mathematical expression. def calculate(x, y, operator): def calculate(x, y, operator):
    if operator == '+':
        return x + y
    elif operator == '-':
        return x - y
    elif operator == '*':
        return x * y
    elif operator == '/':
        return x / y
Write a Python script to calculate the average age of a group of people. [{'name': 'John', 'age': 25}, {'name': 'Mia', 'age': 28}, {'name': 'Jack', 'age': 33}] people = [
    {'name': 'John', 'age': 25}, 
    {'name': 'Mia', 'age': 28}, 
    {'name': 'Jack', 'age': 33}
]

total_age = 0

for person in people:
    total_age += person['age']

average_age = total_age / len(people)

print("Average age: {}".format(average_age))
Write a Python program that uses an API to retrieve data from a given web page and displays the relevant information to the user. Sample Webpage: 
https://www.example.com/page1 import requests 

# api-endpoint 
URL = "https://www.example.com/page1"
  
# sending get request and saving the response as response object 
r = requests.get(url = URL) 
  
# extracting data in json format 
data = r.json() 
  
# extracting relevant data 
status = data['status'] 
sub_title = data['sub_title'] 
max_clients = data['max_clients'] 

# printing extracted data  
print("Status:", status) 
print("Sub Title:", sub_title)
print("Max Clients:", max_clients)
Create a Python script which calculate the sum of all even numbers from 0 to 100.  def calculateSumOfEvenNumbers(number):
  sum = 0
  for i in range(number+1):
    if i % 2 == 0:
      sum += i
  return sum

sum = calculateSumOfEvenNumbers(100)
print(sum)
Write a Python script that takes an integer as input and outputs the Fibonacci number corresponding to that index. 7 # Input number
num = int(input())

# Numbers
a = 0
b = 1

for i in range(num):
     # Sum of all preceding numbers
     c = a + b
     # Set the second number as the first number
     a = b
     # Set the new sum as the second number
     b = c

# Print the nth Fibonacci number
print(a)
Design a Python program that computes the reverse of a given string. Hello def reverseString(s):
    return s[::-1]
 
s = "Hello"
print(reverseString(s))
Develop a Python function to calculate the tax of each item price = 100
tax_rate = 0.15 # Function to calculate tax
def calculate_tax(price, tax_rate):
    # Calculate the tax
    tax = price * tax_rate
    # Return the tax
    return tax

# Demonstration
price = 100
tax_rate = 0.15
tax = calculate_tax(price, tax_rate)
print("Tax of the item:", tax)
Implement a code in Python for reversing a string.  def reverse_string(string):
  reversed_string = ""
  
  for char in string:
    reversed_string = char + reversed_string
  
  return reversed_string
Can you create a Python program to find prime numbers within a given range?  def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, n):
        if n % i == 0:
            return False
    return True


def find_prime_numbers(a, b):
    result = []
    for num in range(a, b + 1):
        if is_prime(num):
            result.append(num)
    return result


start = 2
end = 20
print(find_prime_numbers(start, end))
Create an algorithm in Python toimplement quick sort. [8, 2, 6, 4, 5, 1] def quick_sort(arr):
    if len(arr) < 2:
        return arr
    else:
        pivot = arr[0]
        less_than_pivot = [i for i in arr[1:] if i <= pivot]
        greater_than_pivot = [i for i in arr[1:] if i > pivot]
 
        return quick_sort(less_than_pivot) + [pivot] + quick_sort(greater_than_pivot)
Create a Python class representing a vehicle with attributes make, model, year, and color.  class Vehicle:
    """Class representing a vehicle."""

    def __init__(self, make, model, year, color):
        """Initialize vehicle object with its attributes."""
        self.make = make
        self.model = model
        self.year = year
        self.color = color
Generate Python code to perform an action based on a given condition. Condition: If the user input is an integer, print "You have entered an integer" user_input = input("Enter a number:")
if user_input.isdigit():
   print("You have entered an integer.")
Implement a function in Python that takes a string as input and returns a deep copy of the string with its letters reversed. "Hello World!" def reverse_string(string):
 # Create empty string to store reversed characters
 reversed_string = ""

 # Loop through string to get individual characters 
 for char in string:
 reversed_string = char + reversed_string

 # Return reversed string
 return reversed_string

print(reverse_string("Hello World!"))  # Output -> "!dlroW olleH"
Develop a ML model in Python for predicting the winning team of football matches. Use data from the past 5 years of the Premier League. Not applicable import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import GradientBoostingClassifier

# Load data
data = pd.read_csv('data.csv')

# Select features
features = data[['home_team_goals', 'away_team_goals', 'home_team_possession', 'away_team_possession',
                 'home_team_shots', 'away_team_shots', 'home_team_yellow_cards', 'away_team_yellow_cards',
                 'home_team_red_cards', 'away_team_red_cards']]

# Select target
target = data['winner']

# Split data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

# Train the model
gbm = GradientBoostingClassifier()
gbm.fit(X_train, y_train)

# Make predictions
y_pred = gbm.predict(X_test)

# Evaluate the model
score = gbm.score(X_test, y_test)
print(f'Model score: {score}')
Design an algorithm (in Python) to determine whether a given number is even or odd.  def is_even(number): 
    if(number % 2 == 0): 
        return True 
    else: 
        return False
Design a function in Python to return the length of the longest common subsequence in two given strings. "abcde", "ace" def longestCommonSubsequence(s1, s2): 
    m = len(s1) 
    n = len(s2) 
  
    LCSuff = [[0 for k in range(n+1)] for l in range(m+1)] 
    result = 0
    for i in range(m + 1): 
        for j in range(n + 1): 
            if (i == 0 or j == 0): 
                LCSuff[i][j] = 0
            elif s1[i-1] == s2[j-1]: 
                LCSuff[i][j] = LCSuff[i-1][j-1] + 1
                result = max(result, LCSuff[i][j]) 
            else: 
                LCSuff[i][j] = 0
    return result

result = longestCommonSubsequence("abcde", "ace")
print(result)
Compose a Python function to determine whether two given strings are anagrams of each other. String1 - "Stop"
String2 - "post" """
A Python function to determine whether two given strings are anagrams of each other
"""
def check_anagram(string1, string2): 
    # If the strings are not of equal length, they cannot be anagrams
    if len(string1) != len(string2): 
        return False

    # Dictionary to store characters and their frequencies
    dictionary = {} 

    # Store the frequency of the characters of the first string to the dictionary
    for char in string1:  
        if char in dictionary: 
            dictionary[char] += 1
        else: 
            dictionary[char] = 1

    # Iterate over the characters in the second string 
    for char in string2:  
        # If the character is not in the dictionary, then the string cannot an anagram
        if char in dictionary:  
            dictionary[char] -= 1
        else: 
            return False

    # Check if all the frequencies have been reduced to 0
    for i in dictionary.values(): 
        if i != 0: 
            return False

    return True
    
if __name__ == '__main__':
    string1 = "Stop"
    string2 = "post"
    print(check_anagram(string1, string2))
Write a function to display a given number of random items from a list in Python. <List: ["dog", "cat", "bird", "fish"]
Number of items: 3> import random

def display_random_items(lst, num):
 random.shuffle(lst)
 return lst[:num]

lst = ["dog", "cat", "bird", "fish"]
num = 3

random_items = display_random_items(lst, num)
print(random_items)
Write a Python program to generate a 3x4 matrix containing random numbers.  import random

def generate_random_matrix():
    matrix = [[random.randint(1, 10) for col in range(4)] for row in range(3)]
    return matrix
Create a sentiment analysis web application, using Python.' Not applicable import flask
from flask import request, jsonify
from textblob import TextBlob

#Initialize the Flask App
app = flask.Flask(__name__)
app.config["DEBUG"] = True

#Create a route for the web application
@app.route('/', methods=['GET'])
def home():
 return '<h1> Sentiment Analysis Web Application </h1>'

#Create a route for the API
@app.route('/api/v1/sentiment', methods=['GET'])
def sentiment():
 #Get the text
 text = request.args.get('text')
 if text is None:
  return jsonify({'error': 'no text received'})

 #Create a TextBlob from the text
 sentiment = TextBlob(text).sentiment

 #Return the sentiment as JSON
 return jsonify({'polarity': sentiment.polarity, 'subjectivity': sentiment.subjectivity})

app.run()
Create a 3-layer artificial neural network using Python and print the outcome.  import numpy as np

# define the 3 layers #
input_layer = np.array([2, 3])
hidden_layer = np.array([[0.1, 0.4],
                         [0.8, 0.6],
                         [0.3, 0.9]])
output_layer = np.array([0.3, 0.7])

# compute the output of the 3-layer network #
hidden_layer_output = np.dot(input_layer, hidden_layer)
output = np.dot(hidden_layer_output, output_layer)

print(output)
Develop a program to convert an infix to postfix expression. A+B*C #!/usr/bin/env python

# utility function to check if a character is a valid infix operator 
def isOperator(c): 
	if (c == '+' or c == '*' or c == '/' or c == '-' or c == '^'): 
		return True
	else: 
		return False

# Function to convert infix to postfix expression 
def infixToPostfix(exp): 
	
	# Iterate through expression 
	for i in range(len(exp)): 
		
		# If the character is an operator, 
		# pop two elements from the stack 
		if (isOperator(exp[i])): 
			op2 = exp[i-1] 
			op1 = exp[i-2] 

			# Concatenate the two characters 
			exp = exp[:i-2] + op1 + op2 + exp[i:] 
		
			# Remove the two characters 
			exp = exp[:i-1] + exp[i+1:] 
			
			# Reduce the length of expression 
			i = i-2

	# The result is the last character of 
	# the expression after whole process 
	return exp[-1] 

# Driver Code 
exp = "A+B*C"

# Convert infix to postfix 
print (infixToPostfix(exp))
Generate a method for a Python class that returns the most commonly used words in a text document. Not applicable def most_common_words(self):
 words = {}
 words_list = self.text.split(' ')
 
 for word in words_list:
 if word in words.keys():
 words[word] += 1
 else:
 words[word] = 1
 
 return sorted(words, key=words.get, reverse=True)[:10]
Optimize a code snippet written in Python. The code snippet should create a list of numbers from 0 to 10 that are divisible by 2. arr = []
for i in range(10):
 if i % 2 == 0:
 arr.append(i) arr = [i for i in range(11) if i % 2 == 0]
Generate a Python program to sort an array of integers in linear time. [5, 4, 3, 1, 2] def sort(arr): 
    n = len(arr) 
  
    for i in range(n): 
  
        min_index = i # assuming current element is smallest 
          
        # look for smallest element in the rest of the array 
        for j in range(i+1, n): 
            if arr[j] < arr[min_index]: 
                min_index = j 
  
        arr[i], arr[min_index] = arr[min_index], arr[i] # swap 
  
    return arr
  
arr = [5, 4, 3, 1, 2] 
sorted_arr = sort(arr) 
  
print(sorted_arr)
Design a Python class for quadratic equations.  class QuadraticEquation:
    def __init__(self, a, b, c):
        self.a = a
        self.b = b
        self.c = c
        
    def get_roots(self):
        d = (self.b**2) - (4*self.a*self.c)
         
        # find two solutions
        sol1 = (-self.b-cmath.sqrt(d))/(2*self.a)
        sol2 = (-self.b+cmath.sqrt(d))/(2*self.a)
        
        return (sol1, sol2)
Create an API endpoint in Python Flask to store and retrieve product details from a MongoDB. Not applicable from flask import Flask, jsonify, request
from flask_pymongo import PyMongo

app = Flask(name)
mongo = PyMongo(app)
 
@app.route('/products', methods=['POST'])
def add_product():
 data = request.get_json()
 mongo.db.products.insert_one(data)
 return jsonify({'message': 'Product added successfully!'})
 
@app.route('/products/int:pid', methods=['GET'])
def get_product(pid):
 product = mongo.db.products.find_one({'pid': pid})
 return jsonify(product)
Implement a function in Python that takes in a list of integers and returns a new list where the elements are reversed. Input list: [1, 2, 3, 4, 5] def reverse_list(arr): 
    return arr[::-1] 

Input_list = [1, 2, 3, 4, 5]
print("Original List:", Input_list) 
Rev_list = reverse_list(Input_list) 
print("Reversed List:", Rev_list)
Create a python program that reads a list of numbers and returns the average of the numbers in the list. [1, 5, 7, 10] def compute_average(numbers):
    total = 0
    for num in numbers:
        total += num
    return total / len(numbers)

if __name__ == '__main__':
    numbers = [1, 5, 7, 10]
    print(compute_average(numbers)) # 6.0
Create a function in Python that will generate a random number between 1 and 10.  import random

def random_number():
  return random.randint(1,10)
Create a web scraper in Python to extract the number of views, likes, and dislikes from YouTube videos. Not applicable import requests
from bs4 import BeautifulSoup

url = 'https://www.youtube.com/watch?v=YAOm5YBT-Tk'
r = requests.get(url)
soup = BeautifulSoup(r.text, 'html.parser')

likes = int(soup.find("button", attrs={"title":"I like this"}).span.text)
dislikes = int(soup.find("button", attrs={"title":"I dislike this"}).span.text)
views = int(soup.find("span", attrs={"class":"view-count"}).text.strip())

print('Likes: {}, Dislikes: {}, Views: {}'.format(likes, dislikes, views))
Convert the following statement into a function in Python. If a given number is divisible by 4 and greater than 1000, print "TRUE" def count_divisible_by_four(num):
    """Prints "True" if the given number is divisible by 4 and greater than 1000"""
    if num >= 1000 and num % 4 == 0:
        print("TRUE")
Generate a Python class to represent a deck of cards in a card game.  class Deck:
    
    #constructor
    def __init__(self):
        self.cards = []

    #function to create a deck of playing cards
    def create_deck(self):
        suits = ["C", "S", "H", "D"]
        ranks = ["2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K", "A"]

        for suit in suits:
            for rank in ranks:
                card = (rank, suit)
                self.cards.append(card)

     #function to draw a card from the deck
    def draw_card(self):
        if self.cards:
            return self.cards.pop()
        else:
            return None
Generate a function in Python that takes two parameters: ‘x’ and ‘y’ and prints the output as “x is greater than y” when x is greater than y, otherwise “y is greater than or equal to x”. Not applicable def print_comparison(x, y):
 if x > y:
 print(f'{x} is greater than {y}')
 else:
 print(f'{y} is greater than or equal to {x}')
Generate a code snippet in Python that takes a user-inputted string and creates and prints a dictionary with keys that are the indices of the characters in the string. Not applicable user_string = input('Enter a string: ')
char_dict = {i:char for i, char in enumerate(user_string)}
print(char_dict)
Transform a given string to uppercase. string = "Python Programming" def to_upper(string):
    return string.upper()

string = "Python Programming"
print(to_upper(string))
Edit this Python code to execute the following tasks: for i in range(1, 11):
    print(i) for i in range(1, 11):
    print(str(i) + " squared is " + str(i ** 2))
Write a Python program to find the origin of all numbers between a given range of 1 to 1000. Between 1 and 1000 def find_origin(lower, upper):
 
 for i in range(lower, upper+1):
  num = i
  origin = ""
 
  # check if the number is a multiple of 3
  if num % 3 == 0:
   origin += "Fizz"
 
  # check if the number is a multiple of 5
  if num % 5 == 0:
   origin += "Buzz"
 
  # if number is not a multiple of 3 or 5, leave origin empty
  if origin == "":
   origin = num
 
  print(origin)

find_origin(1, 1000)
Create a basic web crawler using Python that searches for a given keyword in a website and prints the pages where it is found. Keyword: "Python"
Website: www.example.com import requests
from bs4 import BeautifulSoup

# Given a keyword and a website URL
def web_crawler(keyword, url):
    # Make a request to the given URL
    response = requests.get(url)
    soup = BeautifulSoup(response.content, 'html.parser')

    # Loop through the pages
    visited = set()
    while True:
        # Get all the links on the page
        links = soup.find_all('a')
        for link in links:
            # Get the absolute URL for the link
            link_url = link.get('href')

            # If the URL is already visited, continue
            if link_url in visited:
                continue

            # If it is a valid URL, visit it
            if link_url.startswith('http'):
                visited.add(link_url)
                response = requests.get(link_url)
                soup = BeautifulSoup(response.content, 'html.parser')

                # Search for the keyword in the page
                if keyword in response.text:
                    print(f'Found keyword "{keyword}" in URL: {link_url}')

# Test
keyword = 'Python'
url = 'www.example.com'
web_crawler(keyword, url)
Generate a Python class that stores a collection of words and counts the frequency of each word.  class WordFrequency:
    def __init__(self):
        self.words = {}

    def add_word(self, word):
        if word not in self.words:
            self.words[word] = 1
        else:
            self.words[word] += 1

    def count_frequency(self):
        for word, count in self.words.items():
            print(f"{word}: {count}")
Create a Python script that divides a list of numbers into two subsets whose sum is as close as possible. numbers = [1, 4, 8, 10, 5, 9] def divide_list(numbers):
 # find the sum of the list
 list_sum = sum(numbers)
 # try all possible combinations of dividing the list
 best_difference = float('inf')
 best_subset_1 = None
 best_subset_2 = None
 for i in range(2**len(numbers)):
 # get the binary representation of i
 bit_string = '{:0b}'.format(i).zfill(len(numbers))
 subset_1 = []
 subset_2 = []
 for j, bit in enumerate(bit_string):
  if bit == '0':
   subset_1.append(numbers[j])
  else:
   subset_2.append(numbers[j])
 # check if the difference between the two subsets is the lowest
 difference = abs(sum(subset_1) - sum(subset_2))
 if difference < best_difference:
 best_difference = difference
 best_subset_1 = subset_1
 best_subset_2 = subset_2
 return best_subset_1, best_subset_2
Write a Python program to separate a specified string into characters and numbers. str = "ab12cd3" def separate_charnum(str):
    chars = []
    nums = []
    for char in str:
        if char.isalpha():
            chars.append(char)
        else:
            nums.append(int(char))
    return chars, nums

str = "ab12cd3"

chars, nums = separate_charnum(str)
print(chars)
print(nums)
Convert the following Java program to Python. public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
} # Program to print "Hello, World!"

print("Hello, World!")
Create a program to classify movie genres using basic machine learning techniques in Python  import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# Load in the dataset 
data = pd.read_csv('movie_dataset.csv')

# Set the features and target to X and y respectively 
X = data.drop(columns=['genre'])
y = data['genre']

# Split into test and training sets 
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)

# Initialize the Random Forest Classifier  
clf = RandomForestClassifier()

# Fit the model 
clf.fit(X_train, y_train)

# Make predictions 
y_pred = clf.predict(X_test)

# Calculate accuracy 
accuracy = accuracy_score(y_test, y_pred)

# Print accuracy 
print('Accuracy of model is: ', accuracy)
Create a Python class to process text data.  class TextProcessor:
    def __init__(self):
        pass
    
    def remove_punctuation(self, text):
        # remove punctuation
        no_punct = "".join([c for c in text if c not in string.punctuation])
        return no_punct
 
    def remove_stopwords(self, text):
        # remove stopwords
        no_stopwords = [w for w in text if w not in stopwords.words('english')]
        return no_stopwords
    
    def lemmatize_words(self, text):
        # lemmatize words
        lemmatizer = WordNetLemmatizer()
        lemmatized = [lemmatizer.lemmatize(word) for word in text]
        return lemmatized
Complete this Python code to to generate a random password using a given length. length = 10 import string
import random

def generate_password(length):
    password_characters = string.ascii_letters + string.digits + string.punctuation 
    password = ''.join(random.choice(password_characters) for i in range(length))
    return password

print(generate_password(length))
Create a Python function to optimize an objective function using gradient descent.  def gradient_descent(objective_function, gradients, learning_rate, initial_parameters):
    parameters = initial_parameters
    while True:
        # Step 1: Calculate Gradient
        grads = gradients(parameters)
        
        # Step 2: Update parameters
        parameters -= learning_rate * grads
        
        # Step 3: Check stopping criteria
        if np.allclose(grads, 0):
            break
    return parameters
Develop a Python Program to sort an array without using any built-in functions.  def sort_array(array): 
    for i in range(len(array)): 
        for j in range(i+1, len(array)): 
            if array[j] < array[i]: 
                array[j], array[i] = array[i], array[j] 
  
    return array
Write a Python program that takes two sets of strings and creates a list of strings that are present in both.  def find_common(set_a, set_b):
  return [item for item in set_a if item in set_b]
The given code is a Python class called `RtlNetlist` which represents a hierarchical container for signals. It has methods to create new signals, generate a module header and body, and get the name of the debug scope. The class imports several modules and classes from external libraries, including `typing`, `hdlConvertorAst`, `hwt`, and `hwt.serializer`.  from typing import List, Optional, Union

from hdlConvertorAst.hdlAst._defs import HdlIdDef
from hdlConvertorAst.hdlAst._expr import HdlValueId
from hdlConvertorAst.hdlAst._structural import HdlModuleDec, HdlModuleDef, \
    HdlCompInst
from hwt.code import If
from hwt.hdl.operatorDefs import AllOps
from hwt.hdl.types.defs import BIT
from hwt.hdl.value import HValue
from hwt.serializer.utils import HdlStatement_sort_key, RtlSignal_sort_key
from hwt.synthesizer.dummyPlatform import DummyPlatform
from hwt.synthesizer.exceptions import SigLvlConfErr
from hwt.synthesizer.interfaceLevel.mainBases import InterfaceBase
from hwt.synthesizer.param import Param
from hwt.synthesizer.rtlLevel.mark_visibility_of_signals_and_check_drivers import\
    markVisibilityOfSignalsAndCheckDrivers
from hwt.synthesizer.rtlLevel.remove_unconnected_signals import removeUnconnectedSignals
from hwt.synthesizer.rtlLevel.rtlSignal import RtlSignal, NOT_SPECIFIED
from hwt.synthesizer.rtlLevel.rtlSyncSignal import RtlSyncSignal
from hwt.synthesizer.rtlLevel.statements_to_HdlStmCodeBlockContainers import\
    statements_to_HdlStmCodeBlockContainers
from hwt.doc_markers import internal


class RtlNetlist():
    """
    Hierarchical container for signals

    :ivar ~.parent: optional parent for debug and late component inspection
    :ivar ~.signals: set of all signals in this context
    :ivar ~.statements: list of all statements which are connected to signals in this context
    :ivar ~.subUnits: is set of all units in this context
    :type ~.interfaces: Dict[RtlSignal, DIRECTION]
    :ivar ~.interfaces: initialized in create_HdlModuleDef
    :type ~.ent: HdlModuleDec
    :ivar ~.ent: initialized in create_HdlModuleDec
    :type ~.arch: HdlModuleDef
    :ivar ~.arch: initialized in create_HdlModuleDef
    :ivar ~.hdl_objs: The list of HDL objects which were produced by this instance
        usually contains HdlModudeleDef but may contain imports/globals etc.
    """

    def __init__(self, parent: Optional["Unit"]=None):
        self.parent = parent
        self.signals = set()
        self.statements = set()
        self.subUnits = set()
        self.interfaces = {}
        self.hdl_objs = []
        self.ent = None
        self.arch = None
        self._port_items = []

    def sig(self, name, dtype=BIT, clk=None, syncRst=None,
            def_val=None, nop_val=NOT_SPECIFIED) -> Union[RtlSignal, RtlSyncSignal]:
        """
        Create new signal in this context

        :param clk: clk signal, if specified signal is synthesized
            as SyncSignal
        :param syncRst: synchronous reset signal
        :param def_val: a default value used for reset and intialization
        :param nop_val: a value which is used to drive the signal if there is no other drive
            (used to prevent latches and to specify default values for unconnected signals)
        """
        _def_val = _try_cast_any_to_HValue(def_val, dtype, True)
        if nop_val is not NOT_SPECIFIED:
            nop_val = _try_cast_any_to_HValue(nop_val, dtype, False)

        if clk is not None:
            s = RtlSyncSignal(self, name, dtype, _def_val, nop_val)
            if syncRst is not None and def_val is None:
                raise SigLvlConfErr(
                    "Probably forgotten default value on sync signal %s", name)
            # dst_resolve_fn is overriden because default assign would assign to the "next" signal
            if syncRst is not None:
                r = If(syncRst._isOn(),
                       s(_def_val, dst_resolve_fn=lambda x: x)
                    ).Else(
                       s(s.next, dst_resolve_fn=lambda x: x)
                    )
            else:
                r = [
                    s(s.next, dst_resolve_fn=lambda x: x)
                ]

            if isinstance(clk, (InterfaceBase, RtlSignal)):
                clk_trigger = clk._onRisingEdge()
            else:
                # has to be tuple of (clk_sig, AllOps.RISING/FALLING_EDGE)
                clk, clk_edge = clk
                if clk_edge is AllOps.RISING_EDGE:
                    clk_trigger = clk._onRisingEdge()
                elif clk_edge is AllOps.FALLING_EDGE:
                    clk_trigger = clk._onRisingEdge()
                else:
                    raise ValueError(
                        "Invalid clock edge specification", clk_edge)

            If(clk_trigger,
               r
            )
        else:
            if syncRst:
                raise SigLvlConfErr(
                    f"Signal {name:s} has reset but has no clk")
            s = RtlSignal(self, name, dtype, def_val=_def_val, nop_val=nop_val)

        return s

    def create_HdlModuleDec(self, name: str,
                            store_manager: "StoreManager",
                            params: List[Param]):
        """
        Generate a module header (entity) for this module
        """
        self.ent = ent = HdlModuleDec()
        ent.name = store_manager.name_scope.checked_name(name, ent)
        ns = store_manager.hierarchy_push(ent)
        # create generics
        for p in sorted(params, key=lambda x: x._name):
            hdl_val = p.get_hdl_value()
            v = HdlIdDef()
            v.origin = p
            v.name = p.hdl_name = ns.checked_name(p._name, p)
            v.type = hdl_val._dtype
            v.value = hdl_val
            ent.params.append(v)

        return ent

    def create_HdlModuleDef(self,
                            target_platform: DummyPlatform,
                            store_manager: "StoreManager"):
        """
        Generate a module body (architecture) for this module

        * Resolve name collisions
        * Convert netlist representation to HdlProcesses
        * Remove unconnected
        * Mark visibility of signals
        """
        for proc in target_platform.beforeHdlArchGeneration:
            proc(self)

        ns = store_manager.name_scope
        mdef = HdlModuleDef()
        mdef.dec = self.ent
        mdef.module_name = HdlValueId(self.ent.name, obj=self.ent)
        mdef.name = "rtl"

        processes = sorted(self.statements, key=HdlStatement_sort_key)
        processes = sorted(statements_to_HdlStmCodeBlockContainers(processes), key=HdlStatement_sort_key)

        # add signals, variables etc. in architecture
        for s in sorted((s for s in self.signals
                        if not s.hidden and
                        s not in self.interfaces.keys()),
                        key=RtlSignal_sort_key):
                v = HdlIdDef()
                v.origin = s
                s.name = v.name = ns.checked_name(s.name, s)
                v.type = s._dtype
                v.value = s.def_val
                v.is_const = s._const
                mdef.objs.append(v)

        for p in processes:
            p.name = ns.checked_name(p.name, p)
        mdef.objs.extend(processes)
        # instantiate subUnits in architecture
        for u in self.subUnits:
            ci = HdlCompInst()
            ci.origin = u
            ci.module_name = HdlValueId(u._ctx.ent.name, obj=u._ctx.ent)
            ci.name = HdlValueId(ns.checked_name(u._name + "_inst", ci), obj=u)
            e = u._ctx.ent

            ci.param_map.extend(e.params)
            ci.port_map.extend(e.ports)

            mdef.objs.append(ci)

        self.arch = mdef
        return mdef

    def getDebugScopeName(self):
        scope = []
        p = self.parent
        while p is not None:
            scope.append(p._name)
            try:
                p = p._parent
            except AttributeError:
                break

        return ".".join(reversed(scope))


@internal
def _try_cast_any_to_HValue(v, dtype, require_const):
    if isinstance(v, RtlSignal):
        assert not require_const or v._const, \
            "Initial value of signal has to be a constant"
        return v._auto_cast(dtype)
    elif isinstance(v, HValue):
        return v._auto_cast(dtype)
    elif isinstance(v, InterfaceBase):
        return v._sig
    else:
        return dtype.from_py(v)
Design and implement a Python program to print out the numbers from 1 to 100, but replace any number divisible by 3 with "Fizz" and any number divisible by 5 with "Buzz".  for i in range(1,101):
    if (i % 15 == 0):
        print("FizzBuzz")
    elif (i % 3 == 0):
        print("Fizz")
    elif (i % 5 == 0):
        print("Buzz")
    else:
        print(i)
Generate a Python program which takes in two strings as input and checks if the two strings are anagrams of each other and returns the result.  def is_anagram(str1, str2): 
  
    # Get the count of characters in str1. 
    character_counts = [0] * 256 
    for i in str1: 
        character_counts[ord(i)] += 1
  
    # Decrease count for each character of str2. 
    for i in str2: 
        character_counts[ord(i)] -= 1
  
    # Check if all counts are 0 
    for count in character_counts: 
        if count != 0: 
            return False
  
    return True
Write a function in Python to convert a dictionary into a list and then sort the list alphabetically. Example Dictionary: {'a':1, 'b':2, 'c':3} def dict_to_sorted_list(d):
 # Convert Dictionary to List
 lst = list(d.items())
 
 # Sort List Alphabetically
 lst.sort(key=lambda x: x[0])
 
 return lst
 
example_dict = {'a':1, 'b':2, 'c':3}
sorted_list = dict_to_sorted_list(example_dict)
print(sorted_list)

# Output:
# [('a', 1), ('b', 2), ('c', 3)]
Write a Python program to print out the current time. Not applicable from datetime import datetime

# get the current time and print it out
now = datetime.now()
print(now)
Create a function for checking if a string is palindrome using Python.  def is_palindrome(text):
    reverse = text[::-1] # reverse the string
    return text == reverse
Create a function in Python to multiply two matrices. ([[1,2,3], 
   [4,5,6]], 
  [[7,8], 
   [9,10], 
   [11, 12]]) def multiply_matrices(m1, m2):
    result = []
    for row_index, row in enumerate(m1):
        new_row = []
        for col_index in range(len(m2[0])):
            sum_result = 0
            for row2_index, row2 in enumerate(m2):
                sum_result += row[row2_index] * row2[col_index]
            new_row.append(sum_result)
        result.append(new_row)
    return result
Generate a random password in Python. It should include digits, symbols and upper and lowercase letters.  import random
import string

def generate_password():
    lettersAndDigits = string.ascii_letters + string.digits
    password = ''.join(random.choice(lettersAndDigits) for i in range(12))
    return password
Can you build an application with Python and Flask to handle user and card registration?  from flask import Flask, render_template, request

app = Flask(__name__)

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        user = request.form['username']
        card = request.form['card']
        # handle user and card registration here
        # ...
        return render_template('register.html', success=True)
    else:
        return render_template('register.html')

if __name__ == '__main__':
    app.run(debug=True)
Generate a python program to sort a given linked list using the quicksort algorithm  def sort_linked_list(head):
    if not head or head.next is None:
        return head

    mid = get_middle(head)
    mid_next = mid.next

    l1 = sort_linked_list(head)
    l2 = sort_linked_list(mid_next)

    return merge(l1, l2)

def merge(l1, l2):
    if l1 is None:
        return l2
    if l2 is None:
        return l1
    if l1.val < l2.val:
        l1.next = merge(l1.next, l2)
        return l1
    else:
        l2.next = merge(l1, l2.next)
        return l2

def get_middle(head):
    if not head:
        return head

    slow = head
    fast = head

    while fast.next and fast.next.next:
        slow = slow.next
        fast = fast.next.next
    return slow
Generate a numerical sequence in a given range using Python. start = 3
end = 15 def generate_sequence(start, end):
 nums = []
 for i in range(start, end+1):
 nums.append(i)
 return nums

nums = generate_sequence(3, 15)
print(nums) // [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Calculate the average of a list of numbers using a Python function. numbers = [5, 10, 15, 20] def calculateAverage(numbers):
 total = 0
 for num in numbers:
 total += num
 return total / len(numbers)

numbers = [5, 10, 15, 20]

print(calculateAverage(numbers)) // 12.5
Create a python program optimize a function with two variables such that it returns the maximum value  import numpy as np

def optimize_function(f, x_range, y_range):
	"""
	Optimizes a given function using brute force search over the specified range

	Parameters:
		f (func): Function to be optimized
		x_range (tuple): Range of x over which to search for optimal values
		y_range (tuple): Range of y over which to search for optimal values

	Returns:
		tuple: Optimal x and y values
	"""
	max_val = float("-inf")
	optimal_x = 0
	optimal_y = 0

	for x in np.arange(*x_range):
		for y in np.arange(*y_range):
			val = f(x, y)
			if val > max_val:
				optimal_x, optimal_y = x, y
				max_val = val

	return (optimal_x, optimal_y)

if __name__ == '__main__':
	def f(x, y):
    	return x**2 + y**2

	optimal_x, optimal_y = optimize_function(f, (-5, 5), (-5, 5))
	print(optimal_x, optimal_y)
Write a Python function that takes two integers, n and base, as parameters and returns a string representation of the base-n number. n: 3, base: 4 def base_n(n, base):
    result = ""
    while n != 0:
        result += str(n % base)
        n //= base
    return result[::-1]  # Reverse the string
Design an algorithm in Python to find the most common elements in an array of integers. [3, 4, 1, 2, 5, 3, 3] def most_common(nums):
    # Create a dictionary to store the counts
    counts = {}

    # Iterate over the elements
    for num in nums:
        # If the element is not present in the dictionary, add it
        if num not in counts:
            counts[num] = 0

        # Update the count
        counts[num] += 1

    # Get the maximum count
    max_count = max(counts.values())

    # Return the elements that have maximum count
    return [num for num, count in counts.items() if count == max_count]
Write a script in Python to return the cryptographic hash of a string. string = 'Welcome to the world of programming!' import hashlib

def get_hash(string):
    sha1 = hashlib.sha1()
    sha1.update(string.encode('utf-8'))
    return sha1.hexdigest()

print(get_hash(string))
Implement a decision tree classifier in Python to predict car prices. [Number_of_Doors, Vehicle_Size, Price]

[2, Small, 12000]
[4, Small, 18000]
[4, Large, 20000]
[4, Small, 25000] import pandas as pd
from sklearn import tree

# Dataset
data = [[2, 'Small', 12000], [4, 'Small', 18000], [4, 'Large', 20000], [4, 'Small', 25000]]

# Columns Headers
columns= ['Number_of_Doors', 'Vehicle_size', 'Price']

# Create Dataframe
df = pd.DataFrame(data, columns=columns)

# Create Features
X = df.iloc[:, :2].values
y = df.Price

# Create Decision Tree Classifier
clf = tree.DecisionTreeClassifier().fit(X,y)

# Making Predictions
test_data = [[2, 'Small']]
test_data_df = pd.DataFrame(test_data, columns=['Number_of_Doors', 'Vehicle_size'])
 
result = clf.predict(test_data_df)

print(result[0])
Build an HTTP API endpoint in Python using Flask that allows a user to add two numbers and returns the sum of the two numbers. Not applicable from flask import Flask, request
app = Flask(__name__)
 
@app.route('/add', methods=['POST'])
def add():
    num1 = request.json['num1']
    num2 = request.json['num2']
    sum = num1 + num2
    return {'sum': sum}

if __name__ == '__main__':
    app.run(debug=True)
Design and implement a Python class that stores words and their meanings as a dictionary.  class Dictionary (object):
    def __init__(self):
        self.data = {} #initialize empty dictionary

    def add(self, word, definition):
        self.data[word] = definition #add a new word, definition pair

    def remove(self, word):
        if word in self.data:
            del self.data[word] #removes a word, definition pair

    def print_all(self):
        for word in self.data.keys():
            print(word + ':', self.data[word]) #prints all words, definitions stored
Optimize the following Python code for calculating the area of a triangle to improve the performance. def triangle_area(side_a, side_b, side_c):
    p = (side_a + side_b + side_c) / 2
    return (p * (p - side_a) * (p - side_b) * (p - side_c)) ** 0.5 def triangle_area(side_a, side_b, side_c):
    """Calculates the area of a triangle using Heron's formula.

    Args:
      side_a (float): The length of the first side.
      side_b (float): The length of the second side.
      side_c (float): The length of the third side.

    Returns:
    float: The calculated area of the triangle.
    """

    # Compute the semi-perimeter
    s = (side_a + side_b + side_c) / 2
    
    # Calculate the area using the given sides
    return (s * (s - side_a) * (s - side_b) * (s - side_c)) ** 0.5
Create a module for generating unique tokens in Python. The module should provide a function that takes a length parameter (number of characters) and returns a unique token. length = 15 import hashlib
import string
import random

def generate_token(length):
 token_chars = string.ascii_letters + string.digits
 token = ''.join(random.choice(token_chars) for _ in range(length))
 return hashlib.sha256(token.encode('utf-8')).hexdigest()

length = 15
token = generate_token(length)
print(token)  # Output: 830af667b1a5cb6405df21f2d54d46a2
Draft a code to find the most frequent character from a string. "Python Program" def most_frequent_char(data):
    # Create a dictionary of characters frequency
    data_dict = {}
    for char in data:
        if char not in data_dict:
            data_dict[char] = 0
        data_dict[char] += 1

    # Find the character with highest frequency
    max_freq = 0
    max_freq_char = None
    for char, freq in data_dict.items():
        if freq > max_freq:
            max_freq = freq
            max_freq_char = char

    return max_freq_char

most_frequent_char("Python Program")
# Output: 'p'
Create a recursive function in Python that calculates the factorial of a given number. n = 5 def factorial(n): 
    if n == 1:
        return 1
    else:
        return n * factorial(n-1)

result = factorial(5)
print(result) # prints 120
Generate a code for automated deployment of an application on Amazon Web Services (AWS). Not applicable # Necessary libraries
import boto3

# Create an S3 bucket
s3 = boto3.resource('s3')
s3.create_bucket(Bucket='example-bucket')

# Create an EC2 instance
ec2 = boto3.resource('ec2')
instance = ec2.create_instances(
    ImageId= 'ami-035be7bafff33b6b6',
    MinCount=1,
    MaxCount=1,
    KeyName='example-key',
    InstanceType='t2.micro')

# Create a security group
security_group = ec2.create_security_group(
    GroupName= 'example-sg',
    Description= 'example security group')

# Add rules to the security group
security_group.authorize_ingress(
    CidrIp='0.0.0.0/0',
    IpProtocol='-1',
    FromPort='-1',
    ToPort='-1')

# Wait for the instance to start up
ec2.Instance(instance[0].id).wait_until_running()

# Install the necessary libraries
ec2.Instance(instance[0].id).run_command(
    'sudo apt-get install -y python')

ec2.Instance(instance[0].id).run_command(
    'sudo apt-get install -y apache2')

# Write the relevant configuration files
ec2.Instance(instance[0].id).run_command(
    'sudo echo "Hello World" > /var/www/html/index.html')

ec2.Instance(instance[0].id).run_command(
    'sudo echo "Listen 80" > /etc/apache2/ports.conf')

# Restart the service
ec2.Instance(instance[0].id).run_command(
    'sudo systemctl restart apache2')
Write a function in Python to create a list containing all even numbers between 1 and 20 (inclusive).  def even_numbers():
    even_list = []
    for number in range(1, 21):
        if number % 2 == 0:
            even_list.append(number)
    return even_list
Generate a correct python program that reverses a string string = "Hello" def reverse_string(string):
    reversed_string = ""
    for char in string:
        reversed_string = char + reversed_string
    return reversed_string
Create a function in Python to remove all non-alphanumeric characters in a string. Not applicable import re

def remove_non_alphanum(str):
 return re.sub(r'[^\w]', '', str)
Given a JSON string, write a Python program that prints out the values for each key. {"FirstName": "John", "LastName": "Smith"} import json

data_string = '{"FirstName": "John", "LastName": "Smith"}'
data = json.loads(data_string)

for key, value in data.items(): 
    print("{} = {}".format(key, value))
Generate a machine learning model in Python to predict prices from the provided dataset.  # Load data
import pandas as pd
df = pd.read_csv('data.csv')

# Extract features and target
X = df.drop('price', axis=1).values
y = df['price'].values

# Split into train and test 
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train machine learning model
from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train, y_train)

# Generate predictions
y_pred = regressor.predict(X_test)
Develop an API endpoint in Python that reads a parameter from the URL and stores it in a database table. The type of the parameter is "country". from flask import Flask, request
import mysql.connector

app = Flask(__name__)

# Connect to database
db = mysql.connector.connect(
 user='root', 
 password='***', 
 host='localhost', 
 database='project'
)

@app.route('/api/<country>', methods=['GET'])
def store_country(country):
 cursor = db.cursor()
 command = 'INSERT INTO Countries (name) VALUES (%s)'
 values = (country,)

 cursor.execute(command, values)
 db.commit()

if __name__ == '__main__':
 app.run()
Can you write a code snippet to flatten a 2D array in Python? [[1, 2, 3], [4, 5, 6], [7, 8, 9]] def flatten_2d_array(arr):
    flattened_arr = []
    for row in arr:
        for item in row:
            flattened_arr.append(item)
    return flattened_arr

arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
flattened_arr = flatten_2d_array(arr)
print(flattened_arr)
Implement a function in Python that takes a Huffman tree and drop all its leaf nodes. (1)
      /      \
    (2)      (3)
    / \      / \
  (4) (5)  (6) (7) def dropLeafNodes(head): 
    
    # If node is not None and doesn't have any children 
    if head and not head.left and not head.right: 
        return None
  
    # Don't change anything if head is None 
    if not head: 
        return None
  
    # Recursively call dropLeafNodes on left and right subtrees
    head.left = dropLeafNodes(head.left) 
    head.right = dropLeafNodes(head.right) 
  
    # Return head of the modified tree
    return head
Design a function in Python that returns the maximum number from a 2D array along with its index. my_array = [[5, 7, 8], [4, 10, 11], [13, 2, 6]] def max_2d_array(my_array):
    max_number = my_array[0][0]
    max_index = 0
    for row_index in range(len(my_array)):
        for col_index in range(len(my_array[row_index])):
            if my_array[row_index][col_index] > max_number:
                max_number = my_array[row_index][col_index]
                max_index = (row_index, col_index)
    return max_number, max_index

print(max_2d_array(my_array))
Develop a Python program to calculate the total area of a group of rectangles. [[3, 4], [6, 6], [1, 8]] rectangles = [[3, 4], [6, 6], [1, 8]]

# calculate the total area
def calculateTotalArea(rectangles):
 total_area = 0
 for x, y in rectangles:
 total_area += x * y
 return total_area

total_area = calculateTotalArea(rectangles)
print(total_area) # 81
Write a function in Python to convert a given time in hours, minutes and seconds, to a total number of seconds. hours: 2
minutes: 3
seconds: 4 def time_to_seconds(hours, minutes, seconds): 
     return (hours * 3600) + (minutes * 60) + seconds
 
result = time_to_seconds(2, 3, 4) 
print(result)
Implement an algorithm for spelling correction in Python. Not applicable import re

def spell_correction(word):
  # Remove punctuation
  word = re.sub(r'[^\w\s]', '', word)
  # Separate words using whitespace
  word_list = word.split()
  # Create a set to store the dictionary words
  dict_words = set()
  # Open the words.txt dictionary
  with open('words.txt', 'r') as file:
    # Read each line and add to the dictionary
    for line in file:
      dict_words.add(line.rstrip('\n'))
  # Create a correction list
  corrections = []
  # Iterate over the word list
  for word in word_list:
    # If word is in the dictionary, add to correction list
    if word in dict_words:
      corrections.append(word)
    # Otherwise, search for a correction
    else:
      # Connect character to the ones before and after 
      for pos in range(1,len(word)):
        # Store prefix and suffix
        prefix = word[:pos]
        suffix = word[pos+1:]
        # Store possible correction
        correction = prefix + word[pos] + suffix
        # Check if the correction is in the dictionary
        if correction in dict_words:
          corrections.append(correction)
          break
  # Return the corrected words
  return ' '.join(corrections)
Develop a program in Python to classify the sentiment of a given sentence.  from textblob import TextBlob

def sentiment_classifier(sentence):
  sentiment_score = TextBlob(sentence).sentiment.polarity
  if sentiment_score > 0:
    return 'positive'
  elif sentiment_score < 0:
    return 'negative'
  else:
    return 'neutral'
Implement the Cohen-Sutherland clipping algorithm in Python.  def cohen_sutherland_clipping(x1, y1, x2, y2, box):
    code_p1 = get_code(x1, y1, box)
    code_p2 = get_code(x2, y2, box)

    accept = False
    while (True):

        if (code_p1 == 0 and code_p2 == 0):
            accept = True
            break
        elif (code_p1 & code_p2 != 0):
            break
        else:
            x, y = get_intersection(x1, y1, x2, y2, box, code_p1)
            if (code_p1 == 0):
                x2 = x
                y2 = y
                code_p2 = get_code(x2, y2, box) 
            else:
                x1 = x
                y1 = y
                code_p1 = get_code(x1, y1, box)

    if (accept):
        return (x1, y1, x2, y2)
    else:
        return False
Create a basic web server in Python that serves static pages from a given directory. Not applicable import http.server
import socketserver

PORT = 8080

Handler = http.server.SimpleHTTPRequestHandler

with socketserver.TCPServer(("", PORT), Handler) as httpd:
 print("Serving at port", PORT)
 httpd.serve_forever()
Generate a python program which sorts an array using the bubble sort algorithm. [3, 2, 5, 2, 4] def bubble_sort(arr):
    # Traverse through all array elements 
    for i in range(len(arr)):
 
        # Last i elements are already in place 
        for j in range(0, len(arr)-i-1):
 
            # traverse the array from 0 to n-i-1
            # Swap if the element found is greater than the next element 
            if arr[j] > arr[j+1] :
                arr[j], arr[j+1] = arr[j+1], arr[j]
 
    return arr

result = bubble_sort([3, 2, 5, 2, 4]))
print(result)
Create a function in Python to get the largest element in a given list. [4,8,2,9,10] def get_largest_element(nums):
    largest = nums[0]
    for i in range(1, len(nums)):
        if nums[i] > largest:
            largest = nums[i]
    return largest

# Test the function
numbers = [4,8,2,9,10]
print(get_largest_element(numbers)) # Output: 10
Write a Python program to check if a given string is a rotation of another given string. str1 = "waterbottle"
str2 = "erbottlewat" def is_rotation(str1, str2):
 if len(str1) != len(str2):
  return False
 
 concat_str2 = str2 * 2
 
 return str1 in concat_str2
 
is_rotation(str1, str2)
The given code defines a Python class called RLC that contains methods to draw various circuit elements. To draw a bipole, resistor, potentiometer, capacitor, or inductor, call the corresponding method with the desired parameters. The methods take a parent object, position, value, label, angleDeg, flagVolt, voltName, flagCurr, currName, invertArrows, and convention as parameters. The methods return a group object containing the drawn element.  #!/usr/bin/python

import inkscapeMadeEasy_Base as inkBase
import inkscapeMadeEasy_Draw as inkDraw


class RLC(inkBase.inkscapeMadeEasy):
    # ---------------------------------------------
    def drawBipoleGeneral(self, parent, position=[0, 0], value='Z', label='Bipole', angleDeg=0, flagVolt=True,
                          voltName='v', flagCurr=True, currName='i', invertArrows=False, convention='passive'):
        """ draws a generic bipole with a rectangle

        parent: parent object
        position: position [x,y]
        value: string with resistor value. (default 'Z')

        label: label of the object (it can be repeated)
        angleDeg: rotation angle in degrees counter-clockwise (default 0)
        flagVolt: indicates whether the voltage arrow must be drawn (default: true)
        voltName: voltage drop name (default: v)
        flagCurr: indicates whether the current arrow must be drawn (default: true)
        currName: current drop name (default: i)
        invertArrows: invert V/I arrow directions (default: False)
        convention: passive/active sign convention. available types: 'passive' (default) , 'active'
        """

        group = self.createGroup(parent, label)
        elem = self.createGroup(group)

        inkDraw.line.relCoords(elem, [[15.5, 0]], position)
        inkDraw.line.relCoords(elem, [[19, 0], [0, -6], [-19, 0], [0, 6]], [position[0] + 15.5, position[1] + 3])
        inkDraw.line.relCoords(elem, [[15.5, 0]], [position[0] + 34.5, position[1]])

        pos_text = [position[0] + 25, position[1] - 3 - self.textOffset]
        if inkDraw.useLatex:
            value = '$' + value + '$'

        inkDraw.text.latex(self, group, value, pos_text, fontSize=self.fontSize, refPoint='bc',
                           preambleFile=self.preambleFile)

        if angleDeg != 0:
            self.rotateElement(group, position, angleDeg)

        if flagVolt:
            if convention == 'passive':
                self.drawVoltArrow(group, [position[0] + 25, position[1] + 5], name=voltName, color=self.voltageColor,
                                   angleDeg=angleDeg, invertArrows=not invertArrows)
            if convention == 'active':
                self.drawVoltArrow(group, [position[0] + 25, position[1] + 5], name=voltName, color=self.voltageColor,
                                   angleDeg=angleDeg, invertArrows=invertArrows)

        if flagCurr:
            self.drawCurrArrow(group, [position[0] + 40, position[1] - 5], name=currName, color=self.currentColor,
                               angleDeg=angleDeg, invertArrows=invertArrows)

        return group

    # ---------------------------------------------
    def drawResistor(self, parent, position=[0, 0], value='R', label='Resistor', angleDeg=0, flagVolt=True,
                     voltName='v', flagCurr=True, currName='i', invertArrows=False, convention='passive'):
        """ draws a resistor

        parent: parent object
        position: position [x,y]
        value: string with resistor value. If it ends with 'ohm', 'OHM' or 'Ohm', proper Ohm symbol will be added. (Default 'R')

        label: label of the object (it can be repeated)
        angleDeg: rotation angle in degrees counter-clockwise (default 0)
        flagVolt: indicates whether the voltage arrow must be drawn (default: true)
        voltName: voltage drop name (default: v)
        flagCurr: indicates whether the current arrow must be drawn (default: true)
        currName: current drop name (default: i)
        invertArrows: invert V/I arrow directions (default: False)
        convention: passive/active sign convention. available types: 'passive' (default) , 'active'
        """

        group = self.createGroup(parent, label)
        elem = self.createGroup(group)

        inkDraw.line.relCoords(elem, [[15.5, 0], [2, 3], [3, -6], [3, 6], [3, -6], [3, 6], [3, -6], [2, 3], [15.5, 0]],
                               position)

        pos_text = [position[0] + 25, position[1] - 3 - self.textOffset]
        if inkDraw.useLatex:
            value = '$' + value + '$'

        inkDraw.text.latex(self, group, value, pos_text, fontSize=self.fontSize, refPoint='bc',
                           preambleFile=self.preambleFile)

        if angleDeg != 0:
            self.rotateElement(group, position, angleDeg)

        if flagVolt:
            if convention == 'passive':
                self.drawVoltArrow(group, [position[0] + 25, position[1] + 5], name=voltName, color=self.voltageColor,
                                   angleDeg=angleDeg, invertArrows=not invertArrows)
            if convention == 'active':
                self.drawVoltArrow(group, [position[0] + 25, position[1] + 5], name=voltName, color=self.voltageColor,
                                   angleDeg=angleDeg, invertArrows=invertArrows)

        if flagCurr:
            self.drawCurrArrow(group, [position[0] + 40, position[1] - 5], name=currName, color=self.currentColor,
                               angleDeg=angleDeg, invertArrows=invertArrows)

        return group

    # ---------------------------------------------
    def drawPotentiometer(self, parent, position=[0, 0], value='R', label='Potentiometer', angleDeg=0, flagVolt=True,
                          voltName='v', flagCurr=True, currName='i', invertArrows=False, is3T=False,
                          convention='passive'):
        """ draws a potentiometer

        parent: parent object
        position: position [x,y]
        value: string with resistor value.

        label: label of the object (it can be repeated)
        angleDeg: rotation angle in degrees counter-clockwise (default 0)
        flagVolt: indicates whether the voltage arrow must be drawn (default: true)
        voltName: voltage drop name (default: v)
        flagCurr: indicates whether the current arrow must be drawn (default: true)
        currName: current drop name (default: i)
        invertArrows: invert V/I arrow directions (default: False)
        is3T: indicates the drawPotentiometer has 3 terminals (default:false)
        convention: passive/active sign convention. available types: 'passive' (default) , 'active'
        """

        group = self.createGroup(parent, label)
        elem = self.createGroup(group)

        # build arrow marker
        colorBlack = inkDraw.color.defined('black')
        L_arrow = 2.5
        markerPath = 'M 0,0 l -%f,%f l 0,-%f z' % (L_arrow * 1.2, L_arrow / 2.0, L_arrow)
        markerArrow = inkDraw.marker.createMarker(self, 'BJTArrow', markerPath, RenameMode=1, strokeColor=colorBlack,
                                                  fillColor=colorBlack, lineWidth=0.6,
                                                  markerTransform='translate (1,0)')
        lineStyleArrow = inkDraw.lineStyle.set(lineWidth=1, lineColor=colorBlack, markerEnd=markerArrow)

        inkDraw.line.relCoords(elem, [[15.5, 0], [2, 3], [3, -6], [3, 6], [3, -6], [3, 6], [3, -6], [2, 3], [15.5, 0]],
                               position)

        # 2-terminal Potentiometer
        if is3T:
            inkDraw.line.relCoords(elem, [[0, -10]], [position[0] + 25, position[1] + 15], lineStyle=lineStyleArrow)
            pos_text = [position[0] + 25, position[1] - 3 - self.textOffset]
        else:
            inkDraw.line.relCoords(elem, [[20, -12]], [position[0] + 15, position[1] + 6], lineStyle=lineStyleArrow)
            pos_text = [position[0] + 25, position[1] - 6 - self.textOffset]

        if inkDraw.useLatex:
            value = '$' + value + '$'

        inkDraw.text.latex(self, group, value, pos_text, fontSize=self.fontSize, refPoint='bc',
                           preambleFile=self.preambleFile)

        if angleDeg != 0:
            self.rotateElement(group, position, angleDeg)

        if flagVolt:
            if is3T:
                pos = [position[0] + 25, position[1] - 13]
                invertCurvature = True
            else:
                pos = [position[0] + 25, position[1] + 8]
                invertCurvature = False

            if convention == 'passive':
                self.drawVoltArrowSimple(group, pos, name=voltName, color=self.voltageColor, angleDeg=0,
                                         invertArrows=invertArrows, invertCurvatureDirection=invertCurvature)

            if convention == 'active':
                self.drawVoltArrowSimple(group, pos, name=voltName, color=self.voltageColor, angleDeg=0,
                                         invertArrows=not invertArrows, invertCurvatureDirection=invertCurvature)

        if flagCurr:
            if is3T:
                pos = [position[0] + 40, position[1] - 5]
            else:
                pos = [position[0] + 42, position[1] - 5]
            self.drawCurrArrow(group, pos, name=currName, color=self.currentColor, angleDeg=angleDeg,
                               invertArrows=invertArrows)

        return group

    # ---------------------------------------------
    def drawCapacitor(self, parent, position=[0, 0], value='C', label='Capacitor', flagPol=False, angleDeg=0,
                      flagVolt=True, voltName='v', flagCurr=True, currName='i', invertArrows=False,
                      convention='passive'):
        """ draws a capacitor

        parent: parent object
        position: position [x,y]
        value: string with value.
        label: label of the object (it can be repeated)
        flagPol: draw sign for polarized capacitor
        angleDeg: rotation angle in degrees counter-clockwise (default 0)
        flagVolt: indicates whether the voltage arrow must be drawn (default: true)
        voltName: voltage drop name (default: v)
        flagCurr: indicates whether the current arrow must be drawn (default: true)
        currName: current drop name (default: i)
        invertArrows: invert V/I arrow directions (default: False)
        convention: passive/active sign convention. available types: 'passive' (default) , 'active'
        """

        group = self.createGroup(parent, label)
        elem = self.createGroup(group, label)

        inkDraw.line.relCoords(elem, [[23, 0]], position)
        inkDraw.line.relCoords(elem, [[-23, 0]], [position[0] + 50, position[1]])
        inkDraw.line.relCoords(elem, [[0, -14]], [position[0] + 23, position[1] + 7])
        inkDraw.line.relCoords(elem, [[0, -14]], [position[0] + 27, position[1] + 7])

        pos_text = [position[0] + 25, position[1] - 8 - self.textOffset]
        if inkDraw.useLatex:
            value = '$' + value + '$'

        inkDraw.text.latex(self, group, value, pos_text, fontSize=self.fontSize, refPoint='bc',
                           preambleFile=self.preambleFile)

        if flagPol:
            inkDraw.text.write(self, '+', [position[0] + 31, position[1] - 3], group, self.textStyle, fontSize=5)

        if angleDeg != 0:
            self.rotateElement(group, position, angleDeg)

        if flagVolt:
            if convention == 'passive':
                self.drawVoltArrow(group, [position[0] + 25, position[1] + 9], name=voltName, color=self.voltageColor,
                                   angleDeg=angleDeg, invertArrows=not invertArrows)
            if convention == 'active':
                self.drawVoltArrow(group, [position[0] + 25, position[1] + 9], name=voltName, color=self.voltageColor,
                                   angleDeg=angleDeg, invertArrows=invertArrows)

        if flagCurr:
            self.drawCurrArrow(group, [position[0] + 40, position[1] - 5], name=currName, color=self.currentColor,
                               angleDeg=angleDeg, invertArrows=invertArrows)

        return group

    # ---------------------------------------------
    def drawInductor(self, parent, position=[0, 0], value='L', label='Inductro', angleDeg=0, flagVolt=True,
                     voltName='v', flagCurr=True, currName='i', invertArrows=False, convention='passive'):
        """ draws an inductor

        parent: parent object
        position: position [x,y]
        value: string with resistor value. If it ends with 'ohm', 'OHM' or 'Ohm', proper Ohm symbol will be added. (Default 'R')

        label: label of the object (it can be repeated)
        angleDeg: rotation angle in degrees counter-clockwise (default 0)
        flagVolt: indicates whether the voltage arrow must be drawn (default: true)
        voltName: voltage drop name (default: v)
        flagCurr: indicates whether the current arrow must be drawn (default: true)
        currName: current drop name (default: i)
        invertArrows: invert V/I arrow directions (default: False)
        convention: passive/active sign convention. available types: 'passive' (default) , 'active'
        """

        group = self.createGroup(parent, label)
        elem = self.createGroup(group, label)

        inkDraw.line.relCoords(elem, [[13, 0]], position)
        inkDraw.line.relCoords(elem, [[-13, 0]], [position[0] + 50, position[1]])

        inkDraw.arc.centerAngStartAngEnd(elem, [position[0] + 16, position[1]], 3.0, 0.0, 180.0, [0, 0], flagOpen=True,
                                         largeArc=False)
        inkDraw.arc.centerAngStartAngEnd(elem, [position[0] + 22, position[1]], 3.0, 0.0, 180.0, [0, 0], flagOpen=True,
                                         largeArc=False)
        inkDraw.arc.centerAngStartAngEnd(elem, [position[0] + 28, position[1]], 3.0, 0.0, 180.0, [0, 0], flagOpen=True,
                                         largeArc=False)
        inkDraw.arc.centerAngStartAngEnd(elem, [position[0] + 34, position[1]], 3.0, 0.0, 180.0, [0, 0], flagOpen=True,
                                         largeArc=False)

        pos_text = [position[0] + 25, position[1] - self.textOffset]
        if inkDraw.useLatex:
            value = '$' + value + '$'

        inkDraw.text.latex(self, group, value, pos_text, fontSize=self.fontSize, refPoint='bc',
                           preambleFile=self.preambleFile)

        if angleDeg != 0:
            self.rotateElement(group, position, angleDeg)

        if flagVolt:
            if convention == 'passive':
                self.drawVoltArrow(group, [position[0] + 25, position[1] + 5], name=voltName, color=self.voltageColor,
                                   angleDeg=angleDeg, invertArrows=not invertArrows)
            if convention == 'active':
                self.drawVoltArrow(group, [position[0] + 25, position[1] + 5], name=voltName, color=self.voltageColor,
                                   angleDeg=angleDeg, invertArrows=invertArrows)

        if flagCurr:
            self.drawCurrArrow(group, [position[0] + 40, position[1] - 5], name=currName, color=self.currentColor,
                               angleDeg=angleDeg, invertArrows=invertArrows)

        return group

Write a function in Python that takes three positive integers as arguments and returns the largest one.  def get_largest(a, b, c):
    largest = a 
    if b>largest:
        largest = b
    if c>largest:
        largest = c
    return largest

print(get_largest(10, 20, 15))
Generate an appropriate script in Python for converting minutes to hours, rounding off the result to the nearest integer.  def minutes_to_hours(minutes):
    hours = minutes//60
    return int(round(hours))
Create a function in Python that takes two lists and returns a new list with elements from both lists in the same order that appear in the longest list. list1 = [1, -2, 3]
list2 = [4, 5, -6] def combine_list(list1, list2):
    if len(list1) > len(list2):
        longest_list = list1
        shortest_list = list2
    else:
        longest_list = list2
        shortest_list = list1
        
    combined_list = []
    i = 0

    for el in longest_list:
        combined_list.append(el)
        if i < len(shortest_list):
            combined_list.append(shortest_list[i])
        i += 1
    return combined_list

list1 = [1, -2, 3]
list2 = [4, 5, -6]
combine_list(list1, list2)  # [1, 4, -2, 5, 3, -6]
Create a python function that takes two integers as parameters, and return the greater of the two numbers.  def greater_of_two_numbers(int1, int2):
    if int1 > int2:
        return int1
    else:
        return int2
Write a Python program that finds the sum of squares of all numbers between 1 and 10  def sum_of_squares(start, end):
    """ This function calculates the sum of squared
    numbers from start to end
    
    Input:
        start: starting number
        end: ending number
    
    Output:
        total: total sum of squares
    """
    
    total = 0
    for num in range(start, end + 1):
        total += num ** 2
    return total

total_sum = sum_of_squares(1, 10)
print(total_sum)
Create an web application using Python Flask to calculate the temperature and humidity of a given location. Location: Los Angeles import requests
import json
import flask
from flask import request, jsonify
 
app = flask.Flask(__name__)

@app.route('/temperature', methods=['POST'])
def temperature():
 location = request.json['location']
 
 url = 'https://api.openweathermap.org/data/2.5/weather?'
 payload = {'q': location, 'appid': 'your_api_key_here'}
 r = requests.get(url, params=payload).json()
 
 temperature = r['main']['temp'] - 273.15
 humidity = r['main']['humidity']
 
 result = {
  'location': location,
  'temperature': temperature,
  'humidity': humidity
  }
 return jsonify(result)
 
if __name__ == '__main__':
 app.run(debug=True)
Create a supervised Machine Learning classification model in Python to predict the type of animal based on four numerical features. Not applicable import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier

# Read the dataset
dataset = pd.read_csv('dataset.csv')

# Define features and labels
X = dataset.iloc[:, :4]
y = dataset.iloc[:, -1]

# Split the dataset into training set and test set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)

# Normalize the data
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Create and train the model
model = KNeighborsClassifier(n_neighbors=3)
model.fit(X_train, y_train)

# Test the model
accuracy = model.score(X_test, y_test)
print('Accuracy: ', accuracy)
Create a multi-dimensional array containing 3 rows and 3 columns in python  arr = [[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]]
Create a function in Python that takes in a list of integers and prints out the largest multiple of 3. List: [3, 15, 4, 6, 5] def largestMultipleOf3(list): 
    list.sort() 
    running_sum = 0
    for i in range(len(list)): 
        running_sum += list[i] 

    if running_sum % 3 == 0:  
        return running_sum  

    return largestMultipleOf3(list[:-1]) 

list = [3, 15, 4, 6, 5] 
print(largestMultipleOf3(list)) // 15
Analyze the given python code and suggest any possible optimizations. n = int(input())
arr = [int(x) for x in input().split()]
x = int(input())

for i in range(n):
    if arr[i] > x:
        print(arr[i]) n = int(input())
arr = [int(x) for x in input().split()]
x = int(input())

j = 0
for i in range(n):
    if arr[i] > x:
        print(arr[i])
        j = i
        break

for i in range(j+1, n):
    if arr[i] > x and arr[i] < arr[j]:
        print(arr[i])
        j = i
Create a Python script to print the absolute difference between two given numbers. 9, 5 def absolute_difference(A, B): 
    return abs(A - B) 
  
# Driver Code 
A = 9
B = 5
print(absolute_difference(A, B))
Let's write a loop in Python to take the average of two numbers Numbers: [45, 65] x = [45, 65]
total = 0
for i in range(len(x)):
  total += x[i]
  average = total / len(x)

print("Average of the numbers is:", average)
Write an algorithm in Python to check if a number is a palindrome. number = 121 def is_palindrome(number): 
num = number  
   
# initializing a reverse number  
reverse = 0
  
# Reverse the given number 
while(number > 0): 
   remainder = number % 10
   # Create reverse 
   reverse = (reverse * 10) + remainder 
   number = number // 10 
 
# check if original and reverse numbers are same
if (num == reverse): 
  return True
else: 
  return False
Create a Python program to download and save a web page using the Requests library. https://www.example.com import requests

url = 'https://www.example.com'

response = requests.get(url)

with open('example.html', 'wb') as file:
 file.write(response.content)
Create a searching algorithm in Python to find a target element in a list of integers. target = 7
elements = [1, 2, 3, 4, 5, 6, 7, 8] def search(target, elements):
  start = 0 
  end = len(elements) - 1

  while start <= end:
    mid = (start + end) // 2 
      
    if target == elements[mid]: 
      return True 
  
    elif target < elements[mid]: 
      end = mid - 1

    else: 
      start = mid + 1
    
  return False
Write a Python script to simulate the behavior of a vending machine.  class VendingMachine:
    def __init__(self):
        self.items = []
        self.balance = 0

    def insert_coin(self, amount):
        self.balance += amount

    def add_item(self, item):
        self.items.append(item)

    def remove_item(self, item):
        self.items.remove(item)

    def purchase_item(self, item):
        if self.balance >= item.price:
            self.items.remove(item)
            self.balance -= item.price

    def return_change(self):
        change = self.balance
        self.balance = 0
        return change
Create an AI-driven object detection application using TensorFlow and Python. Not applicable #imports 
import os
import cv2 
import numpy as np 
import tensorflow as tf 
import matplotlib.pyplot as plt 

#read the image 
image_path = "image.jpg"
img = cv2.imread(image_path)

#Load the model 
model = tf.saved_model.load("model")

#Process the image 
img_dim = (224, 224)
img = cv2.resize(img, img_dim) 

#Predict and output the result
prediction = model.predict(np.expand_dims(img, 0))
classes = ["cat", "dog", "bird"]

print("prediction = {}".format(classes[prediction.argmax()])
Generate Python code that uses a list comprehension to take a given list of numbers and multiple each by 10. [1,2,3,4] [x * 10 for x in [1,2,3,4]]
Generate a Python program which will take as input a string and output the corresponding hexadecimal representation of the string. "Hello world" import binascii

def stringToHex(s):
 output = ''
 for c in s:
 output += '%02x' % ord(c)

return output

inputString = input('Input a string:')
hexString = stringToHex(inputString)
print("The hexadecimal representation of the string is: {}".format(hexString))
Create a translation field for storing a string in multiple languages in a Django model. Use the TransCharField or TransTextField subclass of TransField depending on the widget needed. Use the TransDbValue class to store the translations in a dictionary format and implement the get_in_language and set_in_language methods to access the translations. Use the TransFormField class for form validation in admin and when using ModelForm.  from django.db import models
from django.conf import settings
from django.utils.translation import get_language
from django.utils.translation import ugettext as _
from django.utils.encoding import force_unicode, smart_str, smart_unicode
from django.forms.fields import Field
from django.forms import ValidationError
from widgets import TransCharWidget, TransTextWidget

def get_default_language_name():
    '''
    Get language from default language specified by LANGUAGE_CODE in settings
    Used in error messages
    '''
    lang_name = ''
    for lang in settings.LANGUAGES:
        if lang[0] == settings.LANGUAGE_CODE:
            lang_name = lang[1]
            break
    return force_unicode(lang_name)

class TransDbValue(unicode):
    '''
    This class implements a unicode string, but with a hidden attribute raw_data.
    When used as a string it returns the translation of the current language
    raw_data attribute stores a dictionary with all translations
    Also implements a method "get_in_language(language)" that returns the translation on any available language
    '''
    raw_data = {}

    def get_in_language(self, language):
        if self.raw_data and self.raw_data.has_key(language):
            return self.raw_data[language]
        else:
            return u''

    def set_in_language(self, language, value):
        self.raw_data[language] = value

class TransFormField(Field):
    '''
    forms field, used when ModelForm (or deprecated form_for_model/form_form_instance) is called
    Also implements form validation in admin
    '''
    def clean(self, value):
        if isinstance(value, dict) and self.required:
            filled_value = [ v for v in value.values() if bool(v) ]
            if not filled_value:
                raise ValidationError, _("This field is required.")
        return super(TransFormField, self).clean(value)

class TransField(models.Field):
    '''
    Model field to be subclassed
    Used for storing a string in many languages at database (with python's dictionary format)
    pickle module could be used, but wouldn't alow search on fields?
    '''
    def get_internal_type(self):
        return 'TextField'

    def to_python(self, value):
        if isinstance(value, TransDbValue):
            return value

        if isinstance(value, dict): # formfield method makes this function be called with value as a dict
            python_value = value
        else:
            try:
                python_value = eval(value)
                for k,v in python_value.items():
                    python_value[k] = smart_unicode(v)
            except Exception:
                python_value = None
        if isinstance(python_value, dict):
            if python_value.has_key(get_language()) and python_value[get_language()]:
                result = TransDbValue(python_value[get_language()])
            elif python_value.has_key(settings.LANGUAGE_CODE) and python_value[settings.LANGUAGE_CODE]:
                result = TransDbValue(python_value[settings.LANGUAGE_CODE])
            else:
                val = "bal"
                for item in python_value.items():
                    try:
                        val = item[1]
                    except:
                        pass
                    if val: break

                result = TransDbValue(python_value.items()[0][1])
            result.raw_data = python_value
        else:
            result = TransDbValue(value)
            result.raw_data = {settings.LANGUAGE_CODE: value}
        return result

    def get_db_prep_save(self, value):
        if not isinstance(value, TransDbValue):
            return value
        value = [u"'%s': '''%s'''" % (k, v) for k, v in value.raw_data.items()]
        value = u'{%s}' % u','.join(value)
        return smart_str(value)

    def formfield(self, **kwargs):
        defaults = {'form_class': TransFormField}
        defaults.update(kwargs)
        return super(TransField, self).formfield(**defaults)

    def flatten_data(self, follow, obj=None): 
        '''
        for serializing objects
        '''
        raw_data = self._get_val_from_obj(obj).raw_data.copy()
        for k,v in raw_data.items():
            raw_data[k] = smart_str(v)
        return {self.attname: raw_data}

class TransCharField(TransField):
    '''
    TransField used with CharField widget
    '''
    __metaclass__ = models.SubfieldBase

    def formfield(self, **kwargs):
        kwargs['widget'] = TransCharWidget
        return super(TransCharField, self).formfield(**kwargs)

class TransTextField(TransField):
    '''
    TransField used with CharField widget
    '''
    __metaclass__ = models.SubfieldBase

    def formfield(self, **kwargs):
        kwargs['widget'] = TransTextWidget
        return super(TransTextField, self).formfield(**kwargs)


Write a Python function to calculate the Levenshtein distance between two strings. 'stenography' and 'graphomist' def levenshtein_distance(s1, s2):
    n = len(s1)
    m = len(s2)
    table = [[0] * (m+1) for _ in range(n+1)]

    for i in range(n+1):
        table[i][0] = i
    for j in range(m+1):
        table[0][j] = j

    for i in range(1, n+1):
        for j in range(1, m+1):
            diff = 0 if s1[i-1] == s2[j-1] else 1
            table[i][j] = min(table[i-1][j-1] + diff,
                            table[i-1][j] + 1,
                            table[i][j-1] + 1)
    return table[n][m]

str1 = "stenography"
str2 = "graphomist"
result = levenshtein_distance(str1, str2)
print(result)
Generate a correct Python program to filter out elements of a list using lambda list = [1,2,3,4,5] list = [1,2,3,4,5]

result = list(filter(lambda x : x % 2 == 0 , list))
print(result)
Write a Python program to vertically center an aligned text by inserting padding spaces above and bottom of the text. 'Hello World!' space = " " * 10
lines = inp.split('\n')
padded = '\n'.join(space + line + space for line in lines)
print(padded)
Develop a solution which adds two numbers X and Y and prints the sum as output using Python. X = 10 
Y = 20 x = 10
y = 20

sum = x + y

print(sum) # Output: 30
Write a python program to generate a random letter of the alphabet.  import random 
  
# create a list of all the letters in the alphabet
alphabet = ["a", "b", "c", "d", "e", "f", "g", "h", 
             "i", "j", "k", "l", "m", "n", "o", "p", 
             "q", "r", "s", "t", "u", "v", "w", "x", 
             "y", "z"] 
  
# generate a random letter
random_letter = random.choice(alphabet)
print(random_letter)
Create a machine learning model using Python and the Sci-kit Learn package to predict net sales value for a company. Dataframe containing the following columns: 
- Region (categorical): the region where the company operates
- Area (categorical): the area (urban, suburban, or rural) of the region
- Employee Count (int): the number of employees in the company
- Promotion (int): the amount spent on advertising and promotions
- Price (float): the price of the products from sklearn.ensemble import RandomForestRegressor

region = pd.get_dummies(data['Region'])
area = pd.get_dummies(data['Area'])

X = data.drop(['Net Sales'], axis=1)
X = pd.concat([X, region, area], axis=1)

y = data['Net Sales']

ml_model = RandomForestRegressor()
ml_model.fit(X, y)
Generate a Python script to filter the data in a given DataFrame and store the filtered data in a new DataFrame Filter data on a data frame by age and store filtered data in a new DataFrame def filter_df_by_age(df, age):
    # Filter the dataframe
    filtered_df = df[df['age'] > age]

    # Create the new dataframe
    new_df = filtered_df.copy()

    # Return the new dataframe
    return new_df
Generate a code in Python to sort an array using insertion sort. [1, 3, 5, 2, 4] def insertion_sort(arr):
    for j in range(1, len(arr)):
        key = arr[j]
        i = j - 1
        while i >= 0 and arr[i] > key:
            arr[i + 1] = arr[i]
            i -= 1
        arr[i + 1] = key
    return arr

# Main program
input_array = [1, 3, 5, 2, 4]
output_array = insertion_sort(input_array)
print(output_array)
Create a script in Python to print the squares of all numbers in the given list. [1, 2, 3, 4, 5] for n in [1, 2, 3, 4, 5]:
 print(n**2)
Create a basic program in Python that takes in two numbers and calculates the product. int a = 5;
int b = 10; def product(a, b):
 	return a * b
 
print(product(5, 10))
Create a Python class to represent a college student and its attributes.  class CollegeStudent:
    def __init__(self, name, age, major):
        self.name = name
        self.age = age
        self.major = major
    
    def get_name(self):
        return self.name
    
    def get_age(self):
        return self.age
    
    def get_major(self):
        return self.major
Write a python program to create a histogram of the given list elements list: [1, 2, 4, 5, 6, 3, 2] def create_histogram(list):
    hist = dict()
    
    for i in list:
        if i not in hist:
            hist[i] = 1
        else:
            hist[i] += 1
    
    return hist
Write a Python script to parse a JSON string and convert it into a dictionary. '{"name": "GPT", "type": "AI"}' import json

json_str = '{"name": "GPT", "type": "AI"}'

dict_x = json.loads(json_str)
print(dict_x)
Using the skeleton code provided, finish the code and make it a valid python script. #!/usr/bin/env python
# skeleton.py

# TODO: Write code here...

if __name__ == "__main__":
    pass #!/usr/bin/env python
# skeleton.py

def functionA():
    pass

def functionB():
    pass

def main():
    functionA()
    functionB()

if __name__ == "__main__":
    main()
Implement a spell checker in Python.  import re
import collections

def words(text): 
    return re.findall('[a-z]+', text.lower()) 

def train(features):
    model = collections.defaultdict(lambda: 1)
    for f in features:
        model[f] += 1
    return model

NWORDS = train(words(open('big.txt').read()))

def edits1(word):
    s = [(word[:i], word[i:]) for i in range(len(word) + 1)]
    deletes    = [a + b[1:] for a, b in s if b]
    transposes = [a + b[1] + b[0] + b[2:] for a, b in s if len(b)>1]
    replaces   = [a + c + b[1:] for a, b in s for c in alphabet if b]
    inserts    = [a + c + b     for a, b in s for c in alphabet]
    return set(deletes + transposes + replaces + inserts)

def known_edits2(word):
    return set(e2 for e1 in edits1(word) for e2 in edits1(e1) if e2 in NWORDS)

def known(words): 
    return set(w for w in words if w in NWORDS)

def correct(word):
    candidates = known([word]) or known(edits1(word)) or known_edits2(word) or [word]
    return max(candidates, key=NWORDS.get)
Define an iterator using a Python class.  class MyIterator:
  def __init__(self, data):
    self.data = data
    self.index = 0
  
  def __iter__(self):
    return self
  
  def __next__(self):
    if self.index >= len(self.data):
      raise StopIteration
    item = self.data[self.index]
    self.index += 1
    return item

  def __len__(self):
    return len(self.data)
Generate a Python class for a Book with properties such as title, author, year, and genre. Not applicable class Book:
 def __init__(self, title, author, year, genre):
 self.title = title
 self.author = author
 self.year = year
 self.genre = genre

 def getTitle(self):
 return self.title

 def getAuthor(self):
 return self.author

 def getYear(self):
 return self.year

 def getGenre(self):
 return self.genre
Write Python code to print the fibonnaci sequence up to the given number. Input: 10 """
Print the Fibonacci sequence up to the given number
"""

def fibonacci(n):
    # Base case
    if n == 0 or n == 1:
        return n
 
    # Recursive case
    return fibonacci(n-1) + fibonacci(n-2)
 
# Print the Fibonacci sequence up to the given number
n = 10
for i in range(n + 1):
    print(fibonacci(i))
Create a Python script to match parts of speech of two given sentences. Sentence 1: She is the best player.
Sentence 2: He is the worst player. from nltk import word_tokenize, pos_tag
 
def match_pos(sent1, sent2):
    sent1_tokens, sent2_tokens = word_tokenize(sent1), word_tokenize(sent2)
    sent1_pos, sent2_pos = pos_tag(sent1_tokens), pos_tag(sent2_tokens)
    matches = []
    for i in range(min(len(sent1_pos),len(sent2_pos))):
        if sent1_pos[i][1] == sent2_pos[i][1]:
            matches.append(sent1_pos[i][0] + ':' + sent2_pos[i][0])
    return matches
 
sent1 = 'She is the best player.'
sent2 = 'He is the worst player.'
 
print(match_pos(sent1,sent2))
Write a function in Python that will take two inputs, an array of strings and a letter, and returns the number of elements in the array that contain the given letter. ['cat', 'dog', 'fish','apple']
letter: 'a' def count_elements_with_letter(arr,letter):
   count = 0
   for a in arr:
      if letter in a:
         count += 1 
   
   return count 

count_elements_with_letter(['cat','dog','fish','apple'], 'a')
# output: 3
Use a Python function to determine the maximum of three given numbers.  def maxOfThree(a, b, c):
    return max(a, b, c)
Create a program in Python to find the longest common sequence from two given strings. string1 = "ABCD"
string2 = "BCDE" def LongestCommonSequence(string1, string2):
 
 n = len(string1)
 m = len(string2)
 
 LCS = [[0 for x in range(m+1)] for y in range(n+1)]
 
 for i in range(n):
 for j in range(m):
 if (string1[i] == string2[j]):
 LCS[i][j] = LCS[i-1][j-1] + 1
 else:
 LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1])
 
#return the longest common sequence
 index = LCS[n][m]
 lcs = [""] * (index+1)
 lcs[index] = ""
 i = n
 j = m
 while i > 0 and j > 0:
 if (string1[i-1] == string2[j-1]):
 lcs[index-1] = string1[i-1]
 i -= 1
 j -= 1
 index -= 1
 
 elif (LCS[i-1][j] > LCS[i][j-1]):
 i -= 1
 else:
 j -= 1
 
 return "".join(lcs)
 
 print(LongestCommonSequence(string1, string2))
Modify the provided python code to find the length of a given list. my_list = [1, 2, 3, 4, 5] my_list = [1, 2, 3, 4, 5]

# Function to find the length of a given list
def find_length(my_list):
  # Variable to store the length of the list
  length = 0
  
  # Loop through the list and increment length by 1 for every element in the list
  for element in my_list:
    length += 1
  
  # return the length of the list
  return length

# Call the function 
print("Length of the list is:", find_length(my_list)) # 5
Write a Python program to find the difference of two sets. set_1 = {1,2,3,4,5}
set_2 = {2,4,6,8,10} difference = set_1.difference(set_2)
Build a machine learning model in Python to predict customer churn using the given dataset. The given dataset contains customers demographic information and their past month usage records. import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# read dataset
dataset = pd.read_csv('customer_churn.csv')

# separate features(X) and labels (y)
y = dataset.churn
X = dataset.drop('churn', axis=1)

# split dataset into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)

# create and train the model
model = LogisticRegression(solver='liblinear').fit(X_train, y_train)

# predict using the model
y_pred = model.predict(X_test)

# calculate accuracy
accuracy = accuracy_score(y_test, y_pred)
print('accuracy: ', accuracy)
Create a system in Python for generating natural language responses. A sample utterance "What time is it?" from tensorflow.keras.layers import Input, Dense, Embedding, GRU
from tensorflow.keras.models import Model
from tensorflow.keras.utils import plot_model

# Create inputs
inputs1 = Input(shape=(20,))
x1 = Embedding(1000, 64)(inputs1)
x1 = GRU(128)(x1)

# Create outputs
y1 = Dense(1000, activation='softmax')(x1)

# Create model
model = Model(inputs=[inputs1], outputs=[y1])

# Compile the model
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

# Train the model
model.fit([inputs], [outputs],  epochs=10, batch_size=32)

# Generate the response to the sample utterance
query = "What time is it?"
prediction = model.predict(query)

print(prediction)
Convert the Python code attached to an equivalent Java program. def print_list(lst):
    for item in lst:
        print(item) public class ListPrinter {
    public static void printList(List<Object> lst) {
        for (Object item : lst) {
            System.out.println(item);
        }
    }
}
Write a Python program to create a simple web page using Flask. The web page should include a greeting (e.g. "Hello, World") and a form with a "Submit" button. When the button is clicked, it should show a message saying "Form Submitted". Not applicable from flask import Flask, render_template, request

app = Flask(__name__)

@app.route("/", methods = ["GET", "POST"])
def index():
if request.method == "POST":
 return render_template("index.html", message="Form Submitted")
return render_template("index.html", message= "Hello, World")

if __name__ == "__main__":
 app.run(debug=True)

# index.html

<html>
 <head>
 <title>Form Submission</title>
 </head>
 <body>
 <h1>{{message}}</h1>
 <form action="/" method="post">
 <input type="submit" value="Submit" />
 </form>
 </body>
</html>
Write a Python program to display a calendar showing the current month. Not applicable import calendar
from datetime import date

today = date.today()

cal = calendar.month(today.year, today.month)
print(cal)
Generate a Python program that takes an array as an input and prints each element of the array in a new line. [10, 20, 30, 40] arr = [10, 20, 30, 40]

for num in arr:
    print(num)
Construct a function to compute the area of a triangle in Python  def area_of_triangle(base, height):
    """Compute the area of a triangle in Python
    
    Parameters
    --------------
    base: float
        The length of the triangle's base
    height: float
        The measure of the triangle's height

    Returns
    --------------
    float
        The area of the triangle
    """
    return 0.5 * base * height
Write a Python function that accepts an integer as an argument and returns its factorial.  def factorial(n):
    if n == 0: 
        return 1
    else: 
        return n * factorial(n-1)
Write an API endpoint for a basic user authentication system in Python. It should accept a username and password, validate them, and return a token if the user is valid. username: john
password: pass123 import jwt
 
@app.route('/auth', methods=['POST'])
def auth():
 username = request.form.get('username')
 password = request.form.get('password')
 
 # authenticate the user here
 
 token = jwt.encode({'username': username}, app.config['SECRET_KEY'])
 
 return token
Create a function in Python that takes an input string and returns whether it is a palindrome. txt = "madam" def isPalindrome(txt):
    i = 0
    j = len(txt) - 1
    
    while i < j:
        if txt[i] != txt[j]:
            return False
        i += 1
        j -= 1
    
    return True

print(isPalindrome(txt)) // True
Generate a Python script to evaluate the expression (5 - 22 ) +18  # Evaluate the expression (5 - 22 ) +18  
result = (5 - 22) + 18  
 
print("The result is:", result)
Build a program in Python to find the factorial of a given number using recursion.  def factorial(n): 
    if n == 0: 
        return 1
    else: 
        return n * factorial(n-1) 
  
# Driver Code 
num = 5
print(factorial(num))
Write a Python program to find the sum of all odd numbers up to a given number.  def find_sum(n):
sum = 0

for i in range(1, n + 1):
    if i % 2 != 0:
        sum += i
return sum

n = 10
print("Sum of odd numbers from 1 to", n, "is", find_sum(n))
Create a program in Python to calculate the length of a given string without using the len() method. string="Python" def length(string):
    count = 0
    for char in string:
        count += 1
    return count

string="Python"

print(length(string))
Write a Python program to transform user input from lowercase to uppercase. This is a sample string input_string = input('Enter a string: ')

output_string = input_string.upper()

print(f'Your input in uppercase is: {output_string}')
Create a function in Python that takes an array of integers and returns an array of their squares. [1, 2, 3] def square_array(nums): 
    return [n**2 for n in nums] 

result = square_array([1, 2, 3])
print(result)
This code is a Python script that defines a class called "source" and several methods within it. To use this code, import the necessary modules and create an instance of the "source" class. Then, call the appropriate methods to perform actions such as searching for movies or TV shows, retrieving sources for a given URL, or resolving a URL. The code also includes a license statement at the beginning, which should be retained if the code is used or modified.  # -*- coding: UTF-8 -*-
#######################################################################
 # ----------------------------------------------------------------------------
 # "THE BEER-WARE LICENSE" (Revision 42):
 # @tantrumdev wrote this file.  As long as you retain this notice you
 # can do whatever you want with this stuff. If we meet some day, and you think
 # this stuff is worth it, you can buy me a beer in return. - Muad'Dib
 # ----------------------------------------------------------------------------
#######################################################################

# Addon Name: Placenta
# Addon id: plugin.video.placenta
# Addon Provider: Mr.Blamo

import re, urllib, urlparse, base64, json, unicodedata

from resources.lib.modules import cleantitle
from resources.lib.modules import client
from resources.lib.modules import proxy


class source:
    def __init__(self):
        self.priority = 1
        self.language = ['fr']
        self.domains = ['filmenstreaminghd.co']

        #http://dpstreaming.tv/?s=max+steel
        #http://dpstreaming.tv/max-steel-vostfr-streaming-telecharger/']

        self.base_link = 'http://www.filmenstreaminghd.co'
        self.key_link = '?'
        self.moviesearch_link = 's=%s'
        self.tvsearch_link = 's=%s'

    def movie(self, imdb, title, localtitle, aliases, year):
        try:
            url = {'imdb': imdb, 'title': title, 'year': year}
            url = urllib.urlencode(url)
            return url
        except:
            return

    def tvshow(self, imdb, tvdb, tvshowtitle, localtvshowtitle, aliases, year):
        try:
            url = {'imdb': imdb, 'tvdb': tvdb, 'tvshowtitle': tvshowtitle, 'year': year}
            url = urllib.urlencode(url)
            return url
        except:
            return

    def episode(self, url, imdb, tvdb, title, premiered, season, episode):
        try:
            if url == None: return

            url = urlparse.parse_qs(url)
            url = dict([(i, url[i][0]) if url[i] else (i, '') for i in url])
            url['title'], url['premiered'], url['season'], url['episode'] = title, premiered, season, episode
            url = urllib.urlencode(url)
            return url
        except:
            return

    def sources(self, url, hostDict, hostprDict):
        try:
            print '-------------------------------    -------------------------------'
            sources = []

            print url

            data = urlparse.parse_qs(url)
            data = dict([(i, data[i][0]) if data[i] else (i, '') for i in data])

            season = data['season'] if 'season' in data else False
            episode = data['episode'] if 'episode' in data else False

            print season, episode

            if season and episode:
                print 'TV'

                self.search_link = 'query=%s&submit=Submit+Query'
                aTitle = data['tvshowtitle']

            else:
                self.search_link = 'query=%s&submit=Submit+Query'
                aTitle = data['title']


            post = self.search_link % (urllib.quote_plus(cleantitle.query(aTitle)))
            url = 'http://www.filmenstreaminghd.com/recherche/'


            t = cleantitle.get(aTitle)

            r = client.request(url, XHR=True, referer=url, post=post)

            r = client.parseDOM(r, 'div', attrs={'class': 'film-k kutu-icerik kat'})

            if season and episode:
                t = t + 'saison0' + season

            r = client.parseDOM(r, 'div', attrs={'class': 'play fa fa-play-circle'})
            r = sorted(set(r))
            r = [(client.parseDOM(r, 'a', ret='href'), client.parseDOM(r, 'a', ret='title')) for i in r]
            r = [(i[0][0], i[1][0].lower()) for i in r if len(i[0]) > 0 and len(i[1]) > 0]
            r = [i[0] for i in r if t == cleantitle.get(i[1])][0]
            #r = sorted(set(r))

            url0 = '%s%s' % ('http://www.filmenstreaminghd.com' , r)
            print url0
            url = client.replaceHTMLCodes(url0)
            url = url0.encode('utf-8')

            r = client.request(url, XHR=True, referer=url)
            r = re.sub('(\n|\t)', '', r)

            langue = re.compile('<b class=\"fa fa-cc\"></b><span>(.+?)</span>', re.MULTILINE | re.DOTALL).findall(r)[0]
            if langue == 'VF':
                langue = 'FR'

            quality2 = re.compile('<div class=\"kalite\">(.+?)</div>', re.MULTILINE | re.DOTALL).findall(r)[0]
            quality2 = re.sub('-', '', quality2)

            if season and episode:
                unLien0a = client.parseDOM(r, 'div', attrs={'class': 'dizi-bolumleri'})[0]
                r = re.compile('Saison\s+0%s\s+\-\s+Episode\s+0%s(.+?)class=\"dropit-trigger\">' % (season, episode), re.MULTILINE | re.DOTALL).findall(unLien0a)[0]
                unLien0b = client.parseDOM(r, 'li', ret='id')
            else:
                r = client.parseDOM(r, 'div', attrs={'class': 'dizi-bolumleri film'})
                unLien0b = client.parseDOM(r, 'span', ret='id')

            counter = 0

            for unLienUrl in unLien0b:

                if 'gf-' in unLienUrl:
                    continue

                dataUrl = urllib.urlencode({'pid': unLienUrl[1:]})
                dataUrl = client.request(url0, post=dataUrl, XHR=True, referer=url0)

                try:
                    url = client.parseDOM(dataUrl, 'iframe', ret='src')[1]
                except:
                    url = client.parseDOM(dataUrl, 'iframe', ret='src')[0]

                if url.startswith('//'):
                    url = url.replace('//', '', 1)

                host = re.findall('([\w]+[.][\w]+)$', urlparse.urlparse(url.strip().lower()).netloc)[0]
                if not host in hostDict: continue
                host = client.replaceHTMLCodes(host)
                host = host.encode('utf-8')

                url = url.encode('utf-8')

                if '1080p' in quality2:
                    quality = '1080p'
                elif '720p' in quality2 or 'bdrip' in quality2 or 'hdrip' in quality2:
                    quality = 'HD'
                else:
                    quality = 'SD'

                if 'dvdscr' in quality2 or 'r5' in quality2 or 'r6' in quality2:
                    quality2 = 'SCR'
                elif 'camrip' in quality2 or 'tsrip' in quality2 or 'hdcam' in quality2 or 'hdts' in quality2 or 'dvdcam' in quality2 or 'dvdts' in quality2 or 'cam' in quality2 or 'telesync' in quality2 or 'ts' in quality2:
                    quality2 = 'CAM'

                sources.append({'source': host, 'quality': quality, 'language': langue, 'url': url, 'direct': False, 'debridonly': False})

            print sources

            return sources
        except:
            return sources


    def resolve(self, url):

        return url

Write a Python program to create a dictionary containing the given list of numbers and their squares as values. [1,2,3,4,5] my_list = [1,2,3,4,5]

squares_dictionary = {}

for x in my_list:
  squares_dictionary[x] = x**2

print(squares_dictionary)
Create a Python program to classify the sentiment of movie reviews using Natural Language Processing. The movie was terrible. It felt like it would never end! import nltk
from nltk.sentiment import vader

sentence = 'The movie was terrible. It felt like it would never end!'

sid = vader.SentimentIntensityAnalyzer()
scores = sid.polarity_scores(sentence)

if scores['neg'] > scores['pos']:
  print('The sentiment of the sentence is negative!')
else:
  print('The sentiment of the sentence is positive!')
Generate a list of prime numbers in Python list comprehension format within 1000.  primes_list = [num for num in range(2, 1000) if all(num % i != 0 for i in range(2, num))]
Write a python code for solving the following equation for "x". Equation: 4x^2 + 7x − 5 = 0 """
Write a python code for solving the following equation for "x".
"""

import math

def solve_equation(a, b, c):
    d = (b**2) - (4 * a * c)
    x1 = (-b + math.sqrt(d)) / (2 * a)
    x2 = (-b - math.sqrt(d)) / (2 * a)
    return x1, x2
    
if __name__ == '__main__':
    a = 4
    b = 7
    c = -5
    x1, x2 = solve_equation(a, b, c)
    print("The solutions are x1 = {}, x2 = {}".format(x1, x2))

# Output
# The solutions are x1 = 1.5, x2 = -2.5
Define 2 functions, one called prod() and the other called total(), using Python. prod() should return the product of two numbers, while total() should take a list of numbers as an argument and return the sum of all the numbers in the list. Not applicable def prod(a, b):
    return a*b

def total(mylist):
    sum = 0
    for num in mylist:
        sum += num
    return sum
Create a web application in Python with Flask and Mongodb as the backend to provide an end-to-end solution for editing user profile information. The user profile must include fields for name, email address, phone number, age, location, and profession. from flask import Flask, request, jsonify
from pymongo import MongoClient

app = Flask(__name__)

client = MongoClient('localhost', 27017)
db = client.user_database
users = db.users

@app.route('/user', methods=['GET', 'POST'])
def user_profile():
 if request.method == 'GET':
 # Retrieve user profile information
 user_info = users.find_one({'_id': request.args.get('id')})
 return jsonify(user_info)

 elif request.method == 'POST':
 # Update user profile information
 data = request.get_json()
 users.update({
 '_id': data['id']
 }, {
 'name': data['name'],
 'email': data['email'],
 'phone': data['phone'],
 'age': data['age'],
 'location': data['location'],
 'profession': data['profession']
 })
 result = users.find_one({'_id': data['id']})
 return jsonify({'result': result})

if __name__ == '__main__':
 app.run()
Generate an automated scheduling system in Python. Schedule Data
[{
 task: 'meeting', 
 date: '01-04-2020',
 time: '9.00am', 
 duration: '1 hour' 
},
{
 task: 'presentation', 
 date: '03-04-2020', 
 time: '10.00am',
 duration: '2.30 hours'
}] import datetime

# define the data structure for schedule
class Schedule: 
 def __init__(self, task, date, time, duration):
        self.task = task
        self.date = date
        self.time = time
        self.duration = duration

# define a function to check for conflicts
def check_conflicts(schedule_list):
     start_times = []
     end_times = []
     for schedule in schedule_list:
        # convert the date and time strings to datetime objects
        start_time = datetime.datetime.strptime(f'{schedule.date} {schedule.time}', '%d-%m-%Y %H.%M%p')
        end_time = start_time + datetime.timedelta(minutes=schedule.duration)
        # append the start and end times to lists 
        start_times.append(start_time)
        end_times.append(end_time)

     # loop over the start list
     for i in range(len(start_times)):
        # if the current start time is between another start or end time, there is a conflict
        if start_times[i] > min(start_times) and start_times[i] < max(end_times):
            return False
     # otherwise, there isn't a conflict
     return True 

# Create a sample agenda
schedule_list = [
 Schedule('Meeting', '01-04-2020', '9.00am', 60),
 Schedule('Presentation', '03-04-2020', '10.00am', 150) 
]

# print the result
print(check_conflicts(schedule_list))
Construct a web scraper in Python that downloads some content from website www.example.com  import requests
from bs4 import BeautifulSoup

# Make a GET request to fetch the raw HTML content
html_content = requests.get('http://www.example.com').text

# Parse the html content
soup = BeautifulSoup(html_content, "lxml")

# Scrape the content
content = soup.p

# Save the content in a text file
with open('content.txt', 'w') as file:
    file.write(content)
Generate a machine learning model in Python using scikit-learn to predict the probability of a passenger surviving the Titanic disaster. A comma-separated file of Titanic passenger records such as Age, Gender, Fare, etc # Import necessary packages
import pandas as pd 
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier

# Read the data
data = pd.read_csv(input.csv)

# Extract the features and labels from the data
X = data.drop('Survived', axis=1)
y = data['Survived']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the Random Forest model
clf = RandomForestClassifier(n_estimators=1000, max_depth=10, random_state=0)

# Train the model
clf.fit(X_train, y_train)

# Evaluate the model
accuracy = clf.score(X_test, y_test)
print('Model accuracy:', accuracy)
Generate a GraphQL API in Python to create and read Books. Books should have a title and an author Not applicable import asyncio
import graphene
from graphene import ObjectType, InputObjectType, String
from graphene_sqlalchemy import SQLAlchemyObjectType

from models import Book

# Declare a Book data type
class BookObject(SQLAlchemyObjectType):
 class Meta:
 model = Book

# Define a Book Create Input type
class BookCreateInput(InputObjectType):
 title = String(required=True)
 author = String(required=True)

# Create Book mutation
class CreateBook(graphene.Mutation):
 class Arguments:
 book_data = BookCreateInput(required=True)
 
 book = graphene.Field(BookObject)
 
 async def mutate(cls, info, book_data):
 loop = asyncio.get_running_loop()
 session = info.context['session']
 async with session.begin_nested():
 book = await loop.run_in_executor(None, lambda: Book(**book_data))
 session.add(book)
 await session.commit()
 return CreateBook(book=book)

# Queries
class Query(ObjectType):
 book = graphene.Field(BookObject, title=String(required=True))
 
 def resolve_book(self, info, title):
 return Book.query.filter_by(title=title).first()

# Mutations
class Mutation(ObjectType):
 create_book = CreateBook.Field()

schema = graphene.Schema(query=Query, mutation=Mutation)
Write an algorithm in Python to find the exponentiation of a given base and an exponent. base = 2
exponent = 4 def pow(base, exponent): 
    result = 1
    for i in range(exponent): 
        result = result * base 
    return result 

base = 2
exponent = 4
print('The result of {}^{} is {}'.format(base, exponent, pow(base, exponent)))
Develop an Artificial Neural Network (ANN) model in Python to predict prices of houses. A dataset containing housing prices and related features #import required libraries
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
import tensorflow as tf

#load the dataset
df = pd.read_csv('housing_data.csv')

#separate features and targets
X = df.iloc[:, 0:-1].values
y = df.iloc[:, -1].values

#scale the data
scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)

#split the data in train and test
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2)

#build the model
model = tf.keras.models.Sequential([
 tf.keras.layers.Dense(32, activation='relu', input_shape=[X_train.shape[1]]),
 tf.keras.layers.Dense(1)
])

model.compile(loss='mean_squared_error', optimizer='adam', metrics=['mae'])

#train the model
model.fit(X_train, y_train, epochs=50, batch_size=10)

#test the model
model.evaluate(X_test, y_test)
The given code provides functions to transfer data to and from a GPUArray instance, set values in a GPUArray by index, and set values in a GPUArray by index from indexed values in another GPUArray. Use these functions to efficiently manipulate data on a GPU.  #!/usr/bin/env python

import numbers

import numpy as np
import pycuda.driver as drv
import pycuda.elementwise as elementwise
import pycuda.gpuarray as gpuarray
from pycuda.tools import dtype_to_ctype

# List of available numerical types provided by numpy: 
# XXX This try/except is an ugly hack to prevent the doc build on
# ReadTheDocs from failing:
try:
    num_types = [np.typeDict[t] for t in \
                 np.typecodes['AllInteger']+np.typecodes['AllFloat']]
except TypeError:
    num_types = []

# Numbers of bytes occupied by each numerical type:
num_nbytes = dict((np.dtype(t), t(1).nbytes) for t in num_types)

def set_realloc(x_gpu, data):
    """
    Transfer data into a GPUArray instance.

    Copies the contents of a numpy array into a GPUArray instance. If
    the array has a different type or dimensions than the instance,
    the GPU memory used by the instance is reallocated and the
    instance updated appropriately.
    
    Parameters
    ----------
    x_gpu : pycuda.gpuarray.GPUArray
        GPUArray instance to modify.
    data : numpy.ndarray
        Array of data to transfer to the GPU.

    Examples
    --------
    >>> import pycuda.gpuarray as gpuarray
    >>> import pycuda.autoinit
    >>> import numpy as np
    >>> import misc
    >>> x = np.asarray(np.random.rand(5), np.float32)
    >>> x_gpu = gpuarray.to_gpu(x)
    >>> x = np.asarray(np.random.rand(10, 1), np.float64)
    >>> set_realloc(x_gpu, x)
    >>> np.allclose(x, x_gpu.get())
    True
    
    """

    # Only reallocate if absolutely necessary:
    if x_gpu.shape != data.shape or x_gpu.size != data.size or \
        x_gpu.strides != data.strides or x_gpu.dtype != data.dtype:
        
        # Free old memory:
        x_gpu.gpudata.free()

        # Allocate new memory:
        nbytes = num_nbytes[data.dtype]
        x_gpu.gpudata = drv.mem_alloc(nbytes*data.size)
    
        # Set array attributes:
        x_gpu.shape = data.shape
        x_gpu.size = data.size
        x_gpu.strides = data.strides
        x_gpu.dtype = data.dtype
        
    # Update the GPU memory:
    x_gpu.set(data)

def bufint(a):
    """
    Return buffer interface to GPU array.

    Parameters
    ----------
    a : pycuda.gpuarray.GPUArray
        GPU array.

    Returns
    -------
    b : buffer
        Buffer interface to array. Returns None if `a` has a length of 0.
    """

    assert isinstance(a, gpuarray.GPUArray)
    if a.size:
        return a.gpudata.as_buffer(a.nbytes)
    else:
        return None

def set_by_inds(dest_gpu, ind, src_gpu, ind_which='dest'):
    """
    Set values in a GPUArray by index.

    Parameters
    ----------
    dest_gpu : pycuda.gpuarray.GPUArray
        GPUArray instance to modify.
    ind : pycuda.gpuarray.GPUArray or numpy.ndarray
        1D array of element indices to set. Must have an integer dtype.
    src_gpu : pycuda.gpuarray.GPUArray
        GPUArray instance from which to set values.
    ind_which : str
        If set to 'dest', set the elements in `dest_gpu` with indices `ind`
        to the successive values in `src_gpu`; the lengths of `ind` and
        `src_gpu` must be equal. If set to 'src', set the
        successive values in `dest_gpu` to the values in `src_gpu` with indices
        `ind`; the lengths of `ind` and `dest_gpu` must be equal.

    Examples
    --------
    >>> import pycuda.gpuarray as gpuarray
    >>> import pycuda.autoinit
    >>> import numpy as np
    >>> import misc
    >>> dest_gpu = gpuarray.to_gpu(np.arange(5, dtype=np.float32))
    >>> ind = gpuarray.to_gpu(np.array([0, 2, 4]))
    >>> src_gpu = gpuarray.to_gpu(np.array([1, 1, 1], dtype=np.float32))
    >>> misc.set_by_inds(dest_gpu, ind, src_gpu, 'dest')
    >>> np.allclose(dest_gpu.get(), np.array([1, 1, 1, 3, 1], dtype=np.float32))
    True
    >>> dest_gpu = gpuarray.to_gpu(np.zeros(3, dtype=np.float32))
    >>> ind = gpuarray.to_gpu(np.array([0, 2, 4]))
    >>> src_gpu = gpuarray.to_gpu(np.arange(5, dtype=np.float32))
    >>> misc.set_by_inds(dest_gpu, ind, src_gpu)
    >>> np.allclose(dest_gpu.get(), np.array([0, 2, 4], dtype=np.float32))
    True

    Notes
    -----
    Only supports 1D index arrays.

    May not be efficient for certain index patterns because of lack of inability
    to coalesce memory operations.
    """

    # Only support 1D index arrays:
    assert len(np.shape(ind)) == 1
    assert dest_gpu.dtype == src_gpu.dtype
    assert issubclass(ind.dtype.type, numbers.Integral)
    N = len(ind)

    # Manually handle empty index array because it will cause the kernel to
    # fail if processed:
    if N == 0:
        return
    if ind_which == 'dest':
        assert N == len(src_gpu)
    elif ind_which == 'src':
        assert N == len(dest_gpu)
    else:
        raise ValueError('invalid value for `ind_which`')
    if not isinstance(ind, gpuarray.GPUArray):
        ind = gpuarray.to_gpu(ind)
    try:
        func = set_by_inds.cache[(dest_gpu.dtype, ind.dtype, ind_which)]
    except KeyError:
        data_ctype = dtype_to_ctype(dest_gpu.dtype)
        ind_ctype = dtype_to_ctype(ind.dtype)        
        v = "{data_ctype} *dest, {ind_ctype} *ind, {data_ctype} *src".format(data_ctype=data_ctype, ind_ctype=ind_ctype)
    
        if ind_which == 'dest':
            func = elementwise.ElementwiseKernel(v, "dest[ind[i]] = src[i]")
        else:
            func = elementwise.ElementwiseKernel(v, "dest[i] = src[ind[i]]")
        set_by_inds.cache[(dest_gpu.dtype, ind.dtype, ind_which)] = func
    func(dest_gpu, ind, src_gpu, range=slice(0, N, 1))
set_by_inds.cache = {}

def set_by_inds_from_inds(dest_gpu, ind_dest, src_gpu, ind_src):
    """
    Set values in a GPUArray by index from indexed values in another GPUArray.

    Parameters
    ----------
    dest_gpu : pycuda.gpuarray.GPUArray
        GPUArray instance to modify.
    ind_dest : pycuda.gpuarray.GPUArray or numpy.ndarray
        1D array of element indices in `dest_gpu` to set. Must have an integer dtype.
    src_gpu : pycuda.gpuarray.GPUArray
        GPUArray instance from which to set values.
    ind_src : pycuda.gpuarray.GPUArray or numpy.ndarray
        1D array of element indices in `src_gpu` to copy. Must have an integer dtype.
    """

    assert len(np.shape(ind_dest)) == 1
    assert len(np.shape(ind_src)) == 1
    assert dest_gpu.dtype == src_gpu.dtype
    assert ind_dest.dtype == ind_src.dtype
    assert issubclass(ind_dest.dtype.type, numbers.Integral)
    assert issubclass(ind_src.dtype.type, numbers.Integral)
    N = len(ind_src)

    # Manually handle empty index array because it will cause the kernel to
    # fail if processed:
    if N == 0:
        return
    assert N == len(ind_dest)
    if not isinstance(ind_dest, gpuarray.GPUArray):
        ind_dest = gpuarray.to_gpu(ind_dest)
    if not isinstance(ind_src, gpuarray.GPUArray):
        ind_src = gpuarray.to_gpu(ind_src)
    try:
        func = set_by_inds_from_inds.cache[(dest_gpu.dtype, ind_dest.dtype)]
    except KeyError:
        data_ctype = dtype_to_ctype(dest_gpu.dtype)
        ind_ctype = dtype_to_ctype(ind_dest.dtype)        
        v = "{data_ctype} *dest, {ind_ctype} *ind_dest,"\
            "{data_ctype} *src, {ind_ctype} *ind_src".format(data_ctype=data_ctype, ind_ctype=ind_ctype)        
        func = elementwise.ElementwiseKernel(v,
                "dest[ind_dest[i]] = src[ind_src[i]]")
        set_by_inds_from_inds.cache[(dest_gpu.dtype, ind_dest.dtype)] = func
    func(dest_gpu, ind_dest, src_gpu, ind_src, range=slice(0, N, 1))
set_by_inds_from_inds.cache = {}

Using the provided JSON data, write a Python script to search for a particular value. [
  {"name":"John", "age":30, "city":"New York"},
  {"name":"Mike", "age":25, "city":"Boston"},
  {"name":"Frank", "age":35, "city":"Los Angeles"}
] import json

data = json.loads('[{"name":"John", "age":30, "city":"New York"},"name":"Mike", "age":25, "city":"Boston"}, {"name":"Frank", "age":35, "city":"Los Angeles"}]')

def search(data, key, value):
    for item in data:
        if item[key] == value:
            return item

print(search(data, "city", "New York"))
Create a Python code to expand a given integer range. 3-11 def expand_range(value):
  return [x for x in range(int(value[0]), int(value[2]) + 1)]
Create a REST API endpoint in Python to return a list of employees with their name and salary. Not applicable import json

employees = [
 {'name': 'John', 'salary': 1000}, 
 {'name': 'Alice', 'salary': 2000},
 {'name': 'Bob', 'salary': 1500}
]

def get_employees():
 return json.dumps(employees)
Write a Python function that takes a string as input and checks if it is a palindrome or not. Not applicable def is_palindrome(string):
   # reverse the string
   rev_string = string[::-1] 
   
   # check if the string is equal to its reverse
   if (string == rev_string): 
     return True
   return False

# Example usage:

result = is_palindrome('racecar')
# result = True
Generate a Python class for a person object, with the name, age, and gender as fields.  class Person:
  def __init__(self, name, age, gender):
    self.name = name
    self.age = age
    self.gender = gender

  def get_name(self):
    return self.name

  def get_age(self):
    return self.age

  def get_gender(self):
    return self.gender
Write a python program that reads in the following input and then prints it out in the same order:

{
  "num1": "4",
  "num2": "3",
  "num3": "2",
  "num4": "1"
}  import json
 
data = {
  "num1": "4",
  "num2": "3",
  "num3": "2",
  "num4": "1"
}
 
for key, value in data.items():
    print(key, value)
Create a function in Python that takes the input of two sorted lists and outputs a merged list of sorted elements. list1 = [2, 3, 5, 8]
list2 = [4, 6, 7] def merge_sorted_lists(list1, list2):
    new_list = []

    i1 = 0
    i2 = 0
    while i1 < len(list1) and i2 < len(list2):
        if list1[i1] < list2[i2]:
            new_list.append(list1[i1])
            i1 += 1
        else:
            new_list.append(list2[i2])
            i2 += 1
    
    while i1 < len(list1):
        new_list.append(list1[i1])
        i1 += 1
    
    while i2 < len(list2):
        new_list.append(list2[i2])
        i2 += 1

    return new_list

list1 = [2, 3, 5, 8]
list2 = [4, 6, 7]

merged = merge_sorted_lists(list1, list2)
print(merged)
Program a python method to add a given number to each element of a given list.  def add_number(numbers, number):
 result = []
 for x in numbers:
 result.append(x + number)
 return result
Write a Python program to generate random passwords of six characters long and include lowercase letters, uppercase letters, and numbers. Not applicable import string
import random

def generate_password():
 password_characters = string.ascii_letters + string.digits 
 password = ''.join(random.choice(password_characters) for i in range(6))
 return password

print(generate_password())
Create a Python program to print the number of days in a month. Not applicable def num_of_days(month): 
	if month == "January" or month == "March" or month == "May" or month == "July" or month == "August" or month == "October" or month == "December": 
		return "31 days"
	elif month == "April" or month == "June" or month == "September" or month == "November":
		return "30 days"
	elif month == "February":
		return "28 or 29 days"
	else:
		return "Invalid input"

month = "January"
print(num_of_days(month))
Write a Python program to retrieve the latest top 50 news headlines from The Guardian.  import requests
import bs4

# Retrieve the latest top 50 news headlines from The Guardian
url = 'https://www.theguardian.com/'
resp = requests.get(url)
soup = bs4.BeautifulSoup(resp.text, features="html.parser")
headlines = soup.find_all('h3')
top_50_headlines = [h3.text for h3 in headlines[:50]]
print(top_50_headlines)
Write a Python program to automatically classify a text sentence into positive, negative and neutral classes. Sentence: "This is amazing!" # create a dictionary of words and their sentiment values
sentiment_dict = {
    'amazing': 1,
    'good': 1,
    'bad': -1,
    'awful': -1
    }

# function to classify sentiment 
def sentiment_classifier(text):
    sentiment = 0
    words = text.split(' ')
    for word in words:
        if word in sentiment_dict:
            sentiment += sentiment_dict[word]

    if sentiment > 0:
        return 'positive'
    elif sentiment < 0:
        return 'negative'
    else:
        return 'neutral'

# call the classifier
sentiment = sentiment_classifier("This is amazing!")
print(sentiment)  # prints: positive
Create a function in Python to print a dictionary in a formatted way d={'Name':'Donald Trump', 'Age': 70, 'Profession': 'President'} def print_dict(d):
    for key, value in d.items():
        print(f"{key}: {value}")

print_dict(d)

# Output: 
Name: Donald Trump
Age: 70
Profession: President
Write a Python program that sorts a list of numbers using the Merge Sort algorithm. Not applicable def merge_sort(lst):
 # Base case: if lst has 0 or 1 element, it is already sorted
 if len(lst) <= 1:
  return lst

 # Split the list into two halves
 mid = len(lst) // 2
 left_half = merge_sort(lst[:mid])
 right_half = merge_sort(lst[mid:])

 # Merge the sorted halves
 return merge(left_half, right_half)

def merge(left_half, right_half):
 # Create an empty list
 merged_list = []

 # Each loop iteration, take the smallest remaining element in each list
 while left_half and right_half:
  if left_half[0] <= right_half[0]:
   merged_list.append(left_half.pop(0))
  else:
   merged_list.append(right_half.pop(0))

 # Add the remainder of the left or right half
 merged_list.extend(left_half)
 merged_list.extend(right_half)

 # Return the merged list
 return merged_list
Create a Python script that connects to a SQLite database, creates three tables (stations, observations, and time), and populates them with data from a CSV file and a JSON API. The script should use the csv, json, requests, numpy, and sqlite3 modules. The CSV file should contain data about weather stations, and the JSON API should provide data about weather observations. The stations table should have columns for id, short, name, lon, lat, height, and json. The observations table should have columns for id, local_date_time, local_date_time_full, apparent_t, delta_t, air_temp, rain_trace, rel_hum, wind_dir, and wind_spd_kmh. The time table should have columns for id and local_date_time_full. The script should insert data into the tables using SQL queries, and should print out the queries as they are executed. Finally, the script should print out the names of the tables in the database and export each table to a CSV file.  #!/usr/bin/env python

import csv
import json
import requests
import numpy as np
import sqlite3

csv_filename = "testdata/vic_usgs/south_west_stations.csv"
db_filename = "testdata/vic_usgs/south_west_stations.db"

# open database
conn = sqlite3.connect(db_filename)
c = conn.cursor()

# Create stations table
c.execute('''CREATE TABLE IF NOT EXISTS stations 
             (id text, short text, name text, lon real, lat real, height real, json text, UNIQUE(id))''')

# Create observations table
c.execute('''CREATE TABLE IF NOT EXISTS observations 
             (id text, local_date_time text, local_date_time_full text,  
              apparent_t real, delta_t real, air_temp real, rain_trace text, rel_hum real, wind_dir text, wind_spd_kmh real,
              UNIQUE(id, local_date_time_full))''')

# Create time point table
c.execute('''CREATE TABLE IF NOT EXISTS time 
             (id text, local_date_time_full text, UNIQUE(local_date_time_full))''')

# stations
with open(csv_filename, 'rb') as csvfile:
    stations = csv.DictReader(csvfile)
    for station in stations:
        id = station["ID"]
        short = station["Short"]
        name = station["Name"]
        lon = float(station["Lon"])
        lat = float(station["Lat"])
        height = float(station["Height"])
        json = station["Json"]

        # Insert a row of data into stations
        query_str = "INSERT OR IGNORE INTO stations VALUES ('%s', '%s', '%s', %f, %f, %f, '%s')" % (id, short, name, lon, lat, height, json)
        print query_str
        c.execute( query_str )

        # Update observations table
        r = requests.get(json)
        stationdata = r.json()
        data = stationdata["observations"]["data"]
        nrows = len(data)
        for i in range(nrows):
            apparent_t = data[i]['apparent_t']
            if apparent_t is None:
                apparent_t = 0

            delta_t = data[i]['delta_t']
            if delta_t is None:
                delta_t = 0

            air_temp = data[i]['air_temp']
            if air_temp is None:
                air_temp = 0

            rain_trace = data[i]['rain_trace']
            if rain_trace is None:
                rain_trace = ''

            rel_hum = data[i]['rel_hum']
            if rel_hum is None:
                rel_hum = 0

            wind_spd_kmh = data[i]['wind_spd_kmh']
            if wind_spd_kmh is None:
                wind_spd_kmh = 0

            query_str = "INSERT OR IGNORE INTO observations VALUES ('%s', '%s', '%s', %0.2f, %0.2f, %0.2f, '%s', %0.2f, '%s', %0.2f)" % \
                (id, data[i]['local_date_time'], data[i]['local_date_time_full'], apparent_t, delta_t, \
                    air_temp, rain_trace, rel_hum, data[i]['wind_dir'], wind_spd_kmh)
            print query_str
            c.execute(query_str)

            query_str = "INSERT OR IGNORE INTO time VALUES (%s, '%s')" % (id, data[i]['local_date_time_full'])
            print query_str
            c.execute(query_str)

# commit the change
conn.commit()
# close database
conn.close()




# TESTING: print out to check
"""
conn = sqlite3.connect(db_filename)
c = conn.cursor()
c.execute("SELECT name FROM sqlite_master WHERE type='table';")
tables = c.fetchall()
print tables
for table_name in tables:
    table_name = table_name[0]
    table = pd.read_sql_query("SELECT * from %s" % table_name, conn)
    #print table
    table.to_csv('testdata/vic_usgs/south_west_stations_' + table_name + '.csv', index_label='index')
# close database
conn.close()
"""
Evaluate a basic machine learning model for predicting house prices using the provided dataset. The model should be written in Python using the scikit-learn library. housing.csv import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

# read the dataset
data = pd.read_csv('housing.csv')

# split the data
X = data.drop('price', axis=1)
y = data['price']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# train the model
model = LinearRegression()
model.fit(X_train, y_train)

# evaluate the model
score = model.score(X_test, y_test)
print("Model Score:", score)
Write a Python program to print the 3 most common elements of a given list. Input = [2, 5, 3, 7, 8, 5, 10, 19, 20] from collections import Counter

Input = [2, 5, 3, 7, 8, 5, 10, 19, 20] 
  
Counter = Counter(Input) 
  
most_occur = Counter.most_common(3)

for i in most_occur: 
    print(i[0], ":", i[1])
Simplify and optimize the following Python code for computing the mean of a list of numbers. def mean(numbers):
    total = 0
    for n in numbers:
        total = total + n
    return total / len(numbers) def mean(numbers):
    return sum(numbers) / len(numbers)
Design a Python script to nested loop iterate the following list of lists. arr = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']] for outer in arr:
   for inner in outer:
       print(inner)
Create a class in Python that stores employee information such as name, salary, and years of experience.  class Employee:
  def __init__(self, name, salary, experience):
    self.name = name
    self.salary = salary
    self.experience = experience

  def display_details(self):
    print(f'Name: {self.name}\nSalary: {self.salary}\nExperience: {self.experience}')
Construct a Python script to find the sum of all odd numbers between 1 to n. n=10 def sum_odd_numbers(n):
    sum = 0
    for i in range(1,n+1):
        if i % 2 != 0:
            sum += i
    return sum

odd_sum = sum_odd_numbers(10)
print(odd_sum)
Create a Python GUI application to display the sum of two numbers entered in two separate text fields.  import tkinter as tk

root = tk.Tk()
root.title('Sum Application')

num1 = tk.StringVar()
num2 = tk.StringVar()

def calculate():
    try:
        result = int(num1.get()) + int(num2.get())
        sumLabel.configure(text="The sum is %d" % result)
    except ValueError:
        sumLabel.configure(text="Please enter numbers")

num1Field = tk.Entry(root, width=10, textvariable=num1)
num2Field = tk.Entry(root, width=10, textvariable=num2)

sumButton = tk.Button(root, text="Sum", command=calculate)
sumLabel = tk.Label(root, text="")

num1Field.grid(row=0, column=0)
num2Field.grid(row=0, column=1)
sumButton.grid(row=1, column=0, columnspan=2)
sumLabel.grid(row=2, column=0, columnspan=2)

root.mainloop()
Create an algorithm in Python to complete Knapsack problem of size 5 using dynamic programming. Items with value and weight
((2,3), (3,4), (4,5), (5,6), (6,7))
Capacity 5 def knapsack(capacity, items):
# Create array of rows
table = [[0 for _ in range(capacity + 1)] for _ in range(len(items) + 1)]

# Fill the table
for i in range(1, len(table)):
    for j in range(1, len(table[0])):
        value, weight = items[i - 1]
        if weight > j:
            table[i][j] = table[i - 1][j]
        else:
            table[i][j] = max(table[i - 1][j], table[i - 1][j - weight] + value)

# Traceback
curr_row = len(table) - 1 
curr_col = capacity
knapsack = []
while curr_row > 0:
    if table[curr_row][curr_col] != table[curr_row - 1][curr_col]:
        knapsack.append(items[curr_row - 1])
        curr_col -= items[curr_row - 1][1]
    curr_row -= 1

return [table[-1][-1], knapsack]

# Usage example
items = [(2,3), (3,4), (4,5), (5,6), (6,7)]
capacity = 5
print(knapsack(capacity, items))
Can you create a Python program for classifying spam and non-spam emails? "Mail content: This is an email from XYZ corporation.\nMail label: Non-spam" import spacy
from textblob import TextBlob

# load the spacy model
nlp = spacy.load('en')

# classify the given mail
mail_content = 'This is an email from XYZ corporation.'
if TextBlob(mail_content).sentiment.polarity > 0:
    output_label = 'Non-spam'
else:
    output_label = 'Spam'

# print the output label
print(output_label)
Write a Python program to generate a random password. The password should contain at least 8 characters, a lowercase letter, an uppercase letter, a digit, and a special character. Not applicable import string
import random

def generate_password():
 passwords = []
 characters = string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation
 for i in range(8):
  passwords.append(random.choice(characters))
 return ''.join(passwords)

print(generate_password())

# Output: #o4&2+-P
This code is a Python program that scrapes the ESPN FC website for content. To run the program, you need to import the necessary libraries, set the output path for Windows or Mac environments, and define the team URLs. The program will then parse the team news for each team URL and output the results to a text file. To download images, use the downloadImage function.  # -*- coding: utf-8 -*-
'''
Created on Jan 30, 2015
Modified on Jan 30, 2015
@author: rainier.madruga@gmail.com
A simple Python Program to scrape the ESPN FC website for content.
'''
'''
Version Number of Script
'''
version = '0.01.a'

# Import Libraries needed for Scraping the various web pages
from bs4 import BeautifulSoup
import urllib2
import datetime
import requests
import os
import platform
import sys
reload(sys)
sys.setdefaultencoding('utf-8')

# Establish the process Date & Time Stamp
ts = datetime.datetime.now().strftime("%H:%M:%S")
ds = datetime.datetime.now().strftime("%Y-%m-%d")
date = datetime.datetime.now().strftime("%Y%m%d")

# Updates the Time Stamp
def updateTS():
    update = datetime.datetime.now().strftime("%H:%M:%S")
    return update

# Download Image
def downloadImage(imageURL, localFileName):
    response = requests.get(imageURL)
    if response.status_code == 200:
        print 'Downloading %s...' % (localFileName)
    with open(localFileName, 'wb') as fo:
        for chunk in response.iter_content(4096):
            fo.write(chunk)
    return True

# Program Version & System Variables
parseVersion = 'ESPN Premier League Team News ' + version
print ds + ' :: ' + ts + ' :: ' + parseVersion

# Set Output Path for Windows or Mac environments
os_System = platform.system()
win_BasePath = "C:/Users/Rainier/Documents/GitHub/python-soccer"

if os_System == "Windows":
    outputPath = win_BasePath + "/PL-Data/"
    outputImgPath = win_BasePath + "/PL-Data/imgs/"
    outputTeamPath = win_BasePath + "/PL-Data/teams/"
    outputMatchPath = win_BasePath + "/PL-Data/match/"
else:
    outputPath = 'PL-Data/'
    outputImgPath = 'PL-Data/imgs/'
    outputTeamPath = 'PL-Data/teams/'
    outputMatchPath = 'PL-Data/match/'

hr = " >>> *** ====================================================== *** <<<"
shr = " >>> *** ==================== *** <<<"

prefixBBC = "http://www.bbc.com"
prefixESPN = "http://www.espnfc.us"

teamURLs = ['/club/arsenal/359/index','/club/aston-villa/362/index','/club/burnley/379/index','/club/chelsea/363/index','/club/crystal-palace/384/index','/club/everton/368/index','/club/hull-city/306/index','/club/leicester-city/375/index','/club/liverpool/364/index','/club/manchester-city/382/index','/club/manchester-united/360/index','/club/newcastle-united/361/index','/club/queens-park-rangers/334/index','/club/southampton/376/index','/club/stoke-city/336/index','/club/sunderland/366/index','/club/swansea-city/318/index','/club/tottenham-hotspur/367/index','/club/west-bromwich-albion/383/index','/club/west-ham-united/371/index']

def teamNews(x):
	teamURL = x
	teamName = x
	teamName = teamName[6:len(teamName)-10]
	teamURL = prefixESPN + teamURL
	teamHTML = urllib2.urlopen(teamURL)
	teamSoup = BeautifulSoup(teamHTML)	
	recentNews = teamSoup.find("div", {"id":"feed"})
	recentNewsItems = recentNews.find_all("div", {"class":"feed-item-content"})
	recapOutput = []
	print "Team News Parsed :: " + teamName
	for i in recentNewsItems:
		recapPhotoItem = i.find("div", {"class":"thumbnail picture"})

		if len(i) > 3:
			# recapPhotoItem = recapPhotoItem.find("img")
			# print recapPhotoItem["src"]
			# with open(outputTxt, "a") as f:
			#	f.write('\n' + shr + '\n')
			#	f.write(i.prettify())
			#	f.write('\n' + shr + '\n')
			#	f.close()
			# print shr
			recapHeadline = i.find("h2")
			recapHeadlineDetails = recapHeadline.find("a")
			recapHeadlineDetails = recapHeadlineDetails["href"]
			recapHeadline = recapHeadline.get_text(strip=True)
			recapAge = i.find("span", {"class":"age"})
			recapAge = recapAge.get_text(strip=True)
			recapOutput.append(date + "|" + teamName + "|" + recapHeadline + "|" + recapHeadlineDetails + "|" + recapAge)
			#print shr
			# print i.prettify()
			#print recapHeadlineDetails 
			#print shr
			#recapDetails = recapHeadline.find("a")
			#recapDetails = recapDetails["href"]
			#print recapDetails
			# print recapAge.get_text(strip=True)
			
			#print updateTS()
			#print shr
			# print i
		else:
			#print i
			#print shr
			recapGameOpponents = i.find_all("div", {"class":"team-name"})
			recapGameScore = i.find_all("div", {"class":"team-score"})
			recapGameStatus = i.find("div", {"class":"game-info"})
			recapGameHome = recapGameOpponents[0].get_text(strip=True)
			recapGameAway = recapGameOpponents[1].get_text(strip=True)
			recapHomeScore = recapGameScore[0].get_text(strip=True)
			recapAwayScore = recapGameScore[1].get_text(strip=True)
			#recapGameInfo = i.find("div", {"clas=":"game-info"})
			recapOutput.append(date + "|" + teamName + "|" + recapGameHome + " " + recapHomeScore +  " v. " + recapAwayScore + " "+ recapGameAway + "||")
			# print i
	for i in recapOutput:
		print i
	print hr 
	return recapOutput

teamNewstxt = 'teamNews.txt'
with open(teamNewstxt, "w") as f:
   	f.write(ds + " :: " + updateTS() + " :: " + parseVersion + '\n' )
   	f.close()

for i in teamURLs:
	for x in teamNews(i):
		with open(teamNewstxt, "a") as f:
			f.write(x + '\n')
			f.close()

Write a Python program to generate random passwords of length 8.  import random

def generate_password(): 
    s = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ@#$0123456789"
    p =  "".join(random.sample(s,8))
    return p

print(generate_password())
Create an algorithm to reverse a given string without using the built-in python reverse function  """
Reverse a given string without using the built-in python reverse function.
"""

def reverse_string(in_str):
    rev_str = ''
    for i in range(len(in_str) - 1, -1, -1):
        rev_str += in_str[i]
    return rev_str

if __name__ == '__main__':
    in_str = 'reverse me'
    rev_str = reverse_string(in_str)
    print(rev_str)
Generate a Python program for merging two sorted lists. l1 = [1, 2, 5] 
l2 = [3, 4, 6] def merge_sorted_lists(l1, l2):
        l3 = l1 + l2
        l3.sort()
        return l3
    
l1 = [1, 2, 5] 
l2 = [3, 4, 6]

result = merge_sorted_lists(l1, l2)
print(result)
Create a Python program to create a pandas DataFrame containing data about cars. Include columns for make, model, price, and mpg. Not applicable import pandas as pd

column_names = ["make", "model", "price", "mpg"]
cars = [ 
    ["Toyota", "Camry", 23000, 28],
    ["Honda", "Accord", 21000, 30],
    ["Ford", "Ecosport", 20000, 25],
    ["Hyundai", "Elantra", 22000, 27],
    ["Toyota", "Corolla", 18000, 35],
    ["Honda", "Civic", 19000, 32],
    ["Ford", "Escape", 24000, 24],
    ["Hyundai", "Sonata", 19500, 29]
]

df = pd.DataFrame(cars, columns=column_names)
print(df)
Write a Python program to find the number of uniquely identifiable countries in the list given below. ['GB', 'CH', 'GB', 'US', 'CH', 'CN', 'ES', 'CN'] def unique_countries(lst): 
    return len(set(lst))
Write a Python program to predict a value for a given input. Input data: [5.1, 3.3, 1.7, 0.5] from sklearn import datasets 
from sklearn.linear_model import LinearRegression 
  
# load the diabetes datasets 
diabetes = datasets.load_diabetes() 
  
# fit a linear regression model to the data 
model = LinearRegression() 
model.fit(diabetes.data, diabetes.target) 
  
# make prediction 
value = model.predict([[5.1, 3.3, 1.7, 0.5]])
print(value)
Write a Python program to edit a given string replacing every character after 2nd occurrence with '*'. string = "Adam is my hero" def edit_str(string):
 return string[:2] + '*' * (len(string)-2)
Write a Python program to normalize a 3x3 matrix. [[1, 2, 3], 
 [4, 5, 6], 
 [7, 8, 9]] """
Write a Python program to normalize a 3x3 matrix
"""
 
# Function to normalize a 3x3 matrix 
def normalize_matrix(mat): 
  
    norm_matrix= []
    sum_elements = 0
    for row in mat: 
        for element in row: 
            sum_elements += element 
    for row in mat:
        norm_row = []
        for element in row:
            norm_row.append(element/sum_elements)
        norm_matrix.append(norm_row)
    return norm_matrix

# main 
if __name__ == "__main__": 
    # Given matrix 
    mat = [[1, 2, 3], 
           [4, 5, 6], 
           [7, 8, 9]]
  
    norm_matrix = normalize_matrix(mat) 
    print("Normalized matrix:") 
    print(norm_matrix)
Write a Python code to simulate a coin toss game and print the sequence of heads and tails.  import random 
  
def heads_tails(): 
    heads = 0
    tails = 0
    res = ["H", "T"]
    tosses = int(input("Number of tosses: "))
    sequence = ""
    for i in range(tosses): 
        if random.choice(res) == "H": 
            heads += 1
            sequence += "H"
        else: 
            tails += 1
            sequence += "T"
    print("Heads: ", heads) 
    print("Tails: ", tails)
    print("Sequence:", sequence)

heads_tails()
Create a Python script to calculate the intersection point of two lines # Line 1
l1_m = 3
l1_c = 5
# Line 2
l2_m = 7
l2_c = 9 # define a function 
def getIntersectionPoint(line1, line2): 
    # line1 (slope and intercept) 
    l1_m = line1[0]
    l1_c = line1[1]
  
    # line2 (slope and intercept) 
    l2_m = line2[0]
    l2_c = line2[1]
    
    x = (l2_c - l1_c) / (l1_m - l2_m)
    y = l1_m * x + l1_c
    return (x, y) 
  
# given two lines
line1 = (3, 5) 
line2 = (7, 9)
  
# calculate intersection point
intersection_point = getIntersectionPoint(line1, line2)
  
# print the point
print("Intersection point of lines is:", intersection_point)
Write a Python program to find the largest three numbers in a list. 1, 6, 3, 8, 7, 4 my_list = [1, 6, 3, 8, 7, 4]
largest_three = sorted(my_list)[-3:]
print(largest_three)
Write a Python function that takes two lists as input and returns true if all the elements in List 1 are available in List 2. list1 = [21, 54, 8, 54]
list2 = [21, 24, 8, 16] def check_if_all_in_list_2(list1, list2):
    for item in list1: 
        if item not in list2: 
            return False
    return True
Create a code generator in Python that generates Java code for implementing the Bubble Sort algorithm. Not applicable def bubble_sort(arr): 
    # Iterate over the array 
    for i in range(len(arr)): 
          
        # Last i elements are already in place 
        for j in range(0, len(arr)-i-1): 
  
            # Swap if the element found is greater than the next element 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j] 
  
# Driver code to test above 
arr = [64, 34, 25, 12, 22, 11, 90] 
  
bubble_sort(arr) 
  
print ("Sorted array :") 
for i in range(len(arr)): 
    print ("%d" %arr[i])
Design a genetic algorithm in Python to find the optimal configuration of a neural network. Number of layers : 3
Neurons per layer : [8, 16, 32]
Optimizer : Adam # Import modules
import random
import numpy as np
import tensorflow as tf

# Configure the neural network
NUM_LAYERS = 3
NEURONS_PER_LAYER = np.array([8, 16, 32])
OPTIMIZER = tf.keras.optimizers.Adam()

# Create a neural network
model = tf.keras.Sequential()

# Add layers
for l in range(NUM_LAYERS):
 model.add(tf.keras.layers.Dense(units=NEURONS_PER_LAYER[l], activation="relu"))

# Output layer
model.add(tf.keras.layers.Dense(units=1))

# Compile the model
model.compile(optimizer=OPTIMIZER, loss="binary_crossentropy",
 metrics=["accuracy"])

# The fitness function
def calculate_fitness(genome):
 # Configure the model
 model.set_weights(genome)

 # Compute the fitness (e.g. accuracy)
 loss, accuracy = model.evaluate(x_test, y_test)

 return accuracy

# Genetic algorithm
POPULATION_SIZE = 50 # number of individuals in a population
NUM_GENERATIONS = 20 # number of generations

# Create the initial population
population = [np.random.randn(model.count_params()) for _ in range(POPULATION_SIZE)]

# Run the genetic algorithm
for generation in range(NUM_GENERATIONS):
 # Calculate the fitness of each individual
 fitnesses = [calculate_fitness(genome) for genome in population]

 # Find the best individual
 best_index = np.argmax(fitnesses)
 best_individual = population[best_index]

 # Print the best fitness
 print("Best fitness in generation {}: {:.2f}".format(generation, fitnesses[best_index]))

 # Create the next generation
 new_population = []
for genome in population:
 # Perform crossover
 if random.uniform(0,1) < 0.7:
 new_genome = best_individual + np.random.randn(*genome.shape) * 0.1
 else:
 new_genome = genome

 # Mutate
 if random.uniform(0,1) < 0.1:
 new_genome *= np.random.randint(0,2, size=new_genome.shape)

 # Add to the next generation
 new_population.append(new_genome)

# Make the new population the current population
 population = new_population
Create a Python script for cleaning up text and removing non-alphabetic characters. This text contains some non-alphabetic characters, like "%. import re

text = "This text contains some non-alphabetic characters, like “%.”"

clean_text = re.sub(r'[^a-zA-Z ]', '', text)

print(clean_text)

# Output: This text contains some alphabetic characters
Compute the area of a given circle using its radius in Python. radius = 5 import math

def calculateCircleArea(radius):
    area = math.pi * radius * radius
    return area

radius = 5

print("Area of a circle with radius 5 is: ", calculateCircleArea(radius))
Make a visual representation of the following data-set in Python using Matplotlib. X = [2,4,6,8,10]
Y = [5,10,15,20,25] import matplotlib.pyplot as plt

X = [2,4,6,8,10]
Y = [5,10,15,20,25]

plt.plot(X,Y)
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Visual Representation')
plt.grid()
plt.show()
Assemble a Python program to find a pattern Find all the numbers in the array [1, 2, 3, 5, 7, 8] which are divisible by 3. def find_pattern(arr):
    div_by_3 = []

    for num in arr:
        if num % 3 == 0:
            div_by_3.append(num)
    
    return div_by_3
Create a machine learning model in Python that predicts the price of a house. The model should use a linear regression algorithm and the input data should include square footage, number of bedrooms, and number of bathrooms. Not applicable import numpy as np 
import pandas as pd 
from sklearn.linear_model import LinearRegression 
  
#read the dataset
data = pd.read_csv('house_data.csv') 
  
#split features and target
X = data.iloc[:, :-1].values 
y = data.iloc[:, 3].values 
  
#initialize the linear regression model  
model = LinearRegression() 
  
# fit the model with the data 
model.fit(X, y) 
  
#make predictions on the test set
predicted_price = model.predict([[square_footage, num_bedrooms, num_bathrooms]]) 
  
print('The expected price for the house is: $',predicted_price)
Modify the below Python function to make it efficient. def min_product(a, b):
 return a * b * (a - b) def min_product(a, b):
    if a > b:
        return a * b
    else:
        return a * b * (a - b)
Write a function that generates a random 5-letter string in Python.  import string
import random

def random_string():
    letters = string.ascii_letters
    return ''.join(random.choice(letters) for i in range(5))

result = random_string()
print(result)
Can you provide an algorithm in Python to check if a string is an anagram of another string? "listen", "silent" def areAnagrams(str1, str2): 
  
    # Get lengths of both strings 
    n1 = len(str1) 
    n2 = len(str2)  
  
    # If length of both strings is not same, then they 
    # cannot be anagrams 
    if n1 != n2: 
        return False
  
    # Sort both strings 
    str1 = sorted(str1) 
    str2 = sorted(str2) 
  
    # Compare sorted strings 
    for i in range(0, n1): 
        if str1[i] != str2[i]: 
            return False
  
    return True
Write a script in Python that downloads data from a website. The script should be flexible and be able to download data in different formats from different websites. https://example.com/data import requests

def download_data(url):
    r = requests.get(url)
    # determine the file format
    content_type = r.headers.get('content-type')

    # depending on file format, set appropriate encoding
    if content_type == "image/jpeg":
        encoding = 'binary'
    elif content_type == "application/pdf":
        encoding = 'utf-8'
    else:
        encoding = 'utf-8'
    
    # decode data and store it in file
    with open(url.split('/')[-1], 'wb') as f:
        f.write(r.content)

url = "https://example.com/data"
download_data(url)
Generate a code snippet in Python that validates whether a number is within a given range or not.  def number_in_range(num, start, end):
  if num >= start and num <= end:
    return True
  else:
    return False
Create a correct python code to combine two lists into one. listA = [1, 2, 3]
listB = [4, 5, 6] listA = [1, 2, 3]
listB = [4, 5, 6]

combined_list = listA + listB
print(combined_list)
Create a Python program that converts degrees Celsius to Fahrenheit. 35 def celsius_to_fahrenheit(celsius):
 return celsius * 9/5 + 32

celsius = 35
fahrenheit = celsius_to_fahrenheit(celsius)
print("{} °C is {} °F".format(celsius, fahrenheit))
Create a function in Python that takes an integer and prints all its factors. 60 def find_factors(num):
  factors = []
  for i in range(2, num):
    if (num % i == 0):
      factors.append(i)
  print(f"Factors of {num}: {factors}")

find_factors(60)
Convert a list of numbers into strings using Python. [5, 10, 15] # Create an empty list of strings
number_strings = []

# Loops through the list of numbers
for n in [5, 10, 15]:
    # Appends a string version of the number to the list
    number_strings.append(str(n))

print(number_strings)   # ['5', '10', '15']
Write a code to send an email using Python and SMTP.  import smtplib 

# Creates SMTP session 
server = smtplib.SMTP('smtp.gmail.com', 587)

# Start TLS for security 
server.starttls() 

# Authentication 
server.login('your_email_address', 'password') 

# Message to be sent
message = 'This is a test email'

# sending the mail 
server.sendmail('sender_email_address', 'receiver_email_address', message) 

# terminating the session 
server.quit()
Create a method to generate a random integer between 0 and 10 (inclusive) in Python.  import random 
  
def random_int(): 
    return random.randint(0, 10)
Create a Python class that takes a string and reverses it.  class ReverseString:
    def __init__(self, s):
        self.s = s 

    def reverse(self):
        return self.s[::-1]

my_string = ReverseString('Hello World!')
print(my_string.reverse())
Implement a web server in Python to serve static HTML webpages.  from http.server import CGIHTTPRequestHandler, HTTPServer

class MyHTTPServer(CGIHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()
        file = open('index.html', 'r')
        html = file.read()
        file.close()
        self.wfile.write(html.encode())

server = HTTPServer(('', 8080), MyHTTPServer)
print("Starting server at http://localhost:8080")
server.serve_forever()
Write a Python script to web scrape and parse a HTML page. The HTML page:

<html>
<head>
<title>My Page</title>
</head>
<body>
<h1>This is my page</h1>
<div id="content">
<p>This is my content</p>
</div>
<p>Another paragraph</p>
</body>
</html> import requests
from bs4 import BeautifulSoup

def get_page_content(url):
 response = requests.get(url)
 soup = BeautifulSoup(response.text, 'html.parser')
 return soup

# Get the title of the page
def get_page_title(soup):
 return soup.find('title').text

# Get all the text of the page
def get_page_text(soup):
 text = ''
 for p in soup.find_all('p'):
 text += p.text
 return text

# Get the contents of the div with id 'content'
def get_content(soup):
 return soup.find('div', {'id': 'content'}).text

url = 'https://example.com'
soup = get_page_content(url)

title = get_page_title(soup)
text = get_page_text(soup)
content = get_content(soup)

print(title)
print(text)
print(content)
Create a Python function that takes inputs in the form of two words and returns the start index of the second word in the first word. Word1 = "Mountain" ,Word2 = "tain" def index_of_word(w1, w2):
    pos = 0
    for i in w1:
        if w1.find(w2,pos) > -1:
            return w1.find(w2,pos)
        pos +=1
    return -1
Create a Python function that takes an array of numbers and returns true if the array is sorted in increasing order, and false otherwise  def is_sorted(array):
    for i in range(len(array)-1):
        if array[i] > array[i+1]:
            return False
    return True
Implement a generic multi-value dictionary in Python.  class MultiValueDict:
    def __init__(self):
        # Initialize and empty dictionary
        self.dict = {}

    def add(self, key, value):
        # Add value to key
        if key in self.dict:
            self.dict[key].append(value)
        else:
            self.dict[key] = [value]

    def get(self, key):
        # Return the list of values for given key
        if key in self.dict:
            return self.dict[key]
-->
        else:
            return None
Write a python program to perform sentiment analysis on a dataset of customer comments.  # Import libraries
import pandas as pd
import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer
nltk.download('vader_lexicon')

# Read the customer comments into a dataframe 
df = pd.read_csv('customer_comments.csv')
df.head()

# Create an instance of the SentimentIntensityAnalyzer
sia = SentimentIntensityAnalyzer()

# Loop over comments in the dataframe and compute sentiment scores
for comment in df["comment"]:
    sentiment=sia.polarity_scores(comment)['compound']
    df.loc[df["comment"]==comment,"sentiment"]=sentiment
    
# Print the results
print(df.head())
Optimize the performance of a function in Python that calculates the total of a list of numbers. nums = [1, 2, 3, 4, 5] def sum_list(nums):
 total = 0
 for num in nums:
 total += num
 return total

def sum_list_optimized(nums):
 total = 0
 length = len(nums)
 while length > 0:
 total += nums[length - 1]
 length -= 1
 return total

nums = [1, 2, 3, 4, 5]
print(sum_list_optimized(nums))  # Output: 15
Design an algorithm in Python that finds the occurrences of 'cat' in a given sentence. Sentence: “The cat sat on the mat.” def find_occurrences(sentence):
    # Empty list to store indices of occurrence
    indices = []

    # get length of sentence
    l = len(sentence)
 
    # iterate to go through the sentence
    for i in range(l):
        # if at any point a substring from i to i+3 is equal to "cat"
        if sentence[i:i+3] == "cat":
            # add i to list of indices
            indices.append(i)
 
    # return the list of indices
    return indices

occurrences = find_occurrences("The cat sat on the mat.")
print("Indices of occurrences:", occurrences)
Create a Python class for representing a stack.  class Stack:
    def __init__(self):
        self.items = []

    def isEmpty(self):
        return self.items == []

    def push(self, item):
        self.items.append(item)

    def pop(self):
        return self.items.pop()

    def peek(self):
        return self.items[len(self.items)-1]

    def size(self):
        return len(self.items)
Rewrite the following snippet of code so it can run in modern python versions. def foo(my_list):
    result = []
    for element in my_list:
        if 'foo' in element
            result.add('foo')
    return result def foo(my_list):
    result = []
    for element in my_list:
        if 'foo' in element:
            result.append('foo')
    return result
Implement a function in Python to convert a decimal number to binary.  def decimalToBinary(num): 
    # empty list to store the binary number 
    binaryList = [] 
   
    # if the number is 0, return 0
    if num == 0:
        return [0]
  
    # loop until the number becomes 0 after division by 2
    while num > 0:
        binaryList.append(num % 2) 
        num //= 2
  
    # Reverse the list
    binaryList = binaryList[::-1] 
  
    return binaryList
Produce a Python program that calculates the average of a list of numbers. [1,2,3,4,5,6] def average(numbers):
	total = 0
	for num in numbers:
		total += num
	return total/len(numbers)

nums = [1,2,3,4,5,6]
print("Average of the list of numbers is:", average(nums))
Generate a Python program to initialize a third matrix given two existing matrices c and d. c = [[7, 8], [6, 3]]
d = [[6, 7], [1, 5]] def initialize_matrix(c, d):
    rows = len(c)
    cols = len(c[0])
    matrix = []
    for i in range(rows):
        row = []
        for j in range(cols):
            row.append(c[i][j] + d[i][j])
        matrix.append(row)
    return matrix
Create an application in Python that performs sentiment analysis on a sentence. The application should take in a sentence and return a score representing the sentiment of the sentence. Not applicable import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer

def sentiment_score(sentence):
 nltk.download('vader_lexicon')
 analyser = SentimentIntensityAnalyzer()
 score = analyser.polarity_scores(sentence)
 return score
 
sentiment_score('This is an example sentence.')
Write a Python code to implement a recursive binary search algorithm on a predefined sorted list.  def binarySearch(arr, start, end, x): 
    if end >= start:  
        mid = start + (end - start) // 2 
        if arr[mid] == x: 
            return mid  
        elif arr[mid] > x: 
            return binarySearch(arr, start, mid - 1, x)  
        else: 
            return binarySearch(arr, mid + 1, end, x)  
    else: 
        return -1
Create an algorithmic trading program using Python that executes buy/sell orders when certain criteria are met. Not applicable import pandas as pd
import numpy as np

# Set up the trading parameters
buy_threshold = 0.1
sell_threshold = 0.1

# Load the dataset
df = pd.read_csv('stock_data.csv', index_col=0)

# Set up a "buy" flag and a "sell" flag
df['buy'] = np.where(df.Close > (df.Open * (1 + buy_threshold)), 1, 0)
df['sell'] = np.where(df.Close < (df.Open * (1 - sell_threshold)), 1, 0)

# Loop through the dataset and execute buy/sell orders
for i in range(len(df)):
 if df.buy[i] == 1:
 print('Executing buy order')
 if df.sell[i] == 1:
 print('Executing sell order')
Write a python program to transform input set of numbers into a list of tuples. 1, 2, 3, 4, 5 [(1, 2), (3, 4), (5, None)]
Make a Python program to create a rolling average over a list. Rolling average means return the average of the last 3 items of the list. mylist = [10, 20, 30, 40, 50] def rolling_average(arr):
    last_three = arr[-3:]
    return sum(last_three) / len(last_three)

mylist = [10, 20, 30, 40, 50]
rolling_avg = rolling_average(mylist)
print("Rolling average:", rolling_avg)

# Output:
# Rolling average: 33.333333333333336
Write a Python program to implement a sorting algorithm (your choice). num_list = [5,2,1,9,7,8] def sorting_algorithm(num_list):
    for i in range(len(num_list)):
        for j in range(i + 1, len(num_list)):
            if num_list[i] > num_list[j]:
                num_list[i], num_list[j] = num_list[j], num_list[i]
    return num_list
Generate a function to return the all the vowels from a string in Python. Not applicable def get_vowels(string):
 vowels = 'aeiou'
 return [char for char in string if char in vowels]
Design a web application in Django that fetches tweets with the #python hashtag. Not applicable import os
import tweepy
from django.shortcuts import render

# Create your views here.
def index(request):
    consumer_key = os.environ['TWITTER_CONSUMER_KEY']
    consumer_secret = os.environ['TWITTER_CONSUMER_SECRET']
    access_key = os.environ['TWITTER_ACCESS_KEY']
    access_secret = os.environ['TWITTER_ACCESS_SECRET']
 
    auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
    auth.set_access_token(access_key, access_secret)
    api = tweepy.API(auth)
 
    hashtags = ["#python"]
    tweets = api.search(q=hashtags, lang='en')
 
    args = {'tweets': tweets}
    return render(request, 'index.html', args)
Use NLP to build a sentiment analysis pipeline in Python. The pipeline should take in text as input, and output a sentiment score as either positive or negative. Not applicable import pandas as pd
import nltk
nltk.download('punkt')
nltk.download('averaged_perceptron_tagger')
nltk.download('stopwords')
from nltk import word_tokenize
from nltk.sentiment.vader import SentimentIntensityAnalyzer

# Load data
df = pd.read_csv('data.csv')

# Extract text column
text = df['text']

# Preprocess text
tokenized_text = [word_tokenize(text) for text in text]
stop_words = nltk.corpus.stopwords.words('english')
tokenized_text = [word for word in tokenzed_text if word not in stop_words]

#Feature extraction
pos_tokens = [word for (word, tag) in nltk.pos_tag(tokenized_text) if tag.startswith('N') or 
              tag.startswith('J')]

#Sentiment analysis
sid = SentimentIntensityAnalyzer()
scores = [sid.polarity_scores(pos_token) for pos_token in pos_tokens]
df['sentiment'] = [score['compound'] for score in scores]

#Output
print(df)
Write a Python function to find the most frequent element in a list.  def most_frequent(list): 
    counter = 0
    num = list[0] 
      
    for i in list: 
        curr_frequency = list.count(i) 
        if(curr_frequency> counter): 
            counter = curr_frequency 
            num = i 
  
    return num
Write a function in Python to remove the last element from a given array. [1, 6, 7, 3, 4] def remove_last_element(arr):
  return arr[:-1]
Create a web-scraper with Python Selenium that scrapes user reviews from Yelp. URL of the Yelp page # import libraries
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
import time

# set options
options = Options()
options.headless = True

# initialize driver
driver = webdriver.Chrome(
    executable_path='/usr/bin/chromedriver',
    options=options
)

# navigate to the page
driver.get(URL)

# get the user reviews
reviews = []
reviews_elems = driver.find_elements_by_css_selector("div.lemon--div.__event-section__.bsf-l-25vx4._207b2a_Zbd7F")
for i in reviews_elems:
 reviews.append(i.find_element_by_css_selector('p').text)

# close the driver
driver.close()

# print the reviews
for r in reviews:
 print(r)
Create a Python application to send emails. The application should use the SMTP library to send messages to a specified address. Email Address: example@example.com import smtplib

# Email information
sender = 'user@example.com'
receivers = 'example@example.com'

message = """From: From User <user@example.com>
To: To User <example@example.com>
Subject: SMTP e-mail test

This is a test e-mail message.
"""

try:
   smtpObj = smtplib.SMTP('localhost')
   smtpObj.sendmail(sender, receivers, message)         
   print ("Successfully sent email")
except SMTPException:
   print ("Error: unable to send email")
Optimize an algorithm written in Python that sums up the numbers in an array. [2, 4, 6, 8] def sum_numbers(arr):
    result = 0
    for num in arr:
        result += num
    return result

arr = [2, 4, 6, 8]

print(sum_numbers(arr))

# optimized version
def optimised_sum_numbers(arr):
    return sum(arr)

print(optimised_sum_numbers(arr))
Create an AI chatbot in Python that can respond to queries about a topic of your choice. Not applicable import nltk
import numpy as np
import random
import string # to process standard python strings

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

f=open('chatbot.txt','r',errors = 'ignore')

#Corpus of the raw data
raw=f.read()

raw=raw.lower()# converts to lowercase

nltk.download('punkt') # first-time use only
nltk.download('wordnet') # first-time use only

sent_tokens = nltk.sent_tokenize(raw)# converts to list of sentences 
word_tokens = nltk.word_tokenize(raw)# converts to list of words

# Pre-processing
lemmer = nltk.stem.WordNetLemmatizer()
#WordNet is a semantically-oriented dictionary of English included in NLTK.
def LemTokens(tokens):
    return [lemmer.lemmatize(token) for token in tokens]
remove_punct_dict = dict((ord(punct), None) for punct in string.punctuation)
def LemNormalize(text):
    return LemTokens(nltk.word_tokenize(text.lower().translate(remove_punct_dict)))

# Keyword Matching
GREETING_INPUTS = ("hello", "hi", "greetings", "sup", "what's up","hey",)
GREETING_RESPONSES = ["hi", "hey", "*nods*", "hi there", "hello", "I am glad! You are talking to me"]

def greeting(sentence):
   
    for word in sentence.split():
        if word.lower() in GREETING_INPUTS:
            return random.choice(GREETING_RESPONSES)

# Generating response
def response(user_response):
    robo_response=''
    sent_tokens.append(user_response)
    TfidfVec = TfidfVectorizer(tokenizer=LemNormalize, stop_words='english')
    tfidf = TfidfVec.fit_transform(sent_tokens)
    vals = cosine_similarity(tfidf[-1], tfidf)
    idx=vals.argsort()[0][-2]
    flat = vals.flatten()
    flat.sort()
    req_tfidf = flat[-2]
    if(req_tfidf==0):
        robo_response=robo_response+"I am sorry! I don't understand you"
        return robo_response
    else:
        robo_response = robo_response+sent_tokens[idx]
        return robo_response

flag=True
print("My name is Qabot. I will answer your queries about quantum computing. If you want to exit, type Bye!")
while(flag==True):
    user_response = input()
    user_response=user_response.lower()
    if(user_response!='bye'):
        if(user_response=='thanks' or user_response=='thank you' ):
            flag=False
            print("Qabot: You are welcome..")
        else:
            if(greeting(user_response)!=None):
                print("Qabot: "+greeting(user_response))
            else:
                print("Qabot: ",end="")
                print(response(user_response))
                sent_tokens.remove(user_response)
    else:
        flag=False
        print("Qabot: Bye! take care..")
Create a Python program to find the sum of all the even elements in a given list.  def sum_even_elements(list):
  sum = 0 
  for item in list:
    if item % 2 == 0:
      sum += item
  return sum
Create a Python function named `time_in_words` that takes in input two integer variables, `hours` and `mins`. The function should return a phrase string corresponding to the time indicated by the inputs. For example, if `hours` is equal to `5` and `mins` is equal to `12`, the return value of the function should be `five twelve`.  def time_in_words(hours, mins):
    # Create phrase string corresponding to time
    phrase = ""
    if hours == 0:
        phrase += "twelve"
    elif hours == 1:
        phrase += "one"
    elif hours == 2:
        phrase += "two"
    elif hours == 3:
        phrase += "three"
    elif hours == 4:
        phrase += "four"
    elif hours == 5:
        phrase += "five"
    elif hours == 6:
        phrase += "six"
    elif hours == 7:
        phrase += "seven"
    elif hours == 8:
        phrase += "eight"
    elif hours == 9:
        phrase += "nine"
    elif hours == 10:
        phrase += "ten"
    elif hours == 11:
        phrase += "eleven"
    elif hours == 12:
        phrase += "twelve"
        
    if mins == 0:
        phrase += " o'clock"
    elif mins == 1:
        phrase += " o'one"
    elif mins == 2:
        phrase += " o'two"
    elif mins == 3:
        phrase += " o'three"
    elif mins == 4:
        phrase += " o'four"
    elif mins == 5:
        phrase += " o'five"
    elif mins == 6:
        phrase += " o'six"
    elif mins == 7:
        phrase += " o'seven"
    elif mins == 8:
        phrase += " o'eight"
    elif mins == 9:
        phrase += " o'nine"
    elif mins == 10:
        phrase += " ten"
    elif mins == 11:
        phrase += " eleven"
    elif mins == 12:
        phrase += " twelve"
    elif mins == 13:
        phrase += " thirteen"
    elif mins == 14:
        phrase += " fourteen"
    elif mins == 15:
        phrase += " fifteen"
    elif mins == 16:
        phrase += " sixteen"
    elif mins == 17:
        phrase += " seventeen"
    elif mins == 18:
        phrase += " eighteen"
    elif mins == 19:
        phrase += " nineteen"
    elif mins == 20:
        phrase += " twenty"
    elif mins == 30:
        phrase += " thirty"
    else:
        tens = int(mins/10)
        ones = mins - tens * 10
        phrase += " " + str(tens) + "ty"
        phrase += " " + str(ones)
        
    return phrase
Create a Python program to extract data from webpages using the BeautifulSoup library. Not applicable from bs4 import BeautifulSoup
import requests

# Get the page
url = 'http://example.com'
page = requests.get(url)

# Use BeautifulSoup for parsing
soup = BeautifulSoup(page.content, 'html.parser')

# Get the data
data = soup.find_all('div', class_='datacontainer')

# Print the data
for item in data:
 print(item.text)
Using the library Requests, write a Python code to download a webpage.  import requests

def download_webpage(url):
    '''
    Function to download a webpage using Requests library
    '''
    response = requests.get(url)
    #response.raise_for_status()
    return response.text

url = 'http://example.com'
webpage = download_webpage(url)
print(webpage)
Create a function in python that takes in two dictionaries as argument and returns a list of keys that are in both dictionaries. Dictionary 1: 
{
    "Name": "John",
    "Age": "31",
    "Fav_Color": "Green"
}

Dictionary 2: 
{
    "Name": "Martin",
    "Age": "30",
    "Fav_Book": "Harry Potter"
} def intersect(dict1, dict2): 
    keys1 = set(dict1.keys())
    keys2 = set(dict2.keys())
    common_keys = keys1 &  keys2
    return list(common_keys)

dict1 = {
    "Name": "John",
    "Age": "31",
    "Fav_Color": "Green"
}
dict2 = {
    "Name": "Martin",
    "Age": "30",
    "Fav_Book": "Harry Potter"
}

common_keys = intersect(dict1, dict2)

print(common_keys)
Write a Python program to evaluate a simple expression and print the output. "7*6+20" def evaluate_expression(exp):
  return eval(exp) 

expression = "7*6+20"
output = evaluate_expression(expression)
print(output)
Create a Python code to classify a given Iris flower as Iris setosa, Iris versicolor and Iris virginica. [5.9, 3.0, 5.1, 1.8] def classify_iris(flower):
    if flower[0] < 5 and flower[2] < 4:
        return 'Iris setosa'
    elif flower[2] >= 4.9 and flower[3] <= 1.8:
        return 'Iris virginica'
    else:
        return 'Iris versicolor'
Optimize the following Python program to count the frequencies of characters in a string. string = "String Counting" def countCharacters(string): 
    # Create dictionary to return  
    # count of each character 
    str_dict = {} 
  
    # Count frequency of each 
    # character of the string 
    for i in string: 
        if i in str_dict: 
            str_dict[i] += 1
        else: 
            str_dict[i] = 1
  
    return str_dict 

# Driver code 
string = "String Counting"

# Print result 
print(countCharacters(string))
Create a python program to generate a maze with the given width and height. width=5, height=5 # Generate a maze with the given width and height

from random import randint

def generate_maze(width, height):
    # Create the grid of the maze
    maze_grid = [[0 for x in range(width)] for y in range(height)]
 
    # Generate walls and paths
    for row in range(height):
        for column in range(width):
            if row == 0 and column == 0: 
                maze_grid[row][column] = 0
            elif row == 0 or column == 0:
                maze_grid[row][column] = 0 if randint(0, 1) else 1
            elif row == width-1 or column == height-1:
                maze_grid[row][column] = 0
            else:
                maze_grid[row][column] = randint(0, 2)
    return maze_grid
 
# Generate a maze of 5x5
maze = generate_maze(5,5)

for row in maze:
    print(row)
Write a data pre-processing script in Python Pandas for a given dataset. The dataset has the following attributes:
- ID
- Name
- Gender
- Age
- State
- Country
- Hobby import pandas as pd

# Read in dataset
df = pd.read_csv('data.csv')

# Drop records with missing values
df.dropna(inplace=True)

# Convert Gender, Age, State, Country, Hobby to categorical values
df['Gender'] = df.Gender.astype("category")
df['Age'] = df.Age.astype("category")
df['State'] = df.State.astype("category")
df['Country'] = df.Country.astype("category")
df['Hobby'] = df.Hobby.astype("category")

# One-hot encode categorical values
df = pd.get_dummies(df, columns=['Gender', 'Age', 'State', 'Country', 'Hobby'])

# Convert ID to a string
df['ID'] = df.ID.astype('str')

# Output dataset
df.to_csv('processed_data.csv', index=False)
Write a function in Python that computes the median of a given array of numbers. [2,3,4,5,6,7,8] def median(arr):
 arr.sort() 
 n = len(arr) 
 if n % 2 != 0: 
 return arr[n//2] 
 else: 
 return (arr[(n-1)//2] + arr[n//2]) / 2

# driver code 
arr = [2,3,4,5,6,7,8] 
print(median(arr))
Create a Python program to calculate the total cost of a trip, given the cost of the flight, hotel, and other expenses. Flight Cost: $500
Hotel Cost: $350
Other Expenses: $200 # Calculate the total cost

flight_cost = 500
hotel_cost = 350
other_expenses = 200
total_cost = flight_cost+hotel_cost+other_expenses

print(f"The total cost of the trip is ${total_cost}")
Create a function in Python to remove all the occurences of a given letter in a string. letter = 'a', 
string = 'Abra Cadabra' def remove_occurences(letter, string):
	return string.replace(letter, '')
Build a class in Python 3 to represent a triangle.  class Triangle:
    def __init__(self, side1, side2, side3):
        self.side1 = side1
        self.side2 = side2
        self.side3 = side3

    def perimeter(self):
        return (self.side1 + self.side2 + self.side3)

    def area(self):
        # Using Heron's formula
        s = self.perimeter() / 2
        return (s*(s-self.side1)*(s-self.side2)*(s-self.side3))**0.5
Create a Python Flask application with an API backend. The application should allow users to search and rate movies. The API should have endpoints for movie search, movie rating and reviews retrieval. Not applicable from flask import Flask, request
import requests

app = Flask(__name__)

@app.route('/movie/search', methods=['GET'])
def search_movie():
   query = request.args.get('query')
   api_key = '<YOUR_API_KEY>'
   url = 'http://www.omdbapi.com/?apikey={}&s={}'.format(api_key, query)

response = requests.get(url).json()

movies = []
for movie in response['Search']:
   movies.append({
   'title': movie['Title'],
   'id': movie['imdbID'],
   'year': movie['Year'],
   'poster': movie['Poster'],
   })

return {
 'movies': movies
}

@app.route('/movie/<movie_id>/rating', methods=['GET'])
def get_movie_rating(movie_id):
    url = 'http://www.omdbapi.com/?apikey={}&i={}'.format(api_key, movie_id)
    response = requests.get(url).json()
    return {
        'rating': response['imdbRating']
    }

@app.route('/movie/<movie_id>/reviews', methods=['GET'])
def get_movie_reviews(movie_id):
    url = 'http://www.omdbapi.com/?apikey={}&i={}'.format(api_key, movie_id)
    response = requests.get(url).json() 
    reviews = []
    for review in response['Ratings']:
        reviews.append({ 
            'source': review['Source'],
            'score': review['Value'],
        })
    return {
        'reviews': reviews
    }

if __name__ == '__main__':
	app.run(debug=True)
Create a Python program to print a given string with each character's ASCII code. Hello world! def print_ascii(text):
    '''This function will print a given string with each character's ASCII code.'''
    for ch in text:
        print(f'{ch} : {ord(ch)}')

print_ascii('Hello world!')

# Output:
# H : 72
# e : 101
# l : 108
# l : 108
# o : 111
#  : 32
# w : 119
# o : 111
# r : 114
# l : 108
# d : 100
# ! : 33
Generate a Python function to return the index of a given number in a sorted list.  def index_of(number, lst): 
    hi = len(lst) 
    lo = 0
    index = -1

    while hi > lo: 
        mid = (hi + lo)//2
        if lst[mid] < number: 
            lo = mid + 1
        elif lst[mid] > number: 
            hi = mid 
        else: 
            index = mid 
            return index 
    return index
Design a Python program to find the maximum of two numbers. a = 25
b = 10 def maximum(a, b):
    if a > b:
        maxVal = a
    elif b > a:
        maxVal = b
    else:
        maxVal = a
    return maxVal

maxVal = maximum(a, b) 
print("The maximum of two numbers is", maxVal)
Set the `settings.base.prepopulate` to 0 in Production to save 1x DAL hit every page. If `pop_list` is not equal to 0, set `table` to `db[auth.settings.table_group_name]`. If `db(table.id > 0).select(table.id, limitby=(0, 1)).first()` is true, set `pop_list` to an empty list. If `pop_list` is not a list or tuple, set `pop_list` to a list containing `pop_list`. If the length of `pop_list` is greater than 0, populate default roles and permissions, configure scheduled tasks, import prepopulate data from CSV, update location tree, and populate stats_demographic_aggregate and vulnerability_aggregate.  # -*- coding: utf-8 -*-

# 1st-run initialisation

# Set settings.base.prepopulate to 0 in Production
# (to save 1x DAL hit every page).
pop_list = settings.get_base_prepopulate()
if pop_list == 0:
    pop_list = []
else:
    table = db[auth.settings.table_group_name]
    # The query used here takes 2/3 the time of .count().
    if db(table.id > 0).select(table.id, limitby=(0, 1)).first():
        pop_list = []
    if not isinstance(pop_list, (list, tuple)):
        pop_list = [pop_list]

if len(pop_list) > 0:

    # =========================================================================
    # Populate default roles and permissions
    #

    # Allow debug
    import sys

    print >> sys.stdout, "Please be patient whilst the database is populated"

    # Shortcuts
    acl = auth.permission
    sysroles = auth.S3_SYSTEM_ROLES
    create_role = auth.s3_create_role
    #update_acls = auth.s3_update_acls

    # Do not remove or change order of these 5 definitions (System Roles):
    create_role("Administrator",
                "System Administrator - can access & make changes to any data",
                uid=sysroles.ADMIN,
                system=True, protected=True)

    create_role("Authenticated",
                "Authenticated - all logged-in users",
                uid=sysroles.AUTHENTICATED,
                protected=True)

    create_role("Anonymous",
                "Unauthenticated users",
                # Allow unauthenticated users to view the list of organisations
                # so they can select an organisation when registering
                dict(t="org_organisation", uacl=acl.READ, entity="any"),
                # Allow unauthenticated users to see the list of sites for an
                # org when registering
                dict(c="org", f="sites_for_org", uacl=acl.READ, entity="any"),
                uid=sysroles.ANONYMOUS,
                protected=True)

    # Primarily for Security Policy 2
    create_role("Editor",
                "Editor - can access & make changes to any unprotected data",
                uid=sysroles.EDITOR,
                system=True, protected=True)

    # MapAdmin
    map_admin = create_role("MapAdmin",
                            "MapAdmin - allowed access to edit the MapService Catalogue",
                            dict(c="gis", uacl=acl.ALL, oacl=acl.ALL),
                            dict(c="gis", f="location", uacl=acl.ALL, oacl=acl.ALL),
                            uid=sysroles.MAP_ADMIN,
                            system=True, protected=True)

    # OrgAdmin (policies 6, 7 and 8)
    create_role("OrgAdmin",
                "OrgAdmin - allowed to manage user roles for entity realms",
                uid=sysroles.ORG_ADMIN,
                system=True, protected=True)

    # Enable shortcuts (needed by default.py)
    system_roles = auth.get_system_roles()
    ADMIN = system_roles.ADMIN
    AUTHENTICATED = system_roles.AUTHENTICATED
    ANONYMOUS = system_roles.ANONYMOUS
    EDITOR = system_roles.EDITOR
    MAP_ADMIN = system_roles.MAP_ADMIN
    ORG_ADMIN = system_roles.ORG_ADMIN

    # =========================================================================
    # Configure Scheduled Tasks
    #

    has_module = settings.has_module
    if has_module("msg"):

        # Send Messages from Outbox
        # SMS every minute
        s3task.schedule_task("msg_process_outbox",
                             vars={"contact_method":"SMS"},
                             period=120,  # seconds
                             timeout=120, # seconds
                             repeats=0    # unlimited
                             )
        # Emails every 5 minutes
        s3task.schedule_task("msg_process_outbox",
                             vars={"contact_method":"EMAIL"},
                             period=300,  # seconds
                             timeout=300, # seconds
                             repeats=0    # unlimited
                             )
        # Tweets every minute
        #s3task.schedule_task("msg_process_outbox",
        #                     vars={"contact_method":"TWITTER"},
        #                     period=120,  # seconds
        #                     timeout=120, # seconds
        #                     repeats=0    # unlimited
        #                     )

        # Subscription notifications
        s3task.schedule_task("notify_check_subscriptions",
                             period=300,
                             timeout=300,
                             repeats=0)

    # Daily maintenance
    s3task.schedule_task("maintenance",
                         vars={"period":"daily"},
                         period=86400, # seconds, so 1/day
                         timeout=600,  # seconds
                         repeats=0     # unlimited
                         )

    # =========================================================================
    # Import PrePopulate data
    #

    # Override authorization
    auth.override = True

    # Load all Models to ensure all DB tables present
    s3db.load_all_models()

    # Shortcuts
    path_join = os.path.join
    request_folder = request.folder

    if settings.get_auth_opt_in_to_email():
        table = db.pr_group
        for team in settings.get_auth_opt_in_team_list():
            table.insert(name = team, group_type = 5)

    # Synchronisation
    db.sync_config.insert() # Defaults are fine

    # Person Registry
    tablename = "pr_person"
    # Add extra indexes on search fields
    # Should work for our 3 supported databases: sqlite, MySQL & PostgreSQL
    field = "first_name"
    db.executesql("CREATE INDEX %s__idx on %s(%s);" % (field, tablename, field))
    field = "middle_name"
    db.executesql("CREATE INDEX %s__idx on %s(%s);" % (field, tablename, field))
    field = "last_name"
    db.executesql("CREATE INDEX %s__idx on %s(%s);" % (field, tablename, field))

    # GIS
    # Add extra index on search field
    # Should work for our 3 supported databases: sqlite, MySQL & PostgreSQL
    tablename = "gis_location"
    field = "name"
    db.executesql("CREATE INDEX %s__idx on %s(%s);" % (field, tablename, field))

    # Messaging Module
    if has_module("msg"):
        update_super = s3db.update_super
        # To read inbound email, set username (email address), password, etc.
        # here. Insert multiple records for multiple email sources.
        table = db.msg_email_channel
        id = table.insert(server = "imap.gmail.com",
                          protocol = "imap",
                          use_ssl = True,
                          port = 993,
                          username = "example-username",
                          password = "password",
                          delete_from_server = False
                          )
        update_super(table, dict(id=id))
        # Need entries for the Settings/1/Update URLs to work
        table = db.msg_sms_outbound_gateway
        id = table.insert(outgoing_sms_handler = "WEB_API")
        update_super(table, dict(id=id))
        table = db.msg_sms_modem_channel
        id = table.insert(modem_baud = 115200)
        update_super(table, dict(id=id))
        table = db.msg_sms_webapi_channel
        id = table.insert(to_variable = "to")
        update_super(table, dict(id=id))
        table = db.msg_sms_smtp_channel
        id = table.insert(address="changeme")
        update_super(table, dict(id=id))
        table = db.msg_tropo_channel
        id = table.insert(token_messaging = "")
        update_super(table, dict(id=id))
        table = db.msg_twitter_channel
        id = table.insert(enabled = False)
        update_super(table, dict(id=id))

    # Budget Module
    if has_module("budget"):
        db.budget_parameter.insert() # Defaults are fine

    # Climate Module
    if has_module("climate"):
        s3db.climate_first_run()

    # CAP module
    if has_module("cap"):
        db.cap_alert.insert(template_title="Default", is_template=True)

    # Incident Reporting System
    if has_module("irs"):
        # Categories visible to ends-users by default
        table = db.irs_icategory
        table.insert(code = "flood")
        table.insert(code = "geophysical.landslide")
        table.insert(code = "roadway.bridgeClosure")
        table.insert(code = "roadway.roadwayClosure")
        table.insert(code = "other.buildingCollapsed")
        table.insert(code = "other.peopleTrapped")
        table.insert(code = "other.powerFailure")

    # Supply Module
    if has_module("supply"):
        db.supply_catalog.insert(name = settings.get_supply_catalog_default())

    # Ensure DB population committed when running through shell
    db.commit()

    # =========================================================================
    # PrePopulate import (from CSV)
    #

    # Create the bulk Importer object
    bi = s3base.S3BulkImporter()

    s3.import_role = bi.import_role
    s3.import_user = bi.import_user
    s3.import_image = bi.import_image
    s3.import_remote_csv = bi.import_remote_csv

    # Relax strict email-matching rule for import updates of person records
    email_required = settings.get_pr_import_update_requires_email()
    settings.pr.import_update_requires_email = False

    # Additional settings for user table imports:
    s3db.configure("auth_user",
                   onaccept = lambda form: auth.s3_approve_user(form.vars))
    s3db.add_components("auth_user", auth_membership="user_id")

    # Flag that Assets are being imported, not synced
    s3.asset_import = True

    # Allow population via shell scripts
    if not request.env.request_method:
        request.env.request_method = "GET"

    grandTotalStart = datetime.datetime.now()
    for pop_setting in pop_list:
        start = datetime.datetime.now()
        # Clear Tasklist
        bi.tasks = []
        # Import data specific to the prepopulate setting
        if pop_setting == 1:
            # Populate with the default data
            path = path_join(request_folder,
                             "private",
                             "templates",
                             "default")
            bi.perform_tasks(path)
        else:
            path = path_join(request_folder,
                             "private",
                             "templates",
                             pop_setting)
            if os.path.exists(path):
                bi.perform_tasks(path)
            else:
                print >> sys.stderr, "Unable to install data %s no valid directory found" % pop_setting

        grandTotalEnd = datetime.datetime.now()
        duration = grandTotalEnd - grandTotalStart
        try:
            # Python 2.7
            duration = '{:.2f}'.format(duration.total_seconds()/60)
            print >> sys.stdout, "Pre-populate task completed in %s mins" % duration
        except AttributeError:
            # older Python
            print >> sys.stdout, "Pre-populate task completed in %s" % duration
        bi.resultList = []
    for errorLine in bi.errorList:
        try:
            print >> sys.stderr, errorLine
        except:
            s3_unicode = s3base.s3_unicode
            _errorLine = ""
            for i in range(0, len(errorLine)):
                try:
                    _errorLine += s3_unicode(errorline[i])
                except:
                    pass
            print >> sys.stderr, _errorLine

    # Restore setting for strict email-matching
    settings.pr.import_update_requires_email = email_required

    # Restore Auth
    auth.override = False

    # Update Location Tree (disabled during prepop)
    start = datetime.datetime.now()
    gis.update_location_tree()
    end = datetime.datetime.now()
    print >> sys.stdout, "Location Tree update completed in %s" % (end - start)

    # Countries are only editable by MapAdmin
    db(db.gis_location.level == "L0").update(owned_by_group=map_admin)

    if has_module("stats"):
        # Populate stats_demographic_aggregate (disabled during prepop)
        # - needs to be done after locations
        start = datetime.datetime.now()
        s3db.stats_demographic_rebuild_all_aggregates()
        end = datetime.datetime.now()
        print >> sys.stdout, "Demographic data aggregation completed in %s" % (end - start)

    if has_module("vulnerability"):
        # Populate vulnerability_aggregate (disabled during prepop)
        # - needs to be done after locations
        start = datetime.datetime.now()
        s3db.vulnerability_rebuild_all_aggregates()
        end = datetime.datetime.now()
        print >> sys.stdout, "Vulnerability data aggregation completed in %s" % (end - start)

    grandTotalEnd = datetime.datetime.now()
    duration = grandTotalEnd - grandTotalStart
    try:
        # Python 2.7
        duration = '{:.2f}'.format(duration.total_seconds()/60)
        print >> sys.stdout, "Pre-populate completed in %s mins" % duration
    except AttributeError:
        # older Python
        print >> sys.stdout, "Pre-populate completed in %s" % duration

    # Restore view
    response.view = "default/index.html"

# END =========================================================================

Create a Python program to generate a sentence based on the input text. The quick brown fox jumps over the lazy dog. """
Generate a sentence based on the input text
"""

import random

#get the user input
user_input = "The quick brown fox jumps over the lazy dog."

#split the string into a list of words
word_list = user_input.split()

#shuffle the list
random.shuffle(word_list)

#convert the list back to a string
generated_sentence = ' '.join(word_list)

#print the generated sentence
print(generated_sentence)
Write a python program to generate the Cartesian product of a given list lst = [1, 2, 3] def cartesian_product(lst):
    """Generate the Cartesian product of a given list

    Args:
        lst (list): list of elements

    Returns:
        list: the Cartesian product of the input list
    """
    res = [[i] for i in lst]
    for j in range(len(lst)):
        temp = []
        for k in lst:
            for element in res[j]:
                temp.append(element + [k])
        res.append(temp)
    return res[len(lst)]
In Python, code to present permutations of a certain list of strings "AB", "CD"  from itertools import permutations

strings = ['AB', 'CD']

perm = permutations(strings)

for string in list(perm):
    print(string)
Generate a Python program to fill missing values in the given table. Table: student_data

| id  | name  | age |
|-----|-------|-----|
| 1   | John  |    |
| 2   | Jane  |    |
| 3   | Jack  | 28 | import pandas as pd

# Read the student data
data = pd.read_csv('student_data.csv')

# Fill the missing values
data['age'] = data['age'].fillna(data['age'].mean())

# Print the result
print(data)
Rewrite the given Python code to use list comprehension. arr = [3, 1, 2, 5, 4]
new_arr = []
for element in arr:
    if element % 2 == 0:
        new_arr.append(element) arr = [3, 1, 2, 5, 4]
new_arr = [element for element in arr if element % 2 == 0]
Generate a Python program to find all the perfect numbers between 1 and n. Not applicable def perfect_numbers(n): 
   
    # Initialize perfect number list 
    perfect_number_list = [] 
  
    for num in range(1, n + 1): 
        sum = 0
        for i in range(1, num): 
            if num % i == 0: 
                sum += i 
  
        # If the sum of its divisor equals  
        # the number itself, then that   
        # number is a perfect number. 
        if sum == num: 
            perfect_number_list.append(num) 
  
    return perfect_number_list 

# Driver code 
n = 1000
print(perfect_numbers(n))
Create a function to reverse a string in Python. Hello def reverse_string(string):
    result = ""
    for i in range(len(string) - 1, -1, -1):
        result += string[i]
    return result

reverse_string("hello")
Create a function in Python to split a list into sublists of given length x.  def split_list(list, x):
    return [list[i * x:(i + 1) * x] for i in range((len(list) + x - 1) // x )]
Construct a Python program that can extract the name of an author from a given book title. title = 'Harry Potter and the Sorcerer's Stone' def extract_author(title):
    title_words = title.split()
    for word in title_words[::-1]:
        if word[0].isupper():
            return word

print(extract_author(title)) # Potter
Generate a Python script that extracts text from a given PDF and converts it to CSV. A PDF file import os
import pdfplumber
import csv

# Open the pdf
with pdfplumber.open(file_path) as pdf:
 # Extract text
 text = pdf.extract_text()
 
 # Convert to list
 lines = text.splitlines()
 
 # Save as csv
 with open('file.csv', 'w') as csvfile:
 wr = csv.writer(csvfile)
 for line in lines:
 wr.writerow(line.split())
Create a Python script that finds the median value in an unsorted list of numbers. [3, 4, 1, 2, 5] def median(nums):
 sorted_list = sorted(nums)
 if len(sorted_list) % 2 == 0:
 mid = int(len(sorted_list) / 2)
 return (sorted_list[mid] + sorted_list[mid-1]) / 2
 else:
 return sorted_list[int(len(sorted_list)/2)]

median([3, 4, 1, 2, 5]) # Output: 3.0
Develop a program in Python to operate with complex numbers.  import cmath

# define two operations to add and subtract complex numbers
def add_complex(num1, num2): 
    return num1+num2

def sub_complex(num1,num2): 
    return num1-num2

# add two complex numbers 
num1 = complex(5, 7) 
num2 = complex(3, 4) 
print("Addition of two complex numbers : ", 
add_complex(num1, num2))

# subtract two complex numbers
num1 = complex(5, 7) 
num2 = complex(3, 4) 
print("Subtraction of two complex numbers : ", 
sub_complex(num1, num2))
Use a regular expression to find all emails in a given string in Python. myString = "my name is Joe and my email is joe@example.com" import re 

pattern = "[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+"

result = re.findall(pattern, myString)

print(result) # Output will be ["joe@example.com"]
Develop a python program to calculate the maximum product of two numbers greater than 0 in a given numerical array. array = [6, -3, -10, 0, 2] def maxProduct(arr): 
    n = len(arr) 
    max_prod = 0
    for i in range(0, n): 
        for j in range(i + 1, n): 
            if arr[i] > 0 and arr[j] > 0: 
                max_prod = max(max_prod, arr[i] * arr[j]) 
  
    return max_prod 

# Input
array = [6, -3, -10, 0, 2]

# Output
result = maxProduct(array)
print(result)
Generate a Python program to convert a given number from one base to another.  def base_conversion(n, from_base, to_base):
    # convert from base-10 to from_base
    rems = []
    while n > 0:
        rem = n % from_base
        rems.append(rem)
        n //= from_base

    # convert from from_base to to_base
    result = 0
    for rem in rems[::-1]:
        result *= from_base
        result += rem 
    return result
Generate a function in Python to print "Hello World!" every second.  import time

def printHelloWorld():
  while True:
    print("Hello World!")
    time.sleep(1) 

printHelloWorld()
Write a function in Python to count how many words are in the given string. "Do not stand at my grave and weep" def count_words(string):
    words = string.split(' ')
    return len(words)

sentence = "Do not stand at my grave and weep"
count = count_words(sentence)
print("The given string has {} words.".format(count))
Create a predictive model in Python using an Artificial Neural Network to predict the price of a stock from the previous days closing prices. Not applicable import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow import keras

# Load data from CSV
df = pd.read_csv('data.csv')

# Extract data
X = df.iloc[:, 0:-1].values
y = df.iloc[:, -1:].values

# Build ANN model
model = keras.Sequential()
model.add(keras.layers.Dense(units = 4, activation = 'relu', input_dim = X.shape[1]))
model.add(keras.layers.Dense(units = 4, activation = 'relu'))
model.add(keras.layers.Dense(units = 1))
model.compile(optimizer = 'Adam', loss = 'mean_squared_error')

# Train the model
model.fit(X, y, batch_size = 32, epochs = 100)
Create a Python script for creating an Excel spreadsheet with 2 sheets, one with a list of expenses and another one with a chart showing the total expenses. Not applicable import openpyxl

def createSpreadsheet(name):
  # Create an Excel workbook
  workbook = openpyxl.Workbook()

  # Set up the first sheet with the list of expenses
  expenseSheet = workbook.active
  expenseSheet.title = 'Expenses'
  expenseSheet.cell(row=1, column=1).value = 'Item'
  expenseSheet.cell(row=1, column=2).value = 'Amount'

  # Set up the second sheet with the chart of expenses
  chartSheet = workbook.create_sheet('Chart')
  chartSheet.add_data(expenseSheet['A2':'B4'],
                      from_rows=True,
                      titles_from_data=True)
  chartSheet.add_chart(openpyxl.chart.BarChart(), 'C1')

  # Save the workbook
  workbook.save(name + '.xlsx')
Create a REST API using Python and Flask for a blog post. This API should provide endpoints to create a new post, update an existing post, delete a post, and list all posts. Not applicable from flask import Flask, request 
from flask_restful import Resource, Api 
 
app = Flask(__name__) 
api = Api(app) 
  
# creating the necessary dictionaries to store blog posts
blog_posts = {}

class BlogPost(Resource):
    # endpoint to create a blog post 
    def post(self, post_id):
        post_data = request.get_json()
        post_title = post_data['title']
        post_content = post_data['content']
        blog_posts[post_id] = {
            'title': post_title,
            'content': post_content
            }
        return blog_posts[post_id], 201
      
    # endpoint to update a blog post 
    def put(self, post_id):
        post_data = request.get_json()
        post_title = post_data['title']
        post_content = post_data['content']
        blog_posts[post_id]['title'] = post_title
        blog_posts[post_id]['content'] = post_content
        return blog_posts[post_id], 200
  
    # endpoint to delete a blog post
    def delete(self, post_id):
        del blog_posts[post_id]
        return 'Post deleted', 200
  
    # endpoint to list all blog posts
    def get(self):
        return blog_posts, 200
 
api.add_resource(BlogPost, '/<string:post_id>') 
  
if __name__ == '__main__': 
    app.run(debug = True)
Create an algorithm in Python to solve a given sudoku board.  def solveSudoku(board):
    if not findUnassignedLocation(board):
        return True
 
    for num in range(1, 10):
        if isSafe(board, row, col, num):
            board[row][col] = num
 
            if solveSudoku(board): 
                return True
            board[row][col] = 0
    return False

def findUnassignedLocation(board):
    for i in range(9):
        for j in range(9):
            if board[i][j] == 0:
                return (i, j)
    return None

def isSafe(board, row, col, num):
    # Check row
    for i in range(9):
        if board[row][i] == num:
            return False
 
    # Check column
    for i in range(9):
        if board[i][col] == num:
            return False
 
    # Check sub-grid
    row_start = (row // 3) * 3
    col_start = (col // 3) * 3
    for i in range(row_start, row_start + 3):
        for j in range(col_start, col_start + 3):
            if board[i][j] == num:
                return False
    return True
Write a Python program to create a list of all the even numbers between two given numbers. 5, 10 def even_number_list(a, b):
    return list(i for i in range(a, b+1) if i%2 == 0)
Generate a correct python program to output the number of seconds in the future and in the past 60 minutes def calculate_seconds(minutes):
    return minutes * 60

future_seconds = calculate_seconds(60)
print("The number of seconds in the future is " + str(future_seconds))
past_seconds = calculate_seconds(-60)
print("The number of seconds in the past is " + str(past_seconds))
Create a Python script that connects to a MySQL database and executes an SQL query to output the most expensive products from the database. Database table structure:

id (int)
name (varchar)
price (float) import pymysql

# Connect to MySQL database
conn = pymysql.connect(
    host='host',
    user='user',
    password='password',
    db='dbname'
    )

# Create cursor
cur = conn.cursor()

# Execute query
query = 'SELECT name, price FROM products ORDER BY price DESC'
cur.execute(query)

# Fetch the most expensive products
most_expensive_products = cur.fetchall()

# Print results
for product in most_expensive_products:
    print(f'Product: {product[0]}, Price: {product[1]}')

# Close connection
cur.close()
conn.close()
Write a Python program to print out the Fibonacci series up to n numbers where n is a user input. User input n = 10 # Python Program to print the Fibonacci series up to n numbers

n = int(input("Enter the value of 'n': "))

# first two numbers
a = 0
b = 1

print("Fibonacci Series:") 
print(a, b, end=" ") 
  
for i in range(2,n):
               
    c = a + b
    a = b
    b = c
    print(c, end = " ")
    
print()
Create a Python class that can scrape a given website and return data as a list of dictionaries  class WebsiteScraper(object):
    def __init__(self, url):
        self.url = url

    def scrapedata(self):
        response = requests.get(self.url)
        soup = BeautifulSoup(response.text)
        scraped_list = []
        for item in soup.find_all('div'):
            data = {
                'name': item.get('title'),
                'value': item.get_text()
            }
            scraped_list.append(data)
        return scraped_list
Create a Python function that reverses every other word in a given string. This is a test def reverseWords(sentence):
  words = sentence.split()
  reversed_sentence = []
  for i in range(len(words)):
    if (i % 2 == 0):
      reversed_sentence.append(words[i])
    else:
      reversed_sentence.append(words[i][::-1])
  return " ".join(reversed_sentence)

print(reverseWords("This is a test"))
Create a Python script to access a database and query a table. Not applicable import sqlite3

# Create or open a database
conn = sqlite3.connect('database.db')

# Create a cursor
c = conn.cursor()

# Execute a query
c.execute("SELECT * FROM `table_name`;")

# Get the result
rows = c.fetchall()

# Iterate over the result
for row in rows:
 print(row)

# Close the connection
c.close()
conn.close()
Write an optimized Python program to generate the Fibonacci sequence up to n. n = 10 def fibonacci(n):
 a, b = 0, 1
 fibonacci_list = [a]
 
 for _ in range(n):
 a, b = b, a + b
 fibonacci_list.append(b)
 
 return fibonacci_list

print(fibonacci(n)) # Prints [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
Develop a Python code snippet to compute the Euclidean distance between two points. point1 = (2, 3)
point2 = (4, 5) def euclidean_distance(point1, point2):
    dx = point1[0] - point2[0]
    dy = point1[1] - point2[1]
    return (dx*dx + dy*dy)**0.5
Implement a decision tree classifier in Python that takes in an input of data and predicts which category a given data point belongs to. Input data will be provided as an array containing age, height, and weight attributes. import numpy as np
from sklearn import tree
 
# example data as an array
X = np.array([[21, 180, 70], [22, 178, 68], [19, 182, 72], 
 [18, 186, 80]])
 
# output label (The label can be any string that you set)
y = np.array(['male', 'male', 'female', 'female'])
 
# decision tree classifier
clf = tree.DecisionTreeClassifier()
clf = clf.fit(X, y)
 
# predict based on the given input
prediction = clf.predict([[24, 185, 85]])
 
print(prediction)
Classify a snippet of code according to programming language. def greet():
 print("Hello world!") Python
Write a Python program to compare two given strings and check if they are anagrams St1 = "listen"
St2 = "silent" from collections import Counter 
  
def is_anagram(str1, str2): 
    # Convert both strings to lowercase 
    str1 = str1.lower() 
    str2 = str2.lower() 
  
    # Remove all whitespaces
    str1 = str1.replace(" ", "") 
    str2 = str2.replace(" ", "") 
 
    # remove all special characters
    for char in "!'_,@#$%^&*():;":
        str1 = str1.replace(char, '')
        str2 = str2.replace(char, '')

    # sort the character of both strings 
    sorted_str1 = sorted(str1) 
    sorted_str2 = sorted(str2) 
  
    # Check if both strings are equal or not 
    if(sorted_str1 == sorted_str2):  
        return True 
    else: 
        return False 
  
# Driver program 
str1 = "listen"
str2 = "silent"

if is_anagram(str1, str2): 
    print("The strings are anagrams.") 
else: 
    print("The strings are not anagrams.")
In Python, generate a function to extract data from a MySQL table, given a query string. query_string = "SELECT * FROM student WHERE course='Python'" def extract_data_from_mysql(query_string):
    conn = mysql.connector.connect(host="localhost", user="root", passwd="password", database="student")
    
    cursor = conn.cursor()
    cursor.execute(query_string)
    
    result = cursor.fetchall()
    
    conn.close()
    
    return result
Write a function in Python to replace multiple consecutive `1`s with just one `1`.  def remove_consecutive(list_of_numbers):
    result = []
    last_number = None
    for number in list_of_numbers:
        if number != last_number:
            result.append(number)
            last_number = number
    return result
Generate a Python program to suggest movies based on user ratings. movies = {
  "Inception": 8.5,
  "The Shawshank Redemption": 9.2,
  "The Godfather": 9.2,
  "The Matrix": 8.7
},
user_ratings = {
  "Inception": 9,
  "The Shawshank Redemption": 8.5,
  "The Godfather": 9.2
} def recommend_movies(movies, user_ratings):
 recommended_movies = []
 for movie in movies:
  if movie not in user_ratings:
   if movies[movie] > 8.5:
     recommended_movies.append(movie)
 return recommended_movies

result = recommend_movies(movies, user_ratings)
print(result)
Create a Python script to convert an input JSON string into a Python dictionary. {"name": "John", "age": 30, "country": "USA"} import json

input_string = '{"name": "John", "age": 30, "country": "USA"}'

python_dict = json.loads(input_string)
print(python_dict) # Output: {'name': 'John', 'age': 30, 'country': 'USA'}
Create a Python script to transform given numbers into a digital clock format. Not applicable # A Program to convert given number to digital clock format
def num2clock(n):
  hour = int (n / 3600)
  minute = int ((n % 3600) / 60)
  second = int ((n % 3600) % 60)
  return str(hour).zfill(2) + ':' + str(minute).zfill(2) + ':' + str(second).zfill(2) 

# Main
n = int(input(("Enter a number: ")))
print(num2clock(n))
Create a Python program to parse csv data and convert it into a list of dictionaries. No input. import csv

# Initialize empty list
data = []

# Open csv file
with open('data.csv', 'r') as csv_file:
  # Parse csv file
  csv_reader = csv.reader(csv_file)
  
  # Iterate over rows 
  for row in csv_reader:
    # Convert each row into a dictionary
    row_dict = {
      'name': row[0],
      'age': row[1],
      'location': row[2]
    }
    
    # Append dictionary to data list
    data.append(row_dict)

# Display output
print(data)
Generate a Python program to print the first 5 prime numbers.  # Python program to print the first  
# 5 prime numbers 
  
# function to generate and print first  
# 5 prime numbers 
def display_first_five_primes(): 
    print("The first five prime numbers are:") 
    primenums = [2] 
    num = 3 
    while len(primenums) < 5: 
        for p in primenums: 
            if (num % p) == 0: 
                break 
        else: 
            primenums.append(num) 
        num += 1 
  
    for i in primenums: 
        print(i) 
  
# Driver code 
if __name__ == '__main__': 
    display_first_five_primes()
Create a code in Python for finding the shortest path between two given points. Start: [3, 4]
End: [9, 8] def shortest_path(start_point, end_point):
    path = []
    current_point = start_point
    while current_point != end_point:
        x_dist = end_point[0] - current_point[0]
        y_dist = end_point[1] - current_point[1]

        # move right if x_dist is greater than or equal to
        # y_dist, and move up otherwise
        if x_dist >= y_dist:
            current_point[0] += 1
        else:
            current_point[1] += 1
        path.append(current_point[:])

    return path

result = shortest_path([3, 4], [9, 8])
print(result)
Write a short program in Python that takes in a string as input and counts the number of distinct characters in it.  def distinct_char_count(string):
    unique_characters = set(string)
    return len(unique_characters)
Create a Python script to predict the stock price of a given company in the next 30 days. Input data: Historical stock prices of a particular company """
Predicts the stock price of a given company in the next 30 days
"""

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
import numpy as np

#Get the historical stock prices
data = pd.read_csv('historical_stock_prices.csv')

#Train the linear regression model using the historical stock prices
X = data['date'].values.reshape(-1,1)
y = data['price'].values.reshape(-1,1)
linear_regressor = LinearRegression()  
linear_regressor.fit(X, y)

#Predict the stock prices for the next 30 days
next_30_days = np.arange(X.flatten()[-1]+1, X.flatten()[-1]+30, 1).reshape(-1,1)
y_pred = linear_regressor.predict(next_30_days)

#Print the predicted stock prices
print("The predicted stock prices for the next 30 days are:")
for i in range(30):
  print("Date:", next_30_days[i][0],"Price:",y_pred[i][0])
Write a Python script to generate a random password of at least 8 characters.  import random 
import string

def gen_random_password():
  chars = string.ascii_letters + string.digits
  password = ''.join(random.choice(chars) for _ in range(8))
  return password

print(gen_random_password())
Create a Python program to find the shortest string in a given list of strings. [‘Geeks’, ‘for’, ‘Geek’, ‘a’, ‘Geekeee’] def shortest_string(strings):
    shortest_string = strings[0]
   
    for string in strings:
        if len(string) < len(shortest_string):
            shortest_string = string
    
    return shortest_string
Generate a python program that takes in two input numbers and prints the factorial of the larger number.  # This program takes in two numbers and prints the factorial of the larger number

def factorial(num):
    if num == 0:
        return 1
    else:
        return num * factorial(num - 1)

num1 = int(input("Enter the first number: "))
num2 = int(input("Enter the second number: "))

if num1 > num2:
    result = factorial(num1)
else:
    result = factorial(num2)

print("The result is", result)
Create a question-answering system using Python and Natural Language Processing.  import nltk, numpy
from nltk.stem.lancaster import LancasterStemmer
stemmer = LancasterStemmer()
 
# importing our intents file
import json
with open('intents.json') as json_data:
    intents = json.load(json_data)
 
# tokenizing patterns
words = []
classes = []
documents = []
ignore_words = ['?']
# loop through each sentence in our intents patterns
for intent in intents['intents']:
    for pattern in intent['patterns']:
        # tokenize each word in the sentence
        w = nltk.word_tokenize(pattern)
        # add to our words list
        words.extend(w)
        # add to documents in our corpus
        documents.append((w, intent['tag']))
        # add to our classes list
        if intent['tag'] not in classes:
            classes.append(intent['tag'])
 
# stem and lower each word and remove duplicates
words = [stemmer.stem(w.lower()) for w in words if w not in ignore_words]
words = sorted(list(set(words)))
 
# remove duplicates
classes = sorted(list(set(classes)))
 
# create our training data
training = []
output = []
# create an empty array for our output
output_empty = [0] * len(classes)
# training set, bag of words for each sentence
for doc in documents:
    # initialize our bag of words
    bag = []
    # list of tokenized words for the pattern
    pattern_words = doc[0]
    # stem each word
    pattern_words = [stemmer.stem(word.lower()) for word in pattern_words]
    # create our bag of words array
    for w in words:
        bag.append(1) if w in pattern_words else bag.append(0)
    
    training.append(bag)
    # output is a '0' for each tag and '1' for current tag
    output_row = list(output_empty)
    output_row[classes.index(doc[1])] = 1
    output.append(output_row)
 
# sample training/output
i = 0
w = documents[i][0]
print ([stemmer.stem(word.lower()) for word in w])
print (training[i])
print (output[i])

# import tensorflow
import numpy
import tflearn
import tensorflow as tf
import random 
 
# seed
random.seed(1)        
# transform as a numpy array
training = numpy.array(training)
output = numpy.array(output)
 
# build deep neural network 
net = tflearn.input_data(shape=[None, len(training[0])])
net = tflearn.fully_connected(net, 8)
net = tflearn.fully_connected(net, 8)
net = tflearn.fully_connected(net, len(output[0]), activation="softmax")
net = tflearn.regression(net)
 
# define model and setup tensor board
model = tflearn.DNN(net, tensorboard_dir='tflearn_logs')
# start training (apply gradient descent algorithm)
model.fit(training, output, n_epoch=1000, batch_size=8, show_metric=True)
model.save('model.tflearn')
 
import pickle
pickle.dump( {'words':words, 'classes':classes, 'train_x':training, 'train_y':output}, open( "training_data", "wb" ) )
Generate a python function to convert an array to a dictionary ['a', 1, 'b', 2, 'c', 3] def array_to_dict(lst):
    output = {}
    for i in range(0, len(lst), 2):
        output[lst[i]] = lst[i+1]
 
    return output

# main program
my_list = ['a', 1, 'b', 2, 'c', 3]
result = array_to_dict(my_list)
print(result)
This code is a Python script that contains a test suite for the interactivespaces module. To run the tests, execute the script. The tests cover various methods for interacting with the Interactive Spaces API, including getting collections of activities, live activities, live activity groups, spaces, controllers, and named scripts. There are also tests for creating a new live activity. The code uses the unittest module for testing and the mock module for creating mock objects to test against.  #!/usr/bin/env python
# -*- coding: utf-8 -*-

import unittest
from mock import MagicMock
import json
import urllib
import urllib2
import sys
import os
sys.path.append(os.getcwd())

import interactivespaces

TEST_ACTIVITY_DATA = {
                      "id":"53",
                      "bundleContentHash":"hjkl",
                      "identifyingName":"com.endpoint.lg.browser",
                      "lastUploadDate":1398288057444,
                      "description":"Browser Activity to present \"webui\" activties to the user",
                      "name":"Browser Activity",
                      "lastStartDate":1401901320867,
                      "metadata":{},
                      "version":"1.0.0.dev"
}

TEST_LIVEACTIVITY_DATA = {
                          "lastDeployDate":"Mon May 05 12:50:36 PDT 2014",
                          "outOfDate":False,
                          "id":"110",
                          "description":"",
                          "name":"Evdev Demuxer on 42-a",
                          "active": {
                            "numberLiveActivityGroupRunning":1,
                            "runtimeState":"ACTIVE",
                            "deployState":"UNKNOWN",
                            "lastStateUpdate":"Wed Jun 04 11:17:21 PDT 2014",
                            "runtimeStateDescription":"space.activity.state.active",
                            "directRunning":False,
                            "directActivated":False,
                            "numberLiveActivityGroupActivated":1,
                            "deployStateDescription":"space.activity.state.unknown",
                            "deployStateDetail":None,
                            "runtimeStateDetail":"<p>foo</p>"
                          },
                          "controller": {
                            "id":"2",
                            "name":"ISCtlDispAScreen00",
                            "uuid":"372f0f95-6b48-487a-a1ac-383ba580fc1c"
                          },
                          "uuid":"88816d20-22f6-4f78-95ba-7843696c6bc5",
                          "activity": {
                            "id":"61",
                            "bundleContentHash":"qwerty",
                            "identifyingName":"com.endpoint.lg.evdev.demuxer",
                            "lastUploadDate":1398288062862,
                            "description":"Separates and aggregates different types of input events.",
                            "name":"Event Device Demuxer",
                            "lastStartDate":1401905841864,
                            "metadata":{},
                            "version":"1.0.0.dev"
                          },
                          "metadata":{}
}

TEST_LIVEACTIVITYGROUP_DATA = {
                               "id":"301",
                               "description":"",
                               "name":"Google Earth",
                               "metadata":{}
}

TEST_SPACE_DATA = {
                   "id":"401",
                    "description":"",
                    "name":"LG Express",
                    "metadata":{}
}

TEST_CONTROLLER_DATA = {
                        "state":"RUNNING",
                        "hostId":"ctldispascreen00",
                        "mode":"ENABLED",
                        "id":"2",
                        "stateDescription":"space.controller.state.running",
                        "modeDescription":"space.controller.mode.enabled",
                        "description":"Controller for Screen 00 on Display Node A",
                        "lastStateUpdateDate":"Wed Jun 04 12:25:57 PDT 2014",
                        "name":"ISCtlDispAScreen00",
                        "dataBundleStateDescription":"space.controller.dataBundle.state.none",
                        "uuid":"372f0f95-6b48-487a-a1ac-383ba580fc1c",
                        "dataBundleState":"NO_REQUEST",
                        "lastDataBundleStateUpdateDate":None,
                        "metadata":{}
}

TEST_NAMEDSCRIPT_DATA = {
                        "id":"3",
                        "name":"foo",
                        "description":"bar"
}

TEST_POST = {"foo":"bar"}
TEST_QUERY = {"zot":"zing"}
TEST_SESSION = 'e2s1'

TEST_HOST = '1.2.3.4'
TEST_PORT = 12345

def test_get_collection(data, method_to_test, expected_type, path_name):
    """Helper for testing collection getters."""
    master = interactivespaces.Master(TEST_HOST, TEST_PORT)
    master._api_get_json = MagicMock(return_value=[data])

    result = method_to_test(master)
    master._api_get_json.assert_called_once_with('{}/all'.format(path_name))

    return result

class MasterTests(unittest.TestCase):
    def test_constructor(self):
        """Test construction with valid arguments."""
        master = interactivespaces.Master(TEST_HOST, TEST_PORT)
        self.assertEqual(master.host, TEST_HOST)
        self.assertEqual(master.port, TEST_PORT)

    def test_api_get_json(self):
        """Test a valid call to Master._api_get_json()."""
        class MockResponse(object):
            def read():
                return '{"result":"success","data":{"foo":"bar"}}'
            def getcode():
                return 200

    master = interactivespaces.Master(TEST_HOST, TEST_PORT)
    master._urlopen = MagicMock(return_value=MockResponse())

    command = 'activity/all'
    response = master._api_get_json(command)

    master._urlopen.assert_called_once_with(
      'http://{}:{}/{}.json'.format(TEST_HOST, TEST_PORT, command)
    )
    self.assertEqual('bar', response['foo'])

    def test_api_get_html(self):
        """Test a valid call to Master._api_get_html()."""

class MockResponse(object):
    def read():
        return 'asdf'
    
    def getcode():
        return 200

    master = interactivespaces.Master(TEST_HOST, TEST_PORT)
    master._urlopen = MagicMock(return_value=MockResponse())

    command = 'activity/new'
    response = master._api_get_html(command, {"foo":"bar"})

    master._urlopen.assert_called_once_with(
      'http://{}:{}/{}.html?{}'.format(
        TEST_HOST,
        TEST_PORT,
        command,
        urllib.urlencode(TEST_QUERY)
      )
    )
    self.assertEqual('asdf', response.read())
    self.assertEqual(200, response.getcode())

    def test_api_post_json(self):
        """Test a valid call to Master._api_post_json()."""
    

class MockResponse(object):
    def read():
        return '{"result":"success"}'
    def getcode():
        return 200

    master = interactivespaces.Master(TEST_HOST, TEST_PORT)
    master._urlopen = MagicMock(return_value=MockResponse())

    command = 'liveactivity/42/configure'
    master._api_post_json(command, TEST_QUERY, TEST_POST)

    master._urlopen.assert_called_once_with(
      'http://{}:{}/{}.json?{}'.format(
        TEST_HOST,
        TEST_PORT,
        command,
        urllib.urlencode(TEST_QUERY)
      ),
      urllib.urlencode(TEST_POST)
    )

    def test_api_post_html(self):
        """Test a valid call to Master._api_post_html()."""

class MockResponse(object):
    def read():
        return 'asdf'
    def getcode():
        return 200

    master = interactivespaces.Master(TEST_HOST, TEST_PORT)
    master._urlopen = MagicMock(return_value=MockResponse())

    command = 'namescript/new'
    master._api_post_html(command, TEST_QUERY, TEST_POST)

    master._urlopen.assert_called_once_with(
      'http://{}:{}/{}.html?{}'.format(
        TEST_HOST,
        TEST_PORT,
        command,
        urllib.urlencode(TEST_QUERY)
      ),
      urllib.urlencode(TEST_POST)
    )

    def test_get_all_activities(self):
        """Test Master.get_activities() with no pattern."""
        expected_type = interactivespaces.Activity
        result = test_get_collection(
                                     data=TEST_ACTIVITY_DATA,
                                     method_to_test=interactivespaces.Master.get_activities,
                                     expected_type=expected_type,
                                     path_name='activity'
                                     )
        self.assertEqual(1, len(result))
        self.assertIsInstance(result[0], expected_type)

    def test_get_live_activities(self):
        """Test Master.get_live_activities() with no pattern."""
        expected_type = interactivespaces.LiveActivity
        result = test_get_collection(
                                     data=TEST_LIVEACTIVITY_DATA,
                                     method_to_test=interactivespaces.Master.get_live_activities,
                                     expected_type=expected_type,
                                     path_name='liveactivity'
                                     )
        self.assertEqual(1, len(result))
        self.assertIsInstance(result[0], expected_type)

    def test_get_live_activity_groups(self):
        """Test Master.get_live_activity_groups() with no pattern."""
        expected_type = interactivespaces.LiveActivityGroup
        test_get_collection(
                            data=TEST_LIVEACTIVITYGROUP_DATA,
                            method_to_test=interactivespaces.Master.get_live_activity_groups,
                            expected_type=expected_type,
                            path_name='liveactivitygroup'
                            )
        self.assertEqual(1, len(result))
        self.assertIsInstance(result[0], expected_type)

    def test_get_spaces(self):
        """Test Master.get_spaces() with no pattern."""
        expected_type = interactivespaces.Space
        test_get_collection(
                            data=TEST_SPACE_DATA,
                            method_to_test=interactivespaces.Master.get_spaces,
                            expected_type=expected_type,
                            path_name='space'
                            )
        self.assertEqual(1, len(result))
        self.assertIsInstance(result[0], expected_type)

    def test_get_controllers(self):
        """Test Master.get_controllers() with no pattern."""
        expected_type = interactivespaces.Controller
        test_get_collection(
                            data=TEST_CONTROLLER_DATA,
                            method_to_test=interactivespaces.Master.get_controllers,
                            expected_type=expected_type,
                            ath_name='spacecontroller'
                            )
        self.assertEqual(1, len(result))
        self.assertIsInstance(result[0], expected_type)

    def test_get_named_scripts(self):
        """Test Master.get_named_scripts() with no pattern."""
        expected_type = interactivespaces.NamedScript
        test_get_collection(
                            data=TEST_NAMEDSCRIPT_DATA,
                            method_to_test=interactivespaces.Master.get_named_scripts,
                                expected_type=expected_type,
                                path_name='namedscript'
                                )
        self.assertEqual(1, len(result))
        self.assertIsInstance(result[0], expected_type)

    def test_new_live_activity(self):
        """Test a valid call to Master.new_live_activity()."""
        master = interactivespaces.Master(TEST_HOST, TEST_PORT)

class MockFirstResponse():
    def getcode():
        return 200
    def geturl():
        return 'http://{}:{}/liveactivity/new.html?execution={}'.format(
                                                                        TEST_HOST,
                                                                        TEST_PORT,
                                                                        TEST_SESSION
                                                                        )

class MockSecondResponse():
    def getcode():
        return 200

    master._api_get_html = MagicMock(return_value=MockFirstResponse())
    master._api_post_html = MagicMock(return_value=MockSecondResponse())


class MockActivity():
    self.id = TEST_LIVEACTIVITY_DATA['activity']['id']


class MockController():
    self.id = TEST_LIVEACTIVITY_DATA['controller']['id']

    test_live_activity = master.new_live_activity(
                                                  TEST_LIVEACTIVITY_DATA['name'],
                                                  TEST_LIVEACTIVITY_DATA['description'],
                                                  MockActivity(),
                                                  MockController()
                                                  )
    master._api_get_html.assert_called_once_with(
      'liveactivity/new',
      {"mode": "embedded"}
    )
    master._api_post_html.assert_called_once_with(
      'liveactivity/new',
      {"execution": TEST_SESSION},
      {
        "liveActivity.name": TEST_LIVEACTIVITY_DATA['name'],
        "liveActivity.description": TEST_LIVEACTIVITY_DATA['description'],
        "activityId": TEST_LIVEACTIVITY_DATA['activity']['id'],
        "controllerId": TEST_LIVEACTIVITY_DATA['controller']['id'],
        "_eventId_save": "Save"
      }
    )

    self.assertIsInstance(
      test_live_activity,
      interactivespaces.LiveActivity
    )

def main():
  unittest.main()

if __name__ == '__main__':
  main()

Create a function in Python to print out all of the stuff in a given dictionary. Not applicable def print_dict(dict):
 for key in dict:
   print(key,":", dict[key])
Develop an algorithm in Python that reverses a given string. "hello world" def reverseString(s): 
    return s[::-1] 
  
string = "hello world"

print("Original String:", string) 
print("Reversed String:", reverseString(string))
Design a python class that stores the total distance travelled, average speed and the number of stops made.  class Trip:
    def __init__(self, distance=0, speed=0, stops=0):
        self.distance = distance
        self.speed = speed
        self.stops = stops

    def get_distance(self):
        return self.distance

    def get_speed(self):
        return self.speed

    def get_stops(self):
        return self.stops 

    def set_distance(self, distance):
        self.distance = distance

    def set_speed(self, speed):
        self.speed = speed

    def set_stops(self, stops):
        self.stops = stops
Create a Python program to determine whether a given spectrum is valid. spectrum = [15, 16, 18, 21, 25, 28] def is_valid_spectrum(spectrum):
    m = spectrum[0]
    for n in spectrum[1:]:
        if n - m not in [1, 2]:
            return False
        m = n
    return True
Classify the following items using a supervised machine learning algorithm in Python [3, 5, 7, 1, 0] import numpy as np 
from sklearn import svm 

# Input data to classify
X = np.array([[3, 5, 7, 1, 0]])

# Label data, either 0 or 1
y = np.array([0])

# Create a SVC classifier
clf = svm.SVC(gamma=0.001, C=100.)

# Train the model, using the training sets
clf.fit(X, y)

print('Prediction:', clf.predict(X))

Output:
Prediction: [0]
Create a stack data structure in Python.  class Stack:

    def __init__(self):
        self.items = []
    
    def push(self, item):
        self.items.append(item)
    
    def pop(self):
        if self.items:
            return self.items.pop()
        else:
            return None
    
    def peek(self):
        if self.items:
            return self.items[-1]
        else:
            return None
    
    def size(self):
        return len(self.items)
Develop a Python class to represent an employee with name, position and salary. The employee is named 'John', he is a software engineer and he earns 6000$ per month. class Employee:
    def __init__(self, name, position, salary):
        self.name = name
        self.position = position
        self.salary = salary

john = Employee('John', 'Software Engineer', 6000)
Analyze the given Python code and correct any errors so that the code runs correctly. def main():
 nums = range[0,10)
 for num in nums
  print("The square of", num,"is", num * num)

main() def main():
 nums = range(0,10)
 for num in nums:
  print("The square of", num,"is", num * num)

main()
Write a Python Program to take multiple inputs and prints the highest among them. 14, 16, 2 values = [14, 16, 2]
 
highest = values[0]
 
for i in values:
    if highest < i:
        highest = i
 
print("The highest value is: ", highest)
Create an algorithm to check for the sum of two numbers in an array. Given an array of integers in random order, write a Python program to check whether there are two numbers present whose sum is equal to a given number. arr = [20, 5, 12, 3, 9, 11]; 
sum = 21 def check_sum(arr, sum): 
 for i in range(len(arr)-1): 
  for j in range(i+1, len(arr)): 
   if arr[i] + arr[j] == sum: 
    return True

 return False

arr = [20, 5, 12, 3, 9, 11] 
sum = 21

if check_sum(arr, sum): 
 print("Sum Found") 
else: 
 print("Sum Not Found")
Create a slugify function in Python that converts a sentence into a valid URL slug. This Is a Test def slugify(string):
    slug = string.lower().strip().replace(' ', '-')
    return slug

slug = slugify("This Is a Test")
print(slug)
Implement a Python program to check if a given number is an Armstrong Number  def checkArmstrong(num):
    temp = num 
    res = 0
    while temp > 0: 
       digit = temp % 10
       res = res + digit ** 3
       temp = temp // 10
    
    if num == res: 
        return f'{num} is an Armstrong Number'
    else:
        return f'{num} is not an Armstrong Number'
Write a Python program to insert a given string at the beginning of all items in a list. my_list = ["hello", "world", "python"]
prefix = "Programming - " my_list = ["hello", "world", "python"]
prefix = "Programming - "

# Insert the prefix to all items in the list
new_list = [prefix + item for item in my_list]

print(new_list)
Consider the following python code. Write a code to modify this such that it generates the output shown. def get_year_from_date(date):
    year = date.split('-')[0]
    return int(year) def get_year_from_date(date):
    """
    This function takes a string date in the form of a yyyy-mm-dd and returns the year as an integer
    """
    year = date.split('-')[0]
    return int(year)
Write a Python program to randomly generate a 5x5 matrix of integers between 1 and 10, and then find the sum of each row of the matrix. Not applicable import random

# Create a 5x5 matrix of random integers between 1-10
matrix = [[ random.randint(1,10) for _ in range(5)] for _ in range(5)]

# Print the matrix
for row in matrix:
 print(row)

# Find the sum of each row
row_sums = [sum(row) for row in matrix]

# Print the row sums
print(row_sums)
Create a Python program that takes in an array and returns an array with each element multiplied by two. [2, 3, 4] def double_array_elements(arr):
    new_arr = []
    for num in arr:
        new_arr.append(num * 2)
    return new_arr

arr = [2, 3, 4]

new_arr = double_array_elements(arr)
print(new_arr) # [4, 6, 8]
Write an algorithm in Python to measure the similarity between two text documents. Not applicable # Import essential libraries
import os
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer
from sklearn.feature_extraction.text import CountVectorizer 
import numpy as np
 
# Define  the documents
doc1 = "This is the first document"
doc2 = "This is the second document"
 
# Tokenize the documents
words_in_doc1 = word_tokenize(doc1) 
words_in_doc2 = word_tokenize(doc2) 
 
# Remove the stop words
stop_words = set(stopwords.words('english'))
filtered_doc1 = [w for w in words_in_doc1 if not w in stop_words] 
filtered_doc2 = [w for w in words_in_doc2 if not w in stop_words] 
 
# Stem the documents
ps = PorterStemmer()
stem_doc1 = [ps.stem(word) for word in filtered_doc1] 
stem_doc2 = [ps.stem(word) for word in filtered_doc2] 
 
#Generate Bag of Words for both documents
bag_of_words1 = ' '.join(stem_doc1)
bag_of_words2 = ' '.join(stem_doc2)
 
# Generate the corpus
corpus = [bag_of_words1, bag_of_words2]
  
# Generate the Count Vector
cv = CountVectorizer()
vectors = cv.fit_transform(corpus).toarray()
  
# Calculate the cosine similarity
similarity = np.dot(vectors[0], vectors[1])/(np.linalg.norm(vectors[0])* np.linalg.norm(vectors[1]))
print("Similarity between the 2 texts: {}".format(similarity))
Given a subset of Wikipedia articles about programming languages, write a Prolog program that returns a list of articles that contain at least one link to another article. Wikipedia articles about "Java", "JavaScript", "Python", "C++", "C#" articles(["Java", "JavaScript", "Python", "C++", "C#"]).

links(Article_A, Article_B) :-
 articles([Article_A, Article_B]),
 Article_A \= Article_B.

%% Returns a list of articles that contain at least one link.
linked_articles(T) :-
 articles(A),
 findall(X, links(X, _), T).
Construct a Python program that calculates the sum of all the items in a given list. [1, 4, 2, 5, 9] def sumoflist(list): 
  sum = 0
  for i in range(0, len(list)): 
    sum = sum + list[i] 
  
  return sum

list1 = [1, 4, 2, 5, 9] 
print(sumoflist(list1))
Create a Python program to compare two strings to determine the number of characters which are different. Not applicable def compareStrings(str1, str2):
 count = 0
 
 for i in range(min(len(str1), len(str2))):
 if str1[i] != str2[i]:
 count += 1
 
 # if the strings are different lengths, add the remaining characters from the longer string to the count
 if len(str1) > len(str2):
 count += len(str1) - len(str2)
 elif len(str2) > len(str1):
 count += len(str2) - len(str1)
 
 return count
Write a python code for sorting n distinct integers using insertion sort.  def insertion_sort(arr):
    for i in range(1, len(arr)): 
  
        key = arr[i] 
  
        # Move elements of arr[0..i-1], 
        # that are greater than key, 
        # to one position ahead of 
        # their current position 
        j = i-1
        while j >= 0 and key < arr[j] : 
                arr[j + 1] = arr[j] 
                j -= 1
        arr[j + 1] = key
Find the largest number in an array using Python. Array: [1, 10, 5, 6, 9, 8, 20] arr = [1, 10, 5, 6, 9, 8, 20]

def largest_number(arr):
  largest = arr[0]
  for num in arr:
    if num > largest:
      largest = num

  return largest

largest = largest_number(arr)
print(largest) # 20
Generate a function in Python that takes a list of strings and a integer, and returns a new list with the strings that have length greater than or equal to the given integer. ["Java", "C++", "Swift", "Python", "Kotlin"], 4 def filter_within_length(strings, length):
    result = []
    for string in strings:
        if len(string) >= length:
            result.append(string)
    return result

strings = ["Java", "C++", "Swift", "Python", "Kotlin"]
result = filter_within_length(strings, 4)
print(result)
Write a python code allowing the user to convert strings to ints and ints to strings.  def str_to_int(string):
    return int(string)
  
def int_to_str(integer):
    return str(integer)
Convert the following function from Python to Java. def generate_list(size):
    """Generate a list of integers from 0 to size - 1."""
    return [x for x in range(size)] public List<Integer> generateList(int size) {
    /* Generate a list of integers from 0 to size - 1. */
    List<Integer> list = new ArrayList<>();
    for (int i = 0; i < size; i++) {
        list.add(i);
    }
    return list;
}
Generate a Python program to print out all the permutations of a given string.  def permutate(string):
    if len(string) == 0:
        return ['']
    prevList = permutate(string[1: len(string)])
    nextList = []
    for i in range(0,len(prevList)):
        for j in range(0,len(string)):
            newString = prevList[i][0: j]+string[0]+prevList[i][j: len(string)-1]
            if newString not in nextList:
                nextList.append(newString)
    return nextList

string = input()
print(permutate(string))
Implement class inheritance in Python  class Vehicle:
    def __init__(self, name, wheels):
        self.name = name
        self.wheels = wheels
        
class Car(Vehicle):
    def __init__(self, name, wheels, engine):
        super().__init__(name, wheels)
        self.engine = engine
Develop a program in Python for finding the factorial of a given number. 7 def factorial(n):
    if n < 0:
        return None
    elif n == 0:
        return 1
    else:
        result = 1
        for i in range(1, n + 1):
            result *= i
        return result

num = 7
print('factorial of {} is {}'.format(num, factorial(num)))
Generate a Python code to get the min and max elements of an array.  def min_and_max(array):
    min_element = array[0]
    max_element = array[0]
    for element in array:
        if element < min_element:
            min_element = element
        elif element > max_element:
            max_element = element 
    return (min_element, max_element)
Write a Python program to retrieve and print the current stock price of the tech companies Google and Microsoft  import requests
import json

def get_stock_price(ticker):
    url = 'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol={ticker}&interval=1min&apikey=<Your_API_KEY>'.format(ticker=ticker)
    response = requests.get(url)
    data = json.loads(response.text)
    if data:
        ts = data['Time Series (1min)']
        latest_data_point = list(ts.values())[0]
        return latest_data_point['4. close']

if __name__ == '__main__':
    g_price = get_stock_price('GOOGL')
    m_price = get_stock_price('MSFT')
    print(f'Google stock price: {g_price}')
    print(f'Microsoft stock price: {m_price}')
Write a Python function to extract the last digits of a given integer. n = 12345 def extract_last_digits(n):
  return int(str(n)[-2:])

result = extract_last_digits(12345)
print(result)
Create a Python class that represents a bank account and implements basic operations like deposit, withdraw, and transfer.  class BankAccount:
    def __init__(self, owner, balance = 0):
        self.owner = owner
        self.balance = balance
        
    def deposit(self, amount):
        self.balance += amount
        print(f'Deposit accepted! Total balance: {self.balance}')
        
    def withdraw(self, amount):
        if self.balance >= amount:
            self.balance -= amount
            print(f'Withdrawal accepted! Total balance: {self.balance}')
        else:
            print(f'Insufficient funds!')
            
    def transfer(self, other, amount):
        if self.balance >= amount:
            self.balance -= amount
            other.balance += amount
            print(f'Transfer accepted! Total balance: {self.balance}')
        else:
            print(f'Insufficient funds!')
Generate a list of letters in lowercase using Python.  import string 

print(list(string.ascii_lowercase))
Write a Python program to classify bank transactions into classes of 'Income' or 'Expenses' [{
 'description': 'Grocery',
 'amount': -100
}, {
 'description': 'Rent',
 'amount': -600
},
{
 'description': 'Salary',
 'amount': 3000
}] def classify_transactions(transaction_list):
    results = []
    for transaction in transaction_list:
        category = 'Expense'
        if transaction['amount'] >= 0:
            category = 'Income'
        results.append({
            'description': transaction['description'],
            'amount': transaction['amount'],
            'category': category
        })
    return results
Construct a regex pattern in Python to detect URLs.  import re

url_pattern = re.compile(
    r'^(?:http|ftp)s?://' # http:// or https://
    r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}\.?)|' #domain...
    r'localhost|' #localhost...
    r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})' # ...or ip
    r'(?::\d+)?' # optional port
    r'(?:/?|[/?]\S+)$', re.IGNORECASE)
Write a python program to detect the size of two overlapping rectangles. Rectangle A with 4 corners: (2, 6), (4, 6), (4, 2), (2, 2); 
Rectangle B with 4 corners: (3, 5), (6, 5), (6, 3), (3, 3) rectA_min = (2, 6)
rectA_max = (4, 2)

rectB_min = (3, 5)
rectB_max = (6, 3)

def check_overlap(rectA, rectB):
  overlap_x = min(rectA_max[0], rectB_max[0]) - max(rectA_min[0], rectB_min[0])
  overlap_y = min(rectA_max[1], rectB_max[1]) - max(rectA_min[1], rectB_min[1])
 
  if overlap_x>0 and overlap_y>0:
    overlap_area = overlap_x * overlap_y
    return overlap_area
  else:
    return 0
Write a Python program that takes in two sets and prints out the elements that are common to both sets. Set 1: ["apple", "banana", "orange"]
Set 2: ["pineapple", "banana", "mango"] def common_elements(set1, set2):
 set_common = set1.intersection(set2)
 return set_common
Generate a Python program to implement the following sorting algorithm Bubble Sort def bubble_sort(arr):
    n = len(arr)
    for i in range(n - 1):
        for j in range(i + 1, n):
            if arr[j] < arr[i]:
                arr[i], arr[j] = arr[j], arr[i]
    return arr
Create a program in Python that implements a sorting algorithm of your choice to sort a given array of integers in ascending order. A = [9, 4, 5, 1, 3] def sort_array(A):
    if len(A) <= 1:
        return A

    pivot = A[0]
    left = [item for item in A if item < pivot]
    right = [item for item in A if item > pivot]

    return sort_array(left) + [pivot] + sort_array(right)
Write a Python program to generate documentation in HTML format for a given Python solution. Solution:
def add_item(item_list, new_item):
 item_list.append(new_item)
 return def generate_html_doc(solution):
 html = "<html>\n<head>\n<title>Python Documentation</title>\n</head>\n<body>\n\n<h1>Solution</h1>\n\
<pre>\n"
 html += solution + "\n</pre>\n\n</body>\n</html>"
 return html
Using Python, create a function that returns the first 10 prime numbers. Not applicable def find_prime_numbers(num):
 prime_numbers = []
 for x in range(2, num):
 flag = True
 for y in prime_numbers:
 if x % y == 0:
 flag = False
 break
 if flag:
 prime_numbers.append(x)
 if len(prime_numbers) == 10
 break

return prime_numbers
 
# Usage
find_prime_numbers(100)
# Output
[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]
Given a string, convert it to a list of words. String: "Hello there, how are you?" # Python code to convert a string 
# to a list of words 

# Split a string by a delimiter 
def string_split(string): 
    # Split the string into words 
    words = string.split(' ') 
  
    return words 
      
# Driver code 
string = "Hello there, how are you?"
print(string_split(string))
Create a SQL query to find the names of all web pages that have the term "Python" in their title.  SELECT name 
FROM pages 
WHERE title LIKE '%Python%';
Write a python program to create a list of every third number between 1 and fifty.  my_list = []
for i in range(1, 50, 3):
    my_list.append(i)
Write a python code snippet to append a new item to a given list. list = [1, 2, 4, 8] list.append(16)
Create a web scraper using Python and the requests library to scrape data from a specific website. Example website URL: https://www.example.com import requests

# Specify your website URL
url = 'https://www.example.com'

# Send a request to the website
response = requests.get(url)

# Check the status of the response
if response.status_code == 200:
 # Parse the HTML of the response
 response_html = response.content

 # Do something with the HTML
 print(response_html)
Generate a python program to implement a Caesar cipher text = "Hello World!"
key = 3 def caesar_cipher(text, key):
    # Create an empty output string
    output = ""
    
    # Iterate over the text
    for char in text:
        # Check if the character is a letter
        if char.isalpha():
            # Shift the character according to the key
            shifted = chr(ord(char) + key)
            
            # Check if the shifted character is still a letter
            if shifted.isalpha():
                output += shifted
            else:
                # Wrap the character if it goes beyond the alphabet range
                output += chr(ord(char) - (26 - key))
        else:
            # Do not shift non-alphabet characters
            output += char

    # Return the output string
    return output
Generate a Python 2D list containing a 10x10 checkerboard pattern  board = [[0]*10 for _ in range(10)]
for i in range(10):
 for j in range(10):
  if i%2 == j%2:
   board[i][j] = 1
print board
Implement an algorithm in Python to search for a number in a given sorted list of numbers. arr = [1,3,5,7,8,9]
number = 7 def binarySearch(arr, number):
    left = 0
    right = len(arr) - 1
    while left <= right:
        mid = (left + right)//2
        if arr[mid] == number:
            return mid
        elif arr[mid] < number:
            left = mid + 1
        else:
            right = mid - 1
    return -1

if __name__ == '__main__':
    arr = [1, 3, 5, 7, 8, 9]
    number = 7
    result = binarySearch(arr, number)
    print(result)
Generate a Python dictionary to store the average scores for 10 different students.  student_scores = {
    'John': 88.0, 
    'Jane': 91.2, 
    'Adam': 70.6, 
    'Josh': 75.1,
    'Paul': 95.5,
    'Abby': 87.3,
    'Brian': 67.3,
    'Kim': 80.5,
    'Mark': 93.2,
    'Sarah': 86.7
}
Generate a valid Python code that will print the given message Hello World! print("Hello World!")
Write a Python function that takes in a 2D array of integers and return the sum of all elements in the array. [[1, 2, 3], [4, 5, 6], [7, 8, 9]] def sumArray(arr):
  sum = 0
  for i in range(len(arr)):
    for j in range(len(arr[i])):
      sum += arr[i][j]
      
  return sum

sumArray([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) # returns 45
Generate a responsive HTML/CSS page for displaying a list of books from a given Amazon S3 bucket. [
 {
 "Id": "123456",
 "Book Name": "Programming in Python",
 "Cost": "100"
 },
 {
 "Id": "654321",
 "Book Name": "Networking Essentials",
 "Cost": "200"
 }
] <html>
 <head>
  <title>Book List</title>
  <style>
   body{
    font-family: 'Open Sans', sans-serif;
   }
   table {
    width: 100%;
    border-collapse: collapse;
   }
   table tr td, table tr th {
    border: 1px solid #dddddd;
    text-align: left;
    padding: 8px;
   }
   table tr th {
    background-color: #dddddd;
   }
  </style>
 </head>
 <body>
  <h1>Book List</h1>
  <table>
   <thead>
    <tr>
     <th>Id</th>
     <th>Book Name</th> 
     <th>Cost</th>
    </tr>
   </thead>
   <tbody>
    <tr>
     <td>123456</td>
     <td>Programming in Python</td>
     <td>100</td>
    </tr>
    <tr>
     <td>654321</td>
     <td>Networking Essentials</td>
     <td>200</td>
    </tr>
   </tbody>
  </table>
 </body>
</html>
Develop a web scraper with Python BeautifulSoup to scrape data from an online web store. Not applicable import requests
from bs4 import BeautifulSoup
 
# Make a GET request to fetch the raw HTML content
html_content = requests.get('http://web-store.com').text
 
# Parse the html content
soup = BeautifulSoup(html_content, "lxml")
 
# Get the product data
products = soup.find_all('div', attrs={"itemprop": "product"})
for product in products:
    name = product.find("span", attrs={"itemprop": "name"}).text
    price = product.find("span", attrs={"itemprop": "price"}).text
    description = product.find("span", attrs={"itemprop": "description"}).text
    print(name, price, description)
Develop a python class to model a book with attributes title and authors.  class Book:
    def __init__(self, title, authors):
        self.title = title
        self.authors = authors

myBook = Book('The Great Gatsby', 'F. Scott Fitzgerald')
print(myBook.title, myBook.authors)
Generate code to print the multiplication tables from 1 to 10 in Python. Not applicable for i in range(1, 11):
 for j in range(1, 11):
 print(i*j, end='\t')
 print()
Generate a python program to find the year of the oldest movie [{'title': 'The matrix', 'releaseYear': 1999 },
 {'title': 'Titanic', 'releaseYear': 1997 },
 {'title': 'Transformers', 'releaseYear': 2006 },
 {'title': 'Wall-E', 'releaseYear': 2008 }] def oldest_movie(movies):
    oldest_year = movies[0]["releaseYear"]
    for movie in movies: 
        if movie["releaseYear"] < oldest_year:
            oldest_year = movie["releaseYear"]
    return oldest_year
Create a class in Python to simplify working with temperatures in different units.  class Temperature:
    def __init__(self, value, unit):
        self.value = value
        self.unit = unit


    def convert_to_celsius(self):
        if self.unit == 'C':
            return self.value
        elif self.unit == 'F':
            return (self.value - 32) * 5/9
        elif self.unit == 'K':
            return self.value - 273.15
        else:
            return None
Create a machine learning model in Python to detect malicious URLs. Not applicable import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv1D, LSTM, Dense

# Create the model
model = Sequential()

# Add layers
model.add(Conv1D(128, 5, activation='relu', input_shape=(20, 1)))
model.add(LSTM(128))
model.add(Dense(1, activation='sigmoid'))

# Compile the model
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
Given a list of numbers, write a program in Python to select only the elements divisible by 5. [23, 12, 64, 39, 52] def divisible_five(nums):
    result = []
    for num in nums:
        if num % 5 == 0:
            result.append(num)
    return result
Modify a Python program to add a minimum value of 10 to each element in a list. list = [1, 2, 3, 4] list = [x + 10 for x in [1, 2, 3, 4]]
Automate the process of formatting large sets of data with Python. Large sets of data containing irregular formats, inconsistent delimiters import re 

def format_data(data): 
  # replace single white space with comma 
  formatted = re.sub(' +', ',', data) 
  # replace multiple white spaces with single white space 
  formatted = re.sub(' ', ' ', formatted) 
  # remove leading and trailing white spaces 
  formatted = re.sub('^\s+|\s+?$', '', formatted) 
      
  return formatted 

data = 'a   b  c   d'
formatted_data = format_data(data) 

print(formatted_data) 
# OUTPUT:
# a,b,c,d
Construct a Python program to search all numbers divisible by 5 and 7 between a given range The range 1000 to 2000 def find_divisble_numbers(start, end):
    divisible_numbers = []
    for i in range(start, end + 1):
        if i % 5 == 0 and i % 7 == 0:
            divisible_numbers.append(i)
    return divisible_numbers

divisible_numbers = find_divisble_numbers(1000, 2000)
print(divisible_numbers)
Create a REST API using Python and Flask to allow users to store and access data. Not applicable import flask
from flask import jsonify
import sqlite3
from flask import g

app = flask.Flask(name)

DATABASE = 'data.db'

def get_db():
   db = getattr(g, '_database', None)
   if db is None:
       db = g._database = sqlite3.connect(DATABASE)
   return db

@app.route('/data', methods=['POST'])
def store_data():
   db = get_db()
   cur = db.cursor()
   cur.execute("INSERT INTO data (data) VALUES (?)", (flask.request.form['data'],))
   db.commit()
   return jsonify(status='OK', message='Data stored')

@app.route('/data', methods=['GET'])
def get_data():
   db = get_db()
   cur = db.cursor()
   cur.execute('SELECT * FROM data')
   row = cur.fetchall()
   data = [item[0] for item in row]
   return jsonify(status='OK', message=data)

if name == 'main':
   app.run(debug=True)
Port a Python function that takes a natural language query string and returns a set of search results into JavaScript. def simple_search(query):
    results = []
    for item in my_data_set:
        if query in item['data']:
            results.append(item)
        return results

query = "find me a car" const simpleSearch = (query) => {
    let results = [];
    for (let item of myDataSet) {
        if (item.data.includes(query)) {
            results.push(item);
        }
    }
    return results;
};

let query = "find me a car";
let results = simpleSearch(query);
Create a Python code to calculate the speed of an object at a given time. position = 50
time = 10 def calculate_speed(position, time): 
    speed = position / time 
    return speed

if __name__ == '__main__':
    position = 50
    time = 10
    speed = calculate_speed(position, time)
    print(speed)
Write a Python program to create a tic-tac-toe game.  # define a function to draw the board
def draw_board(): 
  
    print("\n")                   
    print(" --- | --- | --- ")
    print("  7  |  8  |  9  ") 
    print(" --- | --- | --- ")
    print("  4  |  5  |  6  ") 
    print(" --- | --- | --- ")
    print("  1  |  2  |  3  ") 
    print(" --- | --- | --- ")
  
# define a function to check if position is empty 
def check_position(position, board): 
    return board[position] == ' '
  
# define a function to check if board is full and return boolean  
def is_board_full(board): 
    for i in range(1, 10): 
        if check_position(i, board): 
            return False
    return True
Write a Python program to implement a decision tree using a given dataset. The dataset contains 10,000 examples and 5 features. import numpy as np
from sklearn import tree

# Load the data
X = np.loadtxt('data.txt', delimiter=',')

# Create a decision tree model
clf = tree.DecisionTreeClassifier()
clf.fit(X, y)

# print the model tree 
tree.export_graphviz(clf, out_file="model.dot")
Establish a distributed system with Python using RabbitMQ to send and receive messages. Not applicable #sending_messages.py

import pika

connection = pika.BlockingConnection(pika.ConnectionParameters(host='localhost'))

channel = connection.channel()

channel.queue_declare(queue='hello')

channel.basic_publish(exchange='', routing_key='hello', body='Hello World!')

connection.close()

#receiving_messages.py
import pika

connection = pika.BlockingConnection(pika.ConnectionParameters(host='localhost'))

channel = connection.channel()

channel.queue_declare(queue='hello')

def callback(ch, method, properties, body):
    print(" [x] Received %s" % body)

channel.basic_consume(queue='hello',
                      auto_ack=True,
                      on_message_callback=callback)

channel.start_consuming()
Generate a Monte-Carlo simulation program in Python to estimate the value of Pi.  import random
 
# Function to generate random points
def generate_random_point():
    x = random.uniform(-1, 1)
    y = random.uniform(-1, 1)
    return (x, y)
 
# Function to calculate Pi
def calculate_pi(num_samples):
    # Number of points inside the circle
    num_inside = 0
    for i in range(num_samples):
        # Generate a random point  
        point = generate_random_point()
        # Check if the point is inside the circle
        if (point[0]**2 + point[1]**2 <= 1):
            num_inside += 1
    # Calculate pi
    return 4*num_inside/num_samples
Design a search algorithm in Python which returns the position of a number in a given list. array = [2, 3, 4, 5, 7, 8, 9] 
target = 7 def findPosition(arr, target): 
	
	# check if the array is empty 
	if len(arr) == 0: 
		return -1
	
	# start the search from the beginning of the array 
	start = 0
	
	# search until the end of the array 
	end = len(arr) - 1
	
	# loop until the start index is less than the end index 
	while start <= end: 
		
		# find the middle index 
		mid = start + (end - start) // 2
		
		# check if the current element is greater, smaller or equal to the target
		if arr[mid] > target: 
			end = mid - 1
		elif arr[mid] < target: 
			start = mid + 1
		else: 
			return mid 
		
	# if the search failed  
	return -1
 
pos = findPosition(array, target) 
if pos == -1: 
	print ("Number not found") 
else: 
	print ("Number found at index", pos)
Write a Python program to create a dictionary from two lists where the first list contains keys and the second list contains values. keys = ['a', 'b', 'c', 'd']
values = [1, 2, 3, 4] def create_dictionary(keys, values):
  dictionary = dict(zip(keys, values))
  return dictionary

dictionary = create_dictionary(keys, values)
print(dictionary)
Write a Python script to predict the sentiment of a given sentence using the TextBlob library. "Life is full of surprises." import textblob

sentence = "Life is full of surprises."
sentiment = textblob.TextBlob(sentence).sentiment.polarity

if sentiment == 0:
 # neutral sentiment
 print("Neutral Sentiment")
elif sentiment > 0:
 # positive sentiment
 print("Positive Sentiment")
else:
 # negative sentiment
 print("Negative Sentiment")
Given a number, write a Python program to print the multiplication table of that number. Number: 5 for i in range(1, 11):
 print(5, 'X', i, '=', 5*i)
Create a machine learning program in Python that will classify text data into 3 different categories. Not applicable import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import classification_report

# Load the data
data = pd.read_csv("data.csv")

# Vectorize the text
cv = CountVectorizer()
X = cv.fit_transform(data["text"])

# Convert target labels to numerical values
y = np.array([1 if label == "category1" else 2 if label == "category2" else 3 for label in data["category"]])

# Split into train and test data
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)

# Train the model
nb = MultinomialNB()
nb.fit(X_train, y_train)

# Test the model
y_pred = nb.predict(X_test)

# Print out the results
print(classification_report(y_test, y_pred))
Write a Python function to convert a given floating point number to binary. 19.66 def decimal_to_binary(f_num):
  b_str = ""
  int_num = int(f_num)
  f_num = f_num - int_num

  while int_num > 0:
    b_str = str(int_num % 2) + b_str
    int_num //= 2

  b_str = "1." + b_str

  while f_num > 0: 
    f_num *= 2
    int_num = int(f_num)
    if int_num == 1:
      b_str += "1"
    else:
      b_str += "0"
    f_num = f_num - int_num

  return b_str
Implement a Python function for finding the difference between two lists. list1 = [1, 2, 3, 4]
list2 = [2, 3, 4, 5] def difference(list1, list2):
    difference_set = set(list1) - set(list2)
    return list(difference_set)

list1 = [1, 2, 3, 4]
list2 = [2, 3, 4, 5]

difference = difference(list1, list2)
print(difference)

# Output:
# [1]
Develop a Python program to find the longest common sub-sequence between two string. "lmnopq"
"abclmnopq" def lcs(X, Y): 
    # find the length of the strings
    m = len(X)
    n = len(Y)
  
    # declaring the array for storing the dp values 
    L = [[None]*(n+1) for i in range(m+1)] 
  
    """Following steps build L[m+1][n+1] in bottom up fashion 
    Note: L[i][j] contains length of LCS of X[0..i-1] 
    and Y[0..j-1]"""
    for i in range(m+1): 
        for j in range(n+1): 
            if i == 0 or j == 0 : 
                L[i][j] = 0
            elif X[i-1] == Y[j-1]: 
                L[i][j] = L[i-1][j-1]+1
            else: 
                L[i][j] = max(L[i-1][j] , L[i][j-1]) 
  
    # L[m][n] contains the length of LCS of X[0..n-1] & Y[0..m-1] 
    return L[m][n] 

# Driver program 
X = "lmnopq"
Y = "abclmnopq"
print("Length of LCS is ", lcs(X, Y))
Write a Python program to compute the readability score of a given text. text = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua." def compute_readability(text):
    """Compute the readability score of a given text"""
    words = 0
    sentences = 0
    syllables = 0
    for word in text.split():
        words += 1
        syllables += count_syllables(word)

    for sentence in text.split("."):
        sentences += 1

    score = 206.835 - (1.015 * (words / sentences)) - (84.6 * (syllables / words))
    return score

def count_syllables(word):
    """Count the number of syllables in a given word"""
    vowels = "aeiouAEIOU"
    syllables = 0
    for letter in word:
        if letter in vowels:
            syllables += 1
    if len(word) >= 3 and word[-3:] == "ely" or word[-2:] == "es":
        syllables -= 1
    return syllables
Create a Python script to parse a dictionary using a list comprehension and create a new dictionary with the keys and values swapped. {'a':1, 'b':2, 'c':3} {v:k for k, v in d.items()}
In Python, create a function to find the difference in number of a's and b's in a string. abcdba def countDifference(s): 
   a_count = 0
   b_count = 0
   for i in range(len(s)):  
       if (s[i] == 'a'): 
           a_count = a_count + 1
       elif (s[i] == 'b'): 
           b_count = b_count + 1
   diff = a_count - b_count
   return diff

print(countDifference('abcdba'))
Design and write a Python script to generate Fibonacci numbers up to n=10000. Not applicable def generate_fibonacci(n):  
    #first two Fibonacci numbers  
    a = 0
    b = 1
    #check if the number of terms is valid  
    if n <=0:  
        print("Please enter a positive integer")  
    elif n == 1:  
        print("Fibonacci sequence upto",n,":")  
        print(a)  
    else:  
        print("Fibonacci sequence:")  
        for i in range(0,n):  
            print(a)  
            c = a + b  
            #update values  
            a = b  
            b = c  
# Driver function  
generate_fibonacci(10000)
Given a list of integers, write a Python program to count the number of 0s in the list.  def count_zeros(list):
    count = 0
    for num in list:
        if num == 0:
            count += 1
    return count
Create a text-based RPG game in Python. The game should involve player navigation, be randomly generated, and include enemies the player must defeat in order to win. Not applicable import random
import time

# Create classes
class Player:
    def __init__(self, name):
        self.name = name
        self.hp = 100
        self.position = [0, 0]

class Enemy:
    def __init__(self, name):
        self.name = name
        self.hp = random.randint(50, 100)

# Initialize globals
player = Player(input("What is your name? "))
enemies = []
done = False

# Game loop
while not done:
    print("You are in room ({}, {})".format(player.position[0], 
                                            player.position[1]))
    print("1. Move")
    print("2. Check HP")
    print("3. Exit Game")
    action = int(input("What do you want to do? "))

if action == 1:
    # Movement
    x = int(input("Move how many units on the x-axis? "))
    y = int(input("Move how many units on the y-axis? "))
    player.position[0] += x
    player.position[1] += y

elif action == 2:
    # Check HP
    print("Your HP is {}".format(player.hp))

elif action == 3:
    # Exit Game 
    done = True

# Generate enemies randomly
if random.random() < 0.1:
    enemies.append(Enemy("Rat"))
    print("An enemy appeared!")

# Combat
for enemy in enemies:
    print("A {} approaches!".format(enemy.name))
    print("What do you do? 1. Fight 2. Flee")
    action = int(input(">"))

    if action == 1:
        fight(player, enemy)
How would you check if a string ends with a given substring in Python? Input String = "Test string"
Substring = "string" if InputString.endswith(Substring):
    print('The input string ends with the given substring.')
else:
    print('The input string does not end with the given substring.')
Come up with a function in Python that predicts the future value of stocks given some parameters. parameters:  market condition, news, historical data def predict_stock_value(parameters):
    """
    Predicts the future value of stocks based on given parameters.
    
    Parameters: 
        - Market condition (trends, developments, etc.) 
        - News (industry-specific news, news sources) 
        - Historical data (stock prices, stock returns)

    Returns:
        A float value representing predicted stock price.
    """
    # Code to generate predicted stock value goes here
    ...
    return predicted_stock_value
Create a class in Python for an object that can contain two strings.  class TwoStringObject:
    def __init__(self, str1, str2):
        self.str1 = str1
        self.str2 = str2
Build a recommendation system in Python for finding similar items.  # import libraries 
import numpy as np
import scipy 
from nltk.stem.porter import * 
import pandas as pd 
from scipy.spatial.distance import cosine, correlation 
from sklearn import metrics 
  
# Read the metadata 
metadata = pd.read_csv('movies_metadata.csv') 
  
# select the required columns 
metadata = metadata[['title', 'genres']] 
  
# calculate the genre of the movie by using any tokenizer like 
# RegexpTokenizer or PorterStemmer tokenizer 
stemmer = PorterStemmer() 

# Function to get genre 
def get_genre(x): 
    genre1 = [] 
    try: 
        mylist = x['genres'].split('|') 
        for i in mylist:
            # print(stemmer.stem(i))
            genre1.append(stemmer.stem(i)) 
    except: 
        pass
    return genre1
  
# create a new column having all the genres 
metadata['genre_new'] = metadata.apply(get_genre, axis = 1) 

# Function to calculate the similarity between moviess 
# based on their genres 
def genre_similarity(x):     
    sim = [] 
    for i in x['genre_new']:       
        indx = metadata[metadata['genre_new'].map(lambda d: i in d)].index           
        sim.extend(list(metadata['title'][indx])) 
          
    return sim[:20] 
  
# create a new column having the similar movies to each movie 
metadata['sim_movies'] = metadata.apply(genre_similarity, axis = 1)
Write a Python function to calculate the cosine similarity between two lists of numbers. list1 = [1, 2, 3, 4]
list2 = [2, 3, 4, 5] def cosine_similarity(list1, list2):
 sum1, sum2, sum_sq1, sum_sq2, p_sum = 0, 0, 0, 0, 0
 for i in range(len(list1)):
 sum1 += list1[i]
 sum2 += list2[i]
 sum_sq1 += list1[i]**2
 sum_sq2 += list2[i]**2
 p_sum += list1[i] * list2[i]
 num = p_sum - (sum1 * sum2 / len(list1))
 den = (sqrt(sum_sq1 - pow(sum1, 2) / len(list1)) * (sqrt(sum_sq2 - pow(sum2, 2) / len(list1))))
 if den == 0:
 return 0
 return num/den
Create a program in Python that can analyze over a million articles to find the most commonly used words. A folder containing one million articles in text files. import os
from collections import Counter
from nltk import word_tokenize

# Specify the directory containing the files
directory = 'articles_folder'

# Initialize a Counter object
word_counts = Counter()

# Iterate through all the files in the directory
for filename in os.listdir(directory):
  if filename.endswith('.txt'):
    with open(os.path.join(directory, filename)) as f:
      for line in f:
        tokens = word_tokenize(line)
        word_counts.update(tokens)

# Print the most common words
for word, count in word_counts.most_common(20):
  print(f'{word}: {count}')
Create a Python script for web scraping data from a website using the BeautifulSoup library. Not applicable import requests
from bs4 import BeautifulSoup
url = "<website url>"

# Make request to website
r = requests.get(url)

# Get the HTML of the page
html = r.text

# Parse HTML using BeautifulSoup
soup = BeautifulSoup(html, 'html.parser')

# Extract desired info from the page
data = soup.find_all('div', {'class': 'content'})

# Print the data
print(data)
Can you write a Python program to print out the elements in a given list with their frequency? [1, 2, 3, 2, 4, 1, 1] my_list = [1, 2, 3, 2, 4, 1, 1]

frequency_dict = {}

for num in my_list:
    if num in frequency_dict:
        frequency_dict[num] = frequency_dict[num] + 1
    else:
        frequency_dict[num] = 1

for num, freq in frequency_dict.items():
    print("{} : {}".format(num, freq))
Create a python module that reads the sentiment of a given text. Nothing import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer

def sentiment_score(text): 
    sentiment_scores = SentimentIntensityAnalyzer().polarity_scores(text) 
    return sentiment_scores["compound"]
Create an algorithm in Python that computes a Fibonacci sequence up to a given index. Index: 7 def fibonacci_seq(n):
    if n < 0:
        raise ValueError("Index must be a positive integer.")
    elif n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        a = 0
        b = 1
        for i in range(2, n + 1):
            c = a + b
            a = b
            b = c
        return c

fib_7 = fibonacci_seq(7)
print(fib_7)
Create a Python script to make an API request to an online store's API. The script should query for all available products, and print a summary of the results. Not applicable import requests
 
# Make an API request
url = 'https://example.com/api/products'
data = requests.get(url).json()
 
# Show results
print('Available Products')
for item in data['products']:
    print(f'{item["name"]} - {item["price"]}')
Create a Python function to remove all the characters of a specified string that appear more than once.  def remove_duplicates(string):
    result = ""
    for char in string:
        if string.count(char) == 1:
            result += char
    return result
Write a Python program to generate recurrence equation for a given sequence and initial condition. [2, 4, 6, 8], 2 def generate_recurrence(sequence, initial_condition): 
 if len(sequence) <= 1: 
 return initial_condition 
 
 a_i = sequence[-1] 
 a_i_1 = sequence[-2] 
 recurrence = a_i + initial_condition - a_i_1 
 return recurrence

result = generate_recurrence([2, 4, 6, 8], 2)
print(result)
Write a Python class to implement a stack.  class Stack:
    def __init__(self):
        self.items = []

    def isEmpty(self):
        return self.items == []

    def push(self, data):
        self.items.append(data)

    def pop(self):
        return self.items.pop()

    def peek(self):
        return self.items[len(self.items)-1]

    def size(self):
        return len(self.items)
Construct a Python script to perform a linear regression model for the given data-points. X = [1, 2, 3, 4, 5]
Y = [1, 4, 9, 16, 25] import matplotlib.pyplot as plt
import numpy as np
from sklearn.linear_model import LinearRegression

X = np.array([1, 2, 3, 4, 5]).reshape(-1, 1)
y = np.array([1, 4, 9, 16, 25])

# Build the model
model = LinearRegression()
model.fit(X, y)

# Plot the results
plt.scatter(X, y)
plt.plot(X, model.predict(X))
plt.title("Linear Regression Model")
plt.xlabel("x")
plt.ylabel("y")
plt.show()
Create a Python lambda expression that prints out the square of each item in an input list. [1, 2, 3] square = lambda nums: [x*x for x in nums]

squares = square([1,2,3])
print(squares)
Create a Python program that takes a sentence as input and performs sentiment analysis. The program should output either 'negative' or 'positive'. The food was really bad. import nltk

sentence = input('Enter a sentence: ')

tokens = nltk.word_tokenize(sentence)

from nltk.sentiment.vader import SentimentIntensityAnalyzer
sid = SentimentIntensityAnalyzer()

score_dict = sid.polarity_scores(sentence)
score = score_dict['compound']

if score >= 0.05:
  print('positive')
elif score <= -0.05:
  print('negative')
else:
  print('neutral')
Implement a basic linear search algorithm in Python that searches a list of numbers for a given target value and returns the index of the target value if it is present, otherwise it returns -1. arr = [1, 3, 5, 6, 9, 17],
target = 6 def linear_search(arr, target):
 for i in range(len(arr)):
 if arr[i] == target:
 return i
 return -1

print(linear_search(arr, target)) # 3 (index of 6)
Create a Python program to format a given amount of money with a given currency symbol. Money: 95.50
Currency Symbol: € def format_money(amount, symbol):
    return f"{symbol}{amount:.2f}"

format_money(95.50, '€') # returns €95.50
Create a Twitter bot in Python to reply with popular trends whenever a user searches for a hashtag. Not applicable # Import necessary packages
import tweepy
import json

#Authentication
consumer_key = 'your_consumer_key'
consumer_secret = 'your_consumer_secret'
access_token = 'your_access_token'
access_token_secret = 'your_access_token_secret'

auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
auth.set_access_token(access_token, access_token_secret)

api = tweepy.API(auth)

# Track tweets with a specific hashtag
keyword = "#python"

# Reply with popular trends
trends_result = api.trends_place(1)
trends = json.loads(json.dumps(trends_result, indent=2))

for trend in trends[0]["trends"]:
 try:
  api.update_status(trend["name"])
 except tweepy.TweepError as e:
  print(e.reason)
Create a Python program to find the shortest path from source to destination. Source = [0,0] 
Destination = [5,5] from collections import deque

# Helper function to get the neighbors of a cell
def get_neighbors(cell):
     x, y = cell[0], cell[1]
     neighbors = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]
     return [neighbor for neighbor in neighbors if 0 <= neighbor[0] < 6 and 0 <= neighbor[1] < 6]

# Helper function to get the cost of a cell
def get_cost(cell):
     x, y = cell[0], cell[1]
     return abs(x-5) + abs(y-5)  

# Find the shortest path from the source to the destination
def find_shortest_path(source, destination):
     # Create a queue to store the cells to be visited
     cells_to_visit = deque([source])

     # Create a dictionary to store the parent cell for each cell
     parents = {source: None}

     while cells_to_visit:
         current_cell = cells_to_visit.popleft()

         # Find the neighbors of the current cell
         neighbors = get_neighbors(current_cell) 

         # Iterate over the neighbors
         for neighbor in neighbors:
             # Get the cost of the neighbor
             neighbor_cost = get_cost(neighbor)

             # If the neighbor has not been visited yet
             if neighbor not in parents:
                 # Update the queue
                 cells_to_visit.append(neighbor)

                 # Update the parents dictionary
                 parents[neighbor] = current_cell

                 # If the neighbor is the destination
                 if neighbor == destination:
                     shortest_path = []
                     current = destination 
                     while current is not None:
                         shortest_path.append(current)
                         current = parents[current]
                     return reversed(shortest_path)

# Call the find_shortest_path function
shortest_path = find_shortest_path([0, 0], [5, 5])

# Print the shortest path
print('The shortest path is:')
print(list(shortest_path))
Create a machine learning program in Python to classify the sentiment of a movie review. The program should accept text input and output a sentiment score between 0 and 1, with 0 being a negative sentiment and 1 being a positive sentiment. Not applicable import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer,TfidfTransformer
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LogisticRegression

train_df = pd.read_csv('movie_reviews.csv')

X_train = train_df['review']
y_train = train_df['sentiment']

pipeline = Pipeline([
 ('vectorizer', CountVectorizer()),
 ('tfidf', TfidfTransformer()),
 ('classifier', LogisticRegression())
])

pipeline.fit(X_train, y_train)

def sentiment(text):
 prediction = pipeline.predict_proba([text])[0][1]
 return prediction

sentiment('I loved the movie!')
Design a web application to  display the search results for sports listings.  // Step 1: Design the database schema
/*
The database schema would include tables such as Users, Sports, Venues, Events, etc and the fields would be chosen accordingly like user id, sports name, venue name, event start/end time, etc.
*/

// Step 2: Design and develop the application
/*
The application would be a web application consisting of back-end and front-end components. The back-end would involve a server-side scripting language such as PHP or Python and the front-end would involve HTML/CSS and JavaScript. The application would interact with the database to retrieve the search results.
*/

// Step 3: Design the user interface
/*
The user interface of the application would involve a search box for users to enter relevant search terms. The results would be displayed in a tabular format with details such as sport name, venue name, start/end times, etc.
*/
Create an API endpoint in Python using Django Rest Framework which provides basic CRUD functionality for a Post model (i.e. Create, Read, Update, Delete operations). Not applicable from rest_framework import views, status
from rest_framework.response import Response
from .models import Post
from .serializers import PostSerializer

class PostView(views.APIView):
    def get(self, request):
        posts = Post.objects.all()
        serializer = PostSerializer(posts, many=True)
        return Response(serializer.data)

    def post(self, request):
        serializer = PostSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

class PostDetailView(views.APIView):
    def get(self, request, pk):
        post = Post.objects.get(pk=pk)
        serializer = PostSerializer(post)
        return Response(serializer.data)

    def put(self, request, pk):
        post = Post.objects.get(pk=pk)
        serializer = PostSerializer(post, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

   def delete(self, request, pk):
        post = Post.objects.get(pk=pk)
        post.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)
Create a class in Python called "Person" and add properties "name", "age", "area".  class Person:
  def __init__(self, name, age, area):
    self.name = name
    self.age = age
    self.area = area
Create a Python program to generate a dataset with the following structure: 20 rows, 2 columns (name and age). Not applicable import random

# Create an empty list
data = []

# Generate 20 names and ages
for i in range(20):
 name = 'Name ' + str(i)
 age = random.randint(18, 70)

# Append the data to the list
 data.append([name, age])

# Print out the list
print(data)

# [['Name 0', 64],
#  ['Name 1', 18],
#  ['Name 2', 24],
#  ['Name 3', 36],
#  ['Name 4', 34],
#  ['Name 5', 28],
#  ['Name 6', 56],
#  ['Name 7', 42],
#  ['Name 8', 68],
#  ['Name 9', 24],
#  ['Name 10', 50],
#  ['Name 11', 20],
#  ['Name 12', 54],
#  ['Name 13', 40],
#  ['Name 14', 61],
#  ['Name 15', 40],
#  ['Name 16', 41],
#  ['Name 17', 38],
#  ['Name 18', 56],
#  ['Name 19', 41]]
Construct a parser in Python to read a table from HTML. <table> 
    <tr>
        <th>Name</th>
        <th>Age</th>
        <th>City</th>
    </tr>
    <tr>
        <td>John</td>
        <td>25</td>
        <td>New York</td>
    </tr>
    <tr>
        <td>Mary</td>
        <td>22</td>
        <td>Chicago</td>
    </tr>
</table> import lxml.html

def parse_table(html_str):
    root = lxml.html.fromstring(html_str)

    # locate the table
    table = root.xpath('//table')[0]

    # collect header names
    header_names = [th.text_content() for th in table.xpath('//th')]

    # collect data rows
    data_rows = table.xpath('//tr')[1:]
    data_rows = [[td.text_content().strip() for td in row.xpath('td')]
                    for row in data_rows]

    # print the result
    print(header_names)
    print(data_rows)
Write a Python program to read a given string and sort it alphabetically. "Hello, World!" def sort_alphabetically(input_string):
    chars = list(input_string)
    chars.sort()
    print("".join(chars))

sort_alphabetically("Hello, World!")
Write a Python program to find the maximum and minimum of three numbers.  def findMinMax(num1, num2, num3):
    if num1 >= num2 and num1 >= num3:
        maximum = num1
        minimum = num3 if num3 <= num2 else num2
    elif num2 >= num1 and num2 >= num3:
        maximum = num2
        minimum = num1 if num1 <= num3 else num3
    else:
        maximum = num3
        minimum = num1 if num1 <= num2 else num2
    return (maximum, minimum)

num1 = int(input("Enter first number: "))
num2 = int(input("Enter second number: "))
num3 = int(input("Enter third number: "))

maximum, minimum = findMinMax(num1, num2, num3)

print("Maximum of three numbers is:", maximum)
print("Minimum of three numbers is:", minimum)
Develop an algorithm in Python that finds the minimum element from a given array. [14, 7, 25, 16] def findMin(arr): 
     
    # Initialize minimum element as first 
    # element of array 
    min = arr[0] 
  
    # Loop through the array and get 
    # the current element 
    for i in range(len(arr)): 
        if arr[i] < min: 
            min = arr[i] 
  
    return min

arr = [14, 7, 25, 16]

print(findMin(arr))
Create a kernelized SVM classifier in Python for a multiclass classification problem.  # import necessary libraries
from sklearn import svm

# define the model
model = svm.SVC(kernel='rbf', gamma=1.0, C=1.0)

# fit the model
model.fit(X, y)

# make predictions
y_pred = model.predict(X)
Create a Python script to whitelist a specific user from a list of users. user_list = ["user1","user2","user3","user4","user5"]
whitelist_user = "user3" def whitelist_user(user_list, whitelist_user):
    Whitelisted_users = []
    for user in user_list: 
        if user == whitelist_user:
            Whitelisted_users.append(user)
    
    return Whitelisted_users
Construct a Python class that behaves like a stack.  class Stack:
    def __init__(self):
        self.items = []

    def isEmpty(self):
        return self.items == []

    def push(self, item):
        self.items.append(item)

    def pop(self):
        return self.items.pop()

    def peek(self):
        return self.items[len(self.items)-1]

    def size(self):
        return len(self.items)
Develop a Python program to edit a given string such that each word starts with its first letter capitalized.  def capitalized(string): 
	output = []
	# Split the input string into list of words 
	words = string.split()   
	for word in words: 
		# Capitalize the first letter
		first_letter = word[0] 
		word = first_letter.upper() + word[1:] 
		output.append(word) 
        
	return " ".join(output) 

# Driver code 
string = "this is a sample sentence"
print(capitalized(string))
This code allows the user to input text and select a language for PySpeaking to speak. To use this code, install google_speech and run the language() function. Follow the prompts to select a language and enter text to speak.  # Developer : Hamdy Abou El Anein

import os
import sys
from easygui import *

print("IMPORTANT\n\nThis software work only if google_speech is installed on the system. To install it go to this link please : https://pypi.python.org/pypi/google_speech/\n\n")


def language():

    global lang

    msg = "What's the language do you want to make PySpeaking speak ?"
    title = "PySpeaking-GUI"
    choices = ["English", "French", "German", "Spanish","Japanese","Chinese","Italian","Arabic", "Russian"]
    choice = choicebox(msg, title, choices)

    if choice == "English":
        lang = ' en '
        textToSpeak()
    elif choice == "French":
        lang = ' fr '
        textToSpeak()
    elif choice == "German":
        lang = ' de '
        textToSpeak()
    elif choice == "Spanish":
        lang = ' es '
        textToSpeak()
    elif choice == "Japanese":
        lang = ' ja '
        textToSpeak()
    elif choice == "Chinese":
        lang = ' zh-CN '
        textToSpeak()
    elif choice == "Italian":
        lang = ' it '
        textToSpeak()
    elif choice == "Arabic":
        lang = ' ar '
        textToSpeak()
    elif choice == "Russian":
        lang = ' ru '
        textToSpeak()
    else:
        sys.exit(0)

def textToSpeak():
    global fieldValues

    msg = "Enter the text to speak"
    title = "Enter the text to speak"
    fieldNames = ["Text to speak"]
    fieldValues = []
    fieldValues = multenterbox(msg, title, fieldNames)
    fieldValues[0]
    speak()

def speak():
    global lang, fieldValues

    textValue = "google_speech -l" +str(lang) +str(" \"")+str(fieldValues[0].replace("'","\'"))+str("\"")
    os.system(textValue)

language()
The given code is a Python implementation of kNN algorithm for classification. It includes functions for reading data from a file, normalizing the data, and implementing the kNN algorithm. To use this code, call the "datingClassTest" function, which reads data from a file, normalizes it, and tests the kNN algorithm on the data. The function prints the classifier's results and the true classification for each test case, as well as the total error rate.  #-*- coding: utf-8 -*-

from numpy import *
import operator

# 读取数据到矩阵
def file2matrix(filename):

    # 打开数据文件，读取每行内容
    fr = open(filename)
    arrayOLines = fr.readlines()

    # 初始化矩阵
    numberOfLines = len(arrayOLines)
    returnMat = zeros((numberOfLines,3))

    # 初始化类标签向量
    classLabelVector = []

    # 循环读取每一行数据
    index = 0
    for line in arrayOLines:
        # 去掉回车符
        line = line.strip()
        # 提取4个数据项
        listFromLine = line.split('\t')
        # 将前三项数据存入矩阵
        returnMat[index,:] = listFromLine[0:3]
        # 将第四项数据存入向量
        classLabelVector.append(int(listFromLine[-1]))
        index += 1
    return returnMat,classLabelVector


# 数据归一化
def autoNorm(dataSet):
    # 读取矩阵中数据项的最大和最小值
    minVals = dataSet.min(0)
    maxVals = dataSet.max(0)

    # 获得最大和最小值间差值
    ranges = maxVals - minVals

    # 初始化输出结果
    normDataSet = zeros(shape(dataSet))

    # 获取矩阵的行数
    m = dataSet.shape[0]

    # 矩阵运算：实现归一化公式中的 oldValue - min 一步
    normDataSet = dataSet - tile(minVals, (m,1))

    # 矩阵除法：实现归一化公式中的除法
    normDataSet = normDataSet/tile(ranges, (m,1))

    # 返回归一化后的数据，数据范围及最小值矩阵
    return normDataSet, ranges, minVals


# kNN算法实现
def classify0(inX, dataSet, labels, k):
    # 获取样本数据数量
    dataSetSize = dataSet.shape[0]

    # 矩阵运算，计算测试数据与每个样本数据对应数据项的差值
    diffMat = tile(inX, (dataSetSize,1)) - dataSet

    # sqDistances 上一步骤结果平方和
    sqDiffMat = diffMat**2
    sqDistances = sqDiffMat.sum(axis=1)

    # 取平方根，得到距离向量
    distances = sqDistances**0.5

    # 按照距离从低到高排序
    sortedDistIndicies = distances.argsort()
    classCount={}

    # 依次取出最近的样本数据
    for i in range(k):
        # 记录该样本数据所属的类别
        voteIlabel = labels[sortedDistIndicies[i]]
        classCount[voteIlabel] = classCount.get(voteIlabel,0) + 1

    # 对类别出现的频次进行排序，从高到低
    sortedClassCount = sorted(classCount.iteritems(), key=operator.itemgetter(1), reverse=True)

    # 返回出现频次最高的类别
    return sortedClassCount[0][0]

# 算法测试
def datingClassTest():
    # 设定测试数据的比例
    hoRatio = 0.10

    # 读取数据
    datingDataMat,datingLabels = file2matrix('datingTestSet2.txt')

    # 归一化数据
    normMat, ranges, minVals = autoNorm(datingDataMat)

    # 数据总行数
    m = normMat.shape[0]

    # 测试数据行数
    numTestVecs = int(m*hoRatio)

    # 初始化错误率
    errorCount = 0.0

    # 循环读取每行测试数据
    for i in range(numTestVecs):

        # 对该测试人员进行分类
        classifierResult = classify0(normMat[i,:],normMat[numTestVecs:m,:],datingLabels[numTestVecs:m],3)

        # 打印KNN算法分类结果和真实的分类
        print "the classifier came back with: %d, the real answer is: %d" % (classifierResult, datingLabels[i])

        # 判断KNN算法结果是否准确
        if (classifierResult != datingLabels[i]): errorCount += 1.0

    # 打印错误率
    print "the total error rate is: %f" % (errorCount/float(numTestVecs))

# 执行算法测试
datingClassTest()
Create a Python program for generating the nth Fibonacci number. Not applicable def fibonacci(n): 
 if n == 0: 
 return 0
 elif n == 1: 
 return 1
 else:
 return fibonacci(n - 1) + fibonacci(n - 2)
Create a function in Python to filter out elements in a list that share the same value. mylist = [1, 2, 2, 3, 3, 3] def filter_same_value_elements(mylist):
 seen = set()
 for item in mylist:
 if item not in seen:
 yield item
 seen.add(item)

filtered_list = list(filter_same_value_elements(mylist))
print(filtered_list) # [1, 2, 3]
Create a program in Python to simulate the queue data structure. Not applicable class Queue(object):
    def __init__(self):
        self.items = []

    def isEmpty(self):
        return self.items == []

    def enqueue(self, item):
        self.items.insert(0, item)

    def dequeue(self):
        return self.items.pop()

    def size(self):
        return len(self.items)
Build a linear regression model in Python which can predict the house prices given the number of rooms and square feet. rooms: [4, 3, 2, 5]
square_feet: [2000, 1600, 1400, 2500]
price: [400000, 340000, 280000, 480000] import numpy as np
from sklearn.linear_model import LinearRegression

# Input data
rooms = np.array([4, 3, 2, 5]).reshape(-1, 1)
square_feet = np.array([2000, 1600, 1400, 2500]).reshape(-1, 1)
price = np.array([400000, 340000, 280000, 480000])

# Create linear regression model
model = LinearRegression()
model.fit(rooms, price)
model.fit(square_feet, price)

# Output predicted prices
predicted_price = model.predict([[4], [1600]])
print(predicted_price)
Develop a Python program to generate the Fibonacci sequence of a given number of terms. terms = 10 def Fibonacci(terms): 
  Fibonacci_num = [0, 1] 
  a = 0
  b = 1
  for i in range(2,terms): 
    c = a + b
    Fibonacci_num.append(c)
    a = b
    b = c
  return Fibonacci_num 
  
nterms = 10
print("Fibonacci sequence:")
print(Fibonacci(nterms))
Create a function in Python to calculate the sum of 1 to n numbers. n = 10 def sum_nums(n):
    result = 0
    for i in range(1, n+1):
        result += i
    return result

print(sum_nums(10))
Create a Python function clamp that takes a number, a lower bound and an upper bound and clamps the value between the two bounds. number=12, lower=3, upper=15 def clamp(number, lower, upper):
    if number < lower:
        return lower
    elif number > upper:
        return upper
    else:
        return number
Design a function in Python which takes a list of numbers as the input, and returns the maximum element of the list. [1, 5, 3, 9, 0, 4, 2] def max_list_element(list):
    max_list_element = None
    for element in list:
        if max_list_element is None or max_list_element < element:
            max_list_element = element
    return max_list_element
Develop a Python 3 function that implements a linear search algorithm. [4, 1, 9, 6] def linear_search(arr, target_val):
    """ This function performs linear search on an array to find the target value """
    for idx in range(len(arr)):
        if arr[idx] == target_val:
            return idx

    return -1

target_val = 9
arr = [4, 1, 9, 6]

target_idx = linear_search(arr, target_val)
if target_idx == -1:
    print("Target not found!")
else:
    print(f"Target found at index {target_idx}")
Classify a set of programming language names into high-level languages and low-level languages. JavaScript, Python, C, Assembly High Level Languages: 
1. JavaScript 
2. Python

Low Level Languages: 
1. C 
2. Assembly
Create a REST API endpoint in Python that fetches data from a database and returns it as JSON. The table "Users" has the following columns: Id (primary key), Name, Email, Gender. @app.route('/users', methods=['GET'])
def get_users():
 users = User.query.all()
 return jsonify([{'Id': user.id, 'Name': user.name, 'Email': user.email, 'Gender': user.gender} for user in users])
Generate a Python program to create a dictionary and add elements to it.  def create_dict():
    my_dict = {} 
  
    # adding elements one at a time 
    my_dict['a'] = 'alpha'
    my_dict['g'] = 'gamma'
    my_dict['o'] = 'omega'
  
    print(my_dict) 
    return my_dict
Write a Python program to generate a password of length 10 from lowercase alphabets, uppercase alphabets, digits and special characters.  import random
import string

length = 10

def generatePassword(length):
    chars = string.ascii_lowercase + string.ascii_uppercase + string.digits + "!@#$%^&*"
    return ''.join([random.choice(chars) for _ in range(length)])

password = generatePassword(length)
print(password)
Create a machine learning model in Python to classify cancer cells as benign or malignant based on their measurements.  # import libraries
import pandas as pd
from sklearn.model_selection import train_test_split 
from sklearn.linear_model import LogisticRegression 

# read dataset
cancer_data = pd.read_csv("cancer_data.csv")

# split into train and test sets
x_train, x_test, y_train, y_test = train_test_split(cancer_data.iloc[:,:-1], cancer_data.iloc[:,-1], test_size=0.25, random_state=0)

# create the model 
lr_model = LogisticRegression() 
lr_model.fit(x_train,y_train)

# accuracy
accuracy = lr_model.score(x_test,y_test)
print(accuracy)
Generate a Python program to calculate the area of a rectangle given two parameters representing the length and the width. Not applicable def area_rectangle(length, width):
 return length * width

print(area_rectangle(2, 3)) # Output: 6
Design a program in Python that takes two positive integers and returns their greatest common divisor. 25, 15 def gcd(a, b): 
    while(b): 
        a, b = b, a % b 
  
    return a 

result = gcd(25, 15) 
print(result)
Create a class in Python 3 which describes a rectangle in a two-dimensional plane.  class Rectangle:
    
    def __init__(self, length, width):
        self.length = length
        self.width = width
        
    def get_area(self):
        return self.length * self.width
    
    def get_perimeter(self):
        return 2*(self.length + self.width)
Given a neural network, write a Python program to add dropout regularization to the network. A 3-layer neural network # import packages 
import numpy as np 
import matplotlib.pyplot as plt 
from keras.layers import Dense, Dropout 
from keras.models import Sequential 
  
# create the model 
model = Sequential() 
# First hidden layer takes input and applies dropout 
model.add(Dense(units = 32, input_dim = 8, activation = 'relu')) 
model.add(Dropout(0.2)) 
  
#Second hidden layer takes input and applies dropout  
model.add(Dense(units = 16, activation = 'relu')) 
model.add(Dropout(0.2)) 
  
# Third hidden layer takes input and applies dropout  
model.add(Dense(units = 8, activation = 'relu')) 
model.add(Dropout(0.2)) 
  
# Output layer 
model.add(Dense(units = 4, activation = 'softmax')) 
  
# Compile the model 
model.compile(optimizer = 'adam', loss = 'categorical_crossentropy') 
  
# Summary of the layers 
model.summary()
Transform the following Python code into valid JavaScript code. def fun() :
    a = 1
    b = 2
    c = a + b
    return c function fun() {
  let a = 1;
  let b = 2;
  let c = a + b;
  return c;
}
Generate random numbers between 2 given numbers using the random module in Python.  import random

def generate_random_numbers(start, end):
    random_numbers = []
    for i in range(start, end+1):
        random_number = random.randint(start, end)
        random_numbers.append(random_number)

    return random_numbers
Generate a function in Python to optimize a function based on the mean squared error metric. def f(weights):
 cost = 0
 for i in range(len(weights)):
 cost += weights[i]**2
 return cost import gradientDescent as GD

def optimize(weights):
 cost, gradient = GD.cost_function(f, weights)
 optimizer = GD.Optimizer(learning_rate=0.01, momentum=0.9, decay=0.001)
 optimizer.run(cost, gradient)
 return optimizer.weights
Generate a Python code snippet to extract the rate of inflation for a given year from a given JSON. JSON data with rate of inflation for years 2017-2020 import json

data = '{"2017":2.2,"2018":2.4,"2019":1.7,"2020":0.1}'

inflation_data = json.loads(data)
inflation_rate = inflation_data["2020"] 
print(inflation_rate)  # Output: 0.1
Create a Python program to crop a list to a specific length list = [1, 2, 3, 4, 5, 6], length = 4 def crop_list(input_list, length):
    output_list = []
    for i in range(length):
        output_list.append(input_list[i])
    return output_list

my_list = [1, 2, 3, 4, 5, 6]
length = 4
result = crop_list(my_list, length)
print(result)
Write a type hinting program in Python for a templating extension for a web application. Not applicable import typehints

@typehints.with_hints
def template(data):
    # Retreive the data
    greeting = data["greeting"]
    message = data["message"]
    name = data["name"]

    # Construct the greeting
    greeting = f"{greeting}, {name}!"
    # Construct the final message
    message = f"{greeting} {message}"

    # Return the message
    return message

@typehints.hints(
    data=dict(
               greeting=str,
               message=str,
               name=str
           )
)
def template_hinted(data):
    pass # Implement your templating extension
Write a codesnippet in Python to generate 5 random integers between 1 and 10.  import random

rand_nums = [random.randint(1,10) for x in range(5)]
print(rand_nums)
Create a Python program to generate a 2D array of a defined size and fill it with random numbers. Size of the array: 10x10 import random

# define the size of the array
x, y = 10, 10

# create an empty array of the given size
arr = [[0 for j in range(x)] for i in range(y)]

# fill the array with random numbers
for i in range(x):
 for j in range(y):
 arr[i][j] = random.randint(0, 9)

# print the array
for i in range(x):
 print(arr[i])
Implement a solution in Python to solve the following scheduling problem. You have a list of tasks where each task has a start time and a finish time. Determine a sequence of tasks that can be completed without overlapping. [{“start”:3, “end”:7}, {“start”:1, “end”:2}, {“start”:6, “end”:10}, {“start”:8, “end”:11}, {“start”:12, “end”:15}] def solve_scheduling(tasks):
    # Sort tasks by their finish time
    tasks.sort(key=lambda task: task["end"])

    # Initialize the solution sequence
    sequence = [tasks[0]]

    # Loop over the rest of the tasks in order
    for curr_task in tasks[1:]:
        last_task = sequence[-1]
        if curr_task["start"] >= last_task["end"]:
            sequence.append(curr_task)

    return sequence

tasks = [{"start":3, "end":7}, {"start":1, "end":2}, {"start":6, "end":10}, {"start":8, "end":11}, {"start":12, "end":15}]
sequence = solve_scheduling(tasks)

print("The sequence of tasks is:")
for task in sequence:
    print(task)
Create a Python program to generate a random name from two given lists of names. first_names = ["Alice", "John", "Joe", "Michael"] 
last_names = ["Smith", "Williams", "Jackson", "Brown"] import random

def get_random_name(first_names, last_names):
    first_name = random.choice(first_names)
    last_name = random.choice(last_names)
    random_name = first_name + ' ' + last_name
    return random_name
Write a Python function to convert a list of multiple integers into a single integer. my_list = [1, 2, 3, 4] def convert_list_to_integer(my_list):
    result = 0
    multiplier = 1
 
    for i in range(len(my_list)-1, -1, -1):
        result += my_list[i]*multiplier
        multiplier *= 10
 
    return result
 
print(convert_list_to_integer(my_list))
Edit the Python 3 code below so that it returns the sum of the two integers a and b. a = 3
b = 5 def add_numbers(a, b):
    return a + b

if __name__ == '__main__':
    a = 3
    b = 5
    result = add_numbers(a, b)
    print(result)
Create an algorithm in Python to optimize an objective function subject to various constraints.  import numpy as np
from scipy.optimize import minimize

def objective(x):
    return np.sum(np.power(x,2))

def constraint1(x):
    return x[0] * x[1] * x[2] * x[3] - 25.0

def constraint2(x):
    sum_sq = 40
    for i in range(4):
        sum_sq = sum_sq - np.power(x[i],2)
    return sum_sq

x0=[1,4,3,1]
b = (1.0,5.0)
bnds = (b, b, b, b)

con1 = {'type': 'ineq', 'fun': constraint1} 
con2 = {'type': 'eq', 'fun': constraint2}

cons = [con1,con2]

solution = minimize(objective,x0,method='SLSQP',bounds=bnds,constraints=cons)
print(solution)
Make a Python program that prints out a message that gives the number "7" when a value for an integer variable "x" is 7.  x = 7
if x == 7:
    print("The number is 7")
Given a list, write a Python script to reverse the order of the list. [10, 20, 30, 40, 50] list = [10, 20, 30, 40, 50]
list.reverse()
print(list)
Write a python script to classify the following film review as either Positive or Negative. The film was so captivating! Absolutely loved it! """
Classify a film review as either Positive or Negative
"""

import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer

def classify_review(review):
    sid = SentimentIntensityAnalyzer()
    review_scores = sid.polarity_scores(review)
    if review_scores['compound'] > 0.05:
        return 'Positive'
    else:
        return 'Negative'
    
if __name__ == '__main__':
    review = 'The film was so captivating! Absolutely loved it!'
    sentiment = classify_review(review)
    print(sentiment)
Create a Python program to print all prime numbers between two given numbers. The function should take two numbers as input and print all the prime numbers between them. 2, 10 def print_primes(start, end):
 for i in range(start, end + 1):
  if is_prime(i):
   print(i)
   
def is_prime(n):
 if n <= 1:
  return False
 if n == 2:
  return True
 if n > 2 and n % 2 == 0:
  return False
 
 for i in range(3, int(n ** 0.5) + 1, 2):
  if n % i == 0:
   return False
 
 return True
 
 
print_primes(2, 10)
Generate a script in python to split a given string into words and store them in a list. str = "This is a great day" def split_str(str):
    words = str.split(" ")
    return words
Debug a Python function that swaps the values of two variables. def swap(x, y):
 temp = x
 x = y
 y = temp

a = 10
b = 20

swap(a, b) def swap(x, y):
 temp = x
 x = y
 y = temp

a = 10
b = 20

swap(a, b)

#Verify the result
if a == 20 and b == 10:
 print("Swap successful")
else:
 print("Swap unsuccessful") # Output: Swap successful
Create an AI assistant in Python that can take a natural language query and respond back in human language. What is the meaning of life? import nltk
from nltk.stem import WordNetLemmatizer
from nltk.corpus import wordnet

class AIAssistant:
 def __init__(self):
  self.lemmatizer = WordNetLemmatizer()
 
 def lemmatize_file_output(self, sentence):
  sentence_words = nltk.word_tokenize(sentence)
  lemmatized_words = [self.lemmatizer.lemmatize(word, self.get_wordnet_pos(word)) for word in sentence_words]
  return ' '.join(lemmatized_words)
  
 def get_wordnet_pos(self, word):
  tag = nltk.pos_tag([word])[0][1][0].upper()
  tag_dict = {"J": wordnet.ADJ,
              "N": wordnet.NOUN,
              "V": wordnet.VERB,
              "R": wordnet.ADV}
  return tag_dict.get(tag, wordnet.NOUN)

def reply(sentence):
 
 ai_assistant = AIAssistant()
 lemmatzed_query = ai_assistant.lemmatize_file_output(sentence)
 
 if lemmatzed_query == 'What be the meaning of life ?':
  return 'The meaning of life is to find your purpose, whatever that may be.'

print(reply("What is the meaning of life?"))
Generate an array with all the prime numbers from 1 to 500 using python.  def generate_primes(n):
  prime_list = []
  for n in range(1, n + 1):
    for i in range(2,n):
      if n % i == 0:
        break
    else:
      prime_list.append(n)
  return prime_list

prime_list = generate_primes(500)
Construct a linear regression model in Python to predict the output of a dataset.  import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression

# Load the dataset
df = pd.read_csv('dataset.csv')

# Extract input and output features
X = df[df.columns[:-1]].values
y = df[df.columns[-1]].values

# Create and fit the model
model = LinearRegression().fit(X, y)

# Output the model coefficients 
print('Intercept:', model.intercept_)  
for i, col in enumerate(df.columns[:-1]):
    print(f'Coefficient of {col} : {model.coef_[i]}')
Create an algorithm in Python for optimizing a portfolio given the historical values of different stocks.  import numpy as np
from scipy.optimize import minimize

# the objective function to minimize
# the parameters are weights (w_1, w_2, w_3)
def objective_function(weights):
    '''The objective function to minimize.'''
    return np.sum(weights**2)

# the constraint that must be satisfied
# the parameters are weights (w_1, w_2, w_3)
def constraint(weights):
    '''The constraint to be satisfied'''
    return np.sum(weights) - 1.0 

# define constraints
cons1 = {'type':'eq', 'fun': constraint}

# initialize weights
weights = np.array([0.0, 0.0, 0.0])

# optimize weights
solution = minimize(objective_function, weights, constraints=cons1, method='SLSQP', options={'disp':True})

# final solution
print(solution.x)
Modify the following Python code such that a thread is started from within the function. def doSomething():
    # Do something import threading

def doSomething():
	#Do something
    t = threading.Thread(target=functionName)
    t.start()
Create a class in Python to represent a Person with attributes: name, age, height, and weight. Not applicable class Person:
 def __init__(self, name, age, height, weight):
 self.name = name
 self.age = age
 self.height = height
 self.weight = weight

 def describe(self):
 return f'{self.name} is {self.age} years old, {self.height} cm tall and weighs {self.weight} kg.'
Create a Python flask application for a basic web service. The application should have routes for creating a new user, login a user, and retieving user information. Not applicable from flask import Flask, request
import sqlite3

app = Flask(__name__)

@app.route('/create-user', methods=['POST'])
def create_user():
    # parse the request data
    data = request.get_json()
    username = data['username']
    password = data['password']

    # store the user in the database
    conn = sqlite3.connect('users.db')
    c = conn.cursor()

    c.execute("INSERT INTO users (username, password) VALUES (?, ?)", (username, password))
    conn.commit()
    conn.close()

    return "User created", 200

@app.route('/login', methods=['POST'])
def login():
    # parse the request data
    data = request.get_json()
    username = data['username']
    password = data['password']

    # retrieve the stored user information
    conn = sqlite3.connect('users.db')
    c = conn.cursor()

    c.execute("SELECT * FROM users WHERE username = ? and password = ?", (username, password))
    user = c.fetchone()
    conn.close()

    if user is not None:
        return "Logged in", 200
    else:
        return "Invalid username or password", 401

@app.route('/user', methods=['GET'])
def get_user():
    # parse the request data
    username = request.args.get('username')

    # retrieve the stored user information
    conn = sqlite3.connect('users.db')
    c = conn.cursor()

    c.execute("SELECT * FROM users WHERE username = ?", (username,));
    user = c.fetchone()
    conn.close()

    if user is not None:
        return user
    else:
        return "User not found", 404

if __name__ == '__main__':
 app.run(debug=True)
Write a python program to generate all possible strings by combining the characters of two given strings. str1 = "abc"
 str2 = "xyz" def combine_strings(str1, str2):
    result = [] 
    for i in range(len(str1)): 
        for j in range(len(str2)): 
            result.append(str1[i] + str2[j]) 
    return result
Create a Python program to parse a list of strings and print the words with odd length. ['abc', 'hello', 'world'] list = ['abc', 'hello', 'world']

for word in list:
    if (len(word) % 2 != 0):
        print(word)
Write a Python script to generate a dictionary that contains (i, i*i) such that i is an integer from 1 to n (both included). 3 n = 3
my_dict = {} 
for i in range(1, n+1): 
    my_dict[i] = i * i

print(my_dict)
Given a set of numbers and a target number, write Python code to find the combination of numbers that add up to the target number. Target Number: 6
Set of Numbers: [1, 2, 3, 4, 5] def find_combinations(numbers, target):
    solutions = []
    #recursive solution
    def find_combos(solution, index):
        if sum(solution) == target:
            solutions.append(solution)
        elif sum(solution) < target:
            for i in range(index, len(numbers)):
               find_combos(solution + [numbers[i]], i)
    find_combos([], 0)
    return solutions
Create a Python script to search a list of words for a given word and return its index. words = ['GPT', 'model', 'natural', 'language', 'processing'], search = 'language' def search(words, search):
    for i, word in enumerate(words):
        if word == search:
            return i
    return -1

index = search(words, 'language')
print(index)
Write a Python program to find the pi (π) value to 5 decimal places.  import math

# Caluclate pi to the 5th decimal place
pi = round(math.pi, 5)

# Print the pi
print(pi)
Create a Python Flask app that listens for POST requests on '/star' and '/webhook' routes. The '/star' route connects to a MongoDB database and retrieves a record with the employee number '1503051'. If the record exists, return the employee name. If the record does not exist, return 'no record'. The '/webhook' route listens for POST requests and retrieves a JSON object from the request. If the action in the JSON object is 'branchcontact', retrieve the branch or any text parameter and return the corresponding contact information. The app should run on port 5000 and be accessible from any IP address.  #!/usr/bin/env python

import urllib
import json
import os

from flask import Flask
from flask import request
from flask import make_response
from pymongo import MongoClient

# Flask app should start in global layout
app = Flask(__name__)
client = MongoClient('mongodb://localhost:27017')

@app.route('/star', methods=['POST'])
def get_one_star():
  db = client['hrvisual']
  collect=db['ORG_DEPT_EMP_2016']
  post1 = collect.find_one({'emp_number': '1503051'})
  if post1 is None:    
    return 'no record'
  else:
    return post1['emp_name']
  
  
@app.route('/webhook', methods=['POST'])
def webhook():
    req = request.get_json(silent=True, force=True)

    print("Request:")
    print(json.dumps(req, indent=4))

    res = makeWebhookResult(req)
    
    res = json.dumps(res, indent=4)
    print(res)
    r = make_response(res)
    r.headers['Content-Type'] = 'application/json'
    return r

def makeWebhookResult(req):
    if req.get("result").get("action") != "branchcontact":
        return {}
    result = req.get("result")
    parameters = result.get("parameters")
    
    contact = {'Narl':'02-6630-0151', 'Ndl':'03-5726100', 'Nchc':'03-5776085', 'Cic':'03-7777777', '1503051':'0911111111'}    
    speech ="unknow"
    
    branch = parameters.get("branch")
    if branch is not None:        
        speech = "The contact information for " + branch + " is " + contact[branch]
   
    anytxt = parameters.get("any")
    if anytxt is not None:
        speech = "The contact information for " + anytxt + " is " + contact[anytxt]
    
    print("Response:")
    print(speech)

    return {
        "speech": speech,
        "displayText": speech,
        # "data": data,
        # "contextOut": [],
        "source": "apiai-onlinestore-shipping"
    }


if __name__ == '__main__':
    port = int(os.getenv('PORT', 5000))
    app.run(debug=True, port=port, host='0.0.0.0')

Create a Python program for finding the maximum and minimum numbers in an array of numbers. 1, 10, 3, 8, 6 def find_min_max(numbers):
 
 min_num = float('inf')
 max_num = float('-inf')
 
 for num in numbers:
  if num < min_num:
   min_num = num
  if num > max_num:
   max_num = num
 
 return [min_num, max_num]

numbers = [1, 10, 3, 8, 6]
print(find_min_max(numbers))

# Output: [1, 10]
Write a recursive python function to generate a Fibonacci sequence up to n number of elements  def fibonacci(n):
    if n == 1:
        return [1]
    elif n == 2:
        return [1, 1]
    else:
        fib_list = fibonacci(n - 1)
        fib_list.append(fib_list[-1] + fib_list[-2])
        return fib_list
Create an API endpoint for a Python Flask application that takes a string as an input and returns the frequency of all the words that appear in the given string. String: "Hello world, hello again world!" from flask import Flask, request
from collections import Counter

app = Flask(name)

@app.route('/word-frequency', methods=['POST'])
def word_frequency():
 string = request.json['string']
 counts = Counter(string.split())
 return {'frequency': counts}

if name == 'main':
 app.run(debug=True)
Rewrite the following pseudocode in Python Function Multiply(a, b) 
  Product = 0 
  i = 0 
  While i < b 
    Product = Product + a 
    i = i + 1 
  End While 
  Return Product def Multiply(a, b):
    product = 0
    i = 0 
    while i < b:
        product = product + a
        i = i + 1
    return product
Construct an algorithm in Python to sort the characters of a string in alphabetical order.  def sort_string(string):
    # convert string to list
    chars = list(string)
    # sort the list 
    chars.sort()
    # return the sorted string
    return ''.join(chars)

sorted_string = sort_string('abzcdr')
print(sorted_string)
Create a Python tuple that contains the first five prime numbers  t = (2, 3, 5, 7, 11)
Develop a Python program to remove all characters from an input string that are not a-z, A-Z, 0-9, or white space. "Hello,@ $World." import re

def remove_non_alphanum(s):
  return re.sub('[^a-zA-Z0-9 \n\.]', '', s)

string = "Hello,@ $World."
res = remove_non_alphanum(string) 

print(res)
Create a Python program that takes a user's input and converts it into pig latin. Not applicable def pig_latin(word):
 vowels = "aeiouy"
 if word[0].lower() in vowels:
  return word + "ay"
 else:
  return word[1:] + word[0] + "ay"

print(pig_latin("hello")) # Output: "ellohay"
Generate a Python program to calculate the amount of time the user has been working on a specific task, given the start time and the current time. start time=4:30pm, current time= 5:07pm import datetime

def get_time_difference(start_time, current_time):
    start_time = datetime.datetime.strptime(start_time, "%H:%M%p")
    current_time = datetime.datetime.strptime(current_time, "%H:%M%p")
    return current_time - start_time
Create a neural network in Python using the TensorFlow library to predict the number of energy consumed by a building. Building dataset with columns 'Energy' and 'Features' import pandas as pd
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
 
# Read in the data
data = pd.read_csv('building.csv')
 
# Split into X and y
X = data.drop('Energy', axis=1).values
y = data['Energy'].values
 
# Split into training and test sets
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=0)
 
# Create the scaler
sc = StandardScaler()
 
# Fit and transform the training data
X_train = sc.fit_transform(X_train)
 
# Transform the test data
X_test = sc.transform(X_test)
 
# number of inputs
n_inputs = X_train.shape[1]
 
# Build the model
model = tf.keras.models.Sequential()
 
# First hidden layer
model.add(tf.keras.layers.Dense(50, activation='relu', input_shape=(n_inputs,)))
 
# Second hidden layer
model.add(tf.keras.layers.Dense(50, activation='relu'))

# Output layer
model.add(tf.keras.layers.Dense(1))
 
# Compile the model
model.compile(optimizer='adam',
              loss='mean_squared_error') 
 
# Train the model
model.fit(X_train, y_train, 
          validation_data=(X_test, y_test),
          epochs=50,
          batch_size=32)
Create a Python program that takes an expression as input and evaluates it. 4 + 7 def calculate(expr):
    return eval(expr)

result = calculate("4 + 7")
print(result)
Design a Python program which takes two lists and returns their intersection. list1 = [1, 2, 3, 4, 5, 6]
list2 = [3, 6, 8, 9, 10] def intersection(list1, list2): 
    return list(set(list1) & set(list2)) 

# Output: [3, 6]
Write Python code to generate a random letter from A to Z.  import random
 
def generate_random_letter():
    alphabet = list(map(chr, range(65, 91)))
    random_letter = random.choice(alphabet)
 
    return random_letter
 
random_letter = generate_random_letter()
print(random_letter)
Optimize this Python code using the tips from this website https://www.dataquest.io/blog/python-performance-tips/. # code to calculate Hamming distance between two strings
def calculate_hamming(word1, word2):
    distance = 0
    for char1, char2 in zip(word1, word2):
        if char1 != char2:
            distance += 1
    return distance def calculate_hamming(word1, word2):
    distance = 0
    length = len(word1)
    if len(word2) < length:
        length = len(word2)
    
    #Use fast C-style loop to iterate over strings
    i = 0
    while i < length: 
        if word1[i] != word2[i]:
            distance += 1
        i += 1

    #count remaining chars
    if len(word1) != len(word2):
        distance += abs(len(word1)-len(word2))

    return distance
Write a script in Python to monitor the performance of a given website and send an alert if the response time exceeds a certain threshold. Not applicable import requests
import smtplib

THRESHOLD_TIME = 5 # In seconds
WEBSITE_URL = 'http://www.example.com'
FROM_EMAIL_ADDRESS = 'alert@example.com'
TO_EMAIL_ADDRESS = 'admin@example.com'

def main():
 response = requests.get(WEBSITE_URL)
 response_time = response.elapsed.total_seconds()
 if response_time > THRESHOLD_TIME:
 send_email_alert()

def send_email_alert():
 server = smtplib.SMTP('smtp.gmail.com', 587)
 server.starttls()
 server.login(FROM_EMAIL_ADDRESS, 'password')
 
 message = 'Website response time exceeded threshold'
 server.sendmail(FROM_EMAIL_ADDRESS, TO_EMAIL_ADDRESS, message)
 server.quit()

if __name__ == '__main__':
 main()
Create a Python program which performs sentiment analysis on a given text and prints the sentiment, either "positive", "neutral", or "negative". text = "This was an amazing movie, I really enjoyed it!" import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer

def sentimentAnalysis(text):
 analyzer = SentimentIntensityAnalyzer()
 sentiment_scores = analyzer.polarity_scores(text)
 if sentiment_scores['compound'] >= 0.05:
  print('positive')
 elif sentiment_scores['compound'] <= -0.05:
  print('negative')
 else:
  print('neutral')

sentimentAnalysis(text)
#Output: positive
Write a Python script to implement the bubble sort algorithm.  def bubble_sort(arr):
    for i in range(len(arr)-1):
        for j in range(len(arr)-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr
Write a Python program to encrypt a given sentence using Ceaser Cipher. sentence = "Sentry is the best" # Ceasar Cipher
def encrypt(text,s):
 result = ""
 # transverse the plain text
 for i in range(len(text)):
 char = text[i]
 # Encrypt uppercase characters
 if (char.isupper()):
 result += chr((ord(char) + s-65) % 26 + 65)
 # Encrypt lowercase characters
 else:
 result += chr((ord(char) + s - 97) % 26 + 97)
 return result

# Check the above function
text = "Sentry is the best"
s = 4

print("Plain Text : " + text)
print("Shift pattern : " + str(s))
print("Cipher: " + encrypt(text,s))
Generate a Python code which takes a list of strings as input and return a string which contain the first letter of each string concatenated. ["Hello", "World", "This", "Is", "A", "Test"] def first_letter_concat(l):
    '''This function takes a list of strings as input and return a string which contain the first letter of each string concatenated.'''
    result = ''
    for s in l:
        result += s[0]
    return result
Train a Logistic Regression model in Python on a dataset containing 5000 samples and 5 features.  from sklearn.linear_model import LogisticRegression

# Load the dataset
X = ...
y = ...

# Initialize model
model = LogisticRegression()

# Fit the model
model.fit(X, y)

# Evaluate the model
model.score(X, y)
Develop a REST API endpoint in Python to return a user's profile information from a database.  @app.route('/api/profile', methods=['GET'])
def get_user_profile():
    user_id = request.args.get('user_id')
    user = User.query.filter_by(id=user_id).first_or_404()
    return jsonify({
        'username': user.username,
        'name': user.name,
        'email': user.email
    })
Design a Python program to simulate a simple calculator.  #Function to add two numbers
def add(val1, val2):
    return val1+val2

#Function to subtract two numbers
def subtract(val1, val2):
    return val1-val2

#Function to multiply two numbers
def multiply(val1, val2):
    return val1*val2

#Function to divide two numbers
def divide(val1, val2):
    return val1/val2

while True:
    print("Please provide the operator and operands")
    print("1. Add")
    print("2. Subtract")
    print("3. Multiply")
    print("4. Divide")
    print("5. Exit")
    
    
    # Take input from the user 
    choice = int(input("Enter your choice of operation: ")) 
  
    # Check if choice is one of the four options
    if choice in (1, 2, 3, 4): 
        num1 = float(input("Enter the first number: ")) 
        num2 = float(input("Enter the second number: ")) 
  
        if choice == 1: 
            print(num1, "+", num2, "=", 
                    add(num1,num2)) 
  
        elif choice == 2: 
            print(num1, "-", num2, "=", 
                    subtract(num1,num2)) 
  
        elif choice == 3: 
            print(num1, "*", num2, "=", 
                    multiply(num1,num2)) 
  
        elif choice == 4: 
            print(num1, "/", num2, "=", 
                    divide(num1,num2)) 
    
    elif choice == 5:
        print("Exiting Program!")
        break
    else: 
        print("Please enter a valid option!")
Refactor a Python program to remove duplicate code. def add(value1, value2):
    result = value1 + value2
    print(result)

def subtract(value1, value2):
    result = value1 - value2
    print(result)

def multiply(value1, value2):
    result = value1 * value2
    print(result) def calculate(value1, value2, operation):
    if (operation == 'add'):
        result = value1 + value2
    elif (operation == 'subtract'):
        result = value1 - value2
    elif (operation == 'multiply'):
        result = value1 * value2
    else:
        return
    print(result)
 
add(3, 2)
subtract(3, 2)
multiply(3, 2)

calculate(3, 2, 'add')
calculate(3, 2, 'subtract')
calculate(3, 2, 'multiply')
Write a Python code to generate all possible strings of 3 characters using the characters a, b and c.  def generate_strings(characters, length):
    strings = []
    if length == 0:
        strings.append('')
    else:
        for c in characters:
            for s in generate_strings(characters, length-1):
                strings.append(c + s) 
    return strings

characters = ['a', 'b', 'c']
length = 3

print(generate_strings(characters, length))
Create a Python script that processes a sentence and classifies it as positive or negative. The food was really bad. import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer

sentence = "The food was really bad."

sentiment_analyzer = SentimentIntensityAnalyzer()
score = sentiment_analyzer.polarity_scores(sentence)

if score['compound'] > 0:
 sentiment = 'positive'
elif score['compound'] < 0:
 sentiment = 'negative'

print(f'The sentence is {sentiment}.')
Generate a Python function that checks if a given number is an Armstrong number.  def is_armstrong_number(num):   
    n = len(str(num)) 
    # initialize sum  
    temp = num  
    sum_of_digits = 0
  
    # find sum of nth power of individual digits  
    while temp > 0:  
        digit = temp % 10  
        sum_of_digits += digit ** n  
        temp //= 10  
  
    # if num is equal to sum_of_digits then the number is an Armstrong number  
    if num == sum_of_digits:  
        return True 
  
    else: 
        return False
Design an algorithm in Python to find the closest pair of numbers from two given lists. list_1 = [3, 5, 7, 11]
list_2 = [2, 4, 6, 8] def closest_pair(list_1, list_2):
    min_diff = float("inf")
    
    for a in list_1:
        for b in list_2:
            diff = abs(a - b)
            if diff < min_diff:
                min_diff = diff
                closest_pair = (a, b)
    
    return closest_pair
Create an API request using Python to get the status of your favorite website. Website URL: example.com import requests

url = 'http://example.com'

r = requests.get(url)

if r.status_code == 200:
  print('Website is up and running.')
else:
  print('Website is not responding.')
Write a Python program to use Regular Expressions to search and replace a given string. text = "He is an excellent programmer" import re

text = "He is an excellent programmer"

def find_and_replace(text, pattern, replacement):
    return re.sub(pattern, replacement, text)

result = find_and_replace(text, r"excellent", "brilliant")
print(result)
Create a program in Python that converts a given number into its corresponding binary representation in 8 bits. 10 def int_to_bin(n):
 bin_num = bin(n)
 bin_num = bin_num[2:].zfill(8)
 return bin_num

print(int_to_bin(10)) # Output: 00001010
Create a Python function that takes a string of words and returns a list of the most frequent words in the string Not applicable def most_frequent_words(s):
    # Split string into list of words
    words = s.split(' ')
    # Create empty dictionary to store word frequencies
    word_frequencies = {}
    # Iterate through words in list
    for word in words:
        # If word is already in the dictionary, increment its frequency
        if word in word_frequencies:
            word_frequencies[word] += 1
        # Otherwise, set frequency to 1
        else:
            word_frequencies[word] = 1
    # Sort words by frequency
    sorted_words = sorted(word_frequencies.items(), key=lambda x: x[1], reverse=True)
    # Return a list of the most frequent words
    return [item[0] for item in sorted_words]
Write a Python program to check how many times a given element occurs in a list. List: [1, 2, 3, 2, 4, 2, 1]
Element: 2 def count_element_occurrence(lst, target):
 count = 0
 for element in lst:
     if element == target:
         count += 1
 return count
Given a string as an argument, write a Python function to find the longest palindrome in the string.  def longest_palindrome(s):  
    longest_p = 0
    for i in range(len(s)):
        for j in range(i+1,len(s)+1):
            if s[i:j] == s[j-1::-1] and len(s[i:j]) > longest_p:
                longest_p = len(s[i:j])
    return longest_p
Write a Python program to simulate a random walk and calculate the position of the walker after N steps.  import random

def random_walk(n_steps):
    x = 0
    y = 0

    for _ in range(n_steps):
        direction = random.choice([-1, 1])
        x += direction * random.randint(1, 10)
        y += direction * random.randint(1, 10)

    return x, y
Create a Python program to classify a given email message as either unwanted or legitimate.  import re
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB

def clean_text(text):
     text = re.sub('[^A-Za-z0-9]+', ' ', text)
     text = text.lower()
     return text

def train_test_split(data):
	total_values = len(data)
	test_percent = 0.2
	train_values = int(total_values - (test_percent * total_values))
	return data[0: train_values], data[train_values+1: total_values]

def create_model(data):
	# data cleaning
	for i in range(len(data)):
		data[i][0] = clean_text(data[i][0])
	x_train, x_test =  train_test_split(data)
	# feature extraction and model training
	cv = CountVectorizer()
	x_train_vec = cv.fit_transform(x_train[:, 0])
	x_test_vec = cv.transform(x_test[:, 0])
	clf = MultinomialNB()
	clf.fit(x_train_vec, x_train[:, 1])
	# model testing
	score = clf.score(x_test_vec, x_test[:, 1])
	return clf, score

# Driver Code 
data = [['this is an unwanted message', 0],['this is a legitimate message', 1]]
model, score = create_model(data)
print("Model Accuracy:", score)
Can you write a Python program to find all prime numbers between two given numbers? n1 = 20, n2 = 50 def checkPrime(num):
    if (num == 1): 
        return False
    for i in range(2, num):
        if (num % i == 0): 
            return False
    return True

n1 = 20
n2 = 50

for num in range(n1, n2 + 1):
    if (checkPrime(num)):
        print(num)
Write a Python code to sort the given array. array : [ 2, 4, 1, 3, 7, 5] # Bubble sort algorithm
def sort_array(array):
    for i in range(len(array)):
        for j in range(len(array)-i-1):
            if array[j] > array[j+1]:
               array[j], array[j+1] = array[j+1], array[j]
    return array

# Sample array
array = [2, 4, 1, 3, 7, 5]

# Function call
sorted_array = sort_array(array)

# Print sorted output
print(sorted_array)
Create a program to display a list of words and respective scores that are sorted in descending order scores = {"cat": 5, "dog": 2, "elephant": 7, "tiger": 3} # Python 3 program to print the list of words and their scores 
# sorted in descending order of scores

# function is used to sort the list of words
# according to the scores in decreasing order
def sort_list(list): 
    sorted_list = sorted(list, key=lambda x: x[1], reverse = True) 
    return sorted_list 
  
# Driver code 
scores = {"cat": 5, "dog": 2, "elephant": 7, "tiger": 3}

# Creating a list of tuples and sorting them 
list = [] 
for word, score in scores.items(): 
    list.append((word, score)) 
   
# Printing the modified list 
sorted_list = sort_list(list) 

for word,score in sorted_list:
    print("Word: {0}, Score: {1}".format(word, score))
Use Python to generate a program that takes a list of integers as input and prints out their factors. [24, 75] def print_factors(numbers):
    
    for n in numbers:
        print("Factors of {}:".format(n)) 
        for i in range(1, n + 1):
            if n % i == 0:
                print(i)

print_factors([24, 75])
Modify an existing Python program that implements a genetic algorithm for parameter optimization to add a new parameter. Not applicable import random
import numpy as np

class GeneticAlgorithm:
    def __init__(self, desired_param1, desired_param2, desired_param3, desired_param4):
        self.desired_param1 = float(desired_param1)
        self.desired_param2 = float(desired_param2)
        self.desired_param3 = float(desired_param3)
        self.desired_param4 = float(desired_param4)

    def create_population(self, n, min_val, max_val):
        population = []
        for _ in range(n):
            individuum = []
            for _ in range(4):
                individuum.append(random.uniform(min_val, max_val))
            individuum.append(self.calculate_fitness(individuum))
            population.append(individuum)
        return np.array(population)

    def calculate_fitness(self, individual):
        return sum([abs(individual[i] - self.desired_param[i]) for i in range(4)])

ga = GeneticAlgorithm(1, 2, 3, 4)
population = ga.create_population(n=20, min_val=-10, max_val=10)

# Add a new parameter
def new_calculate_fitness(self, individual):
        return sum([abs(individual[i] - self.desired_param[i]) + abs(individual[4] - self.desired_param[4]) for i in range(5)])

ga.calculate_fitness = new_calculate_fitness
new_population = ga.create_population(n=20, min_val=-10, max_val=10)
Create a Python script to download a zip archive from a URL and extract it in the current directory. https://example.com/myzip.zip import requests
import shutil
import zipfile

url = 'https://example.com/myzip.zip'

response = requests.get(url, stream=True)

with open('myzip.zip', 'wb') as f:
 shutil.copyfileobj(response.raw, f)

with zipfile.ZipFile('myzip.zip', 'r') as f:
 f.extractall()
Write a function in Python which takes a list of numbers as input and outputs a list with each element multiplied by two. [3, 5, 8, 9] def list_multiplication(nums):
    output_list = []
    for i in range(len(nums)):
        output_list.append(nums[i] * 2)
    return output_list
Design and code an entry-level language interpreter in Python.  class Interpreter:
 
    def __init__(self):
        self.opeartors = {
            '+':   self.add,
            '-':   self.sub,
            '/':   self.div,
            '*':   self.mul,
        }
 
    def parse(self, text):
        expressions = text.split(' ')
        return expressions
 
    def evaluate(self, expressions):
        operator = self.opeartors.get(expressions[1])
        if not operator:
            raise Exception('Invalid operator')
        return operator(expressions[0], expressions[2])
 
    def add(self, a, b):
        return int(a) + int(b)
 
    def sub(self, a, b):
        return int(a) - int(b)
 
    def div(self, a, b):
        return int(a) / int(b)
 
    def mul(self, a, b):
        return int(a) * int(b)
The given code is a Python script that performs various natural language processing tasks on Twitter data. To use this script, you need to import the required libraries such as json, sklearn, nltk, wordcloud, matplotlib, and db. Then, you can define the DATASET_PATH variable to point to the location of the Twitter data file. The calc_frequencies function calculates the frequency of words in a list of words. The get_word_clouds function generates a word cloud for each user in a list of tweets. The save_wordcloud_image function saves a word cloud image to a file. The load_example_data function loads example Twitter data. The get_corpus_of_most_active_users function returns a corpus of tweets from the most active users. Finally, the main function calls the get_word_clouds function and saves the resulting word clouds to a database.  import json
from sklearn.feature_extraction.text import TfidfVectorizer
import nltk
from nltk.corpus import stopwords
from wordcloud import WordCloud
import matplotlib.pyplot as plt
import db
import os

DATASET_PATH = os.environ['HOME'] + '/nltk_data/corpora/twitter_samples/tweets.20150430-223406.json'
def calc_frequencies(words, words_n=50, lang='german'):
    words = [word for word in words if len(word) > 1]
    words = [word for word in words if not word.isnumeric()]
    words = [word.lower() for word in words]
    # words = [word for word in words if word not in all_stopwords]
    # Stemming words seems to make matters worse, disabled
    # stemmer = nltk.stem.snowball.SnowballStemmer(lang)
    # words = [stemmer.stem(word) for word in words]

    fdist = nltk.FreqDist(words)
    return fdist.most_common(words_n)

def get_word_clouds(tweets, users, words_n=50, lang='english'):
    default_stopwords = set(nltk.corpus.stopwords.words(lang))
    stopwords_file = '../data/stopwords.txt'
    custom_stopwords = set(open(stopwords_file, 'r').read().splitlines())
    all_stopwords = default_stopwords | custom_stopwords

    vectorizer = TfidfVectorizer(max_df=0.5, min_df=2, stop_words=list(all_stopwords))
    X = vectorizer.fit_transform(tweets)
    terms = vectorizer.get_feature_names()

    word_cloud_per_person = {}
    for doc in range(len(tweets)):
        feature_index = X[doc, :].nonzero()[1]
        tfidf_scores = zip(feature_index, [X[doc, x] for x in feature_index])
        doc_terms = []
        for word, score in [(terms[i], score) for (i, score) in tfidf_scores]:
            doc_terms.append((word, score))
        important_terms = [(word, score) for word, score in sorted(doc_terms, key=lambda x: x[1], reverse=True)][:words_n]
        word_cloud_per_person[users[doc]] = important_terms
    return word_cloud_per_person

def save_wordcloud_image(frequencies, filename):
    wordcloud = WordCloud(width=1024, height=786, min_font_size=1).fit_words(frequencies)
    fig = plt.figure()
    fig.set_figwidth(12)
    fig.set_figheight(16)
    plt.imshow(wordcloud)
    plt.axis("off")
    plt.savefig(filename, facecolor='k', bbox_inches='tight')
    print('imaged created')

def load_example_data():
    tweets = []
    with open(DATASET_PATH) as f:
        for line in f:
            tweets.append(json.loads(line)['text'])
    return tweets

def get_corpus_of_most_active_users(n_users=5):
    tweets = []
    texts = []
    with open(DATASET_PATH) as f:
        for line in f:
            tweets.append(json.loads(line)['user']['screen_name'])
            texts.append((json.loads(line)['user']['screen_name'], json.loads(line)['text']))

    users = nltk.FreqDist(tweets).most_common(n_users)

    dict = {}
    for user, tweet in texts:
        if user in dict:
            dict[user] = " ".join([dict[user],tweet])
        else:
            dict[user] = tweet

    corpus = [dict[name] for name, _ in users]
    user_names = [name for name, _ in users]
    return  corpus, user_names

if __name__ == "__main__":
    corpus, users = get_corpus_of_most_active_users()
    word_cloud_per_person = get_word_clouds(corpus, users, words_n=100, lang='english')
    for user in users:
        topic_frequencies = word_cloud_per_person[user]
        print user
        print topic_frequencies
        db.save_word_frequencies('test_user_seb', dict(topic_frequencies))
        exit()
        # save_wordcloud_image(dict(topic_frequencies), 'plots/word_clouds/' + user + '.png')


    # This is an example how to save a word_cloud in the database
    # user_in_db = 'malechanissen'
    # db.save_word_frequencies(user_in_db, {'w3':10, 'w4':20})
    # db.save_word_frequencies(user_in_db, dict(topic_frequencies))

    # db.save_word_frequencies('test_user_seb', {'w3':10, 'w4':20})

Write an Python script to generate all possible permutations of a given list. [1,2,3] def permutation(lst): 
  
    # If lst is empty then there are no permutations 
    if len(lst) == 0: 
        return [] 
  
    # If there is only one element in lst then, only 
    # one permuatation is possible 
    if len(lst) == 1: 
        return [lst] 
  
    # Find the permutations for lst if there are 
    # more than 1 characters 
  
    l = [] # empty list that will store current permutation 
  
    # Iterate the input(lst) and calculate the permutation 
    for i in range(len(lst)): 
       m = lst[i] 
  
       # Extract lst[i] or m from the list.  remLst is 
       # remaining list 
       remLst = lst[:i] + lst[i+1:] 
  
       # Generating all permutations where m is first 
       # element 
       for p in permutation(remLst): 
           l.append([m] + p) 
    return l 
  
# Driver program to test above function 
data = list('123') 
for p in permutation(data): 
    print (p)
Generate a Python script for sorting a list in ascending order. [3, 4, 8, 5, 10] def sortList(list): 
    list.sort() 
    return list
    
unsorted_list = [3, 4, 8, 5, 10]
sorted_list = sortList(unsorted_list)

print("Sorted list:", sorted_list)
Reverse an input string using Python. Hello World! def rev_string(s): 
   return s[::-1] 
  
s = "Hello World!"
print(rev_string(s))
Generate a Python dictionary with 10 key-value pairs, where the value should be an integer.  dictionary = {
    'one': 1,
    'two': 2,
    'three': 3,
    'four': 4,
    'five': 5,
    'six': 6,
    'seven': 7,
    'eight': 8,
    'nine': 9,
    'ten': 10
}
Generate a random password of 8 characters in Python.  """
Generate a random password of 8 characters in Python
"""

# Import necessary modules
import random 
import string

# Create an empty string
password = ""

# Define a function to generate a random password
def random_password(length = 8):
    # A list of characters
    chars = string.ascii_lowercase + string.digits + string.ascii_uppercase

    # Iterate over length to fill the password string
    for i in range(length):
        # Choose a random character out of the list
        char = random.choice(chars)

        # Append the chosen character to the password
        global password
        password += char
    
    return password

# Call the password generator
password = random_password()

# Print the password
print(password)
Create a Python decorator that returns the decorated function with some additional information related to its runtime.  import time

def timed(func):
    def get_runtime(*args, **kwargs):
        start_time = time.time()
        result = func(*args, **kwargs)
        end_time = time.time()
        total_time = end_time - start_time
        return result, total_time
    return get_runtime
Create an API in Python using Flask that takes an input string and returns a list of synonyms and antonyms for the input string. Not applicable from flask import Flask
from flask_restful import Resource, Api
from nltk.corpus import wordnet

app = Flask(__name__)
api = Api(app)

class SynAntonyms(Resource):
 def get(self, word):
 syns = wordnet.synsets(word)
 synonyms = []
 antonyms = []
 for s in syns:
 for l in s.lemmas():
 synonyms.append(l.name())
 if l.antonyms():
 antonyms.append(l.antonyms()[0].name())
 return {
 'synonyms': list(set(synonyms)),
 'antonyms': list(set(antonyms))
 }

api.add_resource(SynAntonyms, '/synantonyms/<string:word>')

if __name__ == '__main__':
 app.run(debug=True)
Create an API route in Python to return the top three highest-priced products. Not applicable import json

from flask import Flask, request, jsonify

app = Flask(__name__)

products = [
 {
  "name": "book",
  "price": 15
 }, 
 {
  "name": "pen",
  "price": 5
 }, 
 {
  "name": "tablet",
  "price": 200
 }, 
 {
  "name": "chair",
  "price": 80
 }
]

@app.route("/top_three_products", methods=["GET"])
def get_top_three_products():
   # Sort the list of products by price in descending order
   sorted_products = sorted(products, key=lambda product: -product['price'])
   # Return only the top 3 products
   highest_priced_products = sorted_products[:3]
   return jsonify(highest_priced_products)

if __name__ == "__main__":
    app.run()
Create a class in Python to implement a doubly-linked list.  class DoublyLinkedListNode:
    def __init__(self, data):
        self.data = data
        self.prev = None 
        self.next = None
 
class DoublyLinkedList:
    def __init__(self):
        self.head = None
 
    def append(self, data):
        if self.head is None:
            new_node = DoublyLinkedListNode(data)
            new_node.prev = None
            self.head = new_node
        else:
            new_node = DoublyLinkedListNode(data)
            cur = self.head
            while cur.next:
                cur = cur.next
            cur.next = new_node
            new_node.prev = cur 
            new_node.next = None
Write a Python program to perform linear regression on a given dataset.  import numpy as np

# Define the data
x_vals = np.array([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])
y_vals = np.array([1.0, 2.9, 3.2, 4.2, 5.3, 6.3])

# Estimate the linear regression weights
A = np.array([x_vals, np.ones(len(x_vals))])
weights = np.linalg.lstsq(A.T, y_vals)[0] # obtaining the weights

# Calculate the best fit line
best_fit_line = np.dot(x_vals, weights[0]) + weights[1]

# Calculate the squared error
squared_error = np.sum((y_vals - best_fit_line)**2)
print(squared_error)
Design a web server in Python using the Flask framework that would serve a json object containing the current temperature for a city based on the city name given in the request. Not applicable import requests
import json

from flask import Flask, request

app = Flask(name)

@app.route('/getTemp', methods=['POST'])
def get_temp():
 city = request.json['city']
 url = 'http://api.openweathermap.org/data/2.5/weather?q={}&APPID=xxxxxx'
 r = requests.get(url.format(city))
 weather = json.loads(r.text)
 return {'temperature': weather['main']['temp']}

if name == 'main':
 app.run(debug=True)
Create a basic Python application to fetch data from an SQL database and display it in the console. Not applicable import sqlite3

conn = sqlite3.connect('example.db')

cursor = conn.cursor()

cursor.execute('SELECT * FROM users')
rows = cursor.fetchall()

for row in rows:
 print(row)

conn.close()
Create a game loop for a game of Pong using Python  """
A game loop for a game of Pong using Python
"""
import pygame
import time

# Define constants
BLACK = (0, 0, 0)
WIDTH = 600
HEIGHT = 400
RADIUS = 20
PADDLE_WIDTH = 10
PADDLE_HEIGHT = 75 

# Initialize game
pygame.init()
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Pong") 
center_point = WIDTH/2, HEIGHT/2
clock = pygame.time.Clock()

# Game variables
paddleA_y = HEIGHT / 2
paddleB_y = HEIGHT / 2
ball_x = WIDTH / 2
ball_y = HEIGHT / 2
ball_change_x = 2
ball_change_y = 2

# Begin game loop
while True:
    # Reset screen
    screen.fill(BLACK)
    
    # Drawing objects
    ball = pygame.draw.circle(screen, (255,255,255), (int(ball_x), int(ball_y)), RADIUS)
    paddleA = pygame.draw.rect(screen, (255,255,255), (0, paddleA_y, PADDLE_WIDTH, PADDLE_HEIGHT)) 
    paddleB = pygame.draw.rect(screen, (255,255,255), (WIDTH - PADDLE_WIDTH, paddleB_y, PADDLE_WIDTH, PADDLE_HEIGHT))
	
    # Event loop 
    for event in pygame.event.get():
        if event.type == pygame.QUIT: 
            pygame.quit()
            exit()

    # Movement of paddles
    keys = pygame.key.get_pressed()
    if keys[pygame.K_w]:
        paddleA_y -= 3
    elif keys[pygame.K_s]:
        paddleA_y += 3
    elif keys[pygame.K_UP]:
        paddleB_y -= 3
    elif keys[pygame.K_DOWN]:
        paddleB_y += 3

    # Limit the position of the paddles
    if paddleA_y < 0:
       paddleA_y = 0
    elif paddleA_y > HEIGHT - PADDLE_HEIGHT:
       paddleA_y = HEIGHT - PADDLE_HEIGHT
    if paddleB_y < 0:
       paddleB_y = 0
    elif paddleB_y > HEIGHT - PADDLE_HEIGHT:
       paddleB_y = HEIGHT - PADDLE_HEIGHT

    # Ball bouncing to the left
    if (ball.left <= paddleA.right + 10) and ball.colliderect(paddleA):
        ball_change_x = -ball_change_x

    # Ball bouncing to the right
    if (ball.right >= paddleB.left - 10) and ball.colliderect(paddleB):
        ball_change_x = -ball_change_x

    # Ball bouncing up
    if (ball.top <= 0) or (ball.bottom >= HEIGHT):
        ball_change_y = -ball_change_y
    
    # Ball movement
    ball_x += ball_change_x
    ball_y += ball_change_y
	
    #Update display
    pygame.display.flip()
    clock.tick(30)
Create a Python program to store and access user information. The program should store 4 pieces of data for each user: name, age, gender, and phone number. # Create database to store user information 
db = sqlite3.connect('user_information.db')

# Create table in the database 
cursor = db.cursor()
cursor.execute("CREATE TABLE IF NOT EXISTS User_Info (Name TEXT, Age INTEGER, Gender TEXT, Phone_Number INTEGER)")

# Function to store user information in database 
def store_info(name, age, gender, number):
    cursor.execute("INSERT INTO User_Info (Name, Age, Gender, Phone_Number) VALUES(?, ?, ?, ?)", (name, age, gender, number))
    db.commit()

# Function to get user information from database
def get_info(name):
    cursor.execute("SELECT * FROM User_Info WHERE Name = ?", (name,))
    results = cursor.fetchall()
    return results

# Example 
store_info("John", 20, "Male", 8054839479)
john_info = get_info("John")
print(john_info)
Create a function in Python to remove all vowels in a given string. "Hello, World!" def remove_vowels(string): 
    vowels = ('a', 'e', 'i', 'o', 'u')  
    for x in string.lower(): 
        if x in vowels: 
            string = string.replace(x, "") 
    return string

print(remove_vowels("Hello, World!"))
Create a program that can generate a random Swiss Internex Bank Account Number in Python  import random

def generate_account_number():
    # Generate a random Account number
    account_number = '00' 
    nums = [str(random.randint(0, 9)) for _ in range(7)]
    account_number += "".join(nums)
    checksum = get_checksum(account_number)
    account_number += str(checksum)
    return account_number

def get_checksum(account_number):
    n = 0
    for i, num in enumerate(account_number):
        n += int(num) * (i % 6 + 2)

    checksum = 11 - (n % 11)
    if checksum == 10:
        return 0
    elif checksum == 11:
        return 5
    else:
        return checksum
Create a Python program to display the current date in MM/DD/YYYY format. Not applicable from datetime import datetime

date = datetime.today()
date_formatted = date.strftime('%m/%d/%Y')
print(date_formatted)
Design an algorithm in Python to find the maximum key from a given dictionary. {1: 'one', 4: 'four', 5: 'five', 8: 'eight', 10: 'ten', 13: 'thirteen'} def max_key(dict):
    max_key = -1
    max_val = -1
    for key, val in dict.items():
        if key > max_key and val > max_val:
            max_key = key
            max_val = val
    return max_key
Identify the bug in the following Python program and suggest an appropriate fix. def func1(list):
    s = 0
    for x in list:
        s+= x
    print(s)

func1([2, 3]) def func1(list):
    s = 0
    for x in list:
        s+= x
    return s

l = [2, 3]
result = func1(l)
print(result)
Given two strings s and t, write a Python program to check if t is a substring of s. s = "abcabc"
t = "abc" def is_substring(s, t):
    if t in s:
        return True
    else:
        return False
Create a Python program that can generate a dictionary of the frequency of words in a given phrase.  def word_count(phrase):
    word_dict = {} 
    words = phrase.split() 
    
    for word in words: 
        if word in word_dict: 
            word_dict[word] += 1
        else: 
            word_dict[word] = 1
  
    return word_dict
Generate a Python script that filters a list of strings, keeping only those that have a length greater than 5 characters. words = ["hello", "world", "example", "test"] def filter_words(words): 
    filtered_words = [] 
    for word in words: 
        if len(word) > 5: 
            filtered_words.append(word) 
    return filtered_words 

words = ["hello", "world", "example", "test"]

filtered_words = filter_words(words) 

print(filtered_words)  # Output: ['example', 'test']
Can you create a Python program that returns the largest number in a list of numbers? [4, 8, 2, 6, 9] def largestNumber(list): 
    maximum = list[0] 
      
    for num in list: 
        if num > maximum: 
            maximum = num 
    return maximum 
  
list = [4, 8, 2, 6, 9] 
largestNumber = largestNumber(list) 
  
print("Largest number in the given list is:", largestNumber)
Create a Python program to get the average rating of each restaurant in a given dataset.  import pandas as pd

data_file = 'restaurant_ratings.csv'

data = pd.read_csv(data_file)

# Group the data by Restaurant
grouped_restaurants = data.groupby('Restaurant')

# Calculate the average rating for each restaurant
avg_ratings = grouped_restaurants['Rating'].mean()

# Print the average ratings to the console
print(avg_ratings)
Generate a Python function that takes a string and reverses its order of characters.  def reverse_string(my_string):
  reversed_string = ''
  for i in range(len(my_string) - 1, -1, -1):
    reversed_string += my_string[i]

  return reversed_string
Invent a python data structure to store information about friends.  class Friend:
    def __init__(self, name, age, address):
        self.name = name
        self.age = age
        self.address = address

friends_list = []
Generate a Python regular expression that can identify valid email addresses. Not applicable ^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$
Create a web application using Django with two models called 'User' and 'Post', where 'User' has a one-to-many relationship with 'Post'.  # Create a project
django-admin startproject MyProject

# Create an app
python manage.py startapp MyApp

# Create the 'User' model in 'models.py'
from django.db import models

class User(models.Model):
    
    # User fields
    name = models.CharField(max_length=255)
    age = models.PositiveIntegerField()
    
    def __str__(self):
        return self.name

# Create the 'Post' model in 'models.py'
class Post(models.Model):
    
	# Post fields
    title = models.CharField(max_length=255)
    content = models.TextField()
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    
    def __str__(self):
        return self.title

# Register the models in 'admin.py'
from django.contrib import admin

from .models import User, Post

admin.site.register(User)
admin.site.register(Post)
Append a number to each element of a list in Python. [1, 2, 3] def append_nums(lst):
    new_list = [x + 10 for x in lst]
    return new_list

print(append_nums([1, 2, 3]))
Create a Python script to calculate the Fibonacci sequence for a given integer n. 7 # Fibonacci sequence
def Fibonacci(n):
 a = 0
 b = 1
 if n < 0:
 print("Incorrect input")
 elif n == 0:
 return a
 elif n == 1:
 return b
 else:
 for i in range(2,n):
 c = a + b
 a = b
 b = c
 return b

# Driver Program
print(Fibonacci(7)) 
# Output: 13
Create a string matching algorithm in Python using Regular Expressions. Not applicable import re

# Define the pattern
pattern = r'(apple|orange|banana)'

# Test strings
strings = ['I ate an apple.',
 'I love oranges!',
 'This banana is delicious.',
 'I cannot eat grapes.']

# Create the regex object
regex = re.compile(pattern, re.IGNORECASE)

# Iterate through the strings
for string in strings:
 # Test if the regex matches
 if regex.search(string):
 print(f"Matched: {string}")
# Output
# Matched: I ate an apple.
# Matched: I love oranges!
# Matched: This banana is delicious.
Create a Python script that takes a dictionary as an argument and prints the value of each key-value pair.  def print_dict(dct):
    for key, value in dct.items():
        print('Key:', key, ', Value:', value)

example_dict = { 'a' : 1, 'b' : 2, 'c' : 3 }
print_dict(example_dict)
Develop a machine learning classifier in Python to determine the sentiment of a piece of text in boolean terms (positive or negative). Example sentence: "This movie was terrible" import numpy as np 
from sklearn.feature_extraction.text import CountVectorizer 
from sklearn.linear_model import LogisticRegression 

# example sentence
sentence = "This movie was terrible"

# tokenize the sentence
vectorizer = CountVectorizer(lowercase=True, tokenizer=str.split)
X = vectorizer.fit_transform([sentence])

# create the model
clf = LogisticRegression()

# train the model on positive and negative sentiment data
samples = ["This movie was great!", 
           "Horrible film, do not watch!"]
labels = [1, 0]
clf.fit(vectorizer.fit_transform(samples), labels)

# make a prediction
prediction = clf.predict(X)[0]
if prediction == 1: 
 print("Positive sentiment")
else:
 print("Negative sentiment")
Optimize a given Python Class using an OOP approach. class User:
    def __init__(self, name, age):
        self.name = name
        self.age = age class User:
    def __init__(self, name, age):
        self._name = name
        self._age = age
    
    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, value):
        self._name = value
    
    @property 
    def age(self):
        return self._age
    
    @age.setter
    def age(self, value):
        if value < 0:
            raise ValueError('Age must be a positive number')
        self._age = value
Create a python function to take two integers input and calculate the sum of both integers. int1 = 7
int2 = 3 def add(int1,int2):
    sum = int1 + int2
    return sum
Optimize and refactor an existing Python function. Example function:
def factorial_recursive(n):
 if n == 0:
 return 1
 return n * factorial_recursive(n-1) def factorial(n):
 if n == 0:
 return 1
 
 result = 1 
 while n > 0:
 result = result * n
 n = n - 1
 
 return result
Filter a string in Python by removing all alphabets and keeping only the numbers. my_string = "hey3this5is4my2string1" def filter_string(str):
    str = ''.join(x for x in str if x.isdigit())
    return str  

my_string = "hey3this5is4my2string1"
print(filter_string(my_string))
Write a Python program to print out the numbers from one to ten and identify any numbers that are divisible by three. Not applicable for i in range(1, 11):
 if i % 3 == 0:
 print (f'{i} is divisible by three.')
 else:
 print (i)
Using Python and TensorFlow, build a text classifier that can take a piece of text and accurately classify it into one of four given categories. The four categories are:
1. Politics
2. Technology
3. Business
4. Sports import tensorflow as tf
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.layers import Dense, Flatten, Embedding
from tensorflow.keras.models import Sequential

# some example text
texts = ['This new technology is changing the way we do politics',
 'Business has been affected by the new technology',
 'Sports have remained unaffected by the new technology',
 'Politics have become more complex due to the new technology']

# encode the classes
labels = [1, 0, 2, 1]

# tokenize the text
tokenizer = Tokenizer()
tokenizer.fit_on_texts(texts)
word_index = tokenizer.word_index

# create the sequence of words
sequences = tokenizer.texts_to_sequences(texts)
 
# create the padding for sequences
data = pad_sequences(sequences, maxlen=8)

# Build and train a model
model = Sequential()
model.add(Embedding(input_dim=len(word_index)+1, output_dim=8, input_length=8))
model.add(Flatten())
model.add(Dense(4, activation='softmax'))

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
model.fit(data, labels, epochs=10)

# Evaluate the model
# test_text = 'Sports have become more competitive due to the new technology'
# test_seq = tokenizer.texts_to_sequences([test_text])
# test_data = pad_sequences(test_seq, maxlen=8)
# print('Predicted label:', model.predict_classes(test_data))
Write a function to check if a year is a leap year using Python.  def isLeapYear(year):
"""
Returns True if year is a leap year and False othwerwise.
"""

if (year % 400 == 0):
    return True
elif (year % 100 == 0):
    return False
elif (year % 4 == 0):
    return True
else:
    return False
Design a neural network in Python to predict a customer’s annual income based on their age and education level. Not applicable import numpy as np
import keras 
from keras.layers import Dense
from keras.models import Sequential

# Build model
model = Sequential()
model.add(Dense(64, input_dim = 2, activation = 'relu'))
model.add(Dense( 1))

# Compile the model
model.compile(loss = 'mean_squared_error',
              optimizer = 'adam')

# Obtain some data - age (years), education level (high school, college, university)
x_train = np.array([[25, 0], [30, 0], [35, 0], 
		    [40, 0], [45, 1], [45, 2],
		    [50, 1], [50, 2], [55, 1],
		    [55, 2], [50, 3], [60, 3]])

# Labels - annual income
y_train = [15000, 20000, 25000, 30000,
           40000, 45000, 50000, 60000, 
	   65000, 70000, 80000, 90000]

# Fit the model
model.fit(x_train, y_train, epochs = 150, batch_size = 2)

# Calculate the predicted annual income
age = 50
education = 3
annualIncome = model.predict(np.array([[age, education]]))
print(annualIncome)
# output: [[80000]]
Create a Python program to encode an input string using base64 encoding.  import base64

def encode_string(input_string):
    encoded_bytes = base64.b64encode(input_string.encode('utf-8'))
    return encoded_bytes.decode('utf-8')
Implement a Naive Bayes classifier in Python that can classify emails as either spam or ham. Example dataset of 10 emails with their respective labels (spam/ham) # Naive Bayes Classifier

import numpy as np
from sklearn.naive_bayes import MultinomialNB

# Sample data
# Each item is a string of text
X = ["I am spam", "Help me now", "You won the lottery", "Buy this product now", 
    "Don't miss this great offer", "Open an account with us", "Get rich quick",
    "This is not a scam", "Don't believe this offer", "Invest with us now"]

# Labels for the example data
# 1: Spam, 0: Ham
y = np.array([1,0,1,1,1,0,1,0,1,0])

# Create the classifier
clf = MultinomialNB()

# Train the classifier
clf.fit(X, y)

# Test the classifier
test_example = "Claim your prize now"
test_example_label = clf.predict([test_example])
print("Test example classified as:", test_example_label[0])
Implement a REST API endpoint with Python and Flask to POST user data including username, email, and password. {
 "username": "scott_pilgrim",
 "email": "scott@pilgrim.com",
 "password": "ferriswheel"
} import flask
from flask import Flask, request, jsonify
app = Flask(__name__)

@app.route('/users', methods=['POST'])
def create_user():
 data = request.get_json()
 username = data['username']
 email = data['email']
 password = data['password']

 # Insert into database

 return jsonify({"message": "User created successfully"})

if __name__ == '__main__':
 app.run()
Create a recursive program in Python which prints out the Fibonacci Sequence  def Fibonacci_Sequence(num): 
    if num <= 0: 
        return 0
    elif num == 1: 
        return 1
    else: 
        return Fibonacci_Sequence(num-1) + Fibonacci_Sequence(num-2) 
    
# Program to print the Fibonacci Sequence 
num = int(input("Enter the number of fibonacci sequence: "))
if num < 0:
    print("Incorrect input")
for i in range(num): 
    print(Fibonacci_Sequence(i))
Write a python program to return the average value of numbers in the given list. numbers = [2, 4, 6, 8] def avg_list(numbers): 
    total = 0
    for x in numbers: 
        total += x 
    return total / len(numbers)
Is it possible to create a function in Python that takes a string as an argument and returns its length?  def string_length(str):
    return len(str)

string = "Hello World"
length = string_length(string)
print("Length of the string is: %d" % length)
Create a Python program to sort a given list using the merge sort algorithm  def merge_sort(alist):
    if len(alist)>1:
        mid = len(alist)//2
        lefthalf = alist[:mid]
        righthalf = alist[mid:]

        merge_sort(lefthalf)
        merge_sort(righthalf)

        i=0
        j=0
        k=0
        while i < len(lefthalf) and j < len(righthalf):
            if lefthalf[i] < righthalf[j]:
                alist[k]=lefthalf[i]
                i=i+1
            else:
                alist[k]=righthalf[j]
                j=j+1
            k=k+1

        while i < len(lefthalf):
            alist[k]=lefthalf[i]
            i=i+1
            k=k+1

        while j < len(righthalf):
            alist[k]=righthalf[j]
            j=j+1
            k=k+1
Create a Python program to grade a multiple choice test with 4 options for each question, and each correct answer is worth 3 points. Example question:
What color is the sky?
A. Red B. White C. Yellow D. Blue

Correct Answer: D def grade_test(questions):
    score = 0
    for question in questions:
        if question['answer'] == question['correct_answer']:
            score += 3
    return score
Create a python program to read an integer from the keyboard and print a message saying whether the number is even or odd?  def read_int_even_odd():
    number = int(input("Enter an integer: "))
    if number % 2 == 0:
        print("The number is even")
    else:
        print("The number is odd")
    
read_int_even_odd()
Produce a program in python which takes a given list of numbers and creates a dictionary where each number is the key and its multiple of the given number is the value. my_list = [3, 5, 7] def create_dictionary(my_list):
    res = {num: num * 2 for num in my_list}
    return res

# run the code
my_list = [3, 5, 7]

res = create_dictionary(my_list)
print('The dictionary is ' + str(res))
Code a Factorial function in Python.  def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

print(factorial(5))
Develop a Python program to reverse an integer. 12345 def reverse_int(num): 
    rev = 0
    while num > 0: 
        rev = (rev*10) + (num%10)
        num = num//10
    return rev 

#test
print(reverse_int(12345))
Calculate the average grade of a student given a list of their grades in Python. grades = [90, 85, 80, 75, 70] def calculate_average_grade(grades): 
 total = 0
 for grade in grades: 
 total += grade 
 avg_grade = total / len(grades) 
 return avg_grade 

grades = [90, 85, 80, 75, 70] 
avg_grade = calculate_average_grade(grades) 
print('Average Grade: ', avg_grade) # Output: Average Grade: 80.0
Design a python program to print out the maximum and minimum numbers in a given list. list = [5, 2, 8, 9, 3, 6, 1] # Find Maximum and Minimum using python 
def maxMin(list):
    max = list[0]
    min = list[0]
    for i in range(len(list)): 
        if list[i] > max: 
            max = list[i] 
        if list[i] < min: 
            min = list[i] 
    return max, min 
  
# Main Program 
list = [5, 2, 8, 9, 3, 6, 1] 
maximum, minimum = maxMin(list) 
  
print("Maximum number is: {}".format(maximum)) 
print("Minimum number is: {}".format(minimum))
Generate a python program to search a list of tuples for given string and return the value associated with the string. my_list = [("apple", "fruit"), ("carrot", "vegetable"), ("orange", "fruit")]
search_string = "orange" my_list = [("apple", "fruit"), ("carrot", "vegetable"), ("orange", "fruit")]
search_string = "orange"

# Iterate through the list of tuples
for (name,item) in my_list:
    if name == search_string:
        print("The value associated with the string is: ", item)
        break
Design an algorithm in Python which takes a given 2D array and finds the product of the elements in each row. [[1, 2], [3, 4]] def rowProduct(arr):
    result = []
    for row in arr:
        product = 1
        for num in row:
            product = product * num
        result.append(product)

    return result

arr = [[1, 2], [3, 4]]

result = rowProduct(arr)
print(result)
Create a loop in Python to print out all the numbers from 1 to 10.  for num in range(1,11):
    print(num)
Create a python script which replaces each letter in a string by the letter which appears n positions after it. string = "abcdef"
n = 2 def replace_letter(string, n):
    result = ""
    for char in string:
        if char == 'z':
            result += 'b'
        elif char == 'Z':
            result += 'B'
        else:
            result += chr(ord(char) + n)
    
    return result
Develop a Python program to standardize a given dataset using the z-score normalization technique.  def standardize(data):
    mean = data.mean()
    std = data.std()
    z_score = (data - mean) / std
    return z_score
Convert the following JavaScript function to Python. function double(x) {
  return 2 * x;
} def double(x):
  return 2 * x
Design a graphical user interface application in Python to display today's date in the format DD/MM/YYYY.  import datetime
import tkinter

root=tkinter.Tk()
root.title("Date")

# gets current date
today = datetime.datetime.now()
# formats date
date_string = today.strftime("%d/%m/%Y")

# creates label with date
current_date_label=tkinter.Label(root, text=date_string, fg="blue")
# pack/add label to app
current_date_label.pack()

# run application
root.mainloop()
Develop a Python program that will build a random forest classifier for an input dataset. The path to the dataset in CSV format import pandas as pd
from sklearn.ensemble import RandomForestClassifier

# Load the dataset
dataframe = pd.read_csv(<path_to_csv>)
X = dataframe.iloc[:, 0:4].values
y = dataframe.iloc[:, 4].values

# Train the classifier
classifier = RandomForestClassifier(n_estimators=100, random_state=0)
classifier.fit(X, y)

# Make predictions
y_pred = classifier.predict(X)
Create a Python script to interact with a PostgreSQL database. The script should be able to add new entries to the database. Not applicable import psycopg2

try:
 connection = psycopg2.connect(
 user = "postgres",
 password = "your_password",
 host = "localhost",
 port = "5432",
 database = "your_database"
 )

 cursor = connection.cursor()
 postgreSQL_select_Query = "select * from table_name"
  
 cursor.execute(postgreSQL_select_Query)
  
 print("Table Before inserting a record")
 records = cursor.fetchall() 
 
 postgres_insert_query = """ INSERT INTO table_name (column_1, column_2, colum_n) VALUES (%s,%s,%s)"""
 record_to_insert = ('value1', 'value2', 'value3')
 cursor.execute(postgres_insert_query, record_to_insert)
 connection.commit()

 print("Table After inserting a record")
 cursor.execute(postgreSQL_select_Query)
 records = cursor.fetchall() 

except (Exception, psycopg2.Error) as error :
    print ("Error while connecting to PostgreSQL", error)
finally:
    if(connection):
        cursor.close()
        connection.close()
        print("PostgreSQL connection is closed")
Create a code to print the nth Fibonacci number in Python.  def fibonacci_n(n): 
    a = 0
    b = 1
    if n < 0: 
        print("Incorrect input") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
        return b 

n = 9
print(fibonacci_n(n))
Create a web-scraping program to extract data from twitter.  """
Create a web scraping program to extract data from twitter.
"""

from bs4 import BeautifulSoup
import requests

def scrape_data():
    url = 'https://twitter.com/search?q=%23python'
    response = requests.get(url)
    html = response.text
    soup = BeautifulSoup(html, 'html.parser') 
    tweets = soup.find_all('p', {'class': 'TweetTextSize'})
    for tweet in tweets:
        print(tweet.text)
        
if __name__ == "__main__":
    scrape_data()
Use a Python web framework to create a web service that allows users to save and view a simple text message. Not applicable from flask import Flask

app = Flask(__name__)

@app.route('/message', methods=['POST'])
def save_message():
    message = request.data
    # save the message to database

@app.route('/message', methods=['GET'])
def retrieve_message():
    message = db.get_message()
    return message

if __name__ == '__main__':
    app.run()
Generate a Python program to calculate the minimum cost of a given shopping cart. cartItems = {"Apple": 10,
			"Banana": 5,
			"Orange": 2,
			"Grapes": 15
            } def minimum_cost(cart): 
    min_cost = 0
    for item, cost in cart.items():
        min_cost += int(cost) 
    return min_cost

print(minimum_cost(cartItems))
Using the specified input, write a Python program that prints the numbers from 1 to 10 in order.  for i in range(1,11):
    print(i)
Create a Python program that receives a list of numbers, and generates two new lists: one containing the even elements from the original list, and one containing the odd elements. [1, 2, 3, 4, 5, 6] def find_even_odd(nums):
  even_list = []
  odd_list = []
  for num in nums:
    if num % 2 == 0:
      even_list.append(num)
    else:
      odd_list.append(num)
  
  return even_list, odd_list
  
print(find_even_odd([1, 2, 3, 4, 5, 6]))
Create a python function to extract the intersection of two lists. listOne = [5,4,3]
listTwo = [3,2,1] def intersection(listOne, listTwo):
    return list(set(listOne).intersection(set(listTwo)))
Create a web scraper in Python that will scrape Reddit for comments and store them in a database. Not applicable import praw
import sqlite3

conn = sqlite3.connect('RedditScraper.db')
c = conn.cursor()

c.execute("""CREATE TABLE comments (
 comment_id text,
 comment_body text
)""") 

reddit = praw.Reddit(
 client_id='YOUR_CLIENT_ID',
 client_secret='YOUR_CLIENT_SECRET',
 user_agent='YOUR_USER_AGENT'
)

for comment in reddit.subreddit('all').stream.comments():
 c.execute("INSERT INTO comments VALUES (?, ?)",
 (comment.id, comment.body))
 conn.commit()

conn.close()
Create a Python function that takes two numbers and returns the Greatest Common Divisor (GCD) of the two numbers. 14, 18 def gcd(x, y):
    while y != 0:
        x, y = y, x % y
    return x
Given a set of data points, write a Python program to calculate the Pearson correlation coefficient between two variables. Data points: (2,6), (4,8), (7,12), (9,14) import numpy as np

# define the dataset
data = np.array([[2,6], [4,8], [7,12], [9,14]])

# calculate the Pearson correlation coefficient
def pearson_coefficient(x, y):
 x_mean = np.mean(x)
 y_mean = np.mean(y)
 num = np.sum((x - x_mean)*(y - y_mean))
 den = np.sqrt(np.sum(np.square(x - x_mean)) * np.sum(np.square(y - y_mean)))
 return num/den
 
x = data[:, 0]
y = data[:, 1]
pearson_r = pearson_coefficient(x, y)
print('Pearson correlation coefficient: %.3f' % pearson_r) # Output: Pearson correlation coefficient: 0.998
Write a Python program that prints a table of contents from a given list of headings. headings = ["Introduction", "Fundamentals", "Algorithms", "Design Patterns", "Conclusion"] headings = ["Introduction", "Fundamentals", "Algorithms", "Design Patterns", "Conclusion"]

print("Table of Contents")
for i, heading in enumerate(headings):
  print(f"{i+1}.{heading}")
Write a Python script to generate random passwords with a desired length.  import random
import string

def generate_random_password(length):
    alphanumeric = string.ascii_letters + string.digits
    password = "".join(random.choice(alphanumeric) for i in range(length))
    return password

pwd = generate_random_password(10)
print(pwd)
Generate a Python program which takes a string as input and prints all of its substrings in order from longest to shortest length.  def substring_in_order(string): 
    result = [] 
    n = len(string) 
    for l in range(n, 0, -1): 
        for i in range(n-l + 1): 
            result.append(string[i:i+l]) 
    return result 

string = input("Enter the string: ") 
print ("All substrings in order from longest to shortest:") 
print (substring_in_order(string))
Create a Python program to sort a given list of numbers within a range and return the sorted list. arr = [7, 0, 5, 6, 3, 9]
start = 0
end = 9 def sort_in_range(arr, start, end):
     # create a count array to store the count of each number 
    count = [0 for i in range(start, end+1)]
    output = []
    # count the occurance of each number in the array
    for num in arr:
        count[num] += 1
    # append the number to the output array for each occurance
    for i in range(start, end+1):
        for c in range(0, count[i]):
            output.append(i)
    return output
Construct a Python program to classify a set of emails as spam/ham.  import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB

data = pd.read_csv('emails.csv')

data['label'] = data['label'].map({'ham': 0, 'spam': 1})

X_train, X_test, y_train, y_test = train_test_split(data['email'],
                                                    data['label'],
                                                    test_size = 0.33,
                                                    random_state = 42)

count_vector = CountVectorizer()

training_data = count_vector.fit_transform(X_train.values)
testing_data = count_vector.transform(X_test.values)

naive_bayes = MultinomialNB()
naive_bayes.fit(training_data, y_train)

predictions = naive_bayes.predict(testing_data)
Create a script in Python to generate the nth term of the Fibonacci series.  def Fibonacci(n):
 a = 0
 b = 1
 if n < 0:
  print("Incorrect input")
 elif n == 0:
  return a
 elif n == 1:
  return b
 else:
  for i in range(2,n):
   c = a + b
   a = b
   b = c
  return b

print(Fibonacci(5))
Can you write a Python program to take a list and create a new list with unique elements of the first list? list=[1,2,2,3,3,3] def unique_list(list):
    unique_list = []
    for element in list:
        if element not in unique_list:
            unique_list.append(element)
    return unique_list

unique_elements = unique_list([1,2,2,3,3,3])
print(unique_elements)
Given a list of tuples containing names and grades, calculate the average grade for each name using Python. [('Bob', 80), ('John', 90), ('Bob', 70), ('John', 85)] grades = [('Bob', 80), ('John', 90), ('Bob', 70), ('John', 85)]

grade_totals = {}

for name, grade in grades:
 if name in grade_totals:
    grade_totals[name] = (grade_totals[name] + grade) / 2
 else:
    grade_totals[name] = grade

for name, average in grade_totals.items():
 print(f'{name} has an average grade of {average}')
Write a Python program to intersect two given arrays without using any in-built functions. a = [1, 7, 11, 58, 80]
b = [11, 13, 7, 32, 80] def intersect(a, b):
  intersection = [] 
  for i in a:
    for j in b:
      if i == j and i not in intersection:
        intersection.append(i)
  return intersection

print(intersect([1, 7, 11, 58, 80], [11, 13, 7, 32, 80]))
Create a class in Python to represent a 2D circle.  class Circle2D:
    def __init__(self, x, y, radius):
        self.x = x
        self.y = y
        self.radius = radius

    def get_area(self):
        """Calculates the area of the circle"""
        return 3.14 * (self.radius ** 2)
Create a function in Python that solves the Fibonacci sequence.  def fibonacci(n): 
    if n<0: 
        print("Incorrect input") 
    elif n==1: 
        return 0
    elif n==2: 
        return 1
    else: 
        return fibonacci(n-1)+fibonacci(n-2)
Generate a function in python that takes a string (plain text) and returns the highest frequency of a letter in upper case. string="The quick brown fox jumped over the lazy dog" def highest_frequency(string):
    freq_map = {}
    max_freq = 0
    result = ""
    for char in string:
        char = char.upper()
        if char in freq_map:
            freq_map[char] += 1
            if freq_map[char] > max_freq:
                max_freq = freq_map[char]
                result = char
        else:
            freq_map[char] = 1
    return result
Write a python program to create an even number generator.  def even_number_generator():
    num = 0
    while True:
        if num % 2 == 0:
            yield num
        num += 1
Develop an algorithm in Python for given an array containing n distinct numbers taken from 0, 1, 2, …, n, find the one that is missing from the array. Array : [2, 3, 1, 5, 4] def missingNumber(arr): 
    n = len(arr) 
    total = (n + 1)*(n + 2)/2
    sum_of_arr = sum(arr) 
    return total - sum_of_arr 

arr = [2, 3, 1, 5, 4]
missing = missingNumber(arr) 
print(missing)
Construct an algorithm in Python that takes an array of numbers and removes all duplicates while maintaining the original order of the array. [1, 3, 2, 1, 5, 4, 8, 6, 7, 5] def remove_duplicates(arr):
    seen = set()
    seen_add = seen.add
    return [x for x in arr if not (x in seen or seen_add(x))]

arr = [1, 3, 2, 1, 5, 4, 8, 6, 7, 5]
result = remove_duplicates(arr)

print(result)
# Output: [1, 3, 2, 5, 4, 8, 6, 7]
Create a Python program to read in a list of items and print them out in reverse order. ["Apple", "Pear", "Banana", "Orange"] my_list = ["Apple", "Pear", "Banana", "Orange"]

for item in reversed(my_list):
 print(item)
Generate a Python class that implements a queue data structure.  class Queue:
    def __init__(self):
        self.queue = []
    
    def enqueue(self, item):
        self.queue.append(item)
    
    def dequeue(self):
        if len(self.queue) > 0:
            return self.queue.pop(0)
        else:
            return None
    
    def peek(self):
        if len(self.queue) > 0:
            return self.queue[0]
        else:
            return None
In Python, debug the following program and explain what was the issue? def greet(name):
    if name == "John":
        msg = "Hello, John"
    else:
        msg = "Name not found"

print(greet("John")) The issue with the program is that it is not printing the message stored in the "msg" variable. To fix this, the program can be modified as follows:

def greet(name):
    if name == "John":
        msg = "Hello, John"
    else:
        msg = "Name not found"
    print(msg)

greet("John")
Create a Python program to sort a given list of integers in descending order using Merge Sort. list = [3, 7, 9, 1, 2, 8] def merge_sort(arr):
    if len(arr) > 1:
        mid = len(arr)//2
        left = arr[:mid]
        right = arr[mid:]

        merge_sort(left)
        merge_sort(right)

        i = j = k = 0
        while i < len(left) and j < len(right):
            if left[i] > right[j]: # descending order
                arr[k] = left[i]
                i += 1
            else:
                arr[k] = right[j]
                j += 1
            k += 1

        while i < len(left):
            arr[k] = left[i]
            i += 1
            k += 1

        while j < len(right):
            arr[k] = right[j]
            j += 1
            k += 1


l = [3, 7, 9, 1, 2, 8]
merge_sort(l)

print(l)

# Output: [9, 8, 7, 3, 2, 1]
Create a Python program to convert a binary string into its equivalent decimal value. binary_num = '10101' def binary_to_decimal(binary_num):
    decimal_num = 0
    n = 0

    for i in range(len(binary_num)-1, -1, -1):
        if binary_num[i] == '1':
            decimal_num += 2**n
        
        n += 1
    
    return decimal_num
Generate a random 4-digit number using Python. Not applicable import random

random.randint(1000, 9999)
Compose a Python class for creating a person object  class Person:
    """
    Creates a Person object with given name, age, and gender. 
    """
    def __init__(self, name, age, gender):
        self.name = name
        self.age = age
        self.gender = gender
    
    def greet(self):
        """
        Prints out a greeting for the Person
        """
        print('Hello, my name is ' + self.name)

if __name__ == '__main__':
    John = Person('John', 25, 'male')
    John.greet()
Write a Python program to translate a string into pig latin. Hello def toPigLatin(word):
    vowels = ["a","e","i","o","u"]
    first_letter = word[0]
    if first_letter in vowels:
        modified_word = word + "way"
    else:
        modified_word = word[1:] + first_letter + "ay"
    return modified_word

result = toPigLatin("Hello")
print(result)
De-duplicate the given list using a dictionary in Python? [10, 20, 30, 10, 40, 20] input_list = [10, 20, 30, 10, 40, 20]
unique_list = list(dict.fromkeys(input_list))
print(unique_list)
Write a python class for a bank account holder with following parameters: name, card number, PIN, and balance.  class BankAccountHolder:
    def __init__(self, name, card_number, pin, balance):
        self.name = name
        self.card_number = card_number
        self.pin = pin
        self.balance = balance
    
    def get_name(self):
        return self.name
    
    def get_card_number(self):
        return self.card_number
    
    def get_pin(self):
        return self.pin
    
    def get_balance(self):
        return self.balance
    
    def set_balance(self, balance):
        self.balance = balance
Propose a solution to fetch an online catalog of products and display them in a tabular format using Python. Catalog consisting of 1000 products import requests
import pandas as pd

# Set the request URL
url = "http://example.com/products"

# Send the request and retrieve the data
data = requests.get(url).json()

# Convert the data into a pandas DataFrame
df = pd.DataFrame(data)

# Print the resulting table
print(df)
Generate a Python script using Scikit-Learn for performing k-means clustering on a given dataset. Dataset: The dataset consists of three features x1, x2 and x3. import numpy as np
from sklearn.cluster import KMeans

data = np.array([[x1, x2, x3]]) #replace x1, x2 and x3 with the features in the dataset

kmeans = KMeans(n_clusters=3).fit(data)
clusters = kmeans.predict(data)
Compose a function in Python to check if a given number is a power of two. 10 def is_power_two(num):
    if num == 0:
        return False
    
    while num != 1:
        if num % 2 != 0:
            return False
        num = num // 2
    return True
Create a Python script that takes two inputs from the user: a list of numbers and an integer. The script should loop over the input list and check if any two numbers in the list add up to the input integer. list = [3, 5, 10, 15]
integer = 17 list = [3, 5, 10, 15]
integer = 17

total = 0

for i in list:
 for j in list:
 total = i + j
 if total == integer:
 print("Two numbers that add up to", integer, "are", i, "and", j)
 break
Create a Python function to normalize a list of strings by converting each string to lowercase and stripping any leading and trailing whitespaces. ['  this  ', 'Is A TEST', 'WoRd'] def normalize(words):
    """Normalizes a list of strings by converting each to lowercase and stripping any leading or trailing whitespaces."""
    return [word.lower().strip() for word in words]
How would you convert the following pseudocode into python? IF A > B {
 PRINT “A is greater than B”
} ELSE {
 PRINT “B is greater than A”
} if A > B:
    print("A is greater than B")
else:
    print("B is greater than A")
Create a Python program that uses the NLTK package to classify a sentence as negative or positive. Sentence: The flight was really terrible. import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer

sentence = 'The flight was really terrible.'

# Initialize the sentiment analyzer
sia = SentimentIntensityAnalyzer()

# Use the sentiment analyzer to classify the sentence
scores = sia.polarity_scores(sentence)

# Print the result
print(scores["compound"] > 0.0)
# Output: False
Create an SQL query to find all articles with the word "python" in the title. Not applicable SELECT * FROM articles WHERE title LIKE '%Python%';
Refactor the following code to be more pythonic def print_all(sequences):
    for sequence in sequences:
        print(sequence) def print_all(sequences):
    [print(sequence) for sequence in sequences]
Compare two strings using Python and output the similarity score between them. String 1: hello world 
String 2: hey world import difflib

def compare_strings(str1, str2):
 score = difflib.SequenceMatcher(None, str1, str2).ratio() 
 print("Similarity score is:", score)

compare_strings("hello world", "hey world") # Output: Similarity score is: 0.909
Write a sorting algorithm in Python to sort a set of strings based on the length of each string. ['banana', 'apple', 'mango', 'pear'] def sort_strings(string_list):
  return sorted(string_list, key=len)

# Usage example
string_list = ['banana', 'apple', 'mango', 'pear']
print(sort_strings(string_list))  # Outputs ['apple', 'pear', 'mango', 'banana']
Create a program in Python that takes a list of integers, and prints the sum of the even numbers and the sum of the odd numbers. list=[2,4,5,7,1,3] list=[2,4,5,7,1,3]

even_sum= 6
odd_sum= 15

def sum_even_odd(list):
    even_sum=0
    odd_sum=0
    
    for num in list:
        if num % 2 == 0:
            even_sum+=num
        else:
            odd_sum+=num 
    
    print("even_sum=",even_sum)
    print("odd_sum=",odd_sum)
    
sum_even_odd(list)
Write an algorithm in Python to determine the largest number in an array. arr = [10, 8, 12, 4, 6] def find_max(arr): 
    max_val = arr[0] 
  
    for i in range(1, len(arr)): 
        if arr[i] > max_val: 
            max_val = arr[i] 
  
    return max_val 
  
# Driver code 
arr = [10, 8, 12, 4, 6]
result = find_max(arr) 
print(result) 

# Output: 12
Using the input provided, write a Python script to store the words in a dictionary and get the count of each word. words= ["Hello", "World", "Hello" , "again"] word_count = {}

for word in words:
    if word not in word_count:
        word_count[word] = 1
    else:
        word_count[word] += 1

print(word_count) # output: {'Hello': 2, 'World': 1, 'again': 1}
Write a Python function that converts a given number from one numeric base to another. number = 42
from_base = 10
to_base = 16 def convert_number(number, from_base, to_base): 
    # convert number to base 10 
    result = int(str(number), from_base) 
  
    # convert base 10 to new base 
    res = ""
    while result > 0:
        res += str(result % to_base)
        result //= to_base
    res = res[::-1] 
  
    return res
Generate a Python program that identifies all the words with more than five characters in a given list. words = ["red", "green", "blue", "yellow", "orange"] def more_than_five_characters(words):
    result = []
    for word in words:
        if len(word) > 5:
            result.append(word)
    return result

words = ["red", "green", "blue", "yellow", "orange"]
print(more_than_five_characters(words))
Determine the type of the given expression in Python. Expression: 9 + 5 int
Modify a given Python program to optimize its performance. def process_array(array):
 n = len(array)
 result = 0
 for i in range(n):
  result += array[i]
 return result def process_array(array):
 n = len(array)
 result = 0
 sum_backward = 0
 
 # Starting from the end and going towards the beginning 
 # this is an opportunity to reduce the time complexity 
 for i in range(n-1, -1, -1):
  sum_backward += array[i]
  result += sum_backward
  
 return result
Write a Python program to generate a password with a given length and characters. length = 10
characters = alphanumeric import random

def generate_password(length, characters):
    password = ''
    for i in range(length):
        password += random.choice(characters)
    return password

print(generate_password(10, 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'))
Create a function in Python to print the top five characters from the provided string in descending order of frequency. aaabbbcccccc def top_five_characters(string):
    char_freq = {}
    for char in string: 
        if char in char_freq: 
            char_freq[char] += 1
        else: 
            char_freq[char] = 1
    # Sort the Characters in descending order of frequency
    sorted_freq = sorted(char_freq, key=char_freq.get, reverse=True)[:5]
    return sorted_freq
print(top_five_characters('aaabbbcccccc'))
Create a chatbot in Python for customer service.  import nltk
from nltk.stem import WordNetLemmatizer
from nltk.corpus import wordnet

# Define a function to get the simple POS tag
def get_simple_pos(tag):
 
    if tag.startswith('J'):
        return wordnet.ADJ
    elif tag.startswith('V'):
        return wordnet.VERB
    elif tag.startswith('N'):
        return wordnet.NOUN
    elif tag.startswith('R'):
        return wordnet.ADV
    else:
        return wordnet.NOUN

# Create a lemmatizer object 
lemmatizer = WordNetLemmatizer()

def lemmatize_sentence(sentence):
    #tokenize the sentence and find the POS tag for each token
    nltk_tagged = nltk.pos_tag(nltk.word_tokenize(sentence))  
    #tuple of (token, simple POS tag)
    nltk_tagged = [(word, get_simple_pos(tag)) for word, tag in nltk_tagged]
    lemmatized_sentence = []
    for word, tag in nltk_tagged:
        lemmatized_sentence.append(lemmatizer.lemmatize(word, tag))
    return " ".join(lemmatized_sentence)

# Create the chatbot
def create_bot():
    print("Hello! I am a customer service chatbot. How can I help you?")
    response = input()
    response = lemmatize_sentence(response)
    # Perform actions based on the response
    if response == "quit":
        return
    else:
        print("Thank you for your question. I will get back to you shortly with an answer.")
        create_bot()

create_bot()
Build a Python script to remove all punctuation from a given string. "This is a cool string!" import string

input_str = "This is a cool string!"
punctuation_removed = input_str.translate(str.maketrans('', '', string.punctuation))
print(punctuation_removed)
Write a Python program to convert a given time in 24-hour format to 12-hour format. 13:00 def convert24To12(time24): 
  
    # Get the first two elements representing hours 
    hrs = int(time24[0:2]) 
  
    # Find the string for AM / PM  
    ampm = ' AM'
    if hrs >= 12: 
        ampm = ' PM'
        hrs -= 12
  
    # Convert to string and append AM/PM  
    return str(hrs) + time24[2:] + ampm 
  
# Driver Code 
time1 = '09:35:00'
time2 = '13:35:00'
print(convert24To12(time1))
print(convert24To12(time2))
Create a game in Python using the PyGame library.  import pygame

pygame.init()

screen = pygame.display.set_mode((800,600))

pygame.display.set_caption("My Game")

run = True

while run:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False

    pygame.display.update()
Convert the following C++ code to Python. int foo(int a, int b, int c) {
    int result = a + b + c;
    return result;
} def foo(a, b, c):
    result = a + b + c
    return result
Create a Python program to identify most frequent value Identify the most frequent element in the array [1, 2, 2, 3, 3, 3, 4]. def identify_most_frequent_value(arr):
    counts = {}

    # count the occurrence of each element
    for num in arr:
        if num in counts:
            counts[num] += 1
        else:
            counts[num] = 1

    # find the most frequent element
    max_freq = 0
    max_freq_num = 0
    for num in counts:
        if counts[num] > max_freq:
            max_freq_num = num
            max_freq = counts[num]

    return max_freq_num
Modify a Python script to log a message in the event of an error.  import logging

try:
    # Run code
except Exception as e:
    logging.error("An error occurred: {}".format(e))
Suggest a Python generator for all possible combinations of r elements in a list.  def combination_generator(lst, r):
    # Initialize empty list
    combinations = []
    
    # Create a loop to pick every element
    for i in range(len(lst)):
        
        # Create a loop to create permutations 
        # of the picked elements
        for j in combinations:
            s = j[:]
            s.append(lst[i])
            if len(s) == r:
                combinations.append(s)
            elif len(s) < r:
                combinations.append(s)
                for k in range(i+1, len(lst)):
                    s = s[:]
                    s.append(lst[k])
                    if len(s) == r:
                        combinations.append(s)
    return combinations
Create an automation script using Python Selenium to navigate to a web page, click a link, and take a screenshot of the page. Input: URL:
https://www.example.com from selenium import webdriver
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# initialise the driver
driver = webdriver.Chrome()

# go to the given URL
driver.get("https://www.example.com")

# wait for the page to load
wait = WebDriverWait(driver, 10)
wait.until(EC.visibility_of_element_located(driver.find_element_by_xpath('//a[@href="link"]')))

# click the given link
link = driver.find_element_by_xpath('//a[@href="link"]')
link.click()

# wait for the new page to load
wait.until(EC.visibility_of_element_located(driver.find_element_by_tag_name('body')))

# take a screenshot of the current page
driver.save_screenshot("example.png")

# close the driver
driver.quit()
Write a Python script that takes in two strings and finds the longest common subsequence. ACBA, ABAC def find_lcs(str1, str2):
 # create a matrix to store solutions to subproblems 
 dp = [[0 for j in range(len(str2) + 1)] for i in range(len(str1) + 1)]

 # fill the lookup table in bottom-up manner
 for i in range(1, len(str1) + 1):
  for j in range(1, len(str2) + 1):
   if str1[i-1] == str2[j-1]:
    dp[i][j] = 1 + dp[i-1][j-1]
   else:
    dp[i][j] = max(dp[i][j-1], dp[i-1][j])
 
 # find the longest common sub sequence
 i, j = len(str1), len(str2)
 lcs = ""
 while i > 0 and j > 0:
  if str1[i-1] == str2[j-1]:
   lcs += str1[i-1]
   i-=1
   j-=1
  elif dp[i][j-1] > dp[i-1][j]:
   j-=1
  else:
   i-=1
 
 # Reverse the lcs string 
 return lcs[::-1]

str1 = "ACBA"
str2 = "ABAC"

print(find_lcs(str1, str2))

# Output: ACBA
Create a program in Python to classify an input string as either palindrome or not. Input string: "racecar" def is_palindrome(string):
    # reverse the string and compare
    reversed_string = ''.join(reversed(string)) 
    if string == reversed_string:
        print("Input string is a palindrome")
    else:
        print("Input string is not a palindrome")
        
is_palindrome("racecar")  # Outputs: "Input string is a palindrome"
Implement a TensorFlow model in Python to generate the sentiment score of a short review document. Example review document: "The food was great and the atmosphere was friendly." import tensorflow as tf
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences

review = "The food was great and the atmosphere was friendly."

tokenizer = Tokenizer()
tokenizer.fit_on_texts([review])

encoded_review = tokenizer.texts_to_sequences([review])[0]

padded_review = pad_sequences([encoded_review], maxlen=6, padding='post')

model = tf.keras.models.Sequential([
 tf.keras.layers.Embedding(
  input_dim=len(tokenizer.word_index) + 1,
  output_dim=16,
  input_length=6
 ),
 tf.keras.layers.Flatten(),
 tf.keras.layers.Dense(units=1, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
score = model.predict(padded_review).round(2)[0][0]  # 0.87
Create a Python program to remove the given item from a list. [1, 2, 3, 4], 2 def remove_item(lst, item):
    while item in lst:
        lst.remove(item)
    return lst

result = remove_item([1, 2, 3, 4], 2)
print(result)
Create a classification algorithm in Python to predict the sentiment of a given text as either positive, negative or neutral. Text: I love it when the weather is good. # import libraries
import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer 
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import BernoulliNB

# read data
df = pd.read_csv('data.csv')

# set up dependent and independent variables
X = df['text']
y = df['sentiment']

# creating document term matrix
vectorizer = CountVectorizer() 
X_dtm = vectorizer.fit_transform(X).toarray() 

# split data into train and test set
X_train, X_test, y_train, y_test = train_test_split(X_dtm, y, test_size = 0.2, random_state = 0)

# train model
nb = BernoulliNB() 
nb.fit(X_train, y_train) 

# evaluate model
accuracy = nb.score(X_test, y_test) 

# predicting sentiment
text = 'I love it when the weather is good.'
data = vectorizer.transform([text]).toarray()
prediction = nb.predict(data)
print(prediction)
# Output: ['positive']
Create a Python program to parse a string for any numbers and calculate the sum. string = "My age is 25 and my friend's age is 30." import re

# Input string
string = "My age is 25 and my friend's age is 30."

# Find all the numbers in the string
numbers = re.findall("\d+", string)

# Calculate the sum
sum = 0
for number in numbers:
 sum += int(number)

# Print the sum
print("The sum of the numbers is:", sum)
Develop an algorithm in Python to optimize a given set of parameters for a given objective function. Objective function: f(x, y) = (x * y) + (y + x)
Parameters: x, y import numpy as np
import scipy.optimize

def objective(params):
  x = params[0]
  y = params[1]
  return (x * y) + (y + x)

starting_point = np.array([1.0, 1.0])

res = scipy.optimize.minimize(objective, starting_point, 
                              method='nelder-mead', 
                              options={'xtol': 1e-8, 'disp': True}) 
print(res.x) # Optimal Values
Write a Python program to separate the given string into a list of words. string="This is a test string" # Split the string into words 
words = string.split(' ') 

# Print the list of words 
print(words) # Output: ['This', 'is', 'a', 'test', 'string']
Generate a Python program that creates a list of five random integers between 1 and 100. Not applicable import random

my_list = []
for i in range(5):
 my_list.append(random.randint(1,100))

print(my_list)
Create a program in Python to count the number of elements of a given list. list = ['This', 'is', 'a', 'list'] def element_count(list):
    return len(list)

list = ['This', 'is', 'a', 'list']
print(element_count(list))
Can you write a function that takes a set of keywords and returns the top 10 web pages with highest keyword search rate? ["python", "programming", "language"] import requests
import json

def top_webpages_with_keywords(keywords):
    url = 'http://example.com/search-engine-api'
    params = {
        'keywords': keywords
    }
    response = requests.get(url, params=params)
    data = json.loads(response.text)
    pages_with_keywords = [page['url'] for page in data if page['score'] > 0.5]
    top_pages = pages_with_keywords[:10]
    return top_pages

print(top_webpages_with_keywords(["python", "programming", "language"]))
Can you generate code to clear all whitespace from a given string in Python? Input String = " Hello World    " def clear_whitespace(s):
        s = s.strip() # Remove leading and trailing whitespaces
        s = "".join(s.split()) # Remove middle whitespaces
        return s

print(clear_whitespace(" Hello World    "))
Create a Python program that uses an SQL database to store user preferences. Not applicable import sqlite3

conn = sqlite3.connect('user_preferences.db')
c = conn.cursor()

# Create table
c.execute('''CREATE TABLE user_preferences (
 user_id INTEGER PRIMARY KEY,
 preference_name TEXT NOT NULL,
 preference_value TEXT
)''')

# Save (commit) the changes
conn.commit()

# Close the connection
conn.close()

# Add user preferences to the database
def addUserPreferences(user_id, preference_name, preference_value):
 conn = sqlite3.connect('user_preferences.db')
 c = conn.cursor()
 c.execute("INSERT INTO user_preferences(user_id, preference_name, preference_value) VALUES (?,?,?)", (user_id, preference_name, preference_value))
 conn.commit()
 conn.close()

# Get user preferences from the database
def getUserPreferences(user_id):
 conn = sqlite3.connect('user_preferences.db')
 c = conn.cursor()
 c.execute("SELECT * FROM user_preferences WHERE user_id=?", (user_id))
 user_preferences = c.fetchall()
 conn.commit()
 conn.close()
 return user_preferences
Create a python program to select the item with the highest frequency in the list. list = [5, 2, 8, 7, 2, 2, 4] def frequency_selector(list): 
    # Create an empty dictionary for counts 
    counts = {} 
  
    # Iterate the list and store values in the dictionary 
    for l in list: 
        if l in counts: 
            counts[l] += 1
        else: 
            counts[l] = 1
  
    # Find the highest frequency 
    max = 0
    item = None
  
    for l in counts: 
        if counts[l] > max: 
            max = counts[l] 
            item = l 
  
    return item

list = [5, 2, 8, 7, 2, 2, 4]
print(frequency_selector(list))
Create a Python program which will take a number n as input and prints the nth fibonacci number in the series 8 def Fibonacci(n): 
    if n<0: 
        print("Incorrect input") 
    # First Fibonacci number is 0 
    elif n==1: 
        return 0
    # Second Fibonacci number is 1 
    elif n==2: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2) 
  
# Driver Program 
print(Fibonacci(8))
Create a class in Python to represent a point in 2D space with x and y coordinates  class Point:
    """ 
    Represent a point in 2D space with x and y coordinates
    """
    def __init__(self, x, y):
        """ Initialize the Point's x and y coordinates 
        """ 
        self.x = x
        self.y = y
    
    def distance(self, other):
        """ Calculate the Euclidean distance between two points
        """
        return ((self.x - other.x) ** 2 + (self.y - other.y) ** 2) ** 0.5
Design a Python program to reduce a fraction to its lowest terms.  def gcd(a, b): 
    if a == 0: 
        return b 
    return gcd(b % a, a) 
      
def reduceFraction(numerator, denominator): 
    common_divisor = gcd(numerator, denominator) 
      
    reduced_numerator = numerator // common_divisor 
    reduced_denominator = denominator // common_divisor 
    return reduced_numerator, reduced_denominator 

numerator = 12
denominator = 20

reduced_numerator, reduced_denominator = reduceFraction(numerator, denominator) 
print(f"{numerator}/{denominator} is equivalent to {reduced_numerator}/{reduced_denominator}")
In Python, write a function to format a given address into a human-readable form. 60 Fifth Avenue, New York def format_address(address):
    address_items = address.split(',')
    street = address_items[0]
    city_state = address_items[1].split()
    city = city_state[0]
    state = city_state[1]
    formatted_address = street + ', ' + city + ', ' + state

    return formatted_address

address = '60 Fifth Avenue, New York'
formatted_address = format_address(address)
print(formatted_address)
Create a Neural Network class in Python that takes in two arguments (input size and number of outputs).  class NeuralNetwork:
    def __init__(self, input_size, num_outputs):
        self.input_size = input_size
        self.num_outputs = num_outputs

        self.weights = np.random.rand(input_size, num_outputs)

    def forward(self, x):
        z = np.dot(x, self.weights)
        return z
Create a basic graphical user interface in Python using tkinter. Not applicable import tkinter as tk

root = tk.Tk()
frame = tk.Frame(root)
frame.pack()

button = tk.Button(frame, 
                   text="Click Me!", 
                   fg="blue",
                   command=lambda: print("Hello World!"))
button.pack(side=tk.LEFT)

close = tk.Button(frame, 
                  text="Exit", 
                  fg="red",
                  command=quit)
close.pack(side=tk.LEFT)

root.mainloop()
Construct a python program that takes a positive integer as input and outputs its factorial Input Number: 5 def factorial(inp):
    if inp == 0:
        return 1
    else:
        return inp*factorial(inp-1)
Create a Python function to classify a given string as a Positive, Negative, or Neutral sentiment. "This is an amazing service." def classify_sentiment(string):
 if 'positive' in string:
  return 'Positive' 
 elif 'negative' in string:
  return 'Negative' 
 elif 'neutral' in string:
  return 'Neutral'
 else:
  return 'Unknown'

sentiment = classify_sentiment("This is an amazing service.")
print(sentiment) # Positive
Create a machine learning model in Python to predict a customer’s churn status given their customer ID and purchase history. Customer ID: C123456
Purchase History: [“Pizza”, “Burger”, “Ice Cream”] # Importing the libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Importing the dataset
dataset = pd.read_csv('Churn_Modelling.csv')
X = dataset.iloc[:, 3:13].values
y = dataset.iloc[:, 13].values

# Encoding categorical data
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
labelencoder_X_2 = LabelEncoder()
X[:, 2] = labelencoder_X_2.fit_transform(X[:, 2])
onehotencoder = OneHotEncoder(categorical_features = [2])
X = onehotencoder.fit_transform(X).toarray()
X = X[:, 1:] # To remove dummy var trap

# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)

# Fitting XGBoost to the Training set
from xgboost import XGBClassifier
classifier = XGBClassifier()
classifier.fit(X_train, y_train)

# Predicting a new customer's churn status
customerID = 'C123456'
new_customer = [customerID, X_train[0, 1], X_train[0, 2], X_train[0, 3], X_train[0, 4], X_train[0, 5], 
                X_train[0, 6], X_train[0, 7], X_train[0, 8], X_train[0, 9], X_train[0, 10], X_train[0, 11]]

new_customer = np.array(new_customer).reshape((1,-1))

new_customer[:, 2] = labelencoder_X_2.transform(new_customer[:, 2])
new_customer = onehotencoder.transform(new_customer).toarray()
new_customer = new_customer[:, 1:] # To remove dummy var trap

y_pred = classifier.predict(new_customer)

if y_pred == 0:
    print('The customer with ID {} will not churn.'.format(customerID))
else:
    print('The customer with ID {} will churn.'.format(customerID))
Generate a Python program which will classify a given set of words into two groups: nouns and verbs.  """
Generate a Python program which will classify a given set of words into two groups: nouns and verbs.
"""

import nltk 

def classify_words(words):
    # initialize empty dictionaries
    nouns = {}
    verbs = {}

    # extract parts-of-speech
    for word in words:
        pos = nltk.pos_tag([word])[0][1]
        # add to nouns or verbs
        if pos.startswith('N'):
            nouns[word] = pos
        elif pos.startswith('V'):
            verbs[word] = pos
    
    return nouns,verbs

if __name__ == '__main__':
    words = ['apple', 'walk', 'write', 'run']
    nouns, verbs = classify_words(words)
    print('Nouns:', nouns)
    print('Verbs:', verbs)
Develop an algorithm in Python that finds the minimum number of coins required to make a given amount. 8 def minCoins(amount):  
  
    # Initializing the list of coins with the given amount 
    coins = [1, 2, 5] 
    num_coins = [999999999] * (amount+1) 
    num_coins[0] = 0
  
    for i in range(1, amount+1): 
        for j in coins: 
            if j <= i: 
                sub_res = num_coins[i-j] 
                if sub_res + 1 < num_coins[i]: 
                    num_coins[i] = sub_res + 1
  
    return num_coins[amount] 

print(minCoins(8))
Given a list of integers, write a Python program to compute the maximum difference between any two numbers of the list? [4, 8, 2, 10, 6] def max_difference(numbers):
 max_diff = 0
 for i in range(len(numbers)-1):
 for j in range(i+1, len(numbers)):
 cur_diff = abs(numbers[i] - numbers[j])
 if cur_diff > max_diff:
 max_diff = cur_diff
 return max_diff

result = max_difference([4, 8, 2, 10, 6])
print(result)
Generate a machine learning model in Python that can predict the probability of success in a given project.  import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression 

# Load the dataset 
df = pd.read_csv('data.csv')

# Separate the target variable and input variables 
X = df.drop('SuccessProb', axis=1)
y = df['SuccessProb']

# Split data into train and test sets 
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#Build the logistic regression model 
model = LogisticRegression()
model.fit(X_train, y_train)

# Make predictions 
predictions = model.predict_proba(X_test)
Write a function in Python to count the number of vowels in a string.  def count_vowels(string):
    count = 0
    vowels = set("aeiouAEIOU")
    for letter in string:
        if letter in vowels:
            count += 1
    return count
Create a Python function to encode an input string using the Caesar Cipher Not applicable def caesar_cipher(input_string, shift):
    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    output_string = ''

    for char in input_string:
        if char in alphabet:
            char_index = alphabet.find(char)
            new_char_index = char_index + shift
            output_string += alphabet[new_char_index % len(alphabet)]
        else:
            output_string += char

    return output_string
Write a Python program to generate a random password of 8 characters.  import string
import random

def generate_password():
    chars = string.ascii_letters 
    size = 8
    return ''.join(random.choice(chars) for x in range(size))

print(generate_password())
Utilizing the given data, write a Python code to calculate the average of numbers stored in a list. list = [2, 3, 6, 8, 9] def calculate_average(lst):
sum = 0
for num in lst:
 sum+=num
avg = sum/len(lst)
return avg

list = [2, 3, 6, 8, 9]
average = calculate_average(list)
print("Average of list:", average)
Write a Python program that takes two strings and returns the longest common subsequence between the two strings. String1 = "ABCDAF"
String2 = "ACBCF" def lcs(string1, string2):
 n = len(string1)
 m = len(string2)

 dp = [[0 for x in range(m + 1)] for x in range(n + 1)] 

# fill dp table in bottom up manner 
for i in range(n + 1): 
 for j in range(m + 1): 
   if i == 0 or j == 0: 
    dp[i][j] = 0
   elif string1[i-1] == string2[j-1]: 
    dp[i][j] = dp[i-1][j-1] + 1
   else: 
    dp[i][j] = max(dp[i-1][j], dp[i][j-1]) 

 index = dp[n][m] 

# Create an array of size of lcs 
longest_common_subsequence = [""] * (index + 1) 
longest_common_subsequence[index] = "" 

# Start from the right-most-bottom-most corner and 
# one by one store characters in lcs[] 
i = n 
j = m 
while i > 0 and j > 0: 

	# If current character in X[] and Y are same, then 
	# current character is part of LCS 
	if string1[i-1] == string2[j-1]: 
		longest_common_subsequence[index - 1] = string1[i-1] 
		i-=1
		j-=1
		index-=1

	# If not same, then find the larger of two and 
	# go in the direction of larger value 
	elif dp[i-1][j] > dp[i][j-1]: 
		i-=1
	else: 
		j-=1

return "".join(longest_common_subsequence)
Generate a program in Python for merging two sorted lists into one.  def merge_sorted_lists(list1, list2):
    merged_list = []
    i = 0
    j = 0
    while i < len(list1) and j < len(list2):
        if list1[i] < list2[j]:
            merged_list.append(list1[i])
            i += 1
        else:
            merged_list.append(list2[j])
            j += 1
    merged_list += list1[i:]
    merged_list += list2[j:]
 
    return merged_list
This code defines a Python class called "techsupport_args" that provides additional arguments for fetching the techsupport resource. The class has a property called "scope" that can be set to either "NODE" or "CLUSTER" to specify whether to run showtechsupport on the present node or all cluster nodes. To use this class, create an instance of it and set the "scope" property as desired.  #
# Copyright (c) 2008-2015 Citrix Systems, Inc.
#
#   Licensed under the Apache License, Version 2.0 (the "License")
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#


class techsupport_args :
	""" Provides additional arguments required for fetching the techsupport resource.
	"""
	def __init__(self) :
		self._scope = ""

	@property
	def scope(self) :
		"""Use this option to run showtechsupport on present node or all cluster nodes.<br/>Default value: NODE<br/>Possible values = NODE, CLUSTER.
		"""
		try :
			return self._scope
		except Exception as e:
			raise e

	@scope.setter
	def scope(self, scope) :
		"""Use this option to run showtechsupport on present node or all cluster nodes.<br/>Default value: NODE<br/>Possible values = NODE, CLUSTER
		"""
		try :
			self._scope = scope
		except Exception as e:
			raise e

	class Scope:
		NODE = "NODE"
		CLUSTER = "CLUSTER"


Generate a neural network model with TensorFlow and Python for classifying hand-written digits from the MNIST dataset. Not applicable import tensorflow as tf

# Import MNIST data
from tensorflow.examples.tutorials.mnist import input_data
mnist = input_data.read_data_sets("/tmp/data", one_hot=True)

# Parameters
learning_rate = 0.001
training_epochs = 15
batch_size = 100
display_step = 1

# Network Parameters
n_hidden_1 = 256 # 1st layer number of neurons
n_hidden_2 = 256 # 2nd layer number of neurons
n_input = 784 # MNIST data input (img shape: 28*28)
n_classes = 10 # MNIST total classes (0-9 digits)

# tf Graph input
X = tf.placeholder("float", [None, n_input])
Y = tf.placeholder("float", [None, n_classes])

# Store layers weight & bias
weights = {
    'h1': tf.Variable(tf.random_normal([n_input, n_hidden_1])),
    'h2': tf.Variable(tf.random_normal([n_hidden_1, n_hidden_2])),
    'out': tf.Variable(tf.random_normal([n_hidden_2, n_classes]))
}
biases = {
    'b1': tf.Variable(tf.random_normal([n_hidden_1])),
    'b2': tf.Variable(tf.random_normal([n_hidden_2])),
    'out': tf.Variable(tf.random_normal([n_classes]))
}


# Create model
def multilayer_perceptron(x):
    # Hidden fully connected layer with 256 neurons
    layer_1 = tf.add(tf.matmul(x, weights['h1']), biases['b1'])
    # Hidden fully connected layer with 256 neurons
    layer_2 = tf.add(tf.matmul(layer_1, weights['h2']), biases['b2'])
    # Output fully connected layer with a neuron for each class
    out_layer = tf.matmul(layer_2, weights['out']) + biases['out']
    return out_layer

# Construct model
logits = multilayer_perceptron(X)

# Define loss and optimizer
loss_op = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(
    logits=logits, labels=Y))
optimizer = tf.train.AdamOptimizer(learning_rate=learning_rate)
train_op = optimizer.minimize(loss_op)

# Initializing the variables
init = tf.global_variables_initializer()

# Train model
model = tf.Session()
model.run(init)

# Training cycle
for epoch in range(training_epochs):
    avg_cost = 0.
    total_batch = int(mnist.train.num_examples/batch_size)
    # Loop over all batches
    for i in range(total_batch):
        batch_x, batch_y = mnist.train.next_batch(batch_size)
        # Run optimization op (backprop) and cost op (to get loss value)
        _, c = model.run([train_op, loss_op], feed_dict={X: batch_x,
                                                        Y: batch_y})
        # Compute average loss
        avg_cost += c / total_batch
    # Display logs per epoch step
    if epoch % display_step == 0:
        print("Epoch:", '%04d' % (epoch+1), "cost=", \
            "{:.9f}".format(avg_cost))
print("Optimization Finished!")

# Test model
pred = tf.nn.softmax(logits)  # Apply softmax to logits
correct_prediction = tf.equal(tf.argmax(pred, 1), tf.argmax(Y, 1))
# Calculate accuracy
accuracy = tf.reduce_mean(tf.cast(correct_prediction, "float"))
print("Accuracy:", accuracy.eval({X: mnist.test.images, Y: mnist.test.labels}, model))
Write a function in Python that takes two lists as arguments and return all their common elements. [1, 3, 5, 7], [3, 4, 5, 8] def common_elements(list1, list2):
    common = []
    for num in list1:
        if num in list2:
            common.append(num)
    return common

print(common_elements([1, 3, 5, 7], [3, 4, 5, 8]))
Write an algorithm in Python that takes a string of characters and prints out the frequency of each character. "Hello, world!" """
Write an algorithm in Python that takes a string of characters and 
prints out the frequency of each character.
"""

def count_frequency(text):
    freq = {}
    for c in text:
        if c in freq:
            freq[c] += 1
        else:
            freq[c] = 1
    for key,value in freq.items():
        print(key + ': ' + str(value))

if __name__ == '__main__':
    text = "Hello, world!"
    count_frequency(text)
Output the sum of numbers in a list in Python. [1, 2, 3, 4, 5] def list_sum(inpList):
    sum = 0
    for num in inpList:
        sum += num
    return sum

print(list_sum([1, 2, 3, 4, 5]))
Create a Python program to aggregate multiple lists containing strings into a single list. [["Apple", "Banana", "Orange"], ["Carrots", "Broccoli"], ["Dog", "Cat", "Rabbit", "Fish"]] """
Aggregate multiple lists containing strings into a single list
"""

def aggregate_lists(lists):
  agg_list = []
  for l in lists:
    agg_list += l
  return agg_list

if __name__ == '__main__':
  lists = [
    ["Apple", "Banana", "Orange"], 
    ["Carrots", "Broccoli"], 
    ["Dog", "Cat", "Rabbit", "Fish"]
  ]
  print(aggregate_lists(lists))
Classify the following objects using a decision tree in Python:

* A basketball
* A tennis ball  from sklearn.tree import DecisionTreeClassifier

X = [['basketball'],[‘tennis ball']]
y = ['ball', 'ball']

clf = DecisionTreeClassifier()
clf.fit(X,y)

prediction = clf.predict([['basketball']])
print(prediction)
# Output: ['ball']
Generate a Python dictionary from a given list of strings. ["Apple", "Banana", "Carrot"] # Create a dictionary from a list
my_dict = {key: value for key, value in enumerate(["Apple", "Banana", "Carrot"])}

# Print dictionary
print(my_dict)
Write a Python function to take a text string as an input, and generate a table of the frequencies of each letter in the string. sample_string = "HelloWorld" def find_frequencies(sample_string):
   frequency_table = dict()
   for char in sample_string:
      if char in frequency_table:
         frequency_table[char] += 1
      else:
         frequency_table[char] = 1
   return frequency_table

result = find_frequencies("HelloWorld")
print(result)
Write an algorithm in Python that takes a 2D matrix as input and returns the maximum sum subarray. [[1, -2, 3], [4, 5, -6], [7, 8, 9]] def max_sum_subarray(arr):
    max_sum = None
 
    for i in range(len(arr)):
        for j in range(len(arr[i])):
            total_sum = 0
            for y in range(i, len(arr)):
                for x in range(j, len(arr[y])):
                    total_sum += arr[y][x]
 
            if max_sum is None or total_sum > max_sum:
                max_sum = total_sum
 
    return max_sum
 
arr = [[1, -2, 3], [4, 5, -6], [7, 8, 9]]
print(max_sum_subarray(arr))

# Output should be 19
Design a data structure in Python to keep track of a student's attendance.  class Student:
    def __init__(self, name):
        self.name = name
        self.attendance_record = {}
 
    def mark_attendance(self, date, attended):
        self.attendance_record[date] = attended
 
    def get_attendance_record(self):
        return self.attendance_record
Code a function in Python to identify a valid email address.  import re

def is_valid_email(email):
    regex = '^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$'
    return re.search(regex, email)
Code an algorithm in Python to optimize a sales plan for a given company. The company sells furniture with 3 products: chairs, desks, and couches. Each product has 100 units in stock and a target quantity for sale. 
The objective is to maximize profit. import numpy as np

# target values
target_chairs = 25
target_desks = 50
target_couches = 75

# list of prices for each product
prices = [50, 75, 100]

# function to calculate profit
def calculate_profit(chairs, desks, couches):
 profit = chairs * prices[0] + desks * prices[1] + couches * prices[2]
 return profit
 
# define our range
upper_bound = np.array([100, 100, 100])
lower_bound = np.array([0, 0, 0])

# define our variables
x0 = np.array([25, 50, 75])

# define our objective function
def obj_func(x):
 profit = calculate_profit(*x)
 return -1 * profit

# optimization
res = minimize(obj_func, x0, bounds=(lower_bound, upper_bound))

# print the results
print(f'Optimal quantities:\nchairs: {int(res.x[0])}\ndesks: {int(res.x[1])}\ncouches: {int(res.x[2])}\nTotal Profit: {int(-res.fun)}')
Create a K-Nearest Neighbors classifier model in Python for predicting the sale price of a used car. 1,Toyota,Corolla,110000,Petrol,Manual,1990,30,3000 import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier

# list of features and labels
features = np.array([[110000, 'Petrol', 'Manual', 1990, 30, 3000]])
labels = np.array([[1]])

# perform data preprocessing
X_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.2)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# create the model
model = KNeighborsClassifier()
model.fit(X_train_scaled, y_train)

# predict sales price
predicted_price = model.predict([X_test_scaled[0]])

print("Predicted sale price:", predicted_price[0])
Create a Flask API endpoint in Python that accepts an array of numbers and returns the average of the numbers Not applicable from flask import Flask, request, jsonify

app = Flask(name)

@app.route('/calculate_average', methods=['POST'])
def calculate_average():
 numbers = request.json['numbers']

 # calculate the sum
 total = 0
 for number in numbers:
 total += number

 # calculate the average
 average = total / len(numbers)

 return jsonify({'average': average})

if name == 'main':
 app.run(debug=True)
Create a Python module that evaluates a given expression and returns the result "2+2*2" def evaluate(expr):
    return eval(expr)
Create a HTML page that displays a bar chart of the most popular programming languages. JavaScript, Python, C++, Java, Go, C <!DOCTYPE html>
<html>

<head>
 <title>Popular Programming Languages</title>
 <script src="https://d3js.org/d3.v5.min.js"></script>
</head>

<body>
 <h1>Popular Programming Languages</h1>
 <div id="graph"></div>
 <script>
 const data = [
  { language: 'JavaScript', count: 25 },
  { language: 'Python', count: 18 },
  { language: 'C++', count: 13 },
  { language: 'Java', count: 9 },
  { language: 'Go', count: 7 },
  { language: 'C', count: 6 }
 ];

 const w = 500;
 const h = 500;
 const padding = 20;

 const svg = d3.select("#graph")
   .append("svg")
   .attr("width", w)
   .attr("height", h);

 const xScale = d3.scaleBand()
   .domain(data.map(d => d.language))
   .range([padding, w - padding]);

 const yScale = d3.scaleLinear()
   .domain([0, d3.max(data, d => d.count)])
   .range([h - padding, padding]);

 const chart = svg.selectAll("rect")
   .data(data)
   .enter()
   .append("rect")
   .attr("x", d => xScale(d.language))
   .attr("y", d => yScale(d.count))
   .attr("width", xScale.bandwidth())
   .attr("height", d => h - yScale(d.count) - padding)
   .attr("fill", "teal");

 const xAxis = d3.axisBottom(xScale);
 svg.append("g")
   .attr("transform", `translate(0, ${h - padding})`)
   .call(xAxis);

 const yAxis = d3.axisLeft(yScale);
 svg.append("g")
   .attr("transform", `translate(${padding}, 0)`)
   .call(yAxis);
 </script>
</body>
</html>
Create a data science program using Python and Scikit-Learn to predict house prices. Not applicable #import dependencies
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

#load dataset
df = pd.read_csv('dataset.csv')

#split dataset into X and Y
X = df.drop('price', axis=1)
Y = df['price']

#split into training and test sets
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=0)

#create and fit the model
model = LinearRegression()
model.fit(X_train, Y_train)

#predict using the model
Y_pred = model.predict(X_test)

#calculate the mean squared error
mse = mean_squared_error(Y_test, Y_pred)
print("Mean Squared Error:", mse)

#see the trained parameters
print("Intercept:", model.intercept_)
print("Coefficients:", model.coef_)
Develop a web service to process text in a REST API using Python.  #import libraries
from flask import Flask, jsonify, request
import re

#initialize flask 
app = Flask(__name__)

#define the endpoint
@app.route('/process_text')
def process_text():
    #get text from the request
    text = request.args.get('text')
    #process the text
    processed_text = re.sub('[^a-zA-Z0-9]', '', text)
    #return the result
    return jsonify({"result" : processed_text})

#run the server
app.run(host='0.0.0.0')
Rewrite a Python function to make it more efficient. def binary_search(arr, x):
    l = 0
    r = len(arr)
    while l < r:
        m = (r + l) // 2
        if x == arr[m]:
            return m
        elif x > arr[m]:
            l = m + 1
        else:
            r = m       
    return -1 def binary_search(arr, x):
    l = 0
    r = len(arr) - 1
    while l <= r:
        m = l + (r - l) // 2
        if x == arr[m]:
            return m
        elif x > arr[m]:
            l = m + 1
        else:
            r = m - 1
    return -1
Create a Python program to calculate the grade for a student. Maths = 85
English = 70
Science = 90 Maths = 85
English = 70
Science = 90

# Calculate the average 
average = (Maths + English + Science) / 3

# Check the grade
if average >= 80:
    grade = 'A'
elif average >= 70:
    grade = 'B'
elif average >= 60:
    grade = 'C'
elif average >= 50:
    grade = 'D'
else:
    grade = 'F'

# Print the grade
print(grade)
Create a Python flask application that acts as a REST API for a simple ToDo List. The API should support creating, getting, updating, and deleting tasks from the list. Not applicable from flask import Flask, jsonify, request
import sqlite3

app = Flask(__name__)
conn = sqlite3.connect('data.db')

# create the database
c = conn.cursor()
c.execute('''
CREATE TABLE IF NOT EXISTS tasks (
 id integer PRIMARY KEY,
 title text NOT NULL,
 done boolean NOT NULL
)
''')
conn.commit()

# Create a task
@app.route('/tasks', methods=['POST'])
def create_task():
 data = request.get_json()
 c = conn.cursor()
 c.execute('INSERT INTO tasks (title, done) VALUES (?,?)', (data['title'], False))
 conn.commit()
 c.execute('SELECT * FROM tasks WHERE id=?', (c.lastrowid,))
 new_task = c.fetchone()
 return jsonify({'task': new_task}), 201

# Get all tasks
@app.route('/tasks', methods=['GET'])
def get_tasks():
 c = conn.cursor()
 c.execute('SELECT * FROM tasks')
 all_tasks = c.fetchall()
 return jsonify({'tasks': all_tasks}), 200

# Update a task
@app.route('/tasks/<int:task_id>', methods=['PUT'])
def update_task(task_id):
 data = request.get_json()
 c = conn.cursor()
 c.execute('UPDATE tasks SET title=?, done=? WHERE id=?', (data['title'], data['done'], task_id))
 conn.commit()
 c.execute('SELECT * FROM tasks WHERE id=?', (task_id,))
 updated_task = c.fetchone()
 return jsonify({'task': updated_task}), 200

# Delete a task
@app.route('/tasks/<int:task_id>', methods=['DELETE'])
def delete_task(task_id):
 c = conn.cursor()
 c.execute('DELETE FROM tasks WHERE id=?', (task_id,))
 conn.commit()
 return '', 204

if __name__ == '__main__':
 app.run(debug=True)
Create a basic Python program to generate a string of unique random characters. Length of the string: 10 import random
import string

def generateRandomString(length):
 characters = string.ascii_lowercase + string.ascii_uppercase + string.digits

 return ''.join(random.choice(characters) for _ in range(length))

print(generateRandomString(10))
Design a python program which accepts a number from the user and displays its prime factorization  def prime_factorization(n):
    # list to store prime factors
    prime_factors = [] 
  
    # remove any factors of 2 first
    while n % 2 == 0: 
        prime_factors.append(2) 
        n = n / 2
  
    # n must be odd at this point 
    for i in range(3,int(math.sqrt(n))+1,2): 
          
        # while i divides n , print i ad divide n 
        while n % i== 0: 
            prime_factors.append(int(i)) 
            n = n / i 
      
    # Condition if n is a prime 
    # number greater than 2 
    if n > 2: 
        prime_factors.append(int(n)) 
    
    return prime_factors
The given code is a Python script that defines a class and several methods for handling cross-pod requests. To use this code, you should create an instance of the ConduitPOST class and call its methods to test different scenarios for cross-pod requests. The methods include tests for receiving requests with no shared secret header, requests with the wrong MIME type, requests with invalid JSON data, and requests with missing or unsupported actions. The code also includes a test for a successful cross-pod request with the "ping" action, and a test for a successful request with a custom "fake" action that is supported by the FakeConduit class. To run these tests, you will need to have the required dependencies installed and set up a test environment with a server and a store.  ##
# Copyright (c) 2005-2017 Apple Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##

from twext.python.clsprop import classproperty

import txweb2.dav.test.util
from txweb2 import http_headers, responsecode
from txweb2.dav.util import allDataFromStream
from txweb2.test.test_server import SimpleRequest

from twisted.internet.defer import inlineCallbacks, succeed

from txdav.caldav.datastore.scheduling.ischedule.localservers import (
    ServersDB, Server
)
from txdav.common.datastore.podding.resource import ConduitResource
from txdav.common.datastore.test.util import populateCalendarsFrom, CommonCommonTests
import json
from txdav.common.datastore.podding.conduit import PoddingConduit


class ConduitPOST (CommonCommonTests, txweb2.dav.test.util.TestCase):

    class FakeConduit(PoddingConduit):

        def recv_fake(self, txn, j):
            return succeed({
                "back2u": j["echo"],
                "more": "bits",
            })

    @inlineCallbacks
    def setUp(self):
        yield super(ConduitPOST, self).setUp()

        serversDB = ServersDB()
        self.thisServer = Server("A", "http://127.0.0.1", "A", True)
        serversDB.addServer(self.thisServer)
        yield self.buildStoreAndDirectory(serversDB=serversDB)

        self.site.resource.putChild("conduit", ConduitResource(self.site.resource, self.storeUnderTest()))

        yield self.populate()

    @inlineCallbacks
    def populate(self):
        yield populateCalendarsFrom(self.requirements, self.storeUnderTest())
        self.notifierFactory.reset()

    @classproperty(cache=False)
    def requirements(cls):  # @NoSelf
        return {
            "user01": {
                "calendar_1": {
                },
                "inbox": {
                },
            },
            "user02": {
                "calendar_1": {
                },
                "inbox": {
                },
            },
            "user03": {
                "calendar_1": {
                },
                "inbox": {
                },
            },
        }

    @inlineCallbacks
    def test_receive_no_secret(self):
        """
        Cross-pod request fails when there is no shared secret header present.
        """

        request = SimpleRequest(
            self.site,
            "POST",
            "/conduit",
            headers=http_headers.Headers(rawHeaders={
                "Content-Type": ("text/plain",)
            }),
            content="""Hello, World!
""".replace("\n", "\r\n")
        )

        response = (yield self.send(request))
        self.assertEqual(response.code, responsecode.FORBIDDEN)

    @inlineCallbacks
    def test_receive_wrong_mime(self):
        """
        Cross-pod request fails when Content-Type header is wrong.
        """

        request = SimpleRequest(
            self.site,
            "POST",
            "/conduit",
            headers=http_headers.Headers(rawHeaders={
                "Content-Type": ("text/plain",),
                self.thisServer.secretHeader()[0]: self.thisServer.secretHeader()[1],
            }),
            content="""Hello, World!
""".replace("\n", "\r\n")
        )

        response = (yield self.send(request))
        self.assertEqual(response.code, responsecode.BAD_REQUEST)

    @inlineCallbacks
    def test_receive_invalid_json(self):
        """
        Cross-pod request fails when request data is not JSON.
        """

        request = SimpleRequest(
            self.site,
            "POST",
            "/conduit",
            headers=http_headers.Headers(rawHeaders={
                "Content-Type": ("application/json",),
                self.thisServer.secretHeader()[0]: self.thisServer.secretHeader()[1],
            }),
            content="""Hello, World!
""".replace("\n", "\r\n")
        )

        response = (yield self.send(request))
        self.assertEqual(response.code, responsecode.BAD_REQUEST)

    @inlineCallbacks
    def test_receive_bad_json(self):
        """
        Cross-pod request fails when JSON data does not have an "action".
        """

        request = SimpleRequest(
            self.site,
            "POST",
            "/conduit",
            headers=http_headers.Headers(rawHeaders={
                "Content-Type": ("application/json",),
                self.thisServer.secretHeader()[0]: self.thisServer.secretHeader()[1],
            }),
            content="""
{
    "foo":"bar"
}
""".replace("\n", "\r\n")
        )

        response = (yield self.send(request))
        self.assertEqual(response.code, responsecode.BAD_REQUEST)

    @inlineCallbacks
    def test_receive_ping(self):
        """
        Cross-pod request works with the "ping" action.
        """

        request = SimpleRequest(
            self.site,
            "POST",
            "/conduit",
            headers=http_headers.Headers(rawHeaders={
                "Content-Type": ("application/json",),
                self.thisServer.secretHeader()[0]: self.thisServer.secretHeader()[1],
            }),
            content="""
{
    "action":"ping"
}
""".replace("\n", "\r\n")
        )

        response = (yield self.send(request))
        self.assertEqual(response.code, responsecode.OK)
        data = (yield allDataFromStream(response.stream))
        j = json.loads(data)
        self.assertTrue("result" in j)
        self.assertEqual(j["result"], "ok")

    @inlineCallbacks
    def test_receive_fake_conduit_no_action(self):
        """
        Cross-pod request fails when conduit does not support the action.
        """

        store = self.storeUnderTest()
        self.patch(store, "conduit", self.FakeConduit(store))

        request = SimpleRequest(
            self.site,
            "POST",
            "/conduit",
            headers=http_headers.Headers(rawHeaders={
                "Content-Type": ("application/json",),
                self.thisServer.secretHeader()[0]: self.thisServer.secretHeader()[1],
            }),
            content="""
{
    "action":"bogus",
    "echo":"bravo"
}
""".replace("\n", "\r\n")
        )

        response = (yield self.send(request))
        self.assertEqual(response.code, responsecode.BAD_REQUEST)

    @inlineCallbacks
    def test_receive_fake_conduit(self):
        """
        Cross-pod request works when conduit does support the action.
        """

        store = self.storeUnderTest()
        self.patch(store, "conduit", self.FakeConduit(store))

        request = SimpleRequest(
            self.site,
            "POST",
            "/conduit",
            headers=http_headers.Headers(rawHeaders={
                "Content-Type": ("application/json",),
                self.thisServer.secretHeader()[0]: self.thisServer.secretHeader()[1],
            }),
            content="""
{
    "action":"fake",
    "echo":"bravo"
}
""".replace("\n", "\r\n")
        )

        response = (yield self.send(request))
        self.assertEqual(response.code, responsecode.OK)
        data = (yield allDataFromStream(response.stream))
        j = json.loads(data)
        self.assertTrue("result" in j)
        self.assertEqual(j["result"], "ok")
        self.assertTrue("value" in j)
        self.assertEqual(j["value"], {"back2u": "bravo", "more": "bits"})

Generate a Python program to count the number of pairs with given sum x X = 10 def count_pairs(numbers, x):
    count = 0
    i, j = 0, len(numbers) - 1
    while i < j: 
        sum = numbers[i] + numbers[j]
        if sum == x: 
            count += 1
            i += 1
        elif sum < x: 
            i += 1 
        else: 
            j -= 1
    return count
Create a class in Python that implements the stack data structure.  class Stack:
 def __init__(self):
 self.stack = []
 
 def push(self, item):
 self.stack.append(item)
 
 def pop(self):
 if self.is_empty():
 return None
 return self.stack.pop()
 
 def is_empty(self):
 return len(self.stack) == 0
Create a Python script to generate a dictionary that includes numerical data from a given list. list1 = [1, 2, 3, 4, 5] def generate_dict(list1):
    my_dict = {}
    for item in list1:
        my_dict[item] = item ** 2
    return my_dict
Develop a program to find the maximum sum subarray of size k in an array in Python. [1, 2, 3, 4, 5], 3 def max_sum_subarray(arr, k): 
    maxSum = float("-inf") 
    windowSum = 0
    windowStart = 0
  
    for windowEnd in range(len(arr)): 
        windowSum += arr[windowEnd] 
  
        if windowEnd >= k - 1: 
            maxSum = max(maxSum, windowSum) 
            windowSum -= arr[windowStart] 
            windowStart += 1
  
    return maxSum

arr = [1, 2, 3, 4, 5] 
k = 3

max_sum = max_sum_subarray(arr, k) 
print("Maximum Sum: " + str(max_sum))
Develop an array sorting algorithm in Python that sorts an array in-place, requiring less than O(n log n) time complexity. [6,5,3,1,8,7,2,4] def sort_array(arr):
 n = len(arr)
 
 # Iterate through the array
 for i in range(n):
 
 # Find the minimum element 
 min_ind = i
 for j in range(i + 1, n):
 if arr[min_ind] > arr[j]:
 min_ind = j
 
 # Swap the found minimum element with the first element 
 arr[i], arr[min_ind] = arr[min_ind], arr[i]

# Driver code to test above 
arr = [6,5,3,1,8,7,2,4]
sort_array(arr)

print ("Sorted array is:")
for i in range(n):
 print ("%d" %arr[i]),
Develop a program in Python to generate random data with the same statistical properties as the input.  import numpy as np
from scipy.stats import describe

def generate_random_data(data):
    # Calculate the descriptor statistics
    desc = describe(data)
    
    # Generate random data from the same distribution
    random_data = np.random.normal(loc=desc.mean, scale=np.sqrt(desc.variance), size=desc.nobs)
    
    return random_data
Create a text-based adventure game in Python where the user must navigate through a world of obstacles. The user is in a dark dungeon and must find the exit. print("You find yourself in a dark dungeon with no apparent exit. What do you do?
Enter 'walk left', 'walk right', 'walk straight' or 'look around'")

move = input()

if move == 'walk left':
    print("You walk to the left and find a door with a lock. What do you do?")
elif move == 'walk right':
    print("You walk to the right and find a secret passage leading through the wall. What do you do?")
elif move == 'walk straight':
    print("You walk straight and come to a dead end. What do you do?")
elif move == 'look around':
    print("You look around and see a lever on the wall. What do you do?")
Compute the frequency of the words in a sentence using Python. sentence = "Hi there, how are you?" def compute_word_frequency(sentence):
    words = sentence.split()
    frequency = {}

    for word in words:
        if word in frequency:
            frequency[word] += 1
        else:
            frequency[word] = 1
    return frequency
Write a code to find the number of distinct words in a string. "I love to code in Python" def count_distinct_words(string):
    words = string.split()  
    distinct_words = set(words)  
    return len(distinct_words)

if __name__ == '__main__':
    string = "I love to code in Python"
    print("Number of distinct words:", count_distinct_words(string))
Create a function in Python that takes in a string and returns the characters in reverse order. Hello def reverse_string(s): 
    return s[::-1]

result = reverse_string("Hello") 
print(result)
Generate a stack class in Python  class Stack(object):

    def __init__(self):
        self.items = []

    def isEmpty(self):
        return self.items == []

    def push(self, item):
        self.items.append(item)

    def pop(self):
        return self.items.pop()

    def peek(self):
        return self.items[len(self.items)-1]

    def size(self):
        return len(self.items)
Edit the following Python code to include a while loop: a = 0
b = 0 a = 0
b = 0

while a < 10:
    a += 1
    b = b + a

print(b)
Design a Greedy Algorithm in Python to implement the 0/1 knapsack problem. Not applicable class Item(object):
    # create the item with its associated values
    def __init__(self, n, v, w):
        self.name = n
        self.value = v
        self.weight = w

    # Evaluate the items by their value density
    def getValue(self):
        return self.value/self.weight

def knapsack(items, maxWeight):
    # sort items by value density in descending order
    items.sort(key=Item.getValue, reverse=True)
    totalValue = 0
    # iterate over the items
    for i in range(len(items)):
        if(maxWeight - items[i].weight >= 0):
            totalValue += items[i].value
            maxWeight -= items[i].weight
    return totalValue
Create a web service in Python which allows a user to register their email address.  from flask import Flask, request, redirect

app = Flask(__name__)

@app.route("/")
def home():
    return "<form action='/save' method='POST'><input type='text' name='email'/><input type='submit’/></form>"

@app.route("/save", methods=["POST"])
def save():
    email = request.form["email"]
    # save the email address to your database
    return redirect("/")

if __name__ == "__main__":
    app.run()
Create a Python script for sorting a list of integers. The list should be sorted with the selection sort algorithm. [5, 7, -2, 9, 3] def selection_sort(arr):
 n = len(arr)
 
 for i in range(n): 
 # Find the minimum element in remaining  
 # unsorted array 
 min_idx = i 
 for j in range(i+1, n): 
 if arr[min_idx] > arr[j]: 
 min_idx = j 
    
 # Swap the found minimum element with  
 # the first element         
 arr[i], arr[min_idx] = arr[min_idx], arr[i] 
  
# Driver code to test above 
arr = [5, 7, -2, 9, 3]
  
selection_sort(arr) 
  
print ("Sorted array") 
for i in range(len(arr)): 
 print("%d" %arr[i])
Create a website to monitor stock prices with a Python web scraper. Not applicable import requests
from bs4 import BeautifulSoup

url = 'https://www.example.com/stock-prices'
source = requests.get(url).text
soup = BeautifulSoup(source, 'html.parser')
stocks = soup.find_all('div', class_='stock-price')

for stock in stocks:
 # Extract stock name
 name = stock.find('h2').text
 # Extract stock price
 price = stock.find('span').text
 
 # Print stock name and price
 print(f'{name}: {price}')
Create a Python program to find all combinations of three numbers that add up to a given sum. targetSum = 7 def threeNumSum(arr, targetSum):
    combinations = []

    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            for k in range(j+1, len(arr)):
                if arr[i] + arr[j] + arr[k] == targetSum:
                    combination = [arr[i], arr[j], arr[k]]
                    combinations.append(combination)
    
    return combinations

arr = [2, 3, 4, 5, 6]
targetSum = 7
print(threeNumSum(arr, targetSum))
Design a Python program to detect if a given number is in the Fibonacci Sequence or not  def is_fib(num):
  if num == 0 or num == 1:
    return True
  first = 0
  second = 1
  while(num >= second):
    if second == num:
      return True
    third = first + second
    first = second
    second = third
  return False
Automate the process of building a Python program that takes in the names of two people as input, and outputs the age difference between them. John Doe, Jane Doe # Program to compute age difference between two persons

# Input
name1 = input('Enter name of first person: ')
name2 = input('Enter name of second person: ')

# Compute age difference
ages = {
 'John Doe': 35,
 'Jane Doe': 27
}

diff = abs(ages[name1] - ages[name2])

# Output
print(f'The age difference between {name1} and {name2} is {diff}.')
Generate a Python Program that sorts a list of numbers in non-increasing order [3, 8, 1, 5] def descending_sort(list): 
    list.sort(reverse=True) 
    return list

list = [3, 8, 1, 5]
result = descending_sort(list)
print(result)
Create a reinforcement learning model in Python for continuous control of a lunar landing spacecraft using neural networks. Not applicable import gym
import tensorflow as tf

# Create a Lunar Lander environment
env = gym.make('LunarLander-v2')

# Initialize state and action dimensions
state_dim = env.observation_space.shape[0]
action_dim = env.action_space.n

# Create a neural network model
model = tf.keras.Sequential()
model.add(tf.keras.layers.Dense(128, input_dim=state_dim, activation='relu'))
model.add(tf.keras.layers.Dense(64, activation='relu'))
model.add(tf.keras.layers.Dense(action_dim))

# Initialize an Agent for the environment
agent = Agent(env, model)

# Train the agent
agent.train()
Generate a python program to read 10 numbers and store their sum in a variable.  sum = 0

for i in range(10):
    num = int(input("Input number: "))
    sum += num

print("Sum:", sum)
Create a class in Python to store student information. The class should contain all relevant information including student id, name, email, and contact. class Student:
    def __init__(self, student_id, name, email, contact_no):
        self.student_id = student_id
        self.name = name
        self.email = email
        self.contact_no = contact_no
        
    def get_details(self):
        return f"Student ID: {self.student_id}, Name: {self.name}, Email: {self.email}, Contact No.: {self.contact_no}"
Develop a python program that sorts a given list of words in lexicographic order. [apple, bike, dog, cat] # Sort a list of words in lexicographic order
words = ["apple", "bike", "dog", "cat"]

# Sort the list
words.sort()

# Print the list
print(words)

# Output:
# ['apple', 'bike', 'cat', 'dog']
Generate a 5-digit pin code using a Python program.  import random
 
def generate_pin():
    # generates a 5 digit pin
    pin = ""
    for i in range(5):
        pin += str(random.randint(0,9))
    return pin
 
pin = generate_pin()
print("Generated pin is:", pin)
Create a REST API in Python using the Flask framework that allows a user to view all registered users, add new users, update a user's information, and delete a user. Not applicable from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy

app = Flask(name)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/db.sqlite'
db = SQLAlchemy(app)

class User(db.Model):
 id = db.Column(db.Integer, primary_key=True)
 first_name = db.Column(db.String(120))
 last_name = db.Column(db.String(120))

db.create_all()

@app.route('/users', methods=['GET'])
def get_users():
 users = User.query.all()
 return jsonify([user.serialize() for user in users])

@app.route('/users', methods=['POST'])
def add_user():
 user = User(first_name=request.json['first_name'],
             last_name=request.json['last_name'])
 db.session.add(user)
 db.session.commit()
 return user.serialize()

@app.route('/users/int:id', methods=['PUT'])
def update_user(id):
 user = User.query.get(id)
 user.first_name = request.json['first_name']
 user.last_name = request.json['last_name']
 db.session.commit()
 return user.serialize()

@app.route('/users/int:id', methods=['DELETE'])
def delete_user(id):
 User.query.filter_by(id=id).delete()
 db.session.commit()
 return {'message': 'User deleted'}

if name == 'main':
 app.run(debug=True)
Generate a Huffman encoded sequence for a given input string. "Hello" # Python program for Huffman Coding 
# A class that represents huffman node 
class Node: 
    def __init__(self, freq, data): 
        self.freq = freq 
        self.data = data 
        self.left = None
        self.right = None
 
def printEncodedSequence(root, str): 
    if root == None: 
        return
    # If the current node is leaf 
    if root.data != '$': 
        print(root.data + ": " + str) 
  
    # If left child is not null, add '0' to the string obtained so far 
    # The value of str is passed by the invocation of this function 
    if root.left != None: 
        printEncodedSequence(root.left, str + "0") 
  
    # If right child is not null, add '1' to the string obtained so far 
    if root.right != None: 
        printEncodedSequence(root.right, str + "1") 

# Output: H: 0
#        e: 10
#        l: 110
#        o: 111
Once the user has provided a list of numbers and a target number, suggest a Python function to check if any two numbers from the list sum up to the target.  def check_sum(numbers, target):
    for i in range(len(numbers)):
        for j in range(i+1, len(numbers)):
            if numbers[i] + numbers[j] == target:
                return True
    return False
Generate a Python program to find the closest pair of points in a two-dimensional plane.  import math

# List of points
points = [[2, 3], [12, 30], [40, 50], [5, 1], [12, 10], [3, 4]]

# Initialize variables 
min_distance = float('inf')
closest_pair = ()

# Loop through points
for i in range(len(points)):
    for j in range(i+1, len(points)):
        # calculate the distance
        distance = math.sqrt((points[i][0]-points[j][0])**2 + (points[i][1]-points[j][1])**2)

        # check if the distance is less than the minimum distance
        if distance < min_distance:
            min_distance = distance
            closest_pair = (points[i], points[j])

# Print the closest pair
print("The closest pair of points is:", closest_pair)
Develop a function in Python that takes in a string of sentences and removes all the punctuations. "This is a sample string!" import string

def remove_punctuations(s):
    return s.translate(str.maketrans('', '', string.punctuation))

if __name__ == '__main__':
    sentence = "This is a sample string!"
    print(remove_punctuations(sentence))
Construct a Python function that takes as input a string and returns the length of the longest word in the string. "This is an example string." def longest_word_length(input_string):
    longest_word_length = 0
    words = input_string.split()
    for word in words:
        if len(word) > longest_word_length:
            longest_word_length = len(word)
    return longest_word_length
Create a Python list comprehension to return all numbers divisible by 3 and 5 that are smaller than 10  [number for number in range(10) if number % 3 == 0 and number % 5 == 0]
Create a RESTful API with Python, using the Flask framework. Not applicable from flask import Flask, jsonify, request
app = Flask(__name__)

@app.route('/', methods=['GET'])
def home():
 return 'Welcome to the API'

@app.route('/data', methods=['POST'])
def add_data():
 data = request.get_json()
 # Do something with data

 return jsonify({'message': 'Data added successfully'})

@app.route('/data/int:id', methods=['GET'])
def get_data(id):
 data = # Retrieve data from database
 return jsonify({'data': data})

if __name__ == '__main__':
 app.run()
Design a neural network in Python to classify a set of data points into one of four different classes.  import tensorflow as tf
from tensorflow import keras
import numpy as np

# define 2-D data points with four different classes 
x_train = np.array([[1,2], [2,4], [4,2], [2,1], [4,4], [3,3], [3,1], [1,3]])
y_train = np.array([0,0,1,1,2,2,3,3])

# define the network model
model = keras.Sequential([
    keras.layers.Dense(32, activation='relu'),
    keras.layers.Dense(4, activation='softmax')
])

# compile the model 
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# train the model
model.fit(x_train, y_train, epochs=10)
Generate a Python program for grading multiple choice tests. The program should allow the user to input an answer key and a collection of scores and output the results including the number of correct answers and the overall percentage. answer_key = {1: 'A', 2: 'B', 3: 'A', 4: 'D'}
scores = {
'John': {1: 'A', 2: 'B', 3: 'A', 4: 'C'},
'Tom': {1: 'A', 2: 'A', 3: 'D', 4: 'A'}
} def grade_test(answer_key, scores):
 graded_results = {}
 total_questions = len(answer_key)

# Iterate over each student's test results
for name, results in scores.items():
 graded_results[name] = {
 'total_correct': 0,
 'percent': 0
 }
 num_correct = 0

# Iterate over each student's test answers
for qnum, answer in results.items():
 if answer == answer_key[qnum]:
 num_correct += 1

# Calculate the overall percentage
graded_results[name]['total_correct'] = num_correct
graded_results[name]['percent'] = (num_correct/total_questions)*100

# Return the graded results
return graded_results
Write a python program that prints out the number of times each letter appears in a given string. string = "Hello, World!" string = "Hello, World!"
for char in string:
 count = string.count(char)
 print(char + " appears " + str(count) + " times")

# Output
H appears 1 times
e appears 1 times
l appears 3 times
o appears 2 times
, appears 1 times
  appears 1 times
W appears 1 times
r appears 1 times
d appears 1 times
! appears 1 times
Use an if-else statement in Python to print a message depending on the value of a given integer. //Integer
int x = 15; if (x > 10) {
    print('The number is greater than 10')
} else {
    print('The number is less or equal than 10')
}
Generate a Python dictionary from two given lists. The dictionary should contain a list of keys and the corresponding value for each key should be the element from the second list. keys = ["apple", "orange", "pear"] 
values = [1, 2, 3] my_dictionary = dict(zip(keys, values))
Design a function in Python that takes in two parameters, x and y, and returns the sum of squares of those parameters (x^2 + y^2).  def sum_of_squares(x, y):
  return x**2 + y**2
Create a Python program to calculate the average number of items in a list. The list should be taken as input from the user. List elements: 1, 6, 5, 7 list_elements = input('List elements: ').split()

sum = 0
for num in list_elements:
 sum += int(num)

average = sum / len(list_elements)

print(f'The average number of items in the list is {average}.')
Can you explain the concept of quicksort in Python?  Quicksort is a divide-and-conquer algorithm that works by recursively partitioning a list into two sublists of items based on a pivot value. The left sublist contains all items less than the pivot value and the right sublist contains all items greater than the pivot value. The quicksort algorithm then recursively sorts these sublists and combines them back together to form the final sorted list.

In Python, one implementation of the quicksort algorithm is as follows:

def quicksort(arr): 
    if len(arr) <= 1:
        return arr
    else:
        pivot = arr[len(arr) // 2]
        left = [x for x in arr if x < pivot]
        middle = [x for x in arr if x == pivot]
        right = [x for x in arr if x > pivot]
        return quicksort(left) + middle + quicksort(right)
Write a function in Python that creates a random password of length 8 with at least two uppercase letters, one lowercase letter, one number, and one special character. Not applicable import random
import string

def random_password():
  char_length = 8
  characters = string.ascii_letters + string.digits + string.punctuation
  password = ''.join(random.choice(characters) for x in range(char_length))
  has_uppercase = any(x.isupper() for x in password)
  has_lowercase = any(x.islower() for x in password)
  has_numbers = any(x.isnumeric() for x in password)
  has_specials = any(x in string.punctuation for x in password)
  if has_uppercase+has_lowercase+has_numbers+has_specials >= 3:
    return password
  else:
    return random_password()

pwd = random_password
Write a Python code to print the items in a dictionary in the order of their occurrence in the dictionary. d = {1 : 'Red', 2 : 'Green', 3 : 'Blue'} for key, value in d.items():
    print(key, value)
Create a Python command-line program that takes in two users' birth dates and calculates the differences in years, months, and days between the two users' birthdays. User 1birthdate: 1989-09-26
User 2birthdate: 1997-03-15 import datetime

def calc_diff(user1, user2):
 date1 = datetime.datetime.strptime(user1, "%Y-%m-%d")
 date2 = datetime.datetime.strptime(user2, "%Y-%m-%d")
 
 days_diff = (date2 - date1).days

 years_diff = int(days_diff / 365)
 months_diff = int(days_diff % 365 / 30)
 days_diff = int(days_diff % 365 % 30)

 return years_diff, months_diff, days_diff

user1 = "1989-09-26"
user2 = "1997-03-15"

years_diff, months_diff, days_diff = calc_diff(user1, user2)

print(f"There is a difference of {years_diff} years, {months_diff} months, and {days_diff} days between the two users' birthdays.")
Make a python program to check the palindrome of a given word  def palindrome(word): 
    if word == word[::-1]: 
        return True
    else: 
        return False
Create an AWS Lambda function in Python that accepts a JSON object as input, processes it, and returns the result. {
 "x": 10,
 "y": 20
} import json

def handler(event, context):
 x = event["x"]
 y = event["y"]
 res = x + y
 return {
 "statusCode": 200,
 "body": json.dumps({"result": res})
 }
Develop a Python script to output the result of the following boolean expression: (not A or B) and (C or D) def booleanExpression(A, B, C, D):
    return (not A or B) and (C or D)
Implement a Python function to calculate the sum of all prime numbers between two given numbers, inclusive. 2 5 def prime_sum(start,end):
    total = 0 
    for num in range(start, end + 1):
        if num > 1:
            for i in range(2, num):
                if (num % i) == 0:
                    break 
            else: 
                total += num
    return total

if __name__ == "__main__":
    lower_limit = int(input('Input lower limit: '))
    upper_limit = int(input('Input upper limit: '))
    print(prime_sum(lower_limit, upper_limit))
Generate a Python script that prints out the first 15 odd numbers  for i in range(1, 30, 2):
    print(i)
Generate a Python program to delete the element at a given index from the given array. [1,2,3,4,5], index=3 def delete_element_at_index(arr, index):
    if index >= len(arr):
        raise Exception('index out of range')
    
    # Delete the element at the index
    del arr[index]

# Example array and index
my_arr = [1,2,3,4,5];
index = 3;

# Call the function
delete_element_at_index(my_arr, index)

# Print the array
print(my_arr)
Write a Python script to filter a list of text strings by removing all strings that contain a certain substring. word_list = ['hello', 'apple', 'this', 'is', 'a', 'word']
keyword = 'a' filtered_list = [x for x in word_list if keyword not in x]
# filtered_list = ['hello', 'this', 'word']
Create a python code to find the fastest path from a given source node to target node A source node of 3, a target node of 5, and the following weighted undirected graph
3->4 (5)
3->7 (3)
4->5 (3) graph = {
    3: {4: 5, 7: 3},
    4: {5: 3},
    5: {},
    7: {},
}
 
def find_fastest_path(graph, source, target):
    if source == target:
        return 0
    
    costs = {}
    
    for node in graph:
        costs[node] = float("inf")
        
    costs[source] = 0
    
    paths = {}
    paths[source] = [source]
    
    visited = set()
    
    while len(visited) != len(graph):
        current_node, current_cost = min(
            [(k, v) for k, v in costs.items() if k not in visited],
            key=lambda x:x[1]
        )
        visited.add(current_node)
        for neighbour, cost in graph[current_node].items():
            if current_cost + cost < costs[neighbour]:
                costs[neighbour] = current_cost + cost
                paths[neighbour] = paths[current_node] + [neighbour]
    
    return costs[target], paths[target]
Categorize the following Github repositories: Repo A: Languages: Python, JavaScript, HTML.
Repo B: Languages: Java, JavaScript, CSS. Repo A: Python, JavaScript, HTML
Repo B: Java, JavaScript, CSS
Create a python data structure to store customer data, including customer name, address, email and phone number. "John Doe 1234 Anystreet Anytown, ST 12345 johnd@example.com 123-456-7890" customer = {
    'name': "John Doe",
    'address': "1234 Anystreet Anytown, ST 12345",
    'email': "johnd@example.com",
    'phone': "123-456-7890"
}
Write a Python code to generate a random string of fixed length consisting of characters from "a" to "z"  import random

def generate_random_string(length):
    letters = 'abcdefghijklmnopqrstuvwxyz'
    random_string = ''.join(random.choice(letters) for i in range(length))
    return random_string

if __name__ == '__main__':
    print(generate_random_string(10))
Create a base class in Python which serves as a parent class to other classes  class BaseClass:
    def __init__(self):
        self.var1 = None
    
    def method1(self, var1):
        raise NotImplementedError
Develop code for a multi-dimensional array using Python  def get_array(n):
    a = [[0 for i in range(n)] for i in range(n)]
    return a
Translate the following code written in Python to Java. x = "Hello World" String x = "Hello World";
Create a python program that predicts the price of a cryptocurrency. The program should be developed using machine learning. Historic daily crypto price data extracted from Ethereum and Bitcoin. import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

# Load the data
data = pd.read_csv('crypto_data.csv')

# Create feature and target
X = data.drop('Price', axis=1)
y = data.Price

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model
model = RandomForestRegressor()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate accuracy
score = mean_squared_error(y_test, y_pred)

# Print the accuracy
print(f'Accuracy: {score}')
Design a Python function that takes a string as a parameter and returns a string with extra spaces in between each character. my_string = "Hello World" def add_spaces(string):
 new_string = ""
 for char in string:
 new_string += char + " "
 return new_string

my_string = add_spaces("Hello World")
print(my_string)
# H e l l o   W o r l d
Build an AI model in Python that can accurately predict the future stock prices of a company. The stock's historical closing prices for the past month import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression

#load the historical data
data = pd.read_csv('stock-data.csv')

#prepare the feature and target variables
X = data.iloc[:, :-1]
y = data['Close']

#fit the linear regression model
model = LinearRegression()
model.fit(X, y)

#make predictions
X_test = 'Input the stock's historical closing prices for the future month here'
predictions = model.predict(X_test)

#display the predictions
print(predictions)
Write a Python program to generate a HTML table with a list of employees. Employee list: John, Kate, Mark employee_list = ["John", "Kate", "Mark"]

html = "<table>\n<tr>";
for employee in employee_list:
  html += "<td>"+employee+"</td>\n";
html += "</tr>\n</table>"

print(html)
Design a Python program to find the difference between two provided times. The two times should be provided as strings in the format "[HH:mm:ss]". time1 = "08:30:15"
time2 = "10:20:20" from datetime import datetime

def time_diff(time1, time2):
 t1 = datetime.strptime(time1, "%H:%M:%S")
 t2 = datetime.strptime(time2, "%H:%M:%S")
 return (t2 - t1).total_seconds()

print(time_diff('08:30:15', '10:20:20')) // 7200.0
This code loads a configuration file and libraries, imports necessary modules, defines two custom colormaps, loads a data file, performs cubic spline interpolation on the data, applies a threshold to remove small values, and generates three plots: a histogram, an interpolated image, and a contour plot. To use this code, make sure to have the necessary files and libraries in the correct paths, and adjust the parameters as needed for your data.  # -*- coding: utf-8 -*-

import os, sys
print("CWD: " + os.getcwd() )

# Load configuration file before pyplot
config_path = os.path.abspath('../matplotlib/')
sys.path.append(config_path)
import configuration as config

# Library path
lib_path = os.path.abspath('../../lib')
sys.path.append(lib_path)
import framemanager_python

import numpy as np
import matplotlib.pyplot as plt
import scipy.interpolate


# Color map
# Define "bds_highcontrast" color map by Britton Smith <brittonsmith@gmail.com> from http://yt-project.org/ 
cdict = {'red':   ((0.0, 80/256., 80/256.),
                   (0.2, 0.0, 0.0),
                   (0.4, 0.0, 0.0),
                   (0.6, 256/256., 256/256.),
                   (0.95, 256/256., 256/256.),
                   (1.0, 150/256., 150/256.)),
         'green': ((0.0, 0/256., 0/256.),
                   (0.2, 0/256., 0/256.),
                   (0.4, 130/256., 130/256.),
                   (0.6, 256/256., 256/256.),
                   (1.0, 0.0, 0.0)),
         'blue':  ((0.0, 80/256., 80/256.),
                   (0.2, 220/256., 220/256.),
                   (0.4, 0.0, 0.0),
                   (0.6, 20/256., 20/256.),
                   (1.0, 0.0, 0.0))}

plt.register_cmap(name='bds_highcontrast', data=cdict) 

# Define YELLOW_RED colormap: each row consists of (x, y0, y1) where the x must increase from 0 to 1
#row i:    x  y0  y1
#               /
#              /
#row i+1:  x  y0  y1
cdict = {'red':   ((0.0, 0.9, 0.9),
                   (1.0, 0.9, 0.9)),
         'green': ((0.0, 0.9, 0.9),
                   (1.0, 0.0, 0.0)),
         'blue':  ((0.0, 0.0, 0.0),
                   (1.0, 0.0, 0.0))}
plt.register_cmap(name='YELLOW_RED', data=cdict) 
#cmap=plt.get_cmap('YELLOW_RED')
#cmap=plt.get_cmap('autumn')
#cmap=plt.get_cmap('gist_heat')
#cmap=plt.get_cmap('Spectral_r')
#cmap.set_under([0.0, 0.0, 0.0])



# Load profile
profileName = os.path.abspath("foam_ball_short.dsa")
frameID = 230

frameManager = framemanager_python.FrameManagerWrapper()
frameManager.load_profile(profileName);
numTSFrames = frameManager.get_tsframe_count();

matrixID = 1

# Load single frame
tsframe = np.copy( frameManager.get_tsframe(frameID, matrixID) );

cols = tsframe.shape[1]
rows = tsframe.shape[0]

# Add padding on border
padding = 2
v_padding = np.empty((padding, cols)); v_padding.fill(-50)
h_padding = np.empty((rows+2*padding, padding)); h_padding.fill(-50)
zs = np.vstack([v_padding, tsframe]) # Top
zs = np.vstack([zs, v_padding]) # Bottom
zs = np.hstack([h_padding, zs]) # Left
zs = np.hstack([zs, h_padding]) # Right

# Update matrix size with padding
cols = zs.shape[1]
rows = zs.shape[0]

# Coordinates of sampled data points
xs = np.arange(0, cols, 1)
ys = np.arange(0, rows, 1)

# Coordinates of interpolation points
scaleFactor = 10;
xi = np.linspace(xs.min(), xs.max(), cols*scaleFactor)
yi = np.linspace(ys.min(), ys.max(), rows*scaleFactor)





#------------------------------------------------------
# Interpolate with cubic splines
spline = scipy.interpolate.RectBivariateSpline(ys, xs, zs, kx=3, ky=3, s=0)

# Evaluate splines
zi = spline(yi, xi)

#------------------------------------------------------


'''
#------------------------------------------------------
# Polynomial interpolation: ‘linear’, ‘nearest’, ‘cubic’
coordinates = [(y, x) for y in ys for x in xs]
zs_flattened = np.ravel(zs, order='C')
coordinates_interpolated = [(y, x) for y in yi for x in xi]

# Interpolate with griddata
zi_flattened= scipy.interpolate.griddata(coordinates, zs_flattened, coordinates_interpolated, method='cubic')

# Reshape flattened array to 2D
zi = zi_flattened.reshape((rows*scaleFactor, cols*scaleFactor))
#------------------------------------------------------
'''




#------------------------------------------------------
# Old API
# Set up a regular grid of sampled data points
#ys, xs = np.meshgrid(xs, ys)

# Set up a regular grid of interpolated points
#yi, xi = np.meshgrid(xi, yi)

# Interpolate
#tck = scipy.interpolate.bisplrep(xs2, ys2, zs, kx=3, ky=3, s=0)

# Evaluate splines
#zi = scipy.interpolate.bisplev(xi2[:,0], yi2[0,:], tck)
#------------------------------------------------------




# Apply threshold to level out small values (interpolation ripples)
min_threshold = 25
zi[zi < min_threshold ] = 0 



#########################################
# Plotting
#########################################
fig, ax = plt.subplots()


############
# Histogram
############
plt.hist(zi.flatten(), 128, range=(min_threshold, zi.max()), fc='k', ec='k')
plt.savefig("histogram.pdf", format='pdf')
plt.close() 

########################
# Interpolated image
########################
fig, ax = plt.subplots()

# Interpolated image
#cmap=plt.get_cmap('gray')
cmap=plt.get_cmap('bds_highcontrast')
cax = ax.imshow(zi, cmap=cmap, vmin=zs.min(), vmax=zs.max(), origin='lower', extent=[xs.min(), xs.max(), ys.min(), ys.max()])

# Colorbar with countour levels
cbar = fig.colorbar(cax)
cbar.set_label('Raw sensor value', rotation=90)
cbar.solids.set_edgecolor("face") # set the color of the lines

ax.invert_yaxis()
ax.xaxis.tick_top()
plt.axis('off')

plt.savefig("interpolation.pdf", format='pdf')
plt.close() 



############
# Contour
############
fig, ax = plt.subplots()

# Nearest-Neighbor Image
cax = ax.imshow(zs, interpolation='nearest', cmap=plt.get_cmap('gray'), vmin=zs.min(), vmax=zs.max(), origin='lower', extent=[xs.min(), xs.max(), ys.min(), ys.max()]) 

#------------------------------------------------------
# Contour lines: contour()
#------------------------------------------------------
countour_threshold = 50
levels = np.linspace(countour_threshold, zs.max(), 10)
#contour = ax.contour(xi, yi, zi, levels, linewidths=1.0, colors=[(0.0, 0.0, 0.0)], origin='upper') # black contour
contour = ax.contour(xi, yi, zi, levels, linewidths=1.0, colors=[(1.0, 0.0, 0.0)], origin='upper') # Red contour
#contour = ax.contour(xi, yi, zi, levels, linewidths=1.0, cmap=plt.get_cmap('bds_highcontrast'), origin='upper') # Colormap

#plt.clabel(contour, inline=True, fontsize=9)

# Colorbar with countour levels
cbar = fig.colorbar(cax)
cbar.add_lines(contour)
cbar.set_label('Raw sensor value', rotation=90)
cbar.solids.set_edgecolor("face") # set the color of the lines

'''
#------------------------------------------------------
# Filled contours: contourf()
#------------------------------------------------------

# Background image
background = np.empty((rows, cols)); background.fill(0)
cax = ax.imshow(background, cmap=plt.get_cmap('gray'), origin='lower', extent=[xs.min(), xs.max(), ys.min(), ys.max()] )

# Filled contour
countour_threshold = 100 # Ignore "ripples" from spline extrapolation
max_threshold = 0 # Boost the upper limit to avoid truncation error
levels = np.linspace(countour_threshold, zs.max(), num=10, endpoint=True)

# Levels correspond to midpoint of layers:
# Extend level range to enlarge top layer (avoid ugly hole)
levels[-1] = levels[-1] + (levels[-1] - levels[-2])/2

contour = ax.contourf(xi, yi, zi, levels=levels, cmap=plt.get_cmap('bds_highcontrast'), origin='upper')      

cbar = fig.colorbar(contour, format='%.0f')
cbar.set_label('mV', rotation=0)
cbar.solids.set_edgecolor("face") # set the color of the lines

# Restore old levels
#levels[-1] = zs.max() 
#cbar.set_ticks(levels)
#------------------------------------------------------
'''


ax.invert_yaxis()
ax.xaxis.tick_top()
plt.axis('off')

plt.savefig("contour.pdf", format='pdf')
plt.show() 



 

Generate a Python algorithm to generate the following pattern "* * * *" for i in range(4):
    for j in range(4):
        print("*", end=" ")
    print()
Convert the following Python function into C++ def test_func(A, B):
 return A + B #include <iostream>

int test_func(int A, int B)
{
 return A + B;
}

int main()
{
 int A = 10;
 int B = 20;
 
 std::cout << "The value of A + B = " << test_func(A, B) << std::endl;
 
 return 0;
}
Create a neural network in python to classify the dataset below into two categories 0 0 1 0
1 0 0 0
1 1 0 0 import numpy as np
import tensorflow as tf

# Define inputs and outputs
X = tf.placeholder(tf.float32, shape=[3, 4])
y = tf.placeholder(tf.float32, shape=[3, 1])

# Define weights and biases
W = tf.Variable(tf.random_normal([4, 1]))
b = tf.Variable(tf.random_normal([1]))

# Define model
model = tf.sigmoid(tf.matmul(X, W ) + b)

# Define cost and optimizer
cost = tf.reduce_mean(-y * tf.log(model) - (1-y) * tf.log(1-model))
optimizer = tf.train.GradientDescentOptimizer(0.1).minimize(cost)

# Train model
with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())
    for i in range(1000):
        sess.run(optimizer, feed_dict={X:[[0,0,1,0],[1,0,0,0],[1,1,0,0]], y:[[0],[1],[1]]})

# Print results
print("Final weights", sess.run(W))
print("Final bais: ", sess.run(b))
Create a function in Python to calculate the cost of an online shopping order given the cost of the items and the shipping charges. item1 = 10 
item2 = 20 
shipping_charges = 15 def calculate_cost(item1, item2, shipping_charges):
    total_cost = item1 + item2 + shipping_charges
    return total_cost

calculate_cost(item1, item2, shipping_charges) 
# returns 45
Construct a python program to sort a given array of strings using quicksort algorithm.  def partition(arr,low,high): 
    i = (low - 1)
    pivot = arr[high]
  
    for j in range(low , high): 
        if   arr[j] <= pivot: 
            i = i+1 
            arr[i],arr[j] = arr[j],arr[i]
    arr[i+1],arr[high] = arr[high],arr[i+1] 
    return (i+1) 
  
def quicksort(arr,low,high): 
    if low < high: 
  
        pi = partition(arr,low,high) 
        quicksort(arr, low, pi-1) 
        quicksort(arr, pi+1, high)
Create a Python program to find the area of a given trapezoid. base1 = 2
base2 = 4
height = 3 def area_trapezoid(base1, base2, height):
 return (base1 + base2) * (height / 2)
 
print(area_trapezoid(2, 4, 3)) # Output: 9.0
Develop a Django application for a blog platform. Not applicable # In your project directory
django-admin startproject blog

# In the blog directory
python manage.py startapp blogapp

# In blog/settings.py
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'blogapp.apps.BlogappConfig', # Add this line to register your app
]

# In blogapp/models.py
from django.db import models


class Post(models.Model):
    title = models.CharField(max_length=100)
    body = models.TextField()

    def __str__(self):
        return self.title


# In blogapp/admin.py
from django.contrib import admin
from .models import Post


admin.site.register(Post)

# In blogapp/urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('', views.all_posts, name="all_posts"),
]

# In blog/urls.py
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('blogapp.urls')), # Add this line
]
Develop an algorithm in Python to sort an array of integers using the Merge Sort algorithm [6, 2, 5, 1, 8, 9, 0] # Merge Sort Algorithm

def merge(left, right):
  sortedList = []
  i, j = 0, 0
  while i < len(left) and j < len(right):
    if left[i] < right[j]:
      sortedList.append(left[i])
      i += 1
    else:
      sortedList.append(right[j])
      j += 1
  # Check if anything remains
  sortedList += left[i:]
  sortedList += right[j:]
  return sortedList

def mergeSort(arr):
  # Base case, already sorted
  if len(arr) <= 1:
    return arr

  # Split in half
  mid  = len(arr)/2
  left = arr[:mid]
  right = arr[mid:]
  
  # Sort each half and merge
  left  = mergeSort(left)
  right = mergeSort(right)
  return merge(left, right)

# Driver Code
arr = [6,2,5,1,8,9,0]

sortedArr = mergeSort(arr)
print(sortedArr)

# Output: [0, 1, 2, 5, 6, 8, 9]
Design a Python script that converts Miles/hour to Kilometers/hour. Speed in Miles/hour: 60 def mph_to_kph(speed):
 kph = speed * 1.609
 return kph
Design a function in Python that takes a string and a number and removes the characters at the specified positions from that string. str = "Hello World!"
index = [0, 5, 9] def remove_chars_at_indices(str, indices):
    new_str = ""
    for i in range(len(str)):
        if i not in indices:
            new_str += str[i]
    return new_str

str = "Hello World!"
index = [0, 5, 9]
result = remove_chars_at_indices(str, index)
print(result)
Create a Python program to group words that are anagrams into a list. ['eat', 'tea', 'tan', 'ate', 'nat', 'bat'] def group_anagrams(words): 
    result = {} 
      
    for word in words: 
        key = ''.join(sorted(word)) 
        if key in result.keys(): 
            result[key].append(word) 
        else: 
            result[key] = [word] 
  
    return list(result.values()) 

words = ['eat', 'tea', 'tan', 'ate', 'nat', 'bat'] 
print(group_anagrams(words))
Using Python, create a function called `print_list` that prints out the elements of a list. L = [1, 2, 3, 4, 5] def print_list(L):
    for item in L:
        print(item)

L = [1,2,3,4,5]
print_list(L)
Develop a method in Python that takes a string as an input and outputs the number of vowels in the string. string = "Hello World" def vowel_count(string):
  count = 0
  vowels = 'aeiou'
  for char in string.lower():
    if char in vowels:
      count += 1
  
  return count

print(vowel_count("Hello World"))
Implement a doubly linked list in Python.  class Node(object):
    def __init__(self, value, prev, next):
        self.value = value
        self.prev = prev
        self.next = next


class LinkedList(object):
    def __init__(self):
        self.head = None
        self.tail = None
        self.length = 0

    def append(self, value):
        node = Node(value, None, None)
        if self.head is None:
            self.head = node
            self.tail = node
        else:
            self.tail.next = node
            node.prev = self.tail
            self.tail = node
        self.length += 1

    def prepend(self, value):
        node = Node(value, None, None)
        if self.head is None:
            self.head = node
            self.tail = node
        else:
            node.next = self.head
            self.head.prev = node
            self.head = node
        self.length += 1

    def get_at_index(self, index):
        if index < 0 or index > self.length - 1:
            return None
        else:
            current_node = self.head
            for _ in range(index):
                current_node = current_node.next
            return current_node.value

    def remove_at_index(self, index):
        if index < 0 or index > self.length - 1:
            return None
        else:
            current_node = self.head
            for _ in range(index):
                current_node = current_node.next
            current_node.prev.next = current_node.next
            current_node.next.prev = current_node.prev
            self.length -= 1
Create a Python program to randomly generate a mixture of two Gaussian distributions. mean1 = 0, mean2 = 5, stddev1 = 0.5, stddev2 = 1  
N = 10 import random 
import math

def random_mixture(mean1, mean2, stddev1, stddev2, N):
    data = []
    for _ in range(N):
        if random.random() < 0.5:
            data.append(random.normalvariate(mean1, stddev1))
        else:
            data.append(random.normalvariate(mean2, stddev2))
    return data
Code a Python program to concatenate two lists. [1, 2, 3] and [4, 5, 6] list1 = [1, 2, 3] 
list2 = [4, 5, 6] 
  
# using + 
list3 = list1 + list2 
  
# printing list3 
print(list3) 

# using extend() 
list1.extend(list2) 
  
# printing list1 
print(list1)
Create a Python script to scrape tweets with a particular hashtag from Twitter. "#100DaysOfCode" import tweepy

# Replace the API_KEY and API_SECRET with your application's key and secret.
auth = tweepy.AppAuthHandler(API_KEY, API_SECRET)

api = tweepy.API(auth, wait_on_rate_limit=True,
 wait_on_rate_limit_notify=True)

# Replace the hashtag with your hashtag of interest.
hashtag = '#100DaysOfCode'

# Fetch the tweets
tweets = tweepy.Cursor(api.search, q=hashtag, lang="en").items()

# Print out the tweets
for tweet in tweets:
 print(tweet.text)
Write a Python program to send an email to a group of people.  # Imports
import smtplib

# Define the email addresses
recipients = ['person1@mail.com', 'person2@mail.com', 'person3@mail.com']

# Connect to SMTP server
with smtplib.SMTP('smtp.mail.com', 587) as server:
	# Start TLS
	server.starttls()

	# Login
	server.login('your_email_address', 'your_password')

	# Construct the message
	message = '''
	Subject: Your Subject Here
	
	Message body here
	'''

	# Send mail
	server.sendmail('your_email_address', recipients, message)
Create a program to solve the traveling salesman problem in python. Not applicable import random

# Representing the problem
# The algorithm is applied to this
graph = { 
 'A': ['B', 'C', 'D'], 
 'B': ['A', 'C',  'E'], 
 'C': ['A', 'B', 'D', 'E'], 
 'D': ['A', 'C'], 
 'E': ['B', 'C']
}

def findBestRoute(graph):
  # randomly select starting node 
  currentNode = random.choice(list(graph.keys()))
 
  # the shortest route needs at least 
  # length = number of nodes in the graph
  bestRoute = [currentNode] 
  min_length =  len(graph)
 
  # Loop until length is same as min_length
  while len(bestRoute) < min_length: 
 
    # Find neighbors of the current node
    nbrs = graph[currentNode] 
 
    # Find a neighbor 
    # with minimum distance
    nextNode = None
    minDist = float('Inf')
 
    # Check for each neighbor 
    for node in nbrs: 
        if node not in bestRoute: 
            dist = 0
            for i in range(len(bestRoute)-1): 
                dist += graph[bestRoute[i]][node] 
            if dist < minDist : 
                minDist = dist
                nextNode = node
 
    # Append the neighbor to bestRoute 
    bestRoute.append(nextNode) 
    currentNode = nextNode 
   
  return bestRoute 
  
# Driver program 
print(findBestRoute(graph))
Generate a function that increments a given input by one in Python.  def increment(x): 
    return x + 1
Write a Python code to calculate the root mean square error (RMSE) between two given lists of numbers. A = [2.2, 3.07, 3.68, 1.33] 
B = [1.17, 2.47, 2.57, 0.0] def rmse(A, B):
   """ 
   Calculates the root mean square error between two given lists of numbers. 
   """
   RMSE = 0
   for i,j in zip(A,B):
       RMSE += (i-j)**2
   return (RMSE/len(A))**(1/2)


if __name__ == '__main__':
   A = [2.2, 3.07, 3.68, 1.33] 
   B = [1.17, 2.47, 2.57, 0.0]
   print(rmse(A, B))
Create a Python script to run the Knapsack Problem using brute force approach. capacity = 6
items = [
{
'name': 'item 1',
'weight': 2,
'value': 40
},
{
'name': 'item 2',
'weight': 3,
'value': 50
},
{
'name': 'item 3',
'weight': 4,
'value': 60
},
{
'name': 'item 4',
'weight': 5,
'value': 70
}
] def knapsack_brute_force(capacity, items):
 max_value = 0

 # the number of items
 num_items = len(items)

 # Iterate through the items.
 for i in range(2**num_items):

 # Create a subset.
 subset = [items[item] for item in range(num_items) if i & (1 << item)]

 # Calculate the total weight of the subset.
 subset_weight = sum([item['weight'] for item in subset])

 # Skip the subset if it exceeds the capacity.
 if subset_weight > capacity:
 continue

 # Otherwise, add the subset's total value to the max value.
 subset_value = sum([item['value'] for item in subset])
 max_value = max(subset_value, max_value)

return max_value

# Execute the function.
max_value = knapsack_brute_force(capacity, items)
print(max_value) # 120
Write a Python function to edit the given input string such that all consecutive duplicate characters in the string are removed. inputstring = "aabbcccdddd" def remove_duplicates(inputstring):
    result = ""
    for i in range(len(inputstring)):
        if i == 0 or inputstring[i] != inputstring[i-1]:
            result += inputstring[i]
    return result
Design a numerical algorithm in Python that takes an input set of numbers and returns the maximum of this set. [8, 15, 7, 6, 16] def find_max(arr): 
  
  max_value = arr[0] 
  
  for i in range(1, len(arr)): 
      if arr[i]> max_value: 
          max_value = arr[i] 
          
  return max_value 
  
#Test Array 
arr = [8, 15, 7, 6, 16] 

#Function call 
maxvalue = find_max(arr) 

print("Maximum value:",maxvalue)
How can you implement a breadth-first search algorithm in Python?  # Python program to implement breadth-first search

graph = {
    "A": ["B", "C"],
    "B": ["A", "D", "E"],
    "C": ["A", "F"],
    "D": ["B"],
    "E": ["B", "F"],
    "F": ["C", "E"]
}

visited = set()

def bfs(graph, vertex):
    
    queue = []
    queue.append(vertex)
    visited.add(vertex)
    
    while queue:
        node = queue.pop(0)
        print(node)
        
        for neighbor in graph[node]:
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append(neighbor)

vertex = "A"
bfs(graph, vertex)
Write a Python program to extract the n-th element from the given list of lists. [[1,2,3], [4,5,6], [7,8,9]] def get_nth_element(list_of_lists, n):
    return [item[n] for item in list_of_lists]
Create a Python program that computes the median of an array of numbers. [5, 4, 3, 2, 1] def median(array):
    sorted_array = sorted(array)
    length = len(sorted_array)
    if (length % 2 == 0):
        median = (sorted_array[length//2] + sorted_array[length//2 - 1]) / 2
    else:
        median = sorted_array[length//2]

    return median

array = [5, 4, 3, 2, 1]
print(median(array))  # Output: 3
Write a Python program to clean a given string. The given string should be stripped of special characters, converted to lowercase and only words with more than three characters should be returned. This is , MY string!? s= "This is, MY string!?"
 
output=""
 
for i in s:
 if i.isalnum():
  output+=i.lower()
 
output = ' '.join(w for w in output.split() if len(w)>3)
 
print("Cleaned String: "+output)
Create a Python program to generate a random 5 x 5 maze using a breadth-first search. Not applicable import random

def generate_maze(m, n):
    # Create an empty maze
    maze = [[0] * n for _ in range(m)]
    # Generate walls randomly
    for i in range(m):
        for j in range(n):
            if random.randint(0, 1) == 1:
                maze[i][j] = 1
    # Generate the exit and entrance
    maze[0][0] = 0
    maze[m-1][n-1] = 0
 
    # Use a breadth-first search algorithm to traverse the maze
    # and find the path to the exit
    start = (0, 0)
    stack = []
    stack.append(start)
 
    while stack:
        current = stack.pop()
        i, j = current
        if i == m-1 and j == n-1:
            break
        if i > 0 and maze[i-1][j] == 0:
            stack.append((i-1, j))
            maze[i-1][j] = 2
        if i < m-1 and maze[i+1][j] == 0:
            stack.append((i+1, j))
            maze[i+1][j] = 2
        if j > 0 and maze[i][j-1] == 0:
            stack.append((i, j-1))
            maze[i][j-1] = 2
        if j < n-1 and maze[i][j+1] == 0:
            stack.append((i, j+1))
            maze[i][j+1] = 2
 
    # Generate a unique representation of the maze
    # 1 is for walls, 0 is for paths, 2 is for visited paths
    for i in range(m):
        s = ''
        for j in range(n):
            s += str(maze[i][j])
        print(s)

if __name__ == '__main__':
    # Generate the random 5 x 5 maze
    generate_maze(5, 5)
In Python, write a function to create a dictionary using the given two lists. keys = ["name", "age", "number"]
values = ["John", 32, 258] def create_dict(keys, values):
    return {key: val for key, val in zip(keys, values)}
Generate a reverse string of each word present in the list. ["Python", "Java", "C++"] def reverseStringOfList(list):
    revList = []
    for string in list:
        revList.append(string[::-1])
    return revList

result = reverseStringOfList(["Python", "Java", "C++"])
print(result)
Create a method in Python which takes a string as input and outputs all distinct words in the string. String: "Hello, there! How are you?" def getDistinctWords(string):
    wordlist = string.split()
    lst = []
    for word in wordlist: 
        if word not in lst:
            lst.append(word)
    return lst

print(getDistinctWords("Hello, there! How are you?"))
# Output: ['Hello,', 'there!', 'How', 'are', 'you?']
Generate a random string that consists only of letters and digits using python  import string
import random

def generate_string():
    letters_and_digits = string.ascii_letters + string.digits
    result = "".join(random.choice(letters_and_digits) for i in range(8))
    return result
Generate a code to create a scatterplot using the Seaborn library in Python.  """
Generate a code to create a scatterplot using the Seaborn library in Python
"""

import pandas as pd
import seaborn as sns

#load the sample datasets
data1 = pd.read_csv('sample_data1.csv')
data2 = pd.read_csv('sample_data2.csv')

# Create a Scatterplot Using Seaborn
sns.relplot(x="data1_x", y="data1_y", data=data1); 
sns.relplot(x="data2_x", y="data2_y", data=data2);
Generate a python program that takes two strings and outputs the longest common substring  def longestCommonSubstring(s1, s2): 
    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))] 
    longest, x_longest = 0, 0
    for x in range(1, 1 + len(s1)): 
        for y in range(1, 1 + len(s2)): 
            if s1[x - 1] == s2[y - 1]: 
                m[x][y] = m[x - 1][y - 1] + 1
                if m[x][y] > longest: 
                    longest = m[x][y] 
                    x_longest = x 
            else: 
                m[x][y] = 0
    return s1[x_longest - longest: x_longest]
Compute the sum of the first 100 natural numbers using a function in Python.  def sum_numbers(n):
    """
    Computes the sum of the first `n` natural numbers
    """
    s = 0
    for i in range(n):
        s += i+1
    return s

print(sum_numbers(100))
This code is a Python script that defines a unit test for the GafferImage.Merge class. The test includes several sub-tests that check the functionality of the Merge node, such as testing the hash values of the output, checking if the input hash is always passed through, and overlaying red, green, and blue tiles of different data window sizes. To run the test, execute the script.  ##########################################################################
#
#  Copyright (c) 2013, Image Engine Design Inc. All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are
#  met:
#
#      * Redistributions of source code must retain the above
#        copyright notice, this list of conditions and the following
#        disclaimer.
#
#      * Redistributions in binary form must reproduce the above
#        copyright notice, this list of conditions and the following
#        disclaimer in the documentation and/or other materials provided with
#        the distribution.
#
#      * Neither the name of John Haddon nor the names of
#        any other contributors to this software may be used to endorse or
#        promote products derived from this software without specific prior
#        written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
#  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
#  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
#  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
#  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
#  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
##########################################################################

import unittest

import IECore
import GafferImage
import os

class MergeTest( unittest.TestCase ) :

	rPath = os.path.expandvars( "$GAFFER_ROOT/python/GafferTest/images/redWithDataWindow.100x100.exr" )
	gPath = os.path.expandvars( "$GAFFER_ROOT/python/GafferTest/images/greenWithDataWindow.100x100.exr" )
	bPath = os.path.expandvars( "$GAFFER_ROOT/python/GafferTest/images/blueWithDataWindow.100x100.exr" )
	checkerPath = os.path.expandvars( "$GAFFER_ROOT/python/GafferTest/images/checkerboard.100x100.exr" )
	checkerRGBPath = os.path.expandvars( "$GAFFER_ROOT/python/GafferTest/images/rgbOverChecker.100x100.exr" )
	rgbPath = os.path.expandvars( "$GAFFER_ROOT/python/GafferTest/images/rgb.100x100.exr" )

	# Do several tests to check the cache is working correctly:
	def testHashes( self ) :

		r1 = GafferImage.ImageReader()
		r1["fileName"].setValue( self.checkerPath )

		r2 = GafferImage.ImageReader()
		r2["fileName"].setValue( self.gPath )

		##########################################
		# Test to see if the hash changes.
		##########################################
		merge = GafferImage.Merge()
		merge["operation"].setValue(8) # 8 is the Enum value of the over operation.

		merge["in"].setInput(r1["out"])
		merge["in1"].setInput(r2["out"])
		h1 = merge["out"].image().hash()

		# Switch the inputs.
		merge["in1"].setInput(r1["out"])
		merge["in"].setInput(r2["out"])
		h2 = merge["out"].image().hash()

		self.assertNotEqual( h1, h2 )

		##########################################
		# Test to see if the hash remains the same
		# when the output should be the same but the
		# input plugs used are not.
		##########################################
		merge = GafferImage.Merge()
		merge["operation"].setValue(8) # 8 is the Enum value of the over operation.

		expectedHash = h1

		# Connect up a load of inputs ...
		merge["in"].setInput(r1["out"])
		merge["in1"].setInput(r1["out"])
		merge["in2"].setInput(r1["out"])
		merge["in3"].setInput(r2["out"])

		# but then disconnect two so that the result should still be the same...
		merge["in"].setInput( None )
		merge["in2"].setInput( None )
		h1 = merge["out"].image().hash()

		self.assertEqual( h1, expectedHash )

	def testHashPassThrough( self ) :

		r1 = GafferImage.ImageReader()
		r1["fileName"].setValue( self.checkerPath )

		##########################################
		# Test to see if the input has is always passed
		# through if only the first input is connected.
		##########################################
		merge = GafferImage.Merge()
		merge["operation"].setValue(8) # 8 is the Enum value of the over operation.

		expectedHash = r1["out"].image().hash()
		merge["in"].setInput(r1["out"])
		h1 = merge["out"].image().hash()

		self.assertEqual( h1, expectedHash )

		##########################################
		# Test that if we disable the node the hash gets passed through.
		##########################################
		merge["enabled"].setValue(False)
		h1 = merge["out"].image().hash()

		self.assertEqual( h1, expectedHash )


	# Overlay a red, green and blue tile of different data window sizes and check the data window is expanded on the result and looks as we expect.
	def testOverRGBA( self ) :
		r = GafferImage.ImageReader()
		r["fileName"].setValue( self.rPath )

		g = GafferImage.ImageReader()
		g["fileName"].setValue( self.gPath )

		b = GafferImage.ImageReader()
		b["fileName"].setValue( self.bPath )

		merge = GafferImage.Merge()
		merge["operation"].setValue(8) # 8 is the Enum value of the over operation.
		merge["in"].setInput(r["out"])
		merge["in1"].setInput(g["out"])
		merge["in2"].setInput(b["out"])

		mergeResult = merge["out"].image()
		expected = IECore.Reader.create( self.rgbPath ).read()

		self.assertTrue( not IECore.ImageDiffOp()( imageA = expected, imageB = mergeResult, skipMissingChannels = False, maxError = 0.001 ).value )

	# Overlay a red, green and blue tile of different data window sizes and check the data window is expanded on the result and looks as we expect.
	def testOverRGBAonRGB( self ) :
		c = GafferImage.ImageReader()
		c["fileName"].setValue( self.checkerPath )

		r = GafferImage.ImageReader()
		r["fileName"].setValue( self.rPath )

		g = GafferImage.ImageReader()
		g["fileName"].setValue( self.gPath )

		b = GafferImage.ImageReader()
		b["fileName"].setValue( self.bPath )

		merge = GafferImage.Merge()
		merge["operation"].setValue(8) # 8 is the Enum value of the over operation.
		merge["in"].setInput(c["out"])
		merge["in1"].setInput(r["out"])
		merge["in2"].setInput(g["out"])
		merge["in3"].setInput(b["out"])

		mergeResult = merge["out"].image()
		expected = IECore.Reader.create( self.checkerRGBPath ).read()

		self.assertTrue( not IECore.ImageDiffOp()( imageA = expected, imageB = mergeResult, skipMissingChannels = False, maxError = 0.001 ).value )


if __name__ == "__main__":
	unittest.main()

Create a program in Python that performs text classification. The program should take a text as input and classify it according to a pre-trained model. Text: "This is a test of a text classification program." import pandas as pd

# text to be classified
text = "This is a test of a text classification program."

# load pre-trained model
model = pickle.load(open("pre_trained_model.pkl", 'rb'))

# predict the class based on text input
prediction = model.predict([text])

print(prediction)
Can you write a Python script to search an input string for a specific character and return its position in the string? string = "Python"
search_char = 'y' pos = string.find(search_char) # 2
This Python code is a program that tracks time spent on activities using the Hamster app. To use this program, run the Python script and the Hamster app. The program will create a dock item that displays the time spent on the current activity and allows you to access the Hamster app's overview and preferences. The program will automatically update the time spent every minute. To stop the program, exit the Hamster app and close the Python script.  #!/usr/bin/env python

#
#  Copyright (C) 2010 Toms Baugis
#
#  Original code from Banshee control,
#  Copyright (C) 2009-2010 Jason Smith, Rico Tzschichholz
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import atexit
import gobject
import sys, os
from subprocess import Popen


try:
	import gtk
	from dockmanager.dockmanager import DockManagerItem, DockManagerSink, DOCKITEM_IFACE
	from signal import signal, SIGTERM
	from sys import exit
except ImportError, e:
	print e
	exit()


from hamster import client
from hamster.utils import stuff, i18n
i18n.setup_i18n()


class HamsterItem(DockManagerItem):
    def __init__(self, sink, path):
        DockManagerItem.__init__(self, sink, path)

        self.storage = client.Storage()
        self.storage.connect("facts-changed", lambda storage: self.refresh_hamster())
        self.storage.connect("activities-changed", lambda storage: self.refresh_hamster())

        self.id_map = {} #menu items

        self.update_text()
        self.add_actions()
        gobject.timeout_add_seconds(60, self.refresh_hamster)


    def refresh_hamster(self):
        try:
            self.update_text()
        finally:  # we want to go on no matter what, so in case of any error we find out about it sooner
            return True


    def update_text(self):
        today = self.storage.get_todays_facts()

        if today and today[-1].end_time is None:
            fact = today[-1]

            self.set_tooltip("%s - %s" % (fact.activity, fact.category))
            self.set_badge(stuff.format_duration(fact.delta, human=False))
        else:
            self.set_tooltip(_("No activity"))
            self.reset_badge()

    def menu_pressed(self, menu_id):
        if self.id_map[menu_id] == _("Overview"):
            Popen(["hamster-time-tracker", "overview"])
        elif self.id_map[menu_id] == _("Preferences"):
            Popen(["hamster-time-tracker", "preferences"])

        self.add_actions() # TODO - figure out why is it that we have to regen all menu items after each click


    def add_actions(self):
        # first clear the menu
        for k in self.id_map.keys():
            self.remove_menu_item(k)

        self.id_map = {}
        # now add buttons
        self.add_menu_item(_("Overview"), "")
        self.add_menu_item(_("Preferences"), "preferences-desktop-personal")


class HamsterSink(DockManagerSink):
    def item_path_found(self, pathtoitem, item):
        if item.Get(DOCKITEM_IFACE, "DesktopFile", dbus_interface="org.freedesktop.DBus.Properties").endswith ("hamster-time-tracker.desktop"):
            self.items[pathtoitem] = HamsterItem(self, pathtoitem)

hamstersink = HamsterSink()

def cleanup():
	hamstersink.dispose()

if __name__ == "__main__":
	mainloop = gobject.MainLoop(is_running=True)

	atexit.register (cleanup)
	signal(SIGTERM, lambda signum, stack_frame: exit(1))

	while mainloop.is_running():
		mainloop.run()

Create a function in Python to find the length of a string.  def string_length(word):
  return len(word)

print(string_length('Hello World!'))
# Output: 12
Write a Python program to print out the alphabet pattern 'ABCD...XYZ'.  for i in range(65, 91): 
    print(chr(i), end=" ")
Create a Python script that adds two numbers together and prints the result.  def add(a, b):
    sum = a + b
    print(sum)

add(5,7)
Write a python program to print a frequency table of the data in a two-dimensional array data = [[6, 2, 8], [9, 5, 6], [4, 5, 2]] def print_freq_table(data):
    row_count = len(data)
    col_count = len(data[0]) 
    freq_table = [[0] * col_count for i in range(row_count)]

    for i in range(row_count):
        for j in range(col_count):
            freq_table[i][j] = data[i][j] * 100 / sum([data[k][j] for k in range(row_count)]) 

    for i in range(row_count): 
        for j in range(col_count): 
            print('%d : %.2f' %(data[i][j], freq_table[i][j]))
Write a basic web scraper in Python using the requests and BeautifulSoup libraries to extract the titles of articles from a given URL. https://en.wikipedia.org/wiki/Python_(programming_language) import requests
from bs4 import BeautifulSoup

url = 'https://en.wikipedia.org/wiki/Python_(programming_language)'
r = requests.get(url)
soup = BeautifulSoup(r.content, 'html.parser')

articles = soup.find_all('h1', class_='firstHeading')
for article in articles:
 print(article.text)
How would you write a code to flatten a given nested list in Python? nested_list = [1, [2, [3, 4], 5], 6] def flatten_list(nested_list):
    flattened_list = []
    for item in nested_list:
        if type(item) == list:
            flattened_list.extend(flatten_list (item))
        else:
            flattened_list.append(item)
    return flattened_list
Develop a python code to find the maximum rectangle area in a given matrix of 1s and 0s. matrix = [
    [1, 1, 0, 0],
    [1, 1, 1, 1],
    [1, 1, 1, 1],
    [0, 1, 1, 0]
] def max_rect_area(matrix):

    max_area = 0

    for row in range(len(matrix)):
        for col in range(len(matrix[0])):

            if matrix[row][col] == 0: # if current element is 0, skip
                continue

            # calculate the maximum possible rectangle area
            # considering (row, col) as one of the vertices 
            min_column = len(matrix[0])
            for r in range(row, len(matrix)):
                min_column = min(min_column, matrix[r][col])

            # calculate area of the rectangle 
            # composed of 1s belonging with these limits 
            area = min_column*(r - row + 1)

            # update maximum area so far 
            max_area = max(max_area, area)

    return max_area

# Main Program 
matrix = [
    [1, 1, 0, 0],
    [1, 1, 1, 1],
    [1, 1, 1, 1],
    [0, 1, 1, 0]
]
result = max_rect_area(matrix) 

print("The maximum rectangle area is {:d}".format(result))
Create a list in Python that stores the names of 10 different fruits.  fruits = ['apple', 'banana', 'grape', 'pineapple', 'strawberry', 'orange', 'mango', 'pear', 'peach', 'kiwi']
code a recursive function in Python that accepts a list of integers and prints the sum of all even numbers. [1, 2, 3, 4, 5, 6, 7, 8] def print_even_sum(L): 
    if len(L) == 0: 
        return 0
  
    if L[0] % 2 == 0: 
        return L[0] + print_even_sum(L[1:]) 
    else: 
        return print_even_sum(L[1:]) 
  
L = [1, 2, 3, 4, 5, 6, 7, 8] 
print("Sum of even numbers in the list:", print_even_sum(L))
Create an optimized Python program to print all prime numbers in a given range. 4-15 def is_prime(n):
    if n <= 1:
        return False
  
    for i in range(2, n):
        if n % i == 0:
            return False
  
    return True
 
start = 4
end = 15
 
for num in range(start, end+1):
   if is_prime(num):
       print(num)
Write a Python program to print out all possible pairs of two lists. list1 = [1, 2, 3]
list2 = ['a', 'b', 'c'] for i in list1:
    for j in list2:
        print(i,j)

# Output:
# (1, 'a')
# (1, 'b')
# (1, 'c')
# (2, 'a')
# (2, 'b')
# (2, 'c')
# (3, 'a')
# (3, 'b')
# (3, 'c')
Create a function in Python that takes two integers and returns the larger with the smaller one as its divisor. Input integers: 10, 20 def get_larger_number_divisible_by_smaller(num1, num2):
  max_num = max(num1, num2)
  min_num = min(num1, num2)

  return max_num if max_num % min_num == 0 else None

result = get_larger_number_divisible_by_smaller(10, 20)
print(result) # 20
Design a system in Python to find and count the number of vowels in a given string of words.  def count_vowels(words):
  vowels = 'aeiou'
  count = 0
  for char in words.lower():
    if char in vowels:
      count += 1
  return count
Write a Python program to create functions for min, max, and mean of a given list. A list of 10 integers def min_list(numbers):
  min_num = min(numbers)
  return min_num

def max_list(numbers):
  max_num = max(numbers)
  return max_num

def mean_list(numbers):
  mean_num = sum(numbers)/len(numbers)
  return mean_num

numbers = [1,2,3,4,5,6,7,8,9,10]

print(min_list(numbers))
print(max_list(numbers))
print(mean_list(numbers))

# Output
# 1
# 10
# 5.5
Create a REST API using the Flask framework in Python to create, read, update and delete records from a database. Not applicable from flask import Flask, request
from flask_restful import Resource, Api
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__)

# Connect to the database
app.config['SQLALCHEMY_DATABASE_URI'] = 'YOUR DB URI'
db = SQLAlchemy(app)

# Create a model class for table row
class TableRow(db.Model):
  id = db.Column(db.Integer, primary_key=True)
  name = db.Column(db.String(50), nullable=False)
  description = db.Column(db.String(50), nullable=False)

# Create a REST API using Flask-RESTful
api = Api(app)

# Create the API's endpoints
class CreateRecord(Resource):
  def post(self):
    # Get the request body
    json_data = request.get_json()
    # Create a new record
    new_record = TableRow(name=json_data['name'], description=json_data['description'])
    db.session.add(new_record)
    db.session.commit()
    return {'status': 'success'}, 201

class ReadRecord(Resource):
  def get(self, id):
    # Get a record by id
    record = TableRow.query.filter_by(id=id).first()
    # Check if record exists
    if record:
        return {'name': record.name, 'description': record.description}, 200
    return {'status': 'not found'}, 404

class UpdateRecord(Resource):
  def put(self, id):
    # Get the record
    record = TableRow.query.filter_by(id=id).first()
    # Check if record exists
    if record:
        # Get the request body
        json_data = request.get_json()
        # Update the record
        record.name = json_data['name']
        record.description = json_data['description']
        db.session.commit()
        return {'status': 'success'}, 200
    return {'status': 'not found'}, 404

class DeleteRecord(Resource):
  def delete(self, id):
    # Get the record
    record = TableRow.query.filter_by(id=id).first()
    # Check if record exists
    if record:
        # Delete the record
        db.session.delete(record)
        db.session.commit()
        return {'status': 'success'}, 200
    return {'status': 'not found'}, 404

# Add the API's endpoints to the API
api.add_resource(CreateRecord, '/create')
api.add_resource(ReadRecord, '/read/<int:id>')
api.add_resource(UpdateRecord, '/update/<int:id>')
api.add_resource(DeleteRecord, '/delete/<int:id>')

if __name__ == '__main__':
  app.run(debug=True)
Create a simple game in Python with two players.  import random
import time
 
def get_player_name():
 
    return input("What is your name? ")
def get_player_choice():
 
    choice = input("\nRock, Paper or Scissors (R/P/S)? ").upper()
    
    if choice not in ["R", "P", "S"]:
        print("\nNot an valid answer. try again")
        get_player_choice()
    return choice
 
 
def main():
    # get player info
    player_1_name = get_player_name()
    player_2_name = get_player_name()
    print(f"\nWelcome {player_1_name} and {player_2_name}! Let's play Rock, Paper, Scissors!!")
    time.sleep(3)
 
    # get player options
    player_1_choice = get_player_choice()
    player_2_choice = get_player_choice()
 
    # operation
    print(f"\n{player_1_name} puts {player_1_choice}.")
    print(f"\n{player_2_name} puts {player_2_choice}")
    time.sleep(3)
    print("\nShoot!")
    time.sleep(2)
    print("\nNow let's see!")
    time.sleep(3)
    if player_1_choice == player_2_choice:
        print("\nIt's a tie!")
    elif player_1_choice == 'R' and player_2_choice == 'S':
        print(f"\n{player_1_name} wins!")
    elif player_1_choice == 'S' and player_2_choice == 'R':
        print(f"\n{player_2_name} wins!")
    elif player_1_choice == 'P' and player_2_choice == 'R':
        print(f"\n{player_1_name} wins!")
    elif player_1_choice == 'R' and player_2_choice == 'P':
        print(f"\n{player_2_name} wins!")
    else:
        print(f"\n{player_2_name} wins!")
 
if __name__ == "__main__":
    main()
Convert the following imperative statement into a Python function. Return the sum of two numbers. def add_numbers(a, b):
    '''This function will return the sum of two numbers'''
    return a + b
Create a Python Class to handle JSON formatted data  import json

class JSONHandler():
    '''A class to handle JSON-formatted data'''
    
    def __init__(self, json_string):
        self.json_string = json_string
        self.data = self.__parse_json_data()
        
    def __parse_json_data(self):
        parsed_data = json.loads(self.json_string)
        return parsed_data
        
    def get_data(self):
        return self.data
        
    def set_data(self, new_data):
        self.data = new_data
        self.__update_json_data()

    def __update_json_data(self):
        self.json_string = json.dumps(self.data)
Build a REST API using Python Flask for adding, updating, and deleting blog posts. Not applicable from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_marshmallow import Marshmallow

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///blog.sqlite3'

db = SQLAlchemy(app)
ma = Marshmallow(app)

# BlogPost Model
class BlogPost(db.Model):
 id = db.Column(db.Integer, primary_key=True)
 title = db.Column(db.String(100), nullable=False)
 content = db.Column(db.Text, nullable=False)

# BlogPost Schema
class BlogPostSchema(ma.Schema):
 class Meta:
 fields = ('id', 'title', 'content')

# Init Schema
blog_post_schema = BlogPostSchema()
blog_posts_schema = BlogPostSchema(many=True)

# Create a blog post
@app.route('/blog-post', methods=['POST'])
def add_blog_post():
 title = request.json['title']
 content = request.json['content']
 
 new_blog_post = BlogPost(title=title, content=content)
 
 db.session.add(new_blog_post)
 db.session.commit()
 
 blog_post = BlogPost.query.get(new_blog_post.id)
 
 return blog_post_schema.jsonify(blog_post)

# Update a blog post
@app.route('/blog-post/<id>', methods=['PUT'])
def update_blog_post(id):
 blog_post = BlogPost.query.get(id)
 
 title = request.json['title']
 content = request.json['content']
 
 blog_post.title = title
 blog_post.content = content
 
 db.session.commit()
 
 return blog_post_schema.jsonify(blog_post)

# Delete a blog post
@app.route('/blog-post/<id>', methods=['DELETE'])
def delete_blog_post(id):
 blog_post = BlogPost.query.get(id)
 db.session.delete(blog_post)
 db.session.commit()
 
 return blog_post_schema.jsonify(blog_post)

if __name__ == '__main__':
 app.run(debug=True)
Write a Python program to filter a list of numbers so only even numbers are kept. [2, 7, 3, 6, 10, 11, 13] new_list = [x for x in input_list if x % 2 == 0]
print(new_list) # Output: [2, 6, 10]
Write a Python program to compare two dictionaries. dict1 = {
    'key1': 'value1',
    'key2': 'value2',
    'key3': 'value3',
}

dict2 = {
    'key1': 'value1',
    'key2': 'value4',
    'key4': 'value5',
} def compare_dictionaries(dict1, dict2):
  result = {} 
  for key in dict1:    
    if (key in dict2):
      if (dict1[key] == dict2[key]):
        result[key] = "Same Value"
      else:
        result[key] = "Different Value"
    else:
      result[key] = "dict2 doesn't contains this keys"

  for key in dict2:
    if (key not in dict1):
      result[key] = "dict1 doesn't have this key"
  
  return result
Create a Python program to randomly generate a list of strings of 5, 10 or 15 characters long. Not applicable import string
import random

def generate_list(length):
 chars = string.ascii_letters + string.digits
 result = [''.join(random.choice(chars) for i in range(length)) for x in range(10)]
 return result

lengths = [5, 10, 15]
results = [generate_list(length) for length in lengths]

print(results)
Write a python program to implement the linear search algorithm  def linear_search(arr, key):
    for i in range(len(arr)):
        if arr[i] == key: 
            return i 
  
    return -1
Code a Python function to split a sentence into an array of words. Not applicable def splitSentence(sentence):
 words = sentence.split()
 return words

# Usage
sentence = "Split a sentence into an array of words"
words = splitSentence(sentence)
print(words) # ['Split', 'a', 'sentence', 'into', 'an', 'array', 'of', 'words']
Write a Python script to implement a linear search algorithm. lst = [1, 2, 3, 4, 5, 6]
target = 4 def linearSearch(lst, target):
 for i in range(len(lst)):
 if lst[i] == target:
 return i
 return -1

lst = [1, 2, 3, 4, 5, 6]
target = 4
result = linearSearch(lst, target)

if result == -1:
 print("Element is not present in the list")
else:
 print("Element is present at index", result)
Edit the following Python program so that it prints out the square root of a given number. number = 8 import math

number = 8

# compute the square root of the given number
square_root = math.sqrt(number)

# print the square root
print(f"The square root of {number} is {square_root}")
Create a Python script which queries a SQLite database and prints the results in a web page. Not applicable import sqlite3
import cgitb
cgitb.enable()

# Connect to the database
conn = sqlite3.connect('mydatabase.db')
cursor = conn.cursor()

#Execute the query
cursor.execute("SELECT * FROM mytable")

# Print out the result in an HTML page
print("Content-type: text/html")
print()
print("<h1>My Query Results</h1>")
print("<ul>")
for row in cursor.fetchall():
 print("<li>{}</li>".format(row))
print("</ul>")

# Close the connection
conn.close()
Design a function in Python that takes a list of numbers as a parameter and returns the largest number in the list.  def getLargestNum(nums):
    largestNum = nums[0]
    
    for num in nums[1:]:
        if num > largestNum:
            largestNum = num

    return largestNum
Write a Python function to find the maximum product of three integers from a given list. [-10, 6, 7, 8, 2] def max_product_three(numbers):
 numbers.sort()
 return max(
  numbers[0] * numbers[1] * numbers[-1], 
  numbers[-1] * numbers[-2] * numbers[-3]
 )
Create a Python program to filter a list of numbers between a minimum and maximum value. This program should prompt the user for the min and max. The program should then print the filtered list. Not applicable # Prompt the user for the min and max
min_val = int(input("Please enter minimum value: "))
max_val = int(input("Please enter maximum value: "))

# Create a list of numbers
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# Filter the list
filtered_list = list(filter(lambda x: x>=min_val and x<= max_val, numbers))

# Print the filtered list
print(filtered_list)
Build a Python program to predict movie genres from their titles. "The Ring" import sklearn_crfsuite
from sklearn_crfsuite import CRF
import string
import re

# Preprocessing for Movie Title
def preprocess_text(title):
    title = title.lower()
    titles = title.split()
    table = str.maketrans('', '', string.punctuation)
    titles = [word.translate(table) for word in titles]
    titles = [word for word in titles if re.search('[a-zA-Z]', word)]
    return titles

# Movie Title Tags
def get_labels(word):
    labels = []
    pattern = r'^[A-Z]'
    if re.search(pattern, word):
        labels.append('title')
    else:
        labels.append('other')
    return labels

# Word Features
def word2feature(sentence, word_key):
    word = sentence[word_key]
    features = {
            'word': word,
            'length': len(word),
            'starts_with_upper': int(word[0].isupper())
            }
    return features

# Features Extraction
def sent2features(sentence):
    return [word2feature(sentence, key) for key in range(len(sentence))]

# Labels Extraction
def sent2labels(sentence):
    return [get_labels(key) for key in sentence]

# Training the CRF Model
def train_crf_model(sentences, labels):
    X = [sent2features(s) for s in sentences]
    y = [sent2labels(s) for l in labels]
    crf = CRF(algorithm='lbfgs', c1=0.1, c2=0.1, max_iterations=100, all_possible_transitions=True)
    crf.fit(X, y)
    return crf

# Predicting the Genre
def predict_genre(title, crf):
    preprocessed_title = preprocess_text(title)
    test_feats = sent2features(preprocessed_title)
    predictions = crf.predict([test_feats])
    genre = ""
    for i in range(len(predictions[0])):
        if predictions[0][i] == 'title':
            genre += preprocessed_title[i] + " "
    return genre.strip()

# Main
movie_title = "The Ring"
sentences = [[word for word in preprocess_text(movie_title)]]
labels = [[]]

crf = train_crf_model(sentences, labels)
result = predict_genre(movie_title, crf)
print(result)
Utilizing the given data, write a Python program to identify the peak of maximum values in the data. The given data is "[9, 2, 10, 5, 4, 8, 3, 7]" def find_peaks(data):
    max_val = None
    max_idx = None
    for i, val in enumerate(data):
        if max_val is None or val > max_val:
            max_val = val
            max_idx = i
    return max_idx

data = [9, 2, 10, 5, 4, 8, 3, 7]
peak_index = find_peaks(data)
print('The peak of maximum values in the data is at index {} with value {}'.format(peak_index, data[peak_index]))
Create a function in Python that will determine whether a given number is composite or prime. Number: 21 def isPrime(x): 
	if x > 1: 
		for i in range(2,x): 
			if (x % i) == 0: 
				return False
		else: 
			return True
	else: 
		return False

num = 21
if(isPrime(num)) : 
	print(num, "is a prime number") 
else : 
	print(num, "is a composite number")
Implement a starter K-means clustering algorithm in Python.  import numpy as np

def kmeans(X, k, tol = 0.001, max_iter = 300):
    m = X.shape[0] # number of training examples
    n = X.shape[1] # number of features

    ## initialize the centroids
    centroids = np.zeros((k, n))

    ## randomly select k data points as centroids
    for i in range(k):
        centroids[i] = X[np.random.choice(m),:]

    ## initialize the cluster index
    cluster_index = np.zeros(m)
    pre_cluster_index = np.zeros(m)

    for it in range(max_iter):

        ## calculate the distance with each centroids 
        for i in range(m):
            min_distance = float('inf')
            for j in range(k):
                d = np.sum((X[i]-centroids[j])**2)
                if d < min_distance:
                    min_distance = d
                    cluster_index[i] = j

        ## check converging or not
        if np.array_equal(pre_cluster_index, cluster_index):
            break
        pre_cluster_index = cluster_index

        ## move the centroid to the average of points in the cluster
        for i in range(k):
            points_in_cluster =X[cluster_index == i]
            centroids[i] = np.mean(points_in_cluster, axis=0)

    return centroids, cluster_index
Create a python program to calculate the mean of 3 numbers.  def calculate_mean(num1, num2, num3):
    mean = (num1 + num2 + num3) / 3
    return mean
Create a function to print the last character of a given string in Python.  def print_last_char(input_string):
  print(input_string[-1])
Generate a python program to sort an array using Merge sort method. arr = [6, 5, 3, 1, 8, 7, 2, 4] # Sort the array using Merge sort
def mergeSort(arr): 
    if len(arr) > 1: 
        mid = len(arr)//2 
        L = arr[:mid] 
        R = arr[mid:] 
  
        # Sort the left and right side
        mergeSort(L) 
        mergeSort(R) 
  
        # Merge the parts recursively 
        i = j = k = 0
        
        while i < len(L) and j < len(R): 
            if L[i] < R[j]: 
                arr[k] = L[i] 
                i+=1
            else: 
                arr[k] = R[j] 
                j+=1
            k+=1
          
        # Checking if any element was left 
        while i < len(L): 
            arr[k] = L[i] 
            i+=1
            k+=1
          
        while j < len(R): 
            arr[k] = R[j] 
            j+=1
            k+=1
  
# Print the sorted array
mergeSort(arr) 
print("Sorted array is:",arr)
Write a Python program to create a dictionary with numbers from 0 to 4 as keys and corresponding values as given below. [1, 2, 3, 4] d = {0:1, 1:2, 2:3, 3:4, 4:4}
Construct a python program which will receive a string and output the same string in reverse. string = "Hello World!" def reverse_string(string):
    return string[::-1]
Write a Python program to implement a simple HTTP server that can return the HTML page given below on a request. <html>
<body>
<h1>Hello, World!</h1>
</body>
</html> import http.server
from http.server import SimpleHTTPRequestHandler

class MyHandler(SimpleHTTPRequestHandler):
  def do_GET(self):
    self.send_response(200)
    self.send_header('Content-type', 'text/html')
    self.end_headers()

    html = b"""
        <html>
        <body>
        <h1>Hello, World!</h1>
        </body>
        </html>
    """

    self.wfile.write(html)
 
server = http.server.HTTPServer(('', 8080), MyHandler)
server.serve_forever()
Create a Python program that finds the most common element in a list of numbers. [1, 2, 3, 4, 5, 2, 3, 3, 5, 2] def find_most_common_element(arr):
    num_occurrences = dict()
    max_occurrence = 0
    most_common_element = None
    for number in arr:
        if number in num_occurrences:
            num_occurrences[number] += 1
            if num_occurrences[number] > max_occurrence:
                max_occurrence = num_occurrences[number]
                most_common_element = number
        else:
            num_occurrences[number] = 1
    return most_common_element

arr = [1, 2, 3, 4, 5, 2, 3, 3, 5, 2]
most_common_element = find_most_common_element(arr)
print(most_common_element)
Generate a Python application that takes user input and searches for matching data from a list and returns the result. a list with animals (cat, dog, bird) animals = ["cat", "dog", "bird"]

def search_animals(user_input):
    for animal in animals:
        if user_input == animal:
            return animal
    return None

user_input = input("Enter the name of the animal: ")
result = search_animals(user_input)
if result != None:
    print("Found: {}".format(result))
else:
    print("No match found!")
Create a python function that takes two inputs as a string and returns their concatenated output. String a = 'Hello'
String b = 'World' def concat(a,b):
    return a+b
Design a program in Python to compute the Nth power of a given number. Number: 6
Power: 4 def pow(num, pow):
    result = 1
    for i in range(pow):
        result *= num
    return result
Develop a Python program that takes a list of numbers as an input and outputs the numbers in the list sorted in ascending order. [5, 3, 7, 2, 4, 9, 1] def sortAscending(list): 
    list.sort() 
    return list
  
# Driver Code 
list = [5, 3, 7, 2, 4, 9, 1]  
print(sortAscending(list)) 

# Output: [1, 2, 3, 4, 5, 7, 9]
Create a program to Reverse Engineer a given binary tree. a 
       /    \ 
      b       c
     / \     / \
    d   e    f  g # Python3 Program to print Postorder traversal  
# from given Inorder and Preorder traversals 
  
# Function to print postorder traversal  
def printPostOrder(inOrder, preOrder, n): 
  
    # The first element in preOrder[]  
    # is always root, search it in 
    # inOrder[] to find left and  
    # right subtrees 
    root = preOrder[0]; 
  
    # Iterate through inOrder[],  
    # find the index of root 
    rootIndex = 0
    for i in range(0, n): 
        if (inOrder[i] == root): 
            rootIndex = i
            break
  
    # Use index in Inorder to divide 
    # inOrder array in two parts  
    # Left Subtree and Right Subtree 
    if (rootIndex != 0): 
          
        # Recur for left subtree 
        printPostOrder(inOrder[0 : rootIndex],  
        preOrder[1 : rootIndex + 1], rootIndex) 
  
    # Recur for right subtree 
    if (rootIndex != n - 1): 
        printPostOrder(inOrder[rootIndex + 1 : n],  
        preOrder[rootIndex + 1 : n], n - rootIndex - 1) 
  
    print( root, end = " ") 
  
# Driver code 
if __name__ == '__main__': 
  
    inOrder = ['d','b','e','a','f','c','g'] 
    preOrder = ['a','b','d','e','c','f','g'] 
    n = len(inOrder) 
  
    # Print PostOrder Traversal 
    printPostOrder(inOrder, preOrder, n) 

# Output: 
# d e b f g c a
Write a Python program to print out the triangle pattern given an height n as input. height = 4 def print_triangle(n): 

    for i in range(n): 
        for j in range(i+1): 
            print("*",end="") 
        print() 
  
n = 4
print_triangle(n)

# Output
# *
# **
# ***
# ****
Create a python program that takes a list of numbers and returns the sum of all the numbers in the list. [1, 2, 3, 4, 5] def sum_list(list_of_numbers):
  total = 0
  for num in list_of_numbers:
    total += num
  return total
  
# Main
nums = [1, 2, 3, 4, 5]
total_sum = sum_list(nums)

print('Sum of list elements: ', total_sum)
Write a Python program to read CSV data and store it in a dictionary.  import csv

def read_csv_record(filename):
    data = {}
    with open(filename) as csv_file:
        reader = csv.DictReader(csv_file)
        for row in reader:
            data[row['key']] = row['value']
    return data
Generate a Python program to convert a given temperature from Fahrenheit to Celsius. 68 def fahrenheitToCelsius(fahrenheit):
    celsius = (fahrenheit - 32) * 5 / 9

    return celsius

fahrenheit_value = 68
celsius_value = fahrenheitToCelsius(fahrenheit_value)

print("{0} Fahrenheit is equal to {1} Celsius".format(fahrenheit_value, celsius_value))
Create a Python program to convert a list of characters into a string Convert this array ['a', 'b', 'c'] into a string def list_to_str(arr):
    str = ""
    for i in arr:
        str += i
    return str

arr = ['a', 'b', 'c']
  
result = list_to_str(arr) 
print(result)
Can you find the smallest number in a given list using Python? [4, 5, 6, 7, 8, 1, 2] def smallest_num(lst):
   min_num = lst[0]
   
   for num in lst:
       if num < min_num:
           min_num = num
           
   return min_num

lst = [4, 5, 6, 7, 8, 1, 2]

print(smallest_num(lst))
Create a function in Python that takes two strings in as arguments and returns a boolean value indicating if the strings have the same letter case. String1: Hello
String2: HeLLo def same_case(string1, string2): 

    # Take the lengths of two strings into consideration 
    if len(string1) != len(string2): 
        return False
        
    # Compare character by character 
    # If any one of the characters are not of same case 
    # return false 
    for x, y in zip(string1, string2): 
        if x.islower() != y.islower(): 
            return False

    # If execution reaches this point 
    # it means that all characters of both strings 
    # are having same case 
    return True
Create a Python program that reads two integer values from standard input, stores them in two variables, and then swaps their values? a = 5, b = 10 # Read two integer values
a = int(input())
b = int(input())

# Swap their values
temp = a
a = b
b = temp

# Print the variables
print("a =", a)
print("b =", b)
Develop a Python program to generate 10 random numbers between 1 and 100.  import random

for i in range(10):
    print(random.randint(1,100))
Can you generate a python program to reverse a given string? Hello def reverse_string(string):
    reversed_string = ""
    for char in string:
        reversed_string = char + reversed_string
    return reversed_string

string = "Hello"
reversed_string = reverse_string(string)
print(reversed_string)  # olleH
Write a Python program to calculate the tax for an item given a set of tax rates. Tax Brackets: [0.01, 0.05, 0.1, 0.15, 0.2], Item Price: $110 def calculate_tax(brackets, price):
 taxamount = 0
 for i in range(len(brackets)):
 if price>=100*(i+1):
 taxamount += 100*brackets[i]
  else:
 taxamount += (price%100)*brackets[i]
  break
 return taxamount

tax_brackets = [0.01, 0.05, 0.1, 0.15, 0.2]
item_price = 110 

tax = calculate_tax(tax_brackets, item_price)
print(tax)
Use an if-else statement in Python to determine if a number is even or odd. n = 7 if n % 2 == 0:
    print(n, 'is an even number')
else:
    print(n, 'is an odd number')
Create a Python program for filtering a given list of numbers and returning the even numbers. [1, 2, 3, 4, 5, 6, 7, 8, 9] def filter_even_numbers(numbers):
  even_numbers = []
  for number in numbers:
    if number % 2 == 0:
      even_numbers.append(number)
  return even_numbers

numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
print(filter_even_numbers(numbers))
Generate a program that translates a program written in one language to another language The following code is written in Javascript:

function doubleValue(num) {
 return num * 2;
} def doubleValue(num):
 return num * 2
 
# Javascript to Python 

def doubleValue(num): 
 return num * 2
Rewrite the following Python code in Node.js: EvenNumbers = [2, 4, 6, 8]
sum = 0
for item in EvenNumbers:
    sum += item
print(sum) let evenNumbers = [2, 4, 6, 8];
let sum = 0;
for (let item of evenNumbers) {
 sum += item;
}
console.log(sum);
Create a Python program to identify the most frequently occurring item in a list. [3,4,3,4,3] def most_frequent(list): 
  return max(set(list), key = list.count)
  
most_frequent([3,4,3,4,3])
Create a Python function to remove all the elements in a list that are greater than a specified value. [1, 2, 3, 4, 5], 3 def remove_greater_than(arr, value):
    new_arr = []
    for item in arr:
        if item <= value:
            new_arr.append(item)
    return new_arr

result = remove_greater_than([1, 2, 3, 4, 5], 3)
print(result)
Write a distributed Python program which can generate the Fibonacci series using Spark. Not applicable import findspark
findspark.init()

from pyspark import SparkContext

sc = SparkContext('local', 'fibonacci-generator')

def generate_fibonacci():
 rdd = sc.parallelize([0,1])
 for _ in range(100):
 rdd = rdd.flatMap(lambda x: [x, x + rdd.takeSample(withReplacement=True)[0]])
 return rdd.collect()

result = generate_fibonacci()
print(result)
Develop a python code to optimize a mathematical model. The mathematical model takes two inputs; x and y. def model(x, y):
    # Write the mathematical model here
  
def optimize(x_min, x_max, y_min, y_max):
    best_x = 0
    best_y = 0
    best_value = 0
    
    for x in range(x_min, x_max+1):
        for y in range(y_min, y_max+1):
            value = model(x, y)
            if value > best_value:
                best_x = x
                best_y = y
                best_value = value
    
    return best_x, best_y
Build a Python program to fetch 10 top trending articles from `medium.com` every 5 minutes.  import requests
import os
import time

while True:
    response = requests.get("https://medium.com/top-stories")
    if response.status_code == 200:
        with open("trending-articles.html", "w") as f:
            f.write(response.text)
            time.sleep(300)
    else:
        print("Error fetching webpage.")
Create a text editor in Python using the PyQt5 library. Not applicable import sys
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *

class Editor(QDialog):
    def __init__(self, parent=None):
        super(Editor, self).__init__(parent)
        self.text = QTextEdit()
        self.initUI()

    def initUI(self):
        layout = QVBoxLayout()
        layout.addWidget(self.text)
        self.setLayout(layout)
        self.setWindowTitle("Text Editor")

if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = Editor()
    window.resize(350, 250)
    window.show()
    sys.exit(app.exec_())
Edit the following Python Program to count the occurrences of a specific number. arr = [1, 2, 2, 3, 4]
num = 2

count = 0

for i in arr: arr = [1, 2, 2, 3, 4]
num = 2

count = 0

for i in arr:
    if i == num:
        count += 1

print(count) #outputs 2
Construct a program in Python that computes the sum of 3rd and 7th elements of a list. list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] def sum_elements(list):
    Sum = list[2] + list[6]
    return Sum
print(sum_elements(list))
Convert the following JavaScript code to its equivalent Python code. const array = [1, 2, 3]; array = [1, 2, 3]
Create a HTML page which displays your favorite programming language.  <!DOCTYPE html>
<html>
    <head>
        <title>My Favorite Programming Language</title>
    </head>
    <body>
        <h1>My favorite programming language is Python!</h1>
    </body>
</html>
Design and implement a Bubble Sort algorithm for sorting an array of numbers in Python. [64, 34, 25, 12, 22, 11, 90] def bubble_sort(l):
    for i in range(len(l)):
        for j in range(0, len(l)-i-1):
            if l[j] > l[j+1]:
                l[j], l[j+1] = l[j+1], l[j]

# Test code
l = [64, 34, 25, 12, 22, 11, 90]
bubble_sort(l)
print(l)
Provide a Python function to filter out a list of strings that does not contain any substring from a given set. List = ["apple", "banana", "pie", "candy"]
Set = ["banana", "pie"] def filter_list(input_list, ref_set):
    # Initialize
    result_list = []

    # Iterate through the list
    for item in input_list:
        # Set a flag
        flag = True

        # Check if the item contains any substring in ref_set
        for substring in ref_set:
            if substring in item:
                # If so, set the flag to False
                flag = False
                break

        # If the flag is still True
        if flag:
            # Add the item to the result list
            result_list.append(item)

    return result_list

# Test
filtered_list = filter_list(["apple", "banana", "pie", "candy"], ["banana", "pie"])
assert(filtere_list == ["apple", "candy"])
Create an array from the following list in Python. List: ["a", "b", "c", "d"] arr = ["a", "b", "c", "d"]
Write a Python program to apply a function to all the elements of a given list and return the mapped list. [1, 2, 3, 4, 5] def applyFunc(lst, func):
    mapped_list = []
    for el in lst:
        mapped_list.append(func(el))
    return mapped_list

def square(x):
    return x*x

lst = [1, 2, 3, 4, 5]

print(applyFunc(lst, square))
Write a web scraper in Python that downloads all article headlines from BBC's business news section. Not applicable import requests
from bs4 import BeautifulSoup

# Set the URL you want to webscrape from
url = 'https://www.bbc.co.uk/news/business/'

# Connect to the URL
response = requests.get(url)

# Parse HTML and save to BeautifulSoup object
soup = BeautifulSoup(response.text, "html.parser")

# To download the whole data set, let's do a for loop through all a tags
for link in soup.find_all('a'):
    # Get the text of the link
    headline = link.get('title')
    if headline is not None and headline != "":
        print(headline)
Execute a ensemble machine learning technique in Python to improve the accuracy of a given model. Model: Support Vector Clasification from sklearn.ensemble import VotingClassifier
from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier

#Create three classifiers
clf1 = SVC(kernel="rbf", probability=True, random_state=1234)
clf2 = LogisticRegression(random_state=1234)
clf3 = KNeighborsClassifier(n_neighbors=4)

#Create voting classifier
voting_clf = VotingClassifier(estimators=[('svc', clf1), ('lr', clf2), ('knn', clf3)], voting='soft')

#Fit the voting classifier
voting_clf.fit(x_train, y_train)

#Check the accuracy
acc = voting_clf.score(x_test, y_test)
print('Voting Classifier accuracy:', accuracy)
Generate a Python program to delete an item from a given list  def delete_item(lst, item):
    if item in lst:
        lst.remove(item)
    return lst
Implement a Naive Bayes algorithm in Python to classify comments into spam and non-spam categories. Not applicable # Import Libraries
import numpy as np

# Build dictionary containing necessary data
words = {
 'come': ['spam', 'ham'],
 'free': ['spam', 'ham'],
 'money': ['spam', 'ham'],
 'here': ['spam', 'ham'],
 'win': ['spam', 'ham'],
 'now': ['spam', 'ham'],
 'urgent': ['spam', 'ham'],
 'discount': ['spam', 'ham'],
 'buy': ['spam', 'ham'],
 'promo': ['spam', 'ham'],
}

# Number of Spam and non-Spam words
spam_words = 0
ham_words = 0

#Calculate number of words in each class
for key in words.keys():
 if 'spam' in words[key]:
  spam_words += 1
 if 'ham' in words[key]:
  ham_words += 1

# Probabilities of each class
P_spam = spam_words / (spam_words + ham_words)
P_ham = ham_words / (spam_words + ham_words)

# Probability of each word in each class
words_spam_prob = [0] * len(words)
words_ham_prob = [0] * len(words)
i=0

for key in words.keys():
 if 'spam' in words[key]:
  words_spam_prob[i] = words[key].count('spam') / spam_words
 if 'ham' in words[key]:
  words_ham_prob[i] = words[key].count('ham') / ham_words
 i += 1

# Function to classify spam and non-spam
def classify(comment):
 # Split comment into words
 words_in_comment = comment.split()
 
 # Calculate probability of comment being spam
 p_spam_comment = np.log(P_spam)
 p_ham_comment = np.log(P_ham)
 
 # Iterate through words in comment and calculate probability of comment being each class
 for word in words_in_comment:
  if word in words:
   p_spam_comment += np.log(words_spam_prob[list(words.keys()).index(word)])
   p_ham_comment += np.log(words_ham_prob[list(words.keys()).index(word)])
 
 # Determine and return class of comment
 if p_spam_comment > p_ham_comment:
  return 'spam'
 else:
  return 'ham'
Determine the output of the given Python program. list = [1, 2, [3,4], [5,[100, 200,['hello']], 23, 11], 1, 7]

result = list[3][1][2][0] hello
Write a python code to check if an input string is a palindrome.  def is_palindrome(input_str):
 reversed_str = input_str[::-1]
 return input_str == reversed_str
Design a neural network in Python for predicting house prices.  import tensorflow as tf 
from tensorflow import keras 

# create a Neural Network
model = keras.Sequential([ 
    keras.layers.Dense(64, activation=tf.nn.relu, input_shape=(6,)), 
    keras.layers.Dense(64, activation=tf.nn.relu), 
    keras.layers.Dense(1) 
]) 
  
# compile the model 
model.compile(optimizer = 'rmsprop', 
              loss = keras.losses.MeanSquaredError(), 
              metrics=['accuracy']) 
              
# train the model
model.fit(X_train, y_train, epochs=40) 

# test the model 
test_loss, test_acc = model.evaluate(X_test, y_test) 

print('Test accuracy:', test_acc)
Create a Python dictionary of students' names and their corresponding grades in a course. John - 98;
Jennifer - 95;
Noah - 87;
Frank - 92; students_dict = {
 "John": 98,
 "Jennifer": 95,
 "Noah": 87,
 "Frank": 92
}
Using a Python dictionary implement a function to reverse a string.  def reverseString(s):
    # define a dictionary 
    revDict = {}
    # Iterate through the characters in the string
    for i in range(len(s)):
      # store the character as the key and its index as the associated value
      revDict[s[i]] = i
    # sort the dictionary by the values
    revDict = sorted(revDict.items(), key = 
             lambda kv:(kv[1], kv[0])) 
    # Join the elements to form a reversed string
    reversedString =  "".join(item[0] for item in revDict) 

    return reversedString
Convert a SQL query to Python code. SELECT * FROM orders WHERE status = 'shipped' import sqlite3

conn = sqlite3.connect('database.db')
c = conn.cursor()
c.execute('SELECT * FROM orders WHERE status = \'shipped\'')

result = c.fetchall()

for row in result:
    print(row)

conn.close()
Write a Python program to select all the Sundays of a specified year. year = 2020 import datetime

def select_all_sundays(year):
    sunday_list = []
    for n in range(1,13):
        sundays = [d for d in [datetime.date(year, n, d) for d in range(1, 32)]
                if d.weekday() == 6]
        sunday_list.extend(sundays)
    return sunday_list

if __name__ == '__main__':
    year = 2020
    sunday_list = select_all_sundays(year)
    print(sunday_list)
Write a Python comparative sorting algorithm [9, 8, 7, 6, 5, 4, 3, 2, 1] def sort(list):
    """
    Implements a comparison sorting algorithm using Python.
    Sorts the given list in ascending order.
    """
    for i in range(len(list)):
        for j in range(i + 1, len(list)):
            if list[i] > list[j]:
                list[i], list[j] = list[j], list[i]
    return list

if __name__ == '__main__':
    list = [9, 8, 7, 6, 5, 4, 3, 2, 1]
    print(sort(list))
Create a Dockerfile to build a container with python, flask, and gunicorn. Not applicable FROM python:3.7
	
RUN mkdir /usr/src/app

WORKDIR /usr/src/app

COPY requirements.txt ./

RUN pip install --no-cache-dir -r requirements.txt

EXPOSE 5000

COPY . .

CMD ["gunicorn", "--workers", "3", "-eventlet", "--bind", ":5000", "wsgi:app"]
Create a Python program to fetch the data from a web page and store it into a dictionary.  import requests

url = "https://example.com/data"

response = requests.get(url)
data = response.json()

data_dict = {}
for item in data:
    data_dict[item['id']] = item
    
print(data_dict)
Find the square root of the given number using their binary search algorithm. Number: 16 # Python program to find square root  
# using binary search 

def binarySearch(n, low, high): 
    mid = low + (high - low)/2
  
    # base cases 
    if(mid*mid == n): 
        return mid 
          
    if(mid*mid > n): 
        return binarySearch(n, low, mid-1) 
          
    return binarySearch(n, mid+1, high)
      
# Driver Code 
n = 16
ans = binarySearch(n, 0, n) 
#print 'Square root of ', n, 'is', ans
print("Square root of %0.5f is %f " % (n, ans))
Create a python program to rotate a list of numbers by a given number. [1,2,3,4,5] def rotate_list(nums, n):
  return nums[n:] + nums[:n]
Create a random forest regressor in Python to predict house prices from square footage, number of bedrooms, and neighborhood. Not applicable import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor

# get data
df = pd.read_csv('house_prices.csv')

# split the dataset into input and target variables
X = df[['square_footage', 'bedrooms', 'neighborhood']]
y = df['price']

# one-hot encode categorical variables
X = pd.get_dummies(X)

# split the dataset into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# create the regressor
rf = RandomForestRegressor()

# fit the model
rf.fit(X_train, y_train)

# make predictions
y_pred = rf.predict(X_test)
Design a Python script to analyze a given text corpus and compute the probability of certain words occurring. Text corpus: "The cat in the hat is a funny book. I really like the cat in the hat."
Words: cat, hat # initialize the word probability counts
word_prob_dict = {}

# split the text corpus into sentences
sentences = text.split('.')

for word in words:
  word_prob_dict[word] = 0

# calculate the probability of the words appearing
for sentence in sentences:
  for word in words:
    if word in sentence:
      word_prob_dict[word] = word_prob_dict[word] + 1

for word in words:
  word_prob_dict[word] = word_prob_dict[word] / len(sentences)

print(word_prob_dict)
# Output: {'cat': 0.5, 'hat': 0.5}
Generate a Python code snippet for initializing a 3D numpy array of size (4,3,2). Not applicable import numpy as np

# initialize 3D array
arr = np.zeros((4,3,2))
Build a Python program to tokenize a string into separate words. "Hello, World!" def tokenize(string):
    words = string.split(" ")
    return words

tokenized_str = tokenize("Hello, World!")
print(tokenized_str)
Generate a python program to create a matrix of n rows and m columns.  def create_matrix(n, m):
    matrix = [[0 for _ in range(m)] for _ in range(n)]
    return matrix
Write a Python program that can generate a random 5-digit number and check if that number is prime or not. Not applicable import random

def is_prime(num):
	for i in range(2, num):
		if num%i == 0:
			return False
	return True

def generate_prime():
	while True:
		num = random.randint(10000, 99999)
		if is_prime(num):
			return num

if __name__ == '__main__':
	num = generate_prime()
	print(num, 'is a prime number')
Create a python function to normalize a given matrix. [[1, 2, 3],
[4, 5, 6],
[7, 8, 9]] def norm(mat):
  result = [[0 for row in range(len(mat[0]))] for col in range(len(mat))] 
  for i in range(0, len(mat)):
    for j in range(0, len(mat[0])):
        result[i][j] = mat[i][j] / sum(mat[i])
  return result

print(norm([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))
Optimize the following Python code to print the numbers in reverse. for i in range(1,11):
    print(i) for i in reversed(range(1,11)):
    print(i)
Create a neural network in Python that is able to classify Iris flower species given sepal and petal measurements.  import pandas as pd 
import numpy as np 
import tensorflow as tf 
from tensorflow import keras 
from tensorflow.keras import layers 

# read in data
data = pd.read_csv('iris.data')

# labels 
labels = data['species']

# features 
features = data.drop('species', axis=1)

# normalize features
features = (features - features.mean()) / features.std()

# create model
model = keras.Sequential()
model.add(layers.Dense(units=4, activation='relu', input_shape=(4,)))
model.add(layers.Dense(units=10, activation='relu'))
model.add(layers.Dense(units=3, activation='softmax'))

# compile model 
model.compile(optimizer=tf.keras.optimizers.Adam(),
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# train/fit model
model.fit(features, labels, epochs=100, validation_split=0.2)
Perform an optimization algorithm in Python to find the maximum value of a function given a set of initial conditions. def f(x):
  return 3*x**2 + 2*x + 7

initial_conditions = [-3.2, -1.5, 2.4] from scipy.optimize import minimize

def f(x):
  return 3*x**2 + 2*x + 7

initial_conditions = [-3.2, -1.5, 2.4]

result = minimize(f, initial_conditions, method='nelder-mead')
max_val = result.fun
Write a Python program to remove a specified item from a dictionary. sample_dict = {'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5} def remove_from_dict(d, key):
    if key in d:
        del d[key]
    return d

result = remove_from_dict(sample_dict, 'three')
print(result)
Create an AI game in Python for the user to guess a number between 1 and 10.  import random

# set the maximum number of guess
max_guesses = 5

# generate a random number
target_num = random.randint(1, 10)

# initialize number of guesses
num_guesses = 0

# prompt user for a guess
while num_guesses < max_guesses:
    user_guess = int(input("Guess a number between 1 and 10: "))
    
    # check if user guess is correct
    if user_guess == target_num:
        print("You have guessed the number correctly")
        break
    # check if user guess is greater or lesser
    elif user_guess > target_num:
        print("Your guess is greater than the target number")
    else:
        print("Your guess is lesser than the target number")
    num_guesses += 1

if num_guesses == max_guesses:
    print("You have reached your maximum number of guesses")
Generate a function in Python that takes an array of numbers and returns an array of the squares of the numbers. [1,2,3] """
A function to return the squares of an array in Python 
"""

def square_array(input_array): 
  squared_array = []
  for i in input_array: 
    squared_array.append(i*i)
  return squared_array
Generate a code in Python to find the index of the smallest element in a given list of numbers. [4, 2, 5, 12, 7] def index_min(arr):
    min_index = 0
    for i in range(1,len(arr)):
        if arr[i] < arr[min_index]:
            min_index = i
    return min_index
Build a Python program to generate an html page that displays a bar chart showing the relationship between age and number of people. Age and number of people
Age  |  Number of people
18 – 28  |  500
28 – 38  |  600
38 – 48  |  400
48 – 58  |  200
58 – 68  |  100 import matplotlib.pyplot as plt
 
# data
age = [18, 28, 38, 48, 58, 68]
number = [500, 600, 400, 200, 100]
 
# bar plot
plt.bar(age, number)
 
# set title and labels
plt.title('Age and Number of People')
plt.xlabel('Age')
plt.ylabel('Number of people')

# save and show the figure
plt.savefig('bar_plot.png')
plt.show()
Write a Python program to optimize a given binary search tree by rotating the nodes to make sure the tree is balanced.  def rotateNodes(root): 
    # if node has a left child 
    if root.left is not None: 
        # we rotate clockwise 
        newRoot = root.left 
        root.left = newRoot.right 
        newRoot.right = root 
        root = newRoot 
  
    # if node has a right child 
    if root.right is not None: 
        # we rotate counter clockwise 
        newRoot = root.right 
        root.right = newRoot.left  
        newRoot.left = root 
        root = newRoot 

    return root
Create a python script that takes an array of integers and returns an array of their squares. [1, 2, 3, 4, 5] def find_squares(arr):
    squares = []
    
    for num in arr:
        squares.append(num ** 2)
        
    return squares

find_squares([1, 2, 3, 4, 5])
Construct a Python function to convert a string of text to uppercase. Not applicable def upper_string(str1):
    upper_str = ''
    for i in range(len(str1)):
        if ord(str1[i]) in range(97, 123):
            upper_str += chr(ord(str1[i]) - 32)
        else:
            upper_str += str1[i]
    return upper_str
Identify the best syntax to use in Python to add two numbers.  # Python syntax to add two numbers
result = number_1 + number_2
Create a Python program that implements a search algorithm (e.g. binary search, linear search). Array: [1, 3, 4, 6, 8, 9, 11, 12, 14]
Target: 11 def linear_search(arr, target):
 for i in range(len(arr)):
 if arr[i] == target:
 return i

 return -1

arr = [1, 3, 4, 6, 8, 9, 11, 12, 14]
target = 11

result = linear_search(arr, target)
if result == -1:
 print('Element not found')
else:
 print(f'Element found at index {result}')

Output:
Element found at index 6
Write a class in Python that validates a given password and prints the result. password = "12345" """
Write a class in Python to validate a given password
"""

class PasswordValidator:
    def __init__(self, password):
        self.password = password

    def validate(self):
        is_valid = True
        # Add code to check length, special characters, etc.
        if len(self.password) < 8:
            is_valid = False

        return is_valid

pwd = PasswordValidator("12345")

if pwd.validate():
    print("The password is valid")
else:
    print("The password is invalid")
In Python, create a server program listening to two ports.  import socket

# Create a TCP/IP socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# Bind the socket to the port
server_1_address = ('localhost', 10000)
server_2_address = ('localhost', 20000)
s.bind(server_1_address)
s.bind(server_2_address)

# Listen for incoming connections
s.listen(1)

while True:
    # Wait for a connection
    connection_1, client_address_1 = s.accept()
    connection_2, client_address_2 = s.accept()

    try:
        print("Connection from:", client_address_1, "and", client_address_2)

        # Receive the data in small chunks and retransmit it
        while True:
            data_1 = connection_1.recv(1024, 0)
            data_2 = connection_2.recv(1024, 0)
            if data_1:
                connection_1.sendall(data_1, 0)
            if data_2:
                connection_2.sendall(data_2, 0)
            else:
                break

    finally:
        # Clean up the connection
        connection_1.close()
        connection_2.close()
Design a class in Python for storing information about books. The class should contain fields for the book title, author, and year of publication. Not applicable class Book:
  
 def __init__(self, title, author, year):
 self.title = title
 self.author = author
 self.year = year
 
 def __str__(self):
  return f"{self.title} by {self.author} ({self.year})"
Modify the following code in Python to only repeat a segment of the code while a certain user input is given. while True:
	print("Hello World") # Get user input
input = input('Enter "repeat" to repeat the code: ')

# Execute the code while user input is "repeat" 
while input == 'repeat':
	print("Hello World")
	input = input('Enter "repeat" to repeat the code: ')
Write a Python script that takes two string inputs, a first name and a last name and returns the full name. "John"
"Smith" def get_full_name(first, last):
  full_name = f"{first} {last}"
  return full_name

name = get_full_name("John", "Smith")
print(name)
Write a Python program to compute the number of valid binary search trees for a given integer N. N = 5 # Function to calculate the number of binary trees
# for a given number of nodes 'n'
def num_bst(n):
 
 # base case
 if n == 0 or n == 1:
  return 1
 
 # Initialize the number of BST 
 num = 0
 
 # Iterate through the N values
 for i in range(1, n+1):
  # Calculate the number of BST of left sub-tree
  num_left_subtrees = num_bst(i-1)
 
  # Calculate the number of BST of right sub-tree
  num_right_subtrees = num_bst(n-i)
 
  # Add the number of BST of left and right sub-tree
  num += num_left_subtrees * num_right_subtrees
 
 return num
 
# Driver code
N = 5
print(num_bst(N)) # 42
Create an AI assistant to answer questions about the Python programming language. The assistant should be able to answer questions like "What is a while loop?", "What is the difference between a list and a dictionary?" Not applicable from rasa_nlu.model import Interpreter

interpreter = Interpreter.load('./models/nlu/default/model')

def ask_question(question):
 result = interpreter.parse(question)
 intent = result['intent']['name']

if intent == 'python_while_loop':
 #return answer to "What is a while loop?"
elif intent == 'python_list_dictionary':
 #return answer to "What is the difference between a list and a dictionary?"
Create an algorithm in Python that categorizes a text document into one of three categories -- positive, negative, or neutral. Text document = "This is an exciting opportunity that I am looking forward to" def determine_sentiment(text):
    score = 0
    for word in text.split(" "):
        if word in positive_words:
            score += 1
        elif word in negative_words:
            score -= 1
    if score > 0:
        return "positive"
    elif score < 0:
        return "negative"
    else:
        return "neutral"
 
# Test document
test_document = "This is an exciting opportunity that I am looking forward to"
 
# Determine sentiment
sentiment = determine_sentiment(test_document)
print("Sentiment:", sentiment)
# Output: Sentiment: positive
Write a for loop in Python to iterate through the list [4, 7, 11, 13] and print each number.  for num in [4,7,11,13]:
    print(num)
Write a Python program to find all the common elements between two lists.  def intersection(list1, list2): 
    return list(set(list1) & set(list2))
Develop a Python program that takes an array of integers and returns the largest element. [2, 4, 8, 9, 10] def find_max(arr):
    
    max_val = arr[0]
    
    for num in arr:
        if num > max_val:
            max_val = num
            
    return max_val

print(find_max([2, 4, 8, 9, 10]))
Create a python script to fetch data from an API  import requests

#make the API call
response = requests.get('http://api.example.com/')

#get the data from the response
data = response.json()

#print the data
print(data)
Improve the following Python program to reduce its time complexity. def find_max_sum(arr):
    max_sum = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)): 
            max_sum = max(max_sum, arr[i] + arr[j])
    return max_sum def find_max_sum(arr):
    max_sum = 0
    left = 0
    right = len(arr) - 1
    while left < right:
        if arr[left] + arr[right] > max_sum:
            max_sum = arr[left] + arr[right]
        if arr[left] > arr[right]:
            right -= 1
        else:
            left += 1
    return max_sum
Use Python to generate a random grade based on a given number of points.  def generate_grade(points):
    if points >= 90:
       return "A"
    elif points >= 80:
       return "B"
    elif points >= 70:
       return "C"
    elif points >= 60:
       return "D"
    else:
       return "F"
Create a Python program to check if a list is sorted in ascending order. listA = [1, 5, 9, 10] def isListAscending(listA): 
    return all(listA[i] <= listA[i+1] for i in range(len(listA)-1)) 

# Driver code 
listA = [1, 5, 9, 10] 
# listA = [10, 9, 5, 1] 

# Print result 
print(isListAscending(listA))
Write an object-oriented program in python to represent a booking system.  #Class to represent a booking system
class Booking:
    def __init__(self, name, date, time):
        self.name = name
        self.date = date
        self.time = time
    
    def view_details(self):
        print("Name: ", self.name)
        print("Date: ", self.date)
        print("Time: ", self.time)
    
    def edit_details(self):
        self.name = input("Enter new name: ")
        self.date = input("Enter new date: ")
        self.time = input("Enter new time: ")
    
    def cancel_booking(self):
        self.name = None
        self.date = None
        self.time = None
        print("Booking cancelled successfully.")
Write a Python function that takes two dimensional array and transposes it. [[1,2,3],[4,5,6]] def transpose_matrix(matrix):
    transposed_matrix = []
    for i in range(len(matrix[0])):
        row = []
        for j in range(len(matrix)):
            row.append(matrix[j][i])
        transposed_matrix.append(row)
    return transposed_matrix

my_matrix =[[1,2,3],[4,5,6]]
transposed_matrix = transpose_matrix(my_matrix)
print(transposed_matrix)
Write a Python program to create a new string that is the reverse of the given one.  def reverse_string(string): 
    string = string[::-1] 
    return string 
  
# Driver code 
string = "Python Programming"
print(reverse_string(string))
Modify the following program to output the 3 most frequency words. words = 'It is very important to be pythonic when writing python code.'

word_dict = {}
for word in words.split():
    if word in word_dict:
        word_dict[word] += 1
    else:
        word_dict[word] = 1 words = 'It is very important to be pythonic when writing python code.'

word_dict = {}
for word in words.split():
    if word in word_dict:
        word_dict[word] += 1
    else:
        word_dict[word] = 1

sorted_words = sorted(word_dict, key = lambda x: word_dict[x], reverse = True)
print("The three most frequent words are:")
for i in range(3):
    print(sorted_words[i], word_dict[sorted_words[i]])
Generate an optimization algorithm with Python using the scipy.optimize library. An array of values for parameters a, b and c, and an optimization goal of maximizing the function f(x) = a * x + b * sin(c * x). from scipy.optimize import minimize
import numpy as np

# define the parameters
a, b, c = <array of values for parameters a, b and c>

# define the objective function
def f(x):
 return a * x + b * np.sin(c * x)

# optimize
result = minimize(f, 0, method='BFGS')

# print the results
print(result.x)
Create an AI assistant in Python that can generate a forecast with any given dataset. weather dataset: dates, temperature in Celsius, humidity from sklearn.linear_model import LinearRegression
import pandas as pd

# Read dataset
df = pd.read_csv('weather.csv')

# Define features and target
X = df[['date', 'temp']]
y = df['humidity']

# Create Linear Regression model
model = LinearRegression()
model.fit(X, y)

# Make predictions
predictions = model.predict(X)

# Display results
print('Forecasted Humidity')
for i in range(len(predictions)):
    print('{:.2f}'.format(predictions[i]))
Convert this SQL query to Python. SELECT *
FROM customers
WHERE customer_name LIKE '%John%' import pydb

def query_customer_name(name):
    query = """
    SELECT *
    FROM customers
    WHERE customer_name LIKE %s"""
    name_wildcard = '%' + name + '%'
    query_result = pydb.query(query, name_wildcard)
    return query_result
    
if __name__ == '__main__':
    query_customer_name('John')
Create a Recurrent Neural Network (RNN) Model in Python with Keras that takes in text data and generates predicted labels. Not applicable import keras
from keras.preprocessing import sequence
from keras.models import Sequential
from keras.layers import Dense, Embedding, LSTM
from keras.datasets import imdb

(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=20000)

x_train = sequence.pad_sequences(x_train, maxlen=80)
x_test = sequence.pad_sequences(x_test, maxlen=80)

model = Sequential()
model.add(Embedding(20000, 128))
model.add(LSTM(128, dropout=0.2, recurrent_dropout=0.2))
model.add(Dense(1, activation='sigmoid'))

model.compile(loss='binary_crossentropy',
 optimizer='adam',
 metrics=['accuracy'])

model.fit(x_train, y_train,
 batch_size=32,
 epochs=15,
 verbose=2,
 validation_data=(x_test, y_test))

score, acc = model.evaluate(x_test, y_test,
 batch_size=32,
 verbose=2)
Create a Python function that processes a string and returns the string in lowercase. String to be modified: "MyString" def process_string(string):
    return string.lower()

process_string("MyString") # returns "mystring"
Create a scoring system for a trivia game in Python. The system should take two inputs - the correct answer and user response - and return a single score value. correct_answer = '5'
user_response = 'five' def score_trivia(correct, user):
    correct = correct.lower()
    user = user.lower()

    max_score = 10
    score = 0

    if correct == user:
        score = max_score
    elif user in correct or correct in user:
        score = max_score * 0.8

    return score
Build a Python script to multiply two integer values.  def multiply(a, b):
    return a * b

print(multiply(2, 3))
Modify the following Python program to calculate the factorial of a given number. n=5 def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

num = 5
print(f"The factorial of {num} is {factorial(num)}")
Design a function in Python which takes two strings as input and returns a boolean value as output depending on which one is longer.  def longer_string(string1, string2):
    if len(string1) > len(string2):
        return True
    else:
        return False
Write a function to generate a random MAC address in Python.  import random
import string

def gen_mac_address():
    """Generates a random MAC address"""
    mac = [ 0x00, 0x24, 0x81,
        random.randint(0x00, 0x7f),
        random.randint(0x00, 0xff),
        random.randint(0x00, 0xff) ]
    return ':'.join(map(lambda x: "%02x" % x, mac))

print(gen_mac_address())
Generate a Python program to classify text sentiment. The program should take two strings as inputs: a sentence and a class label. It should return the predicted sentiment class (positive or negative). Sentence: "I like this place."
Class Label: "positive" import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer

def classify_sentiment(sentence, class_label):
"""
Classifies sentiment based on a given sentence and class label

Args:
 sentence (str): The sentence to classify sentiment for
 class_label (str): The class label to use as a reference

Returns:
 str: The predicted sentiment class (positive/negative)
"""
 sid = SentimentIntensityAnalyzer()
 sentiment = sid.polarity_scores(sentence)['compound']
 if sentiment >= 0.05:
 return "positive"
 else:
 return "negative"

classify_sentiment("I like this place.", "positive") # returns "positive"
Convert the following Python List into a Dictionary. lst = [[1, 2], [3, 4], [5, 6]] dict_data = { lst[i][0] : lst[i][1] for i in range(len(lst)) }
 
print(dict_data)
Create a Python program that takes two strings as input and returns a boolean indicating if the two strings are permutations of each other or not. s1 = "hello", s2 = "lloeh" def is_permutation(s1, s2):
    s1 = s1.lower() # Convert both strings to lowercase
    s2 = s2.lower()
    if len(s1) != len(s2):
        return False # If the lengths are not equal, the strings must not be permutations
    for c in s1:
        if c not in s2: # Check if every character in s1 appears in s2
            return False
    return True

result = is_permutation("hello", "lloeh")
print(result)
Create a basic web scraper in Python using the requests library and the Beautiful Soup library. The web scraper should take a URL as an argument and print the text content of the page. Url: https://example.com import requests
from bs4 import BeautifulSoup

# Define the URL
url = 'https://example.com'

# Make a request
response = requests.get(url)

# Parse the HTML
soup = BeautifulSoup(response.text, 'html.parser')

# Print the text contents
print(soup.text)
Implement the Naive Bayes classifier in Python to solve a multi-class classification problem.  import numpy as np  
from sklearn.naive_bayes import GaussianNB 

# declare data  
X = np.array([[0, 0], [1, 1], [2, 2], [3, 3], [4, 4]]) 
Y = np.array([0, 1, 2, 3, 4]) 
  
# create Gaussian Naive Bayes model object and train it with the data 
clf = GaussianNB() 
clf.fit(X, Y) 
  
# predict the outcome 
predicted_label = clf.predict([[2, 0]]) 
print(predicted_label)
Create a Python program for classifying the sentiment of a text. The program should take a string argument and predict whether the sentiment is positive or negative. Not applicable import textblob

def predict_sentiment(text):
    sentiment = textblob.TextBlob(text).sentiment
    sentiment_value = sentiment.polarity
    sentiment_class = 'positive' if sentiment_value >= 0 else 'negative'
    return sentiment_value, sentiment_class

sentiment_value, sentiment_class = predict_sentiment('This is a great article!')
print(sentiment_value, sentiment_class)
# Output: 0.8 positive
Design a selection sort algorithm in Python.  def selection_sort(arr): 
    for i in range(len(arr)): 
  
        # Find the minimum element in remaining 
        # unsorted array 
        min_idx = i 
        for j in range(i+1, len(arr)): 
            if arr[min_idx] > arr[j]: 
                min_idx = j 
  
        # Swap the found minimum element with  
        # the first element         
        arr[i], arr[min_idx] = arr[min_idx], arr[i]
Create an algorithm in Python to search a given list for a specific value. [1, 4, 6, 8, 10], 8 def search(lst, target):
 for i in range(len(lst)):
  if lst[i] == target:
   return i
 return -1

search([1, 4, 6, 8, 10], 8)  # Output: 3
Generate a function in Python that takes a list of numbers and returns the average value of all the numbers. Not applicable def average(numbers):
 sum = 0
 for number in numbers:
 sum += number
 return sum / len(numbers)
Use the given code to extract date information from sentences. The code includes helper functions to normalize annotations, split sentences, tag parts of speech, find key verbs, and extract date information using DBpedia. To use the code, call the main function with appropriate arguments.  from subprocess import *
import re
import treetaggerwrapper
import sparqlQuerypy
from bs4 import BeautifulSoup

CONSTANTKEYVERBS="die, died, death, born, birth, sworn in" #Set of words that if present in the sentence, then don't discard the sentence, we are interested.
tagger = treetaggerwrapper.TreeTagger(TAGLANG = 'en', TAGDIR = '/home/vedu29/python/Gsoc/treetagger')


def jarWrapper(*args): # The helper function to use the jar file.
    process = Popen(['java', '-jar']+list(args), stdout=PIPE, stderr=PIPE)
    ret=[]
    while process.poll() is None:
        line = process.stdout.readline()
        if line != '' and line.endswith('\n'):
            ret.append(line[:-1])
        stdout, stderr = process.communicate()
        ret += stdout.split('\n')
        if stderr != '':
            ret += stderr.split('\n')
        ret.remove('')
        return ret

def returnProperty(word): #helper function to map the verb to a property. This will be small considering the number of date properties in DBpedia.
    if word in ['death', 'die']: return 'http://dbpedia.org/ontology/deathDate'
    if word in ['birth', 'born', 'bear']: return 'http://dbpedia.org/ontology/birthDate'


def normalizeAnnotations(sentence): # helper function to remove the references annotation, that appear as square brackets at the end of the sentence.
    return re.sub(r'\[[0-9]*\]', ' ', sentence)

def sentenceSplitter(sentence): # helper regular function to correctly find end of sentences.
    return re.split(r'(?<!\w\.\w.)(?<![A-Z][a-z]\.)(?<=\.|\?)\s', sentence)
    
def normaliseResult(result):
    normRes=[]
    for sentence in result:
        sent=normalizeAnnotations(sentence)
        normRes += sentenceSplitter(sent)
    return normRes

def findAndGenericAnnotateTime(sentence): #Replacing heidelTime tagged Timex tags to a generic 'TIME' so that treeTagger can work its magic without hiccups.
    return re.sub('<TIMEX3((?!<TIMEX3).)*</TIMEX3>', 'TIME', sentence)

def treetag(sentence, encoding = None): # TreeTagger helper function.
    if encoding != None:
        return treetaggerwrapper.make_tags(tagger.tag_text(unicode(sentence, "utf-8")))
    else:
        return treetaggerwrapper.make_tags(tagger.tag_text(sentence))

def returnKeyverbs(): #formats the key verbs above.
    return '|'.join(verb for verb in CONSTANTKEYVERBS.split(', '))


def findSubVerbsTime(tagsentence): # The main helper function that figures out the subject in the sentence and finds the correct core verbs marked by an '*'
    pos=[]
    pos2=[]
    seenSubject=False
    seenVerb=False
    lastfew=0
    for i, tags in enumerate(tagsentence):
        if tags.pos=='NP' or tags.pos=='PP':
            pos += [tags.word]
            seenSubject=True
            lastfew+=1
        if re.match(u'V..|V.', tags.pos) != None and seenSubject:
            if not seenVerb:
                subject = pos[-lastfew:]
                pos2 += [[subject]]
            if re.match(u'VB.', tags.pos) != None:
                pos2[-1] += [tags.word]
            else:
                pos2[-1] += [tags.word+'*']
                seenVerb=True
        if re.match(u'V..|V.', tags.pos) == None and seenVerb:
            seenVerb=False
            seenSubject=False
            lastfew=0
    return pos2

def lemmatizeMainVerb(item):
    for verb in item[1:]:
        if '*' in verb:
            return treetag(verb)[0].lemma


def listTimes(sentence): # uses beautiful soup to get the date information.
    soup = BeautifulSoup(sentence, 'html.parser')
    return soup.find_all('timex3')


def main(args):
    result = jarWrapper(*args)
    for sentence in normaliseResult(result):
        
        sent=findAndGenericAnnotateTime(sentence)
    
        m = re.match(r"(?P<first_part>.*) (?P<predicate>%s) (?P<second_part>.*)"%(returnKeyverbs()), sent) #scans the sentences for this pattern.
        if m!=None:       

            left=treetag(m.group('first_part'), "utf-8")
            middle=treetag(m.group('predicate'), "utf-8")
            right=treetag(m.group('second_part'), "utf-8")
            tagsentence = left + middle + right

            if 'TIME' in m.group('first_part') or 'TIME' in m.group('second_part'): #Skip sentence if not date details.

                subVerbTime = findSubVerbsTime(tagsentence)
                for item in subVerbTime:
                    subject=" ".join(thing for thing in item[0])
                    if subject.lower() in ['he','she', 'it']:
                        subject=previousSubject
                    annotate = sparqlQuerypy.findAnnotation(subject)
                    annotatedSubject = annotate[0]['s']['value']
                    previousSubject = subject  #heuristic that subject of this pronoun is in deed the previous subject, (not well thought through!)
                    verbLemma=lemmatizeMainVerb(item)
                    if verbLemma != None: prop=returnProperty(verbLemma)

                timexList = listTimes(sentence)

                i=0
                while timexList[i]['type']not in ["DATE","TIME"]:
                    i+=1
                time= timexList[i]['value']
                date= sparqlQuerypy.findDate(annotatedSubject, prop)
                if len(date) != 0:
                    date= date[0]['z']['value']
                    print '- - - - - - - - - - - - - - - - \n \n'
                    print sentence
                    print '     '
                    print 'The subject is:', subject
                    print 'The annotated subject is:', annotatedSubject
                    print 'The property is:', prop
                    print 'Date according to dbpedia:', date
                    print 'Date mined from the text:', time
                    print '\n \n'

if __name__=='__main__':
    args = ['de.unihd.dbs.heideltime.standalone.jar', 'input']
    result = jarWrapper(*args)
    tagger = treetaggerwrapper.TreeTagger(TAGLANG = 'en', TAGDIR = '/home/vedu29/python/Gsoc/treetagger')
    
    main(args)
            

            
    

Program a basic Poker game simulator in Python. Not applicable import random

# suits of a deck of cards (♣, ♠, ♥, ♦)
suits = ["clubs", "spades", "hearts", "diamonds"]

# values of a deck of cards (Ace, 2-10, Jack, Queen, King)
values = ["ace", "2", "3", "4", "5", "6", "7", "8", "9", "10", "jack", "queen", "king"]

# deck of cards
deck = [value + " of " + suit for value in values for suit in suits]

# shuffling the deck
random.shuffle(deck)

# dealing the cards
player_hand = []
dealer_hand = []

player_hand.append(deck[0])
dealer_hand.append(deck[1])
player_hand.append(deck[2])
dealer_hand.append(deck[3])

# calculating the points of the player's and of the dealer's hand
player_points = 0
dealer_points = 0

for card in player_hand:
if card[0] == "a":
 player_points += 11
elif card[0] == "j" or card[0] == "q" or card[0] == "k":
 player_points += 10
else:
 player_points += int(card[0])

for card in dealer_hand:
if card[0] == "a":
 dealer_points += 11
elif card[0] == "j" or card[0] == "q" or card[0] == "k":
 dealer_points += 10
else:
 dealer_points += int(card[0])

# making decision
if player_points > dealer_points:
 print("Player wins!")
elif dealer_points > player_points:
 print("Dealer wins!")
else:
 print("Draw!")
Construct a regular expression in Python to find all the occurrences of words that start with the letter "A" and end with a number.  regex = r"\bA\w*\d\b"
Create a list expression and a set expression in Python that converts the given list to a set. list = [1, 2, 2, 3, 4, 4, 5] list_expression = set([x for x in list]) 

set_expression = set(list)
Write a Python program to convert an array of strings to an array of floats. arr = ["1.2", "2.3", "3.4", "4.5"] def string_to_float(arr):
    return [float(x) for x in arr]
Create a program in Python that takes in a sentence from the user, and reverse the sentence.  def reverseSentence(sentence): 
    words = sentence.split(' ') 
  
    newWords = [word[::-1] for word in words] 
      
    newSentence = ' '.join(newWords) 
      
    return newSentence 
  
sentence = input("Enter a sentence: ")
print(reverseSentence(sentence))
Create a script to join two given strings if they have compatible characters. string1 = "Python"
string2 = "programming" joined_string = 'Programmingpython'
Create a class in Python for a game character with attributes for health, strength, and defense. Not applicable class GameCharacter:
 def __init__(self, health, strength, defense):
 self.health = health
 self.strength = strength
 self.defense = defense
 
 def take_damage(self, damage):
 self.health -= damage
 
 def get_status(self):
 return f'Health: {self.health}, Strength: {self.strength}, Defense: {self.defense}'
Write a Python function to calculate the Hamming distance between two strings of same length. "abc",
"acd" def hamming_distance(s1, s2):
    distance = 0

    for char1, char2 in zip(s1, s2):
        if char1 != char2:
            distance += 1
    
    return distance

result = hamming_distance("abc", "acd")
print(result)
Write a Python program to print food items along with their prices from a given dictionary of food items and prices. food_items = {
 'Burger': 3.99,
 'Fries': 1.99,
 'Pizza': 12.99 
} for item, price in food_items.items():
 print(f'{item}: ${price}')
Generate random strings of fixed length in Python.  import random 
import string

def generate_random_string(length):
    return ''.join(random.choices(string.ascii_letters + string.digits,k=length))

generate_random_string(8); //Output: 'K5h5get6'
Design an algorithm in Python for reversing a string. exampleString = "Hello World" def reverse_string(exampleString): 
    return exampleString[::-1] 

print(reverse_string(exampleString))
Design a Python procedure to remove vowels from a string.  def removeVowels(inputString):
    vowels = ["a", "e", "i", "o", "u"]

    outputString = ""
    for char in inputString:
        if char not in vowels:
            outputString += char
    
    return outputString
Write a python program to calculate the factorial of a number given by the user.  def calculate_factorial(num): 
    if num < 0: 
        return 0
    elif num == 0 or num == 1: 
        return 1
    else: 
        factorial = 1
        while num > 1:             
            factorial = factorial * num 
            num = num - 1
        return factorial 

# get user input 
number = int(input("Enter a number: "))

# call the function
factorial = calculate_factorial(number)

# print the result 
print("Factorial of", number, "is", factorial)
Create a Python program for performing a linear search on a given array of values. Not applicable def linear_search(arr, x): 
    for i in range (0, len(arr)): 
        if arr[i] == x: 
            return i  
    return -1
  
# Test array 
arr = [ 2, 3, 4, 10, 40 ] 
x = 10
  
# Function call 
result = linear_search(arr, x) 
  
if(result == -1): 
    print("Element is not present in array") 
else: 
    print("Element is present at index", result)
Create a web scraper script in Python using BeautifulSoup and Requests to extract data from a web page that contains a list of products. The URL to scrape - https://example.com/products import requests
from bs4 import BeautifulSoup

def scrape_products(url):
 response = requests.get(url)
 html = response.text
 soup = BeautifulSoup(html, 'html.parser')

product_list = []
for item in soup.find_all('div', class_='product-item'):
 name = item.find('h3').text
 price = item.find('div', class_='price').text
 product_list.append((name, price))

return product_list
Write a Python program to produce a scatterplot of total rainfall by month over a year. rainfall_data = {
 ‘January’: [2.3, 12.2, 5.8],
 ‘February’: [3.4, 6.1, 11.2],
 ‘March’: [2.2, 7.5, 5.4],
 ‘April’: [1.1, 9.3, 6.7],
 ‘May’: [2.7, 4.2, 10.6],
 ‘June’: [3.0, 9.1, 12.2],
 ‘July’: [4.9, 18.2, 5.3],
 ‘August’: [3.1, 10.4, 7.4],
 ‘September’: [5.8, 7.2, 9.5],
 ‘October’: [4.2, 8.9, 10.8],
 ‘November’: [3.1, 7.4, 8.1],
 ‘December’: [4.1, 5.2, 9.6]
} import matplotlib.pyplot as plt 

# Get the values from the dictionary 
months = list(rainfall_data.keys())
total_rainfall = list(map(sum, rainfall_data.values()))

# Create the scatter plot 
plt.scatter(months, total_rainfall)

# Add title and axis labels 
plt.title('Total Rainfall by Month')
plt.xlabel('Month')
plt.ylabel('Total Rainfall (inches)')

# Show the plot 
plt.show()
Print the Fibonacci sequence up to a given number in Python. 10 # Declare a function
def Fibonacci(num):
    a = 0
    b = 1
    
    # Iterate
    for i in range(num):
        print(a, end=" ")
        c = a + b
        a = b
        b = c
    print()
    
# Print the sequence
Fibonacci(10)
Generate an array of random integers between 10-20 with a length of 50 using Python.  import random

random_array = random.sample(range(10,20), 50)
print(random_array)
Write a Python program to analyze the text of a document and to identify the text's sentiment. Not applicable import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer

# create an instance of the sentiment analyzer
sid = SentimentIntensityAnalyzer()

# analysis function
def sentiment_analysis(doc):
    # tokenize the document
    doc_tokens = nltk.word_tokenize(doc)
    # generate sentiment analysis scores
    scores = sid.polarity_scores(doc)
    # get the sentiment
    sentiment = scores['compound']
    if sentiment >= 0.05:
        sentiment = 'positive'
    elif sentiment <= -0.05:
        sentiment = 'negative'
    else:
        sentiment = 'neutral'
    # print the sentiment
    print("The document is {}".format(sentiment))

text = "This is a positive sentiment statement"
sentiment_analysis(text)
Create a GUI application using Tkinter in Python to calculate the area of a circle with a given radius.  import tkinter as tk

root = tk.Tk()

def calculate():
 radius = float(entry_radius.get())
 area = radius * radius * 3.14
 output.config(text="Area = " + str(area))

frame = tk.Frame(root)
frame.pack()

label_radius = tk.Label(frame, text="Radius")
label_radius.pack(side=tk.LEFT)

entry_radius = tk.Entry(frame)
entry_radius.pack(side=tk.LEFT)

button = tk.Button(frame, text="Calculate", command=calculate)
button.pack(side=tk.LEFT)

output = tk.Label(frame)
output.pack(side=tk.BOTTOM)

root.mainloop()
Name different Python string methods.  String methods include capitalize(), count(), endswith(), find(), format(), index(), isalnum(), join(), lower(), replace(), split(), startswith(), strip(), title(), upper(), and zfill().
Find the most frequent value in the given array in Python. [2, 3, 4, 2, 5, 3] from collections import Counter

def most_frequent(input_list):
    count = Counter(input_list)
    max_freq = max(count.values())
    for num, freq in count.items():
        if freq == max_freq:
            most_frequent_element = num
    return most_frequent_element

result = most_frequent([2, 3, 4, 2, 5, 3])
print(result)
Generate a function in Python that accepts an array and its length as input and output the maximum sum of all its contiguous subarrays. [-1, 9, -3, 17, -3, 6] def maxSubArraySum(arr, length):  
    max_so_far = 0
    max_ending_here = 0 
    for i in range(0, length):  
        max_ending_here = max_ending_here + arr[i]  
        if max_ending_here < 0:
            max_ending_here = 0
        elif max_so_far < max_ending_here: 
            max_so_far = max_ending_here  
    return max_so_far
Create a function in Python that finds the common elements two arrays. arr1 = [1, 2, 3, 4, 5]
arr2 = [2, 3, 6, 7, 8] def find_common_elements(arr1, arr2):
  common = []
  for element in arr1:
    if element in arr2:
      common.append(element)
  return common

arr1 = [1, 2, 3, 4, 5]
arr2 = [2, 3, 6, 7, 8]

print(find_common_elements(arr1, arr2))
Develop a basic web scraper in Python to scrape the text of Wikipedia articles. A URL of any Wikipedia page, for example, "https://en.wikipedia.org/wiki/Google". import requests
from bs4 import BeautifulSoup

# Make an HTTP GET request to the Wikipedia page
url = "https://en.wikipedia.org/wiki/Google"
response = requests.get(url)

# Parse the response HTML
soup = BeautifulSoup(response.text, "html.parser")

# Extract the raw content of the Wikipedia page
content = soup.find("div", {"id": "mw-content-text"}).text

print(content)
Create a GUI using tkinter in Python to calculate the size of a triangle in sq. cm given the length of its three sides.  import tkinter as tk

root = tk.Tk()
root.title("Triangle Area Calculator")

side1Label = tk.Label(root, text="Side 1")
side1Label.grid(row=0, column=0, sticky=tk.W, padx=10, pady=10)
side1Entry = tk.Entry(root)
side1Entry.grid(row=0, column=1, padx=10, pady=10)

side2Label = tk.Label(root, text="Side 2")
side2Label.grid(row=1, column=0, sticky=tk.W, padx=10, pady=10)
side2Entry = tk.Entry(root)
side2Entry.grid(row=1, column=1, padx=10, pady=10)

side3Label = tk.Label(root, text="Side 3")
side3Label.grid(row=2, column=0, sticky=tk.W, padx=10, pady=10)
side3Entry = tk.Entry(root)
side3Entry.grid(row=2, column=1, padx=10, pady=10)

def calculate_area():
    side1 = float(side1Entry.get())
    side2 = float(side2Entry.get())
    side3 = float(side3Entry.get())
    s = (side1 + side2 + side3)/2 
    area = (s*(s-side1)*(s-side2)*(s-side3)) ** 0.5
    areaLabel.configure(text="Area = {0:0.2f} sq. cm".format(area))

calculateButton = tk.Button(root, text="Calculate", command=calculate_area)
calculateButton.grid(row=3, columnspan=2, padx=10, pady=10)

areaLabel = tk.Label(root, text="Area = 0 sq. cm")
areaLabel.grid(row=4, columnspan=2, padx=10, pady=10)

root.mainloop()
Design a Python program to simulate a simple ATM machine.  # account class with the necessary functions 
class Account:
    def __init__(self, name, balance):
        self.name = name
        self.balance = balance

    def deposit(self, amount):
        self.balance += amount

    def withdrawal(self, amount):
        self.balance -= amount

# ATM class with the necessary functions
class ATM:
    def __init__(self):
        self.accounts = []

    def createAccount(self, name, balance):
        account = Account(name, balance)
        self.accounts.append(account)

    def deposit(self, name, amount):
        for account in self.accounts:
            if account.name == name:
                account.deposit(amount)

    def withdrawal(self, name, amount):
        for account in self.accounts:
            if account.name == name:
                account.withdrawal(amount)

    def printBalance(self, name):
        for account in self.accounts:
            if account.name == name:
                print(name, " Balance: ", account.balance)
Write a function in Python that takes an array of integers and its size as parameters and returns the maximum value in the array. arr = [1, 6, 8, 4, 9, 6, 10]
n = len(arr) def findMax(arr, n):
 # Initializing max with first element of array
 max = arr[0]

 # Starting loop from second element
 for i in range(1, n):
 # Comparing max with remaining elements of array
 if arr[i] > max:
 max = arr[i]

 # Returning maximum
 return max
Create a Python dictionary from two given lists. list1 = ['a', 'b', 'c'] 
list2 = [1, 2, 3] dict1 = dict(zip(list1, list2)) 
print(dict1)
Create a python program to find the index of the first occurrence of an item in the given list. item = 10
arr = [1, 10, 10, 20, 30] def findFirstOccurance(item, arr):
  
  # Iterating over each item 
  for i in range(len(arr)):  
      if (arr[i] == item):  
           return i 
  return -1 
        
# Driver Code 
item = 10 
arr = [1, 10, 10, 20, 30] 
position = findFirstOccurance(item, arr) 
if(position > 0):
    print("Item found at ", position) 
else:
    print("Item not found")
Transform the following shell script into a python program. #!/usr/bin/env bash
for i in *.txt; do
    echo "Processing $i file..."
    cat $i
done import sys
import os

for filename in os.listdir('.'):
    if filename.endswith('.txt'):
        print('Processing ' + filename + ' file...')
        with open(filename, 'r') as f:
            print(f.read())
Construct a Python function to reverse the contents of a given array in-place.  def reverse_in_place(arr):
    start = 0
    end = len(arr)-1
    while start < end:
        arr[start], arr[end] = arr[end], arr[start]
        start += 1
        end -= 1
Implement a code in Python to print out the sum of the first six numbers.  # Initialize sum
sum = 0

# Use a for loop to iterate over numbers
for num in range(1, 7):
    sum = sum + num

# Print result
print("The sum of the first six numbers is:", sum)
Create a Python program which prints the calendar for a given year. year = 2019 import calendar

c = calendar.TextCalendar(calendar.SUNDAY)
str = c.formatyear(2019, 2, 1, 1, 3)
print (str)
Using a Python program, generate a random password of 8 characters, where at least one character is a uppercase letter and one character is a number.  import string
import random

def generate_password():
    chars = string.ascii_lowercase + string.ascii_uppercase + string.digits
    size = 8
    
    while True:
        password = ''.join(random.choice(chars) for _ in range(size))
        if any(c.islower() for c in password) and any(c.isupper() for c in password) and any(c.isdigit() for c in password):
            break
        
    return password

print(generate_password())
Write a Python program to calculate the mode of the given list of numbers. [2, 3, 4, 5, 2, 6, 1, 5] def find_mode(numbers):
    most_freq = 0
    mode = None

    counts = {}
    for num in numbers:
        if num in counts:
            counts[num] += 1
        else:
            counts[num] = 1
    
    for num in counts:
        if counts[num] > most_freq:
            most_freq = counts[num]
            mode = num
    
    return mode
Create a Python neural network model that takes in a given trajectory of stock prices and predicts the stock price for the next day. [10, 10.4, 10.5, 10.6, 10.7, 10.9, 11] import numpy as np
import tensorflow as tf

def create_model():
    model = tf.keras.Sequential([
        tf.keras.layers.Dense(64, activation='relu', input_shape=(7, )),
        tf.keras.layers.Dense(1)
    ])

    model.compile(loss='mean_squared_error', 
                  optimizer='adam',
                  metrics=['accuracy'])

    return model
    
if __name__ == "__main__":
    model = create_model()

    input_data = np.array([[10, 10.4, 10.5, 10.6, 10.7, 10.9, 11]])
    predictions = model.predict(input_data)

    print(f"Predicted stock price for the next day is: {predictions[0][0]}")
Write a  code in Python to create and display a linked list.  # A linked list node 
class Node: 
  
    # Constructor to initialize the node object 
    def __init__(self, data): 
        self.data = data 
        self.next = None
  
class LinkedList: 
  
    # Function to initialize head 
    def __init__(self): 
        self.head = None
  
    # Function to insert a new node at the beginning 
    def push(self, new_data): 
  
        # 1 & 2: Allocate the Node & 
        #         Put in the data 
        new_node = Node(new_data) 
  
        # 3. Make next of new Node as head 
        new_node.next = self.head 
  
        # 4. Move the head to point to new Node 
        self.head = new_node 
  
    # This function prints contents of linked list 
    # starting from head 
    def printList(self): 
        temp = self.head 
        while temp: 
            print temp.data 
            temp = temp.next
  
  
# Driver program 
linkedlist = LinkedList() 
linkedlist.push(1) 
linkedlist.push(2) 
linkedlist.push(3) 
linkedlist.push(4) 
linkedlist.printList()
Edit a python program to print the square of a number input by the user. num = input("Enter a number: ") num = input("Enter a number: ")

num = int(num)

print("The square of the number is:", num**2)
Create a class in Python with all five common inheritance options (parent class, subclasses, multiple inheritance, abstract class, etc).  class Parent:
 
    # Constructor
    def __init__(self):
        self.value = 'parent'

    def parent_method(self):
        # Parent method here
        return self.value

class ChildOne(Parent):
 
    # Constructor
    def __init__(self):
        Parent.__init__(self)
        self.value = 'child one'

class ChildTwo(Parent):
 
    # Constructor
    def __init__(self):
        Parent.__init__(self)
        self.value = 'child two'

# Multiple Inheritance
class Other(ChildOne, ChildTwo):

    # Constructor
    def __init__(self):
        ChildOne.__init__(self)
        ChildTwo.__init__(self)
        self.value = 'other'

# Abstract Class
class AbstractParent:

    # Constructor
    def __init__(self):
        self._value = 'abstract'

    # Abstract Methods
    def calculate(self, x, y):
        pass

    def abstract_method(self):
        pass
Create an AI-based chatbot in Python using TensorFlow and DialogFlow. Not applicable # Import necessary libraries
import tensorflow as tf
from tensorflow import keras
import dialogflow_v2 as dialogflow

# Create a model to generate responses
model = keras.Sequential([
 keras.layers.InputLayer(input_shape=[1]),
 keras.layers.Dense(units=32, activation="relu"),
 keras.layers.Dense(units=32, activation="relu"),
 keras.layers.Dense(units=1, activation="sigmoid"),
])

# Compile the model
model.compile(optimizer="adam", loss="binary_crossentropy",
 metrics=["accuracy"])

# Configure the DialogFlow agent
session_client = dialogflow.SessionsClient()
project_id = "myproject"
session_id = "test"

# Set up an input/output context
contexts_client = dialogflow.ContextsClient()
context_path = contexts_client.context_path(project_id, session_id,
 "userInput")

# Utilize the model for generating responses
def generate_response(response):
 # Input response
 input_response = response

 # Predict the response
 prediction = model.predict([input_response])
 predicted_class = int(prediction > 0.5)

 # Generate response based on the prediction
 if predicted_class == 1:
 response = ""
 else:
 response = ""

 # Return the response
 return response

# Create the DialogFlow request/response
request = dialogflow.types.TextInput(text=input_response, language_code="en-US")
response = session_client.detect_intent(session=session_path,
 query_input=request)

# Generate a response
response = generate_response(response)

# Respond to the user
print (response)
Write a Python script to read data from an API and store into an SQLite database. Not applicable import requests
import sqlite3

# Connect to the database
conn = sqlite3.connect('test.db')
cursor = conn.cursor()

# Get the data from the API
data = requests.get('http://example.com/api/data').json()

# Insert the data into the table
for info in data:
 cursor.execute('INSERT INTO table_name (column1, column2, column3) VALUES (?,?,?)', (info['field1'], info['field2'], info['field3'])
conn.commit()
Write a Python program to classify an input text given a list of labels. Text: "I am going to the store to buy groceries."
Labels: ["grocery shopping", "shopping", "going to the store"] labels = ["grocery shopping", "shopping", "going to the store"]

input_text = "I am going to the store to buy groceries."

def classify_input_text(input_text, labels):
    for label in labels:
        if label.lower() in input_text.lower():
            return label

output_label = classify_input_text(input_text, labels)
print(output_label)
# Output: grocery shopping
Develop a Python script to find the element that appears most often in a given list. mylist = [2, 3, 4, 5, 2, 3, 2, 5, 6, 7] from collections import Counter

mylist = [2, 3, 4, 5, 2, 3, 2, 5, 6, 7]
freq = Counter(mylist)
most_common_element = freq.most_common(1)[0][0]
print("The most common element is %d" %most_common_element)
Write a Python code snippet to generate a pseudo-random number between 0 and 1.  import random

random_number = random.random()
print(random_number)
Write a Python program that calculates the mean of ten numbers.  def mean(numbers):
    total = 0
    for num in numbers:
        total += num
    return total / len(numbers)

ten_numbers = [15,18,14,21,12,21,19,6,17,18]
mean = mean(ten_numbers)
print("Mean of ten numbers:", mean)
Write a Python program to implement a genetic algorithm for solving a problem. Problem: Find the maximum value of the function: f(x1,x2) = -3x1 + 2x2 
Subject to the constraints: 
	x1 <= 4
	x2 ≤ 8	
	x1 + x2 ≤ 12 """
Write a Python program to implement a genetic algorithm for solving a problem
"""
import random 
import numpy as np 

# Function to generate a random population 
def generate_population(fitness_function, num_population=50): 
    population = []
    for i in range(num_population):
        population.append([random.randint(0, 8) for i in range(2)])
    population = np.array(population)
    fitness_values = fitness_function(population) 
    return population, fitness_values

# Function to find maximum value 
def find_max_value(inputs): 
	# Fitness function 
    def fitness_function(inputs):
        return -3*inputs[0] + 2*inputs[1] 
        
    # End condition 
    def end_condition(fitness_values):
        max_val = np.max(fitness_values)
        if max_val >= 0:
            return True
        else: 
            return False
        
    # Genetic algorithm
    def genetic_algorithm():
        population, fitness_values = generate_population(fitness_function)
        while not end_condition(fitness_values): 
            population, fitness_values = generate_population(fitness_function)
        new_population = [x.astype(int).tolist() for x in population]
        max_value = np.max(fitness_values)
        max_value_solution = new_population[np.argmax(fitness_values)]
        return max_value, max_value_solution
        
    # Main
    max_value, max_value_solution = genetic_algorithm()
    print("Max Value:", max_value)
    print("Max Value Solution:", max_value_solution)

if __name__ == "__main__": 
    inputs = []
    find_max_value(inputs)
Create a function in Python that prints the numbers between 0 and 10 (inclusive) in descending order.  def printDescending(): 
  for i in range(10,-1,-1): 
    print (i) 

printDescending()
Create a Python script to generate an XML sitemap of a website. Example of a website URL import requests
from bs4 import BeautifulSoup
from xml.dom import minidom

# Get the website content
url = "http://example.com"
response = requests.get(url)
soup = BeautifulSoup(response.text, "html.parser")

# Create the XML document
doc = minidom.Document()
root = doc.createElement('urlset')
root.setAttribute("xmlns", "http://www.sitemaps.org/schemas/sitemap/0.9")

# Parse the website pages
for link in soup.find_all('a'):
        page = doc.createElement('url')
        page.appendChild(doc.createElement('loc')).appendChild(doc.createTextNode(link.get('href')))
        root.appendChild(page)

# Generate the file
doc.appendChild(root)
filename = "sitemap.xml"
f = open(filename,"w")
doc.writexml(f, indent="  ", addindent="  ", newl='\n')
f.close()
Write a function in Python that takes two arrays of the same size and performs elementwise addition. arr1 = [1, 2, 3]
arr2 = [3, 4, 5] def add_arrays(arr1, arr2):
 if len(arr1) != len(arr2):
  raise Exception("Arrays are not of the same size!")
 return [x + y for x, y in zip(arr1, arr2)]

add_arrays(arr1, arr2)  # [4, 6, 8]
Python program to generate a tree like structure.  def generate_tree(h): 
    # h is the height of the tree
    # Initialize the number of spaces per line 
    n_spaces = h - 1
  
    # Generate the tree structure 
    for i in range(1, h+1): 
        # Print h-i spaces at the beginning of each line 
        for j in range(n_spaces): 
            print(end=" ") 
              
        # Print i stars at the end of each line 
        for j in range(i): 
            print("* ", end="") 
              
        # Move to the next line (Print a newline character) 
        print() 
          
        # Update the number of spaces used 
        n_spaces -= 1
Create a Python generator to generate an infinite sequence of a given number.  def generate_infinite_sequence(num):
    while True:
        yield num

for n in generate_infinite_sequence(5):
    print(n)
Develop a Python function to classify place names. place_name = "New York City" def get_place_type(place_name):
    # Split the place name into its constituent parts 
    parts = place_name.split()
    
    # Initialize a variable for the type of place
    place_type = None
    
    # Check for certain keywords to indicate the place type 
    if 'City' in parts:
        place_type = 'City'
    elif 'Town' in parts:
        place_type = 'Town'
    elif 'Village' in parts:
        place_type = 'Village'
    elif 'River' in parts:
        place_type = 'River'
    elif 'Mountain' in parts:
        place_type = 'Mountain'
    elif 'Island' in parts:
        place_type = 'Island'
    
    # Return the detected place type
    return place_type
Generate code to create a REST API in Python that parses JSON and returns the values of a nested object. {
  "data": {
    "name": "John Doe",
    "age": 25
  }
} @app.route('/parseJSON', methods=['POST'])
def parse_json():
    data = request.get_json()
    name = data['data']['name']
    age = data['data']['age']

    response = {
        "name": name,
        "age": age
    }
    return jsonify(response)
Create an algorithm in Python to find the closest pair of points out of given set of points.  import math 

def closest_pair(points):
    # Initialize minimum distance 
    min_dist = float("inf")

    # Iterate over the points 
    for i in range(len(points)):
        for j in range(i+1, len(points)):

            # Calculate the euclidean distance
            x1, y1 = points[i]
            x2, y2 = points[j]
            dist = math.sqrt((x1 - x2)**2 + (y1 - y2)**2)
            
            # Update minimum distance if needed
            if dist < min_dist:
                min_dist = dist
                closest_pair = (x1, y1), (x2, y2)

    return closest_pair
Create a program that prints out a directory of a given folder.  # Python program to print a directory of a given folder 


import os 

# Function to get Directory Listing 
def directoryListing(dirname): 

	# Create list to hold filenames 
	filenames = os.listdir(dirname) 

	# Print the Directory Contents 
	print("Directory contents of "+dirname +": ") 
	for file in filenames: 
		print(file) 

# Driver Code 
if __name__ == '__main__': 

	# Provide the relative path 
	dirname = '.'

	# Calling Directory Listing Function 
	directoryListing(dirname)
Write a Python program to delete all occurrences of a given number from a list lst=[2,2,3,5,7,2,9] def remove_all(num, lst):
    result = []
    for i in range(len(lst)):
        if lst[i] != num:
            result.append(lst[i])
    return result
Write a Python program to check whether two strings are anagrams or not String 1: dog 
String 2: god """
Check whether two strings are anagrams or not
"""

# Function to check if two strings are anagrams or not
def is_anagram(str1, str2): 
  
    # Create two lists with the characters of the strings 
    list_str1 = list(str1) 
    list_str1.sort() 
    list_str2 = list(str2) 
    list_str2.sort() 
  
    # If the two lists are equal, then it is an anagram 
    if (list_str1 == list_str2): 
        return True
    else: 
        return False

# main 
if __name__ == "__main__": 
    # Given strings 
    str1 = 'dog'
    str2 = 'god'
  
    if (is_anagram(str1, str2)): 
        print("The two strings are anagrams")
    else: 
        print("The two strings are not anagrams")
Write a Python script to swap two variables.  x = 10
y = 20

#Swap the values
x, y = y, x

print("After swapping: x =", x, "and y =", y)
Optimize the following Python code for adding two numbers a = 3
b = 4
c = a + b def addTwoNum(a, b):
 return a + b

c = addTwoNum(3, 4)
Design a process in Python for extracting information from a given database.  import sqlite3

# Connecting to the Database file
conn = sqlite3.connect('<database name>')

# Creating a cursor to work with database
cursor = conn.cursor()

# Executing a query
result = cursor.execute("SELECT <column name> FROM <table name> WHERE <condition>")

# Storing the results in a list while iterating over it
data = [row for row in result]

# Closing the connection
conn.close()
Implement a basic client-server network communication system with a protocol for exchanging messages between a client and a server using Python. Not applicable # Server program

import socket

server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

host = socket.gethostname()
port = 8888

# Bind to the port
server_socket.bind((host, port))

server_socket.listen(5)

print("Waiting for a connection...")

# Establish a connection with the client
client_socket, addr = server_socket.accept()

print("Received a connection from %s " % str(addr))

while True:
 data = client_socket.recv(1024).decode('utf-8')
 if not data:
   break
 print("Received from client: %s" %data)
 data = data.upper()
 print("Sending to client: %s" %data)
 client_socket.send(data.encode('utf-8'))

client_socket.close()

# Client program
import socket

client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

host = socket.gethostname()
port = 8888

# Connect to server's socket
client_socket.connect((host, port))

message = input("Enter a message -> ")
# Send a message
client_socket.send(message.encode('utf-8'))

# Receive a message
data = client_socket.recv(1024).decode('utf-8')
print("Received from server: %s" %data)

client_socket.close()
Can you write a Python program to find the position of the second occurrence of a word in a given string? "This is this is a sample string" def find_second_occurence(given_string):
    # Split the given string 
    split_string = given_string.split(' ') 
  
    # Find the index of the second occurence
    index = [i for i,x in enumerate(split_string) 
              if x == split_string[0]][1] 
  
    # Print the second occurence
    print("Second occurrence of given word:", 
          split_string[index]) 
  
# Driver function 
given_string = "This is this is a sample string"
find_second_occurence(given_string)
Create a function in Python that takes two lists of equal length, and returns the sum of the elements in the same index in each list. [2, 3, 4], [2, 5, 6] def sum_elements_in_lists(list1, list2):
    if len(list1) != len(list2):
        return None
    
    result = []
    for i in range(len(list1)):
        result.append(list1[i] + list2[i])
    
    return result

result = sum_elements_in_lists([2, 3, 4], [2, 5, 6])
print(result)
Create an AI chatbot in Python to respond to simple natural language questions about the weather. Not Applicable #create a simple AI chatbot in Python
def chatbot():
    print("Hello, my name is Weather Bot. I can help you with questions about the weather!")

    while True:
        query = input("You: ")
        query = query.lower()
        
        # exit the loop is the user enters "quit"
        if query == "quit":
            break
            
        # responses to certain queries
        if "what is the temperature" in query:
            print("The current temperature is 65 degrees Fahrenheit.")
        
        if "what will the weather be tomorrow" in query:
            print("Tomorrow's forecast is sunny with a high of 75 degrees Fahrenheit.")

# call the function
chatbot()
Design a Python program to search for a substring in a given string. str = "This is a string";
substr = "is" def searchSubstring(str, substr):
  for i in range(len(str)):
    if str[i:i+len(substr)] == substr:
      return i

    return -1
Create a class in Python to represent a student. This class should contain fields for name, age, and a list of subjects taken. Not applicable class Student:
    def __init__(self, name, age, subjects):
        self.name = name
        self.age = age
        self.subjects = subjects
    
    def getName(self):
        return self.name
    
    def getAge(self):
        return self.age
    
    def getSubjects(self):
        return self.subjects
Generate Python code to find the pair with the maximum product in a given array.  def max_pair_product(arr):
    # Initialize the maximum product and the maximum elements
    max_product = 0
    max_elems = [0, 0]
    # Iterate through each element in the array 
    for i in range(len(arr)):
        left_elem = arr[i]
        # Iterate through each other element in the array
        for j in range(i + 1, len(arr)):
            right_elem = arr[j]
            # Compute the product
            product = left_elem * right_elem
            # Find the maximum product and the corresponding elements
            if product > max_product:
                max_product = product
                max_elems = [left_elem, right_elem]
    # Return the maximum product and the corresponding elements
    return (max_product, max_elems)
Generate a Python function to return the index of a given item in a list. lst = [1, 2, 3, 4]; def findIndex(lst, item):
 for i, v in enumerate(lst):
 if v == item:
 return i
 return -1

findIndex(lst, 4) // 3
Given an array and a target value, write a Python program to find theIndex of the target value in the array. [1, 2, 3, 4, 5], 3 def find_index(arr, target):
 for i in range(len(arr)):
  if arr[i] == target:
   return i
 return -1
Suggest a way to display a calendar for the current month in python.  import calendar

date = calendar.month( 2020, 8 )
print(date)
Create an algorithm in Python to evaluate an algebraic expression. expression = "3*(2+7)" def evaluate_expression(expression):
    stack = [] 
    expression_list = expression.split(" ")
    operators = ['+', '-', '*', '/'] 
    
    for i in expression_list: 
        if i not in operators: 
            stack.append(int(i))
        else: 
            val1 = stack.pop()  
            val2 = stack.pop() 
 
            if i == "+": 
                stack.append(val2 + val1) 
            elif i == "-": 
                stack.append(val2 - val1) 
            elif i == "*": 
                stack.append(val2 * val1) 
            else: 
                stack.append(int(val2 / val1)) 
                
    return stack.pop()

print(evaluate_expression("3*(2+7)"))  # prints 27
Generate a function in Python which takes a string and returns a dictionary with count of each character.  def char_count(string):
    char_dict = {}
    for char in string:
        if char in char_dict:
            char_dict[char] += 1
        else:
            char_dict[char] = 1
    return char_dict
Write a python program to convert degree Celsius to Fahrenheit. c = 22 def convert_celsius_to_fahrenheit(c):
    f = (c * (9/5)) + 32
    return f

f = convert_celsius_to_fahrenheit(c)
print('{} degree Celsius = {} degree Fahrenheit'.format(c, f))
Generate a code snippet to calculate the average of an array of numbers in Python. Not applicable def average(numbers):
 return sum(numbers) / len(numbers)
Develop a Python program to find out all the perfect numbers between 1 and n. n = 30 def perfect_numbers(n):
    perfect_nums = []
    for num in range(1, n+1):
        sum = 0
        for i in range(1, num):
            if num % i == 0:
                sum += i
        if sum == num:
            perfect_nums.append(num)
    return perfect_nums

n = 30
print(perfect_numbers(n))
Automatically refactor a subsection of Python code that uses two for-loops. for x in range(3):
    for y in range(4):
        print(x, '-', y) for x, y in itertools.product(range(3), range(4)):
    print(x, "-", y)
Create a Python code to optimize the solution for this specific problem. You have n people who needs to go through an elevator. Each person can only carry a maximum of 4 items at any time. def optimal_elevator(n):
    """
    This function takes in the number of people and returns 
    a list of maximum items each person can carry.
 
    Parameters:
    n (int): the number of people
 
    Returns:
    list: list of maximum items each person can carry
    """
    # Check if input is valid
    if n <= 0:
        return 0

    # Create a list for results
    result = []
    items = 0
    # First person carries 4 items
    first_person = 4

    # Calculate the remaining items
    remaining_items = n - 1

    # Calculate the maximum items each person can carry
    while remaining_items > 0:
        if remaining_items > 4:
            items = first_person
            remaining_items = remaining_items - 4
        else:
            items = remaining_items + first_person
            remaining_items = 0
        result.append(items)
        
    return result
Write a python code to calculate the sum of numbers in a list except for the last element. [1,2,3,4,5] def sum_except_last(arr):
    total = 0
    for i in range(len(arr) - 1):
        total += arr[i]
    return total

if __name__ == '__main__':
    output = sum_except_last([1,2,3,4,5])
    print(output)
Given a set of numbers, write a Python program to find the maximum number after performing arithmetic operations on the digits of the set of numbers. nums = [12, 198, 16] def find_max(nums):
    max_num = 0
    for num in nums:
        str_num = str(num)
        mul_res = 1
        for digit in str_num:
            mul_res *= int(digit)
        max_num = max(max_num, mul_res)
    return max_num
Create a Python function to clean and normalize text strings. The text string to be normalized is "Thi$$$s i$ a te$Xt!!!!!" import re

def clean_text(text):
 # Lowercase text
 text = text.lower()
 
 # Remove special characters
 text = re.sub(r'[^\w\s]','', text)
 
 # Remove extra whitespaces
 text = re.sub(r'\s+',' ', text)
 
 return text
 
# Sample Usage
text = 'Thi$$$s i$ a te$Xt!!!!!'
clean_text(text)
# Output: 'this is a text '
Create a Python program to print out the sum of all even numbers between the given range, inclusive. start = 2
end = 10 def sum_even_numbers(start, end):
 result = 0
 for n in range(start, end+1):
 if n % 2 == 0:
 result += n
 return result

print(sum_even_numbers(2, 10))
Write a Kubernetes deployment configuration for a Python web application, called “my-app”, running on port 8080. Not applicable apiVersion: apps/v1
kind: Deployment
metadata:
 name: my-app-deployment
spec:
 replicas: 3
 selector:
  matchLabels:
   app: my-app
 template:
  metadata:
   labels:
    app: my-app
  spec:
   containers:
   - name: my-app
    image: my-app-image
    ports:
    - containerPort: 8080
Build a classifier in Python to differentiate between positive and negative sentiment in given text. Dataset: Twitter dataset with labels 0 for negative sentiment and 1 for positive sentiment. import tensorflow as tf

tf.compat.v1.enable_eager_execution() 

# Load training data

train_data = tf.keras.datasets.twitter.load_data(num_words=10000)
train_data[0]

# Preprocess data

train_x = tf.keras.preprocessing.sequence.pad_sequences(train_data[0], maxlen=500)
train_y = train_data[1]

model = tf.keras.Sequential([
    tf.keras.layers.Embedding(10000, 64),
    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64)),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

model.fit(train_x, train_y, epochs=10)
Create a Python function to compute the root mean square (RMS) of an array of values. values = [3,4,5,6,7] import math

def computeRMS(values):
    # calculate the mean
    mean = sum(values)/len(values)
    # calculate the sum of the squares
    squares_sum = sum([val**2 for val in values])
    # calculate the RMS
    rms = math.sqrt(squares_sum/len(values))
    
    return rms
    
values = [3,4,5,6,7]
rms = computeRMS(values)
print("Root mean square is: ", rms)
Create a class in Python with three attributes and three methods.  class SampleClass:
    def __init__(self, attr1, attr2, attr3):
        self.attr1 = attr1
        self.attr2 = attr2
        self.attr3 = attr3
    
    def method1(self):
        # code here
        
    def method2(self):
        # code here
    
    def method3(self):
        # code here
Design an algorithm in Python to find the number of occurrences of a given string in another string. haystack = "Hello World"
needle = "l" def count_occurrences(haystack, needle):
    count = 0
    for char in haystack:
        if char == needle:
            count += 1
    return count
Write a Python program to generate an HTML page containing a table with 3 rows and 2 columns, where the data in the cells are randomly generated. Not applicable import random

HTML = '<html>\n<head>\n<title>Random Table</title>\n</head>\n<body>\n<table>\n'

for row_num in range(0,3):
    HTML += ' <tr>\n'
    for column_num in range(0,2):
        HTML += '  <td>{}</td>\n'.format(random.randint(0, 10))
    HTML += ' </tr>\n'

HTML += '</table>\n</body>\n</html>'

print(HTML)
Write a Python script to print all prime numbers from 1 to n n = 10 def print_primes(n):
    for num in range(2, n+1):
        for i in range(2, num):
            if (num % i) == 0:
                break
        else:
            print(num)

print_primes(10)
Convert the given code from Python to C++. def capitalize_word(word):
    return word.capitalize() string capitalize_word(string word){
    return string(1, toupper(word[0])) + word.substr(1);
}
Write a Python program to generate a unique random password with at least one lowercase letter, one uppercase letter, one digit and one special character.  import random
lower_chars = "abcdefghijklmnopqrstuvwxyz"
upper_chars = lower_chars.upper()
digits = "0123456789"
special_chars = "!@#$%^&*()"

def generate_password(length):
    password = ""
    password += random.choice(lower_chars)
    password += random.choice(upper_chars)
    password += random.choice(digits)
    password += random.choice(special_chars)
    
    for i in range(length - 4):
        password += random.choice(lower_chars + upper_chars + digits + special_chars)
    
    return password

if __name__ == '__main__':
    print(generate_password(10))

# Output
V1!sQUn4f4
Create a Python program for performing sentiment analysis on an article. Not applicable import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer

from nltk.tokenize import word_tokenize

# input text
article = """
This article is about Harry Potter and how he saves the day. 
It is a feel-good story of triumph and courage in the face of adversity.
"""

# create sentiment analyzer 
sentiment_analyzer = SentimentIntensityAnalyzer()

# tokenize the input text into separate words
tokens = word_tokenize(article)

# perform sentiment analysis
sentiment_scores = {}
for token in tokens:
    sentiment_score = sentiment_analyzer.polarity_scores(token)
    sentiment_scores[token] = sentiment_score

# print the sentiment scores 
print(sentiment_scores)

// Output:
// {'This': {'neg': 0.0, 'neu': 0.323, 'pos': 0.677, 'compound': 0.4939}, 
// 'article': {'neg': 0.0, 'neu': 0.451, 'pos': 0.549, 'compound': 0.6249}, 
// 'is': {'neg': 0.0, 'neu': 1.0, 'pos': 0.0, 'compound': 0.0}, 
// 'about': {'neg': 0.0, 'neu': 1.0, 'pos': 0.0, 'compound': 0.0}, 
// …
Create a Python program to loop through a given list and print each item on a new line. my_list = ["apples", "oranges", "bananas"] for item in my_list:
    print(item)
Generate an array of random numbers in Python. size: 10 import numpy as np

size = 10
random_array = np.random.randint(0, 100, size)
print(random_array)
Python code: generate a function to convert a decimal number to a binary number.  def decToBin(n):
    binString = ""
    while n > 0:
        binary = n % 2
        binString = str(binary) + binString
        n = n//2
 
    return binString
  
# Driver Code 
n = int(input("Enter a number: "))
  
result = decToBin(n)
print("The binary representation is ", result)
Generate a list using a while loop in Python and appends the current number to the list.  my_list = []

num = 0

while num < 10:
    my_list.append(num)
    num += 1

print(my_list)
Create an AI agent in Python that learns to play Tetris and maximizes its score. Not applicable import gym
import numpy as np

from stable_baselines.common.policies import MlpPolicy
from stable_baselines.common.vec_env import DummyVecEnv
from stable_baselines import PPO2

# Training hyperparameters
n_timesteps = 500000

# Create the environment
env = gym.make('Tetris-v0')
env = DummyVecEnv([lambda: env])

# Create the agent
model = PPO2(MlpPolicy, env, n_timesteps=n_timesteps)

# Train the agent
model.learn(total_timesteps=n_timesteps)

# Test the agent
env.reset()
state, done = env.reset(), False
total_reward = 0

while not done:
    action, _states = model.predict(state)
    state, reward, done, info = env.step(action)
    total_reward += reward # accumulate the reward

print('Total Reward: ', total_reward)
Write a python script to generate a random password of length 8, which consists of alphanumeric characters and at least one special character.  import string
import random

def generate_password():
    chars = string.ascii_letters + string.digits + string.punctuation
    pwd_length = 8

    password = ''
    for i in range(pwd_length):
        password += random.choice(chars)
    
    # Check if at least one special character exists in the password
    if any([char in string.punctuation for char in password]):
        return password
    else:
        return generate_password()

print(generate_password())
Create a function to find the number of times the given string appears in the array. Python, "Python" def count_occurrences(items, string):
  count = 0
  for item in items: 
    if item == string:
      count += 1
  return count

print(count_occurrences(['Python', 'Python'], "Python"))

# Output: 2
Write a Python program to print out all even numbers in a given range. 1, 10 def print_even_numbers(start, end):
    for i in range(start, end + 1):
        if i % 2 == 0:
            print(i)

if __name__ == '__main__':
    print_even_numbers(1, 10)

# Output
2
4
6
8
10
Design a program in Python to reverse the words of a given string. String s = "This is an example sentence." def reverseWords(s): 
	# split the string 
	words = s.split(' ') 
	
	# reverse the words 
	words = words[::-1] 
	
	# join the words 
	reverseString = ' '.join(words)
	
	return reverseString 

s = "This is an example sentence."
print(reverseWords(s)) 
# Output: sentence. example an is This
Write Python code to create a program that, given a string s and an integer k, finds all the substrings of s with length less than or equal to k. s = "abcdefg" and k = 2 def find_all_substrings(s, k):
    substrings = []
    for start_idx in range(len(s)):
        if start_idx + k > len(s):
            break
        for end_idx in range(start_idx+k, len(s)+1):
            substrings.append(s[start_idx:end_idx])
    return substrings

s = "abcdefg"
k = 2

print(find_all_substrings(s, k))
Create a Naive Bayes Classifier in Python to classify emails as spam or nonspam. Data Set - emails.csv import pandas as pd 
from sklearn.model_selection import train_test_split 
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB 

# Load the dataset
df = pd.read_csv('emails.csv')

# Split the dataset into train and test sets
X_train, X_test, y_train, y_test = train_test_split(df['message'],  df['label'], random_state=1)

# Create an instance of the CountVectorizer
count_vector = CountVectorizer()

# Transform the training data using count vectorizer 
training_data = count_vector.fit_transform(X_train)

# Transform the test data using the count vectorizer which was used for training
testing_data = count_vector.transform(X_test)

# Create an instance of the multinomial Naive Bayes classifier 
naive_bayes = MultinomialNB()

# Fit the classifier to the training data 
naive_bayes.fit(training_data, y_train)

# Make the predictions
predictions = naive_bayes.predict(testing_data)
Create a class in Python that can generate a new instance of itself given a list of arguments list = ["name", "age", "gender"] class Student():
    def __init__(self, name, age, gender):
        self.name=name
        self.age=age
        self.gender=gender
    def generate(self, args):
        return Student(*args)
Create a python class for a Binary Search Tree (BST).  class BinarySearchTree:
    
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None
    
    def insert(self, value):
        if value < self.value:
            if self.left is None:
                self.left = BinarySearchTree(value)
            else:
                self.left.insert(value)
        else: 
            if self.right is None:
                self.right = BinarySearchTree(value)
            else:
                self.right.insert(value)
    
    def contains(self, target):
        if self.value == target:
            return True
        
        elif target < self.value:
            if self.left is None:
                return False
            else:
                return self.left.contains(target)
        
        else:
            if self.right is None:
                return False
            else:
                return self.right.contains(target)
Create a Python script to compare two sets of data and print the differences. set1 = [1, 2, 3, 4, 5]
set2 = [2, 4, 6, 8, 10] set1 = [1, 2, 3, 4, 5]
set2 = [2, 4, 6, 8, 10]

difference = []
for i in set1:
 if i not in set2:
 difference.append(i)
 
print(f"The difference between set1 and set2 is: {difference}")
Create a Python api to authenticate users using JWT. Not applicable import jwt 
import bcrypt

class AuthenticationApi: 
 def __init__(self, user_repo): 
  self.user_repo = user_repo
 
 def authenticate(self, username: str, password: str) -> str: 
  user = self.user_repo.find_by_username(username) 
 
  if user is None: 
   raise ValueError('Invalid username or password') 
 
  if not bcrypt.checkpw(password.encode('utf-8'), user.password): 
   raise ValueError('Invalid username or password') 
 
  token = jwt.encode({'sub': user.id}, 'secret', algorithm='HS256') 
 
  return token.decode('utf-8')
Extend the Python Flask application generated in the previous step to list specific information about a task when queried. Not applicable from flask import Flask, request
from flask_sqlalchemy import SQLAlchemy

app = Flask(name)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'
db = SQLAlchemy(app)

class Task(db.Model):
 id = db.Column(db.Integer, primary_key=True)
 description = db.Column(db.String(120), unique=True)

db.create_all()

@app.route('/tasks', methods=['POST'])
def create_task():
 task = Task(description=request.json['description'])
 db.session.add(task)
 db.session.commit()
 return {'id': task.id}

@app.route('/tasks', methods=['GET'])
def get_tasks():
 tasks = Task.query.all()
 return {'tasks': [task.description for task in tasks]}

@app.route('/tasks/int:id', methods=['GET'])
def get_task_info(id):
 task = Task.query.get(id)
 return {'id': task.id, 'description': task.description}

@app.route('/tasks/int:id', methods=['PUT'])
def update_task(id):
 task = Task.query.get(id)
 task.description = request.json['description']
 db.session.commit()
 return {'message': 'Task updated'}

@app.route('/tasks/int:id', methods=['DELETE'])
def delete_task(id):
 Task.query.filter_by(id=id).delete()
 db.session.commit()
 return {'message': 'Task deleted'}

if name == 'main':
 app.run(debug=True)
Write a Python program to print the maximum number from a given list. [5, 4, 2, 7, 12] def max_num(nums):
    max = nums[0]
    for num in nums[1:]:
        if num > max:
            max = num
    return max

nums = [5, 4, 2, 7, 12]
print(max_num(nums))
Generate a python program to substitute $username with an input's username. The user named "$username" will receive a special price. def substitute_username(input):
    output = input.replace("$username", input.username)
    return output
Create a Python web crawler to collect data from web page.  import requests
import bs4 

def web_crawler(url):
  # make request to the specified url and retrieve the response
  response = requests.get(url) 
  # since this page is regular HTML page, we need to use the html parser
  soup = bs4.BeautifulSoup(response.text, 'html.parser')
  # extract the data from the parsed web page 
  results = soup.select("body") 
  # return collected data
  return results
Create a high-level algorithm in Python that takes in two integers and returns the maximum value of the two Not applicable def max_value(x, y):
 if x > y:
 return x
 else: 
 return y
Write python code to find the sum of all even numbers from 0 to 100.  # Function to find the sum of all even numbers from 0 to n
def sum_of_even_numbers(n):
    # Initialize a sum variable
    sum = 0
    # Iterate through all even numbers less than or equal to n
    for i in range(0, n+1, 2):
        sum += i
    # Return the sum
    return sum

# This function is called
sum = sum_of_even_numbers(100)
print(sum)
Write a Python program to join two given lists. list1 = [1, 2, 3] 
list2 = [4, 5, 6] def join_lists(list1, list2):
    return list1 + list2

list1 = [1, 2, 3] 
list2 = [4, 5, 6]

joined_list = join_lists(list1, list2)
print(joined_list)
Rewrite the following code using reduce() method in Python def sum(x, y):
 return x + y

list = [1, 2, 3, 4] from functools import reduce

result = reduce(lambda x,y: x+y, list)
print(result) # 10
Optimize this Python code to reduce its run-time complexity. def foo(l1, l2):
    result = []
    for i in l1:
        for j in l2:
            result.append(i + j)
    return result def foo(l1, l2):
    result = [i + j for i in l1 for j in l2]
    return result
Write a Python program to classify the set of strings into two categories based on their length. strings = ['short', 'longer_string', 'medium_length', 'very_long_string'] def classify_strings(strings):
    # initialize lists for each classification
    short = []
    long = []
    # classify each string
    for s in strings:
        if len(s) <= 6:
            short.append(s)
        else:
            long.append(s)
    # return classified lists
    return [short, long]

if __name__ == '__main__':
    strings = ['short', 'longer_string', 'medium_length', 'very_long_string']
    print(classify_strings(strings))
Create a script in Python to sort a list of names by alphabetical order. names = ["John", "Sara", "Joseph", "James"] names.sort()
print(names)
Create a Python script that classifies an incoming sentence as either positive or negative.  import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer

def classify_sentence(text):
    sid = SentimentIntensityAnalyzer()
    ss = sid.polarity_scores(text)
    if ss['compound'] >= 0.05:
        return 'positive'
    elif ss['compound'] <= -0.05:
        return 'negative'
    else:
        return 'neutral'
Generate a Python function to search an array of integers for a specific target integer. Array = [1, 5, 10, 15, 20], Target = 15 def search(array, target):
 # Iterate over array
 for i in range(len(array)):
 # Check if current index equals target
 if array[i] == target:
 return i

return -1

# Test
array = [1, 5, 10, 15, 20]
target = 15

index = search(array, target)

if index >= 0:
 print(f"Target found at index {index}")
else:
 print("Target not found")

# Output: Target found at index 3
Create a Google Cloud Function in Python to parse an incoming JSON object and extract its values Not applicable import json

def parse_json_object(request):
 # Parse the incoming JSON object
 data = json.loads(request.data)
 
 # Extract the values
 param1 = data['param1']
 param2 = data['param2']
 
 return 'Parameters extracted: param1={}, param2={}'.format(param1,param2)
Write a function in Python that takes two strings as parameters and returns a boolean indicating whether they are anagrams.  def is_anagram(string1, string2): 
  
    # Create two lists from input strings 
    list_string1 = list(string1) 
    list_string2 = list(string2) 
  
    # If both strings are of different length then they  
    # cannot be anagram 
    if len(list_string1) != len(list_string2): 
        return False 
  
    # Sort both strings 
    list_string1.sort() 
    list_string2.sort() 
    
    # Compare sorted strings 
    if list_string1 == list_string2: 
        return True
    else: 
        return False
Create a program in Python to classify a given sentence as 'positive' or 'negative' "The movie was great!" """
Classify a sentence as 'positive' or 'negative
"""

import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer

def classify_sentence(sentence):
    sid = SentimentIntensityAnalyzer()
    sentiment = sid.polarity_scores(sentence)
    if sentiment['compound'] >= 0.05:
        return 'positive'
    elif sentiment['compound'] <= - 0.05:
        return 'negative'
    else:
        return 'neutral'

if __name__ == '__main__':
    sentence =  "The movie was great!"
    classification = classify_sentence(sentence)
    print(classification)
Create an exponentially weighted moving average (EWMA) chart in Python to track the performance of a stock price over time.  import matplotlib.pyplot as plt
import numpy as np

#Create array with stock prices
prices = [5, 10, 20, 25, 10, 8, 22]

#Calculate EWMA
weight = 0.9
alpha = 1 - weight

ewma = np.zeros_like(prices)
ewma[0] = prices[0]

for i in range(1, len(prices)):
    ewma[i] = weight*ewma[i-1] + alpha*prices[i]

#Plot the EWMA
plt.plot(ewma)
plt.title('Exponentially Weighted Moving Average')
plt.ylabel('Price')
plt.xlabel('Time (days)')
plt.show()
Create a machine learning model in Python to predict whether a stock will rise or fall based on its previous day close price. ```
sample_input_data = [#Previous day close values
						803.14, 
						671.3, 
						772.53, 
						662.16, 
						707.08
						]
``` import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier

# Prepare data
df = pd.DataFrame(sample_input_data)
df['Target'] = np.where(df.shift(-1) > df, 'Increase', 'Decrease')

X = df.iloc[:, 0:-1]
y = df.iloc[:, -1]

# Train model
clf = RandomForestClassifier(n_estimators=100)
clf.fit(X, y)

# Predict stock change
predictions = clf.predict(X)
print(predictions)
Write a function in Python to generate a random letter from the English alphabet.  import random 

def generate_random_letter(): 
    letters = 'abcdefghijklmnopqrstuvwxyz'
    letter = random.choice(letters)
    return letter
Write a Python program to print out the current date and time in the form "Friday, July 24th, 2020, at 4:00pm". Not Applicable from datetime import datetime

now = datetime.now()

print("Today's date is", now.strftime("%A, %B %dth, %Y, at %I:%M%p"))
Generate a syntax to input random numbers into a python program N = 10 import random

# Generates N random numbers
numbers = [random.randint(0, N) for i in range(N)]
Create a program header to go at the beginning of every python program you complete.  """
Authors: <Your Name>
Filename: <file name>.py
Description: <A brief description of the program>
"""
Create a Python program to calculate the average of all the ratings in the given list of tuple. [(3, 4), (5, 5), (7, 3)] def avg_rating(ratings):
    total = 0
    for rating in ratings:
        total += rating[0] + rating[1]
    return total / (len(ratings)*2)
Create a Python module to read a specific XML schema and return a list of model objects.  import xml.etree.ElementTree as ET

class ModelObject:
    def __init__(self, xml_node):
        """Constructor for ModelObject
        xml_node should be an ElementTree node of the xml data
        """
        self.name = xml_node.attrib['name']
        self.value = xml_node.text

def read_xml(xml):
    """Reads a given xml and returns a list of ModelObjects
    """
    root = ET.fromstring(xml)
    objects = []
    for node in root.iter('model'):
        objects.append(ModelObject(node))
    return objects
This code is a Python module that defines a class called "GoogledriveCom" which is a hoster plugin for the website drive.google.com. To use this plugin, import the module and create an instance of the "GoogledriveCom" class. The instance has a method called "handleFree" which takes a pyfile argument and returns a download link. The module also defines a function called "getInfo" which creates an instance of the "GoogledriveCom" class and returns information about the plugin.  # -*- coding: utf-8 -*
#
# Test links:
#   https://drive.google.com/file/d/0B6RNTe4ygItBQm15RnJiTmMyckU/view?pli=1

import re
import urlparse

from module.plugins.internal.SimpleHoster import SimpleHoster, create_getInfo
from module.utils import html_unescape


class GoogledriveCom(SimpleHoster):
    __name__    = "GoogledriveCom"
    __type__    = "hoster"
    __version__ = "0.12"

    __pattern__ = r'https?://(?:www\.)?(drive|docs)\.google\.com/(file/d/\w+|uc\?.*id=)'
    __config__  = [("use_premium", "bool", "Use premium account if available", True)]

    __description__ = """Drive.google.com hoster plugin"""
    __license__     = "GPLv3"
    __authors__     = [("zapp-brannigan", "fuerst.reinje@web.de")]


    DISPOSITION = False  #: Remove in 0.4.10

    NAME_PATTERN    = r'(?:<title>|class="uc-name-size".*>)(?P<N>.+?)(?: - Google Drive</title>|</a> \()'
    OFFLINE_PATTERN = r'align="center"><p class="errorMessage"'

    LINK_FREE_PATTERN = r'"([^"]+uc\?.*?)"'


    def setup(self):
        self.multiDL        = True
        self.resumeDownload = True
        self.chunkLimit     = 1


    def handleFree(self, pyfile):
        for _i in xrange(2):
            m = re.search(self.LINK_FREE_PATTERN, self.html)

            if m is None:
                self.error(_("Free download link not found"))

            else:
                link = html_unescape(m.group(1).decode('unicode-escape'))
                if not urlparse.urlparse(link).scheme:
                    link = urlparse.urljoin("https://docs.google.com/", link)

                direct_link = self.directLink(link, False)
                if not direct_link:
                    self.html = self.load(link, decode=True)
                else:
                    self.link = direct_link
                    break


getInfo = create_getInfo(GoogledriveCom)

Create a Django web application to show the current weather for a given location. Not applicable # Project Setup
python3 -m venv venv
source venv/bin/activate
pip install django
django-admin startproject weather

# App Setup
cd weather
django-admin startapp currentweather

# Settings File
# In weather/settings.py add the app and api key
INSTALLED_APPS = [
    'currentweather',
]

WEATHER_API_KEY = '<YOUR_API_KEY_HERE>'

# Model
# In currentweather/models.py
from django.db import models

class WeatherData(models.Model):
    location = models.CharField(max_length=100)
    temperature = models.IntegerField()
    condition = models.CharField(max_length=100)

# View
# In currentweather/views.py
from django.shortcuts import render
import requests
from .models import WeatherData

# Use your API key to make a request to fetch weather data
def get_weather_data(location):
    url = 'http://api.openweathermap.org/data/2.5/weather?q={}&appid={}'.format(location, WEATHER_API_KEY)
    data = requests.get(url).json() 
    return data

# Create a view to display the weather data
def weather(request):
    location = request.GET.get('location', '')
    # Fetch weather data for the given location
    weather_data = get_weather_data(location)
    context = {
        'weather_data': weather_data,
    }
    return render(request, 'currentweather/weather.html', context)

# Template
# In currentweather/templates/currentweather/weather.html
<h1>Current Weather - {{ weather_data.name }}</h1>
<div>
 <h2>Temperature : {{ weather_data.main.temp }}°C</h2>
 <h2>Condition : {{ weather_data.weather[0].main }}</h2>
</div>
Generate a Python program to generate random passwords of length n. Length: 8 import string
import random
 
def random_password(length):
 chars = string.ascii_uppercase + string.ascii_lowercase + string.digits
 random_password = ''.join(random.choice(chars) for i in range(length))
 return random_password
  
length = 8
print(random_password(length))
Create a Python program to send an email with a custom message.  import smtplib 
# creates SMTP session 
s = smtplib.SMTP('smtp.gmail.com', 587) 
# start TLS for security 
s.starttls() 
# Authentication 
s.login("Your Email", "Your Password") 
# message to be sent 
message = "Segment your emails according to their purpose."
# sending the mail 
s.sendmail("SenderMail", "ReceiverMail", message) 
# terminating the session 
s.quit()
Create a Python dictionary to store the details of different users with their names as the key.  users = {
  "John": {
    "age": 28,
    "location": "New York"
  },
  "Mary": {
    "age": 34,
    "location": "London"
  },
  "David": {
    "age": 40,
    "location": "Berlin"
  }
}
Implement a solution to mark the middle element in a singly linked list in Python. Not applicable class Node:
 def __init__(self, data):
  self.data = data
  self.next = None

class SinglyLinkedList:
 def __init__(self):
  self.head = None
  self.tail = None
  self.middle = None

 def addNode(self, node):
  if self.head is None:
   self.head = node
   self.tail = node
   self.middle = node
  else:
   self.tail.next = node
   self.tail = node
   # To mark the middle node
   if self.head.next is self.middle:
    self.middle = node

 def mark_middle(self):
  if self.middle is None:
   return
  self.middle.data = 'Middle Node'
Write a Python program to identify the count of the largest contiguous subarray of numbers in a given array. arr=[-2, -3, 4, -1, -2, 1, 5, -3] def max_contiguous_subarray(arr):
 max_end = 0
 max_so_far = 0

 for i in range(len(arr)):
 max_end = max(max_end + arr[i], 0)
 max_so_far = max(max_end, max_so_far)

 if max_so_far > 0:
 return len(arr) - max_so_far
 else:
 return 0
Create a Python program to classify the given data into their respective category. data = ["apple", "banana", "avocado", "pear"]

categories = {
    "fruit" : ["apple", "banana", "pear"],
    "vegetable" : ["avocado"]
} def classify(data, categories):
    """Classify the given data into their respective category"""
    classified_data = {}
    for category, values in categories.items():
        classified_data[category] = []
        for value in data:
            if value in values:
                classified_data[category].append(value)
    return classified_data
Create a Python class that simulates a bank account. The class should have methods for depositing and withdrawing money, and for displaying the account balance. Not applicable class BankAccount:
 def __init__(self):
 self.balance = 0
 
 def deposit(self, amount):
 self.balance += amount
 
 def withdraw(self, amount):
 self.balance -= amount
 
 def show_balance(self):
 print("Your balance is $%.2f" % self.balance)
Create a Python program to convert a number to its corresponding month name. 2 def num_to_month(num):
    months = [
        'January', 
        'February', 
        'March', 
        'April', 
        'May', 
        'June', 
        'July', 
        'August', 
        'September', 
        'October', 
        'November', 
        'December'
    ]
    return months[num - 1]

print(num_to_month(2)) # February
Construct a function in Python to calculate the area of a triangle with three sides side1: 3
side2: 4
side3: 5 def triangleArea(side1, side2, side3):
  s = (side1 + side2 + side3) / 2
  area = (s * (s - side1) * (s - side2) * (s - side3)) ** 0.5
  return area
Develop a Python algorithm that takes a list of integers as an input and output a list of pairs of numbers in the list that add up to a given number. [2, 5, 3, 8, 11], Target = 9 def sum_to_target(lst, target):
  result = []
  for i in range(len(lst)):
    for j in range(i+1, len(lst)):
      if lst[i] + lst[j] == target:
        result.append((lst[i], lst[j]))
  
  return result

lst = [2, 5, 3, 8, 11] 
target = 9

print(sum_to_target(lst, target)) # [(2, 7), (3, 6), (5, 4)]
Develop a Python program to calculate the maximum number of different routes from A to B. A = (1,1) and B = (3,3) def countMaxRoutes(A, B): 
 
    # declaring the grid size 
    MAX_ROWS = 4
    MAX_COLS = 4
 
    # calculating the number of unique paths 
    # possible to go from A to B 
    return factorial(MAX_ROWS - 1 + MAX_COLS - 1) // 
           (factorial(MAX_ROWS - 1) * 
            factorial(MAX_COLS - 1)) 
  
def factorial(n): 
      
    res = 1;  
    for i in range(n, 0, -1): 
        res *= i;  
    return res; 
  
A = (1, 1) 
B = (3, 3) 
 
print(countMaxRoutes(A, B))
Compose a program in Python to generate a list of prime numbers in the range of 2-50.  def generate_prime_list(max_num):
    prime_list = []
    for number in range(2, max_num + 1):
        for divider in range(2, number):
            if number % divider == 0:
                break
        else:
            prime_list.append(number)
    return prime_list

prime_list = generate_prime_list(50)
print(prime_list)
Given a string, write a Python function to lowercase all vowels. String = 'Hello World' def lower_vowels(str):
 vowels = "aeiouAEIOU"
 new_str = ""
 
 for c in str:
  if c in vowels: 
   new_str += c.lower()
  else:
   new_str += c
 return new_str
Create a solution in Python Code to Solve Sudoku  def solveSudoku(board):
    find = find_empty(board)
    if not find:
        return True
    else:
        row, col = find
 
    for i in range(1,10):
        if valid(board, i, (row, col)):
            board[row][col] = i
 
            if solveSudoku(board):
                return True
 
            board[row][col] = 0
 
    return False

def valid(board, num, pos):
    # Check row
    for i in range(len(board[0])):
        if board[pos[0]][i] == num and pos[1] != i:
            return False
 
    # Check column
    for i in range(len(board)):
        if board[i][pos[1]] == num and pos[0] != i:
            return False
 
    # Check box
    box_x = pos[1] // 3
    box_y = pos[0] // 3
 
    for i in range(box_y*3, box_y*3 + 3):
        for j in range(box_x * 3, box_x*3 + 3):
            if board[i][j] == num and (i,j) != pos:
                return False
 
    return True 

def find_empty(board):
    for i in range(len(board)):
        for j in range(len(board[0])):
            if board[i][j] == 0:
                return (i, j)  # row, col
Develop a linear regression model in Python to predict housing prices.  import numpy as np
from sklearn.linear_model import LinearRegression

# Create feature and target vector
X=np.array([num_bedrooms, size_sqft, num_bathrooms, age]).T
y=np.array([price]).T

# Create and train the model
model = LinearRegression().fit(X, y)

# Output the result
print('Coefficients:', model.coef_)
print('Intercept:', model.intercept_)
Create a Python dictionary that stores the number of occurrences of each character in a string. s = "Hello World!" def countCharacters(s):
  # Create empty dictionary 
  chars_dict = {}
  
  # Iterate over each character in the string
  for char in s:
    # If the character is not in the dictionary, set the value to 1
    if char not in chars_dict:
      chars_dict[char] = 1
    # Otherwise, increment the value
    else:
      chars_dict[char] += 1
  
  return chars_dict
Create a function to create a NxN matrix in Python with all elements equal to a given number. N=5, num=7 def mat_gen(N, num):
    matrix = [[num for col in range(N)] for row in range(N)]
    return matrix

mat_gen(5, 7)
Write a Python program to calculate the compound interest. investment_amount = 1000, time = 5, rate_of_interest = 5 def compoundInterest(investment_amount, rate_of_interest, time):
    compound_interest = investment_amount * (pow((1 + rate_of_interest / 100), time))
    return compound_interest

ci = compoundInterest(1000, 5, 5)
print(ci)
Create a random forest classifier in python to predict whether a given customer will buy a product or not.  #import necessary libraries
import pandas as pd
from sklearn.ensemble import RandomForestClassifier

#load data
data = pd.read_csv('data.csv')

#split data into features and labels
X = data.iloc[:, :-1]
y = data.iloc[:, -1]

#train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

#initializing the classifier
classifier = RandomForestClassifier(n_estimators=20, random_state=0)

# training the classifier
classifier.fit(X_train, y_train)

# predicting the test set results
y_pred = classifier.predict(X_test)

# evaluating the classifier
print("Accuracy:",metrics.accuracy_score(y_test, y_pred))
Create a simple class in Python to represent a point in 2D space with x, y coordinates.  class Point2D:
    def __init__(self, x, y):
        self.x = x
        self.y = y
Generate a Python function that takes as input a UTF-8 encoded string and returns a string where the characters in odd positions of the original string are repeated. string = ‘HelloWorld’ def repeat_char(s):
    result = ''
    for i,c in enumerate(s):
        if i % 2 == 0:
            result += c
        else:
            result += c*2
    return result

print(repeat_char('HelloWorld'))
# Output: HeellooWorrlld
Can you provide a Python program to generate a random integer within the range of 1 to 100?  import random

def random_int_between_1_and_100():
  return random.randint(1, 100)
Write a Python program to calculate the standard deviation of given data. [20, 10, 15, 25] import statistics
def calculate_std_dev(arr):
	return statistics.stdev(arr)
Create an algorithm in Python to count the number of unique elements in a list. [1, 2, 3, 1, 2] def countUnique(arr):
    # create a lookup to keep track of elements
    lookup = set()
    # loop over list to add elements to set
    for elem  in arr:
        if elem not in lookup:
            lookup.add(elem)
    # return the length of the lookup set
    return len(lookup)

# test program
arr = [1, 2, 3, 1, 2]
print(countUnique(arr))
Given an array of numbers, write a Python program to calculate the sum of the integers in the array. [5, 2, 8, 4, 23] def sum_integer(arr):
    """
    Args :
        arr (list): List of integer
    
    Returns :
        int : Sum of integers
    """
    
    res = 0
    
    for num in arr:
        res += num
    
    return res

sum_integer([5, 2, 8, 4, 23])
# output: 42
Implement a function in Python to detect whether a given string is a valid ISBN number.  def is_isbn_valid(isbn):
    isbn = isbn.replace("-", "")
    if len(isbn) != 10:
        return False
 
    sum = 0
    factor = 10
 
    for i in range(len(isbn)):
        if isbn[i].isdigit():
            sum += int(isbn[i]) * factor
        elif isbn[i].upper() == 'X':
            sum += 10 * factor
        else:
            return False
        factor -= 1
    
    if sum % 11 == 0:
        return True
    else:
        return False
Generate a python code that returns all distinct values of a given list. my_list = [2,2,4,4,6,2] def get_distinct_elements(list):
    distinct_list = []
    for item in list:
        if item not in distinct_list:
            distinct_list.append(item)
    return distinct_list

distinct_list = get_distinct_elements(my_list)
Make a function in Python which takes a string of any length, reverses it, and then returns the reversed string. String to be reversed def reverse_string(string):
    reversed_string = ""
    for char in string:
        reversed_string = char + reversed_string
    return reversed_string
Create a program in Python to generate a random integer between 1 and 10.  import random

def random_int():
    return random.randint(1, 10)
Generate a Python function to calculate the least common multiple (LCM) of two numbers.  def lcm(a, b): 
    lcm = (a*b)//gcd(a,b) 
    return lcm
Write a Python Program to create a list of all the words in a given string and its frequency. Sample string = "hello world, this is a test string" def word_frequency(string): 
    freq = {} 
    for word in string.split(): 
        if word in freq: 
            freq[word] += 1
        else: 
            freq[word] = 1
  
    for key, value in freq.items(): 
        print("% s : % d"%(key, value)) 
  
# Driver program 
if __name__ == "__main__": 
    string = "hello world, this is a test string"
    word_frequency(string)
Create a program in Python that takes a given string and returns a dictionary whose keys are the words in the string and values are the number of occurances of each word. String = "Hello world, This is me" def word_count(string):
 count = {}
 string = string.split()

 for word in string:
 if word in count:
 count[word] += 1
 else:
 count[word] = 1

 return count

print(word_count("Hello world, This is me"))
Write a Python code to add two numbers using bit-wise operations and print the result.  def add_numbers(x, y):
    while (y != 0):
        carry = x & y
        x = x ^ y
        y = carry << 1
    return x

num1 = 10
num2 = 5

res = add_numbers(num1, num2)
print(res)
Generate a Python code to implement the classic Tower of Hanoi problem.  def tower_of_hanoi(n, from_rod, to_rod, aux_rod): 
    if n == 1: 
        print("Move disk 1 from rod",from_rod,"to rod",to_rod) 
        return
    tower_of_hanoi(n-1, from_rod, aux_rod, to_rod) 
    print("Move disk",n,"from rod",from_rod,"to rod",to_rod) 
    tower_of_hanoi(n-1, aux_rod, to_rod, from_rod)
Write a python script to parse a JSON string and create two reports - one containing all the cities in the US and another one containing all the cities in Europe. jsonString = """
{
  "locations": [
    {
      "name": "New York",
      "continent": "North America"
    },
    {
      "name": "Berlin",
      "continent": "Europe"
    },
    {
      "name": "San Francisco",
      "continent": "North America"
    },
    {
      "name": "Paris",
      "continent": "Europe"
    }
  ]
}
""" import json

data = json.loads(jsonString)

us_cities = []
europe_cities = []

for location in data['locations']:
 if location['continent'] == 'North America':
 us_cities.append(location['name'])
 elif location['continent'] == 'Europe':
 europe_cities.append(location['name'])

print(f'US cities: {us_cities}\n')
print(f'Europe cities: {europe_cities}\n')
Given a list of numbers, write a Python program to check if any two numbers in the list add up to a given target number. nums = [1, 4, -5, 3]
target = 2 def find_two_add_up_to_target(nums, target): 
    for num1 in nums:
        for num2 in nums:
            if num1 + num2 == target:
                return True
    return False
Given a string, write a Python program to remove all punctuation from the string. The quick brown fox jumps over the lazy dog. import string

def remove_punctuation(text):
    return text.translate(str.maketrans('', '', string.punctuation))

print(remove_punctuation("The quick brown fox jumps over the lazy dog."))
# output: The quick brown fox jumps over the lazy dog
Define a Python class called Appointment that creates appointment objects.  class Appointment():
     
    def __init__(self, date, time, reason):
        self.date = date
        self.time = time
        self.reason = reason
    
    def get_details(self):
        return f" The appointment is on {self.date}, at {self.time}, for {self.reason}."
Create a recursive function with python as the language to find the sum of all elements in a list.  def sumOfList(list):
   if len(list) == 1:
       return list[0]
   else:
       return list[0] + sumOfList(list[1:])
Create a python program to find all n digit prime numbers.  def get_n_digit_prime_numbers(n):
    prime_numbers = []
    for number in range(10**(n-1), 10**n):
        is_prime = True
        for divisor in range(2, number):
            if number % divisor == 0:
                is_prime = False
                break
        if is_prime:
            prime_numbers.append(number)
    return prime_numbers
Generate a python program that matches regular expression pattern. pattern = "\d+"
text = "I have 3 cats and 5 dogs" import re

def regex_match(pattern, text):
    regex = re.compile(pattern)
    matches = regex.findall(text)
    return matches
Write a function in Python to print a random permutation of array elements. input_array = [1, 2, 3, 4, 5] import random
def random_permutation(input_array):
    perm = []
    while(len(input_array) > 0):
        el = random.choice(input_array)
        perm.append(el)
        input_array.remove(el)
    return perm
To measure the successful pings per second using this script, follow these steps:
1. Run the script using the command "sudo python ping.py -l -a 61:8E:9C:CD:03 -f 74 -t 0 -r 0".
2. Enter the address to sniff with the "-a" or "--address" argument, followed by the RF channel with the "-f" or "--channel" argument.
3. The script will put the radio in sniffer mode and set the channel.
4. The script will display the maximum and current rate of successful pings per second on the console.
5. To stop the script, press "Ctrl+C".  #!/usr/bin/env python2
'''
Author: xswxm
Blog: xswxm.com

This script will measure the successful pings per seconds.
e.g.: sudo python ping.py -l -a 61:8E:9C:CD:03 -f 74 -t 0 -r 0

'''
import sys, time, threading
from lib import common
common.init_args('./ping.py')
common.parser.add_argument('-a', '--address', type=str, help='Address to sniff, following as it changes channels', required=True)
common.parser.add_argument('-f', '--channel', type=int, help='RF channel', default=0)
common.parse_and_init()

channel = common.args.channel
# Total number of payloads sent
count = 0

# Parse the prefix address
address = common.args.address.replace(':', '').decode('hex')[::-1][:5]
# Put the radio in sniffer mode (ESB w/o auto ACKs)
common.radio.enter_sniffer_mode(address)
# Set channel
common.radio.set_channel(channel)

stop_event = threading.Event()
stop_event.set()

# Update per milliseconds
def display():
  global count, stop_event
  # To record the number of payloads sent for every 100 milliseconds
  pings = [0]*10
  # Highest rate
  max_rate = 0
  while stop_event.isSet():
    pings = pings[1:] + [count]
    rate = pings[-1] - pings[0]
    if max_rate < rate: max_rate = rate
    msg = 'Maximum Rate: {0:>4}pks/s    Current Rate: {1:>4}pks/s'.format(max_rate, rate)
    sys.stdout.write('\r'+msg)
    sys.stdout.flush()
    time.sleep(0.1)


if __name__ == "__main__":
  t = threading.Thread(target=display,args=())
  t.start()
  try:
    while True:
      if common.radio.transmit_payload(common.ping_payload, common.ack_timeout, common.retries):
        count += 1
  except KeyboardInterrupt:
    stop_event.clear()
Construct a recursive Python program that computes the factorial of an integer.  def factorial(n): 
    if n == 0: 
        return 1 
    else: 
        return n * factorial(n-1)
Design python code to optimize the following function: ⅇ͏^(−𝐱^2)  import math
from scipy.optimize import minimize

def objective(x):
    return math.exp(-x**2)

x0 = 5
print('Initial objective: ' + str(objective(x0)))

solution = minimize(objective, x0)
print('Optimized objective: ' + str(objective(solution.x)))
Design a class in Python to represent a bank account. The class should include a constructor to create bank accounts, methods to deposit and withdraw money, and a toString() method to display the account balance. class BankAccount:
    def __init__(self, balance):
        self.balance = balance

    def deposit(self, amount):
        self.balance += amount
        return self.balance

    def withdraw(self, amount):
        self.balance -= amount
        return self.balance

    def __str__(self):
        return "Current balance is " + str(self.balance)
Create a loop in Python that prints a random number between 0 and 9.  import random
for i in range(10):
    print(random.randint(0, 9))
Write a Python program that prints all unique pairs that sum up to a given number. Number: 8 def unique_pairs(number):
    pairs = set()
    for i in range(number + 1):
    	for j in range(number + 1):
            if i + j == number and (j, i) not in pairs:
                pairs.add((i, j))
    return pairs
Create a Python program to edit a given string and insert a given word into the middle of the string. String = 'I am a programmer';
Word = 'software' def insert_word(string, word):
  mid_index = len(string)//2
  start_string = string[:mid_index]
  end_string = string[mid_index:]
  new_string = start_string+word+end_string
  return new_string

string = 'I am a programmer'
word = 'software'

print(insert_word(string, word))
Create a Python program to print all numbers which are divisible by 5 and 6 between 300 to 500.  for i in range(300, 501):
    if i % 5 == 0 and i % 6 == 0:
        print(i)
The given code contains functions to extract features from images and detect cars in a video using a linear support vector machine (SVM) classifier. To use this code, you need to provide a list of vehicle and non-vehicle images, and then call the `extract_features` function to extract features from these images. After that, you can train a linear SVM classifier using the extracted features and labels. Once the classifier is trained, you can use the `process_image` function to detect cars in a video. The output video will be saved in the specified location.  import matplotlib.image as mpimg
import matplotlib.pyplot as plt
import numpy as np
import cv2
import glob
from skimage.feature import hog
from skimage import color, exposure
import random
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import LinearSVC
import time
from moviepy.editor import VideoFileClip 
from scipy.ndimage.measurements import label
from IPython.display import HTML

def load_data(my_list):
    new_list = []
    for image in my_list:
        img = cv2.imread(image)
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        new_list.append(img)
    return new_list

# Define a function to return HOG features and visualization
def get_hog_features(img, orient, pix_per_cell, cell_per_block, vis=False, feature_vec=True):
    if vis == True:
        features, hog_image = hog(img, orientations=orient, pixels_per_cell=(pix_per_cell, pix_per_cell),
                                  cells_per_block=(cell_per_block, cell_per_block), transform_sqrt=False, 
                                  visualise=True, feature_vector=False)
        return features, hog_image
    else:      
        features = hog(img, orientations=orient, pixels_per_cell=(pix_per_cell, pix_per_cell),
                       cells_per_block=(cell_per_block, cell_per_block), transform_sqrt=False, 
                       visualise=False, feature_vector=feature_vec)
        return features


def bin_spatial(img, size=(32, 32)):
    color1 = cv2.resize(img[:,:,0], size).ravel()
    color2 = cv2.resize(img[:,:,1], size).ravel()
    color3 = cv2.resize(img[:,:,2], size).ravel()
    return np.hstack((color1, color2, color3))

def color_hist(img, nbins=32):    #bins_range=(0, 256)
    # Compute the histogram of the color channels separately
    channel1_hist = np.histogram(img[:,:,0], bins=nbins)
    channel2_hist = np.histogram(img[:,:,1], bins=nbins)
    channel3_hist = np.histogram(img[:,:,2], bins=nbins)
    # Concatenate the histograms into a single feature vector
    hist_features = np.concatenate((channel1_hist[0], channel2_hist[0], channel3_hist[0]))
    # Return the individual histograms, bin_centers and feature vector
    return hist_features
            
# Define a function to extract features from a list of images
# Have this function call bin_spatial() and color_hist()
def extract_features(imgs, 
                     color_space='RGB', 
                     spatial_size=(32, 32),
                     hist_bins=32, orient=9, 
                     pix_per_cell=8, 
                     cell_per_block=2,
                     hog_channel=0,
                    spatial_feat=True, 
                     hist_feat=True, 
                     hog_feat=True):
    # Create a list to append feature vectors to
    features = []
    # Iterate through the list of images
    for image in imgs:
        file_features = []
        # Read in each one by one
        #image = mpimg.imread(file)
        # apply color conversion if other than 'RGB'
        if color_space != 'RGB':
            if color_space == 'HSV':
                feature_image = cv2.cvtColor(image, cv2.COLOR_RGB2HSV)
            elif color_space == 'LUV':
                feature_image = cv2.cvtColor(image, cv2.COLOR_RGB2LUV)
            elif color_space == 'HLS':
                feature_image = cv2.cvtColor(image, cv2.COLOR_RGB2HLS)
            elif color_space == 'YUV':
                feature_image = cv2.cvtColor(image, cv2.COLOR_RGB2YUV)
            elif color_space == 'YCrCb':
                feature_image = cv2.cvtColor(image, cv2.COLOR_RGB2YCrCb)
        else: feature_image = np.copy(image)      

        if spatial_feat == True:
            spatial_features = bin_spatial(feature_image, size=spatial_size)
            file_features.append(spatial_features)
        if hist_feat == True:
            # Apply color_hist()
            hist_features = color_hist(feature_image, nbins=hist_bins)
            file_features.append(hist_features)
        if hog_feat == True:
        # Call get_hog_features() with vis=False, feature_vec=True
            if hog_channel == 'ALL':
                hog_features = []
                for channel in range(feature_image.shape[2]):
                    hog_features.append(get_hog_features(feature_image[:,:,channel], 
                                        orient, pix_per_cell, cell_per_block, 
                                        vis=False, feature_vec=True))
                hog_features = np.ravel(hog_features)        
            else:
                hog_features = get_hog_features(feature_image[:,:,hog_channel], orient, 
                            pix_per_cell, cell_per_block, vis=False, feature_vec=True)
            # Append the new feature vector to the features list
            file_features.append(hog_features)
        features.append(np.concatenate(file_features))
    # Return list of feature vectors
    return features

def add_heat(heatmap, bbox_list):
    # Iterate through list of bboxes
    for box in bbox_list:
        # Add += 1 for all pixels inside each bbox
        # Assuming each "box" takes the form ((x1, y1), (x2, y2))
        heatmap[box[0][1]:box[1][1], box[0][0]:box[1][0]] += 1

    # Return updated heatmap
    return heatmap

def apply_threshold(heatmap, threshold):
    # Zero out pixels below the threshold
    heatmap[heatmap <= threshold] = 0
    # Return thresholded map
    return heatmap

def draw_labeled_bboxes(img, labels):
    # Iterate through all detected cars
    for car_number in range(1, labels[1]+1):
        # Find pixels with each car_number label value
        nonzero = (labels[0] == car_number).nonzero()
        # Identify x and y values of those pixels
        nonzeroy = np.array(nonzero[0])
        nonzerox = np.array(nonzero[1])
        # Define a bounding box based on min/max x and y
        bbox = ((np.min(nonzerox), np.min(nonzeroy)), (np.max(nonzerox), np.max(nonzeroy)))
        # Draw the box on the image
        cv2.rectangle(img, bbox[0], bbox[1], (0,0,255), 6)
    # Return the image
    return img

img_boxes = []
def convert_color(img, conv='RGB2YCrCb'):
    if conv == 'RGB2YCrCb':
        return cv2.cvtColor(img, cv2.COLOR_RGB2YCrCb)
    if conv == 'BGR2YCrCb':
        return cv2.cvtColor(img, cv2.COLOR_BGR2YCrCb)
    if conv == 'RGB2LUV':
        return cv2.cvtColor(img, cv2.COLOR_RGB2LUV)

# Define a single function that can extract features using hog sub-sampling and make predictions
def find_cars(img, ystart, ystop, scale, svc, X_scaler, orient, pix_per_cell, cell_per_block, spatial_size, hist_bins):
    
    draw_img = np.copy(img)
    #img = img.astype(np.float32)/255
    
    heat_map = np.zeros_like(img[:,:,0]).astype(np.float)
    
    
    img_tosearch = img[ystart:ystop,:,:]
    ctrans_tosearch = convert_color(img_tosearch, conv='RGB2YCrCb')
    if scale != 1:
        imshape = ctrans_tosearch.shape
        ctrans_tosearch = cv2.resize(ctrans_tosearch, (np.int(imshape[1]/scale), np.int(imshape[0]/scale)))
        
    ch1 = ctrans_tosearch[:,:,0]
    ch2 = ctrans_tosearch[:,:,1]
    ch3 = ctrans_tosearch[:,:,2]

    # Define blocks and steps as above
    nxblocks = (ch1.shape[1] // pix_per_cell) - cell_per_block + 1
    nyblocks = (ch1.shape[0] // pix_per_cell) - cell_per_block + 1 
    nfeat_per_block = orient*cell_per_block**2
    
    # 64 was the orginal sampling rate, with 8 cells and 8 pix per cell
    window = 64
    nblocks_per_window = (window // pix_per_cell) - cell_per_block + 1
    cells_per_step = 2  # Instead of overlap, define how many cells to step
    nxsteps = (nxblocks - nblocks_per_window) // cells_per_step + 1
    nysteps = (nyblocks - nblocks_per_window) // cells_per_step + 1
    
    # Compute individual channel HOG features for the entire image
    hog1 = get_hog_features(ch1, orient, pix_per_cell, cell_per_block, feature_vec=False)
    hog2 = get_hog_features(ch2, orient, pix_per_cell, cell_per_block, feature_vec=False)
    hog3 = get_hog_features(ch3, orient, pix_per_cell, cell_per_block, feature_vec=False)
    
    for xb in range(nxsteps):
        for yb in range(nysteps):
            ypos = yb*cells_per_step
            xpos = xb*cells_per_step
            # Extract HOG for this patch
            hog_feat1 = hog1[ypos:ypos+nblocks_per_window, xpos:xpos+nblocks_per_window].ravel() 
            hog_feat2 = hog2[ypos:ypos+nblocks_per_window, xpos:xpos+nblocks_per_window].ravel() 
            hog_feat3 = hog3[ypos:ypos+nblocks_per_window, xpos:xpos+nblocks_per_window].ravel() 
            hog_features = np.hstack((hog_feat1, hog_feat2, hog_feat3))

            xleft = xpos*pix_per_cell
            ytop = ypos*pix_per_cell

            # Extract the image patch
            subimg = cv2.resize(ctrans_tosearch[ytop:ytop+window, xleft:xleft+window], (64,64))
          
            # Get color features
            spatial_features = bin_spatial(subimg, size=spatial_size)
            hist_features = color_hist(subimg, nbins=hist_bins)

            # Scale features and make a prediction
            test_features = X_scaler.transform(np.hstack((spatial_features, hist_features, hog_features)).reshape(1, -1))    
            #test_features = X_scaler.transform(np.hstack((shape_feat, hist_feat)).reshape(1, -1))    
            test_prediction = svc.predict(test_features)
            
            if test_prediction == 1:
                xbox_left = np.int(xleft*scale)
                ytop_draw = np.int(ytop*scale)
                win_draw = np.int(window*scale)
                cv2.rectangle(draw_img,(xbox_left, ytop_draw+ystart),(xbox_left+win_draw,ytop_draw+win_draw+ystart),(0,0,255),6)
                img_boxes.append(((xbox_left, ytop_draw+ystart),(xbox_left+win_draw, ytop_draw+win_draw+ystart)))
                heat_map[ytop_draw+ystart:ytop_draw+win_draw+ystart, xbox_left:xbox_left+win_draw] +=1
                
    return draw_img, heat_map
    
def process_image(img):
    # Find final boxes from heatmap using label function
    out_img, heatmap = find_cars(img, 
                      ystart=YSTART, 
                      ystop=YSTOP,
                      scale=SCALE, 
                      svc = SVC, 
                      X_scaler = X_scaler,
                      orient= ORIENTATION, 
                      pix_per_cell = PIX_PER_CELL,
                      cell_per_block= CELL_PER_BLOCK, 
                      spatial_size = SPATIAL_SIZE,
                      hist_bins = HIST_BINS)
    labels = label(heatmap)
    draw_img = draw_labeled_bboxes(np.copy(img), labels)
    return draw_img   

if __name__ == "__main__":

    vehicles_images = glob.glob('../../../vehicles/vehicles/*/*.png')
    non_vehicles_images = glob.glob('../../../non-vehicles/non-vehicles/*/*.png')
    cars = load_data(vehicles_images)
    non_cars = load_data(non_vehicles_images)

        """Parameters"""
    COLOR_SPACE = 'YCrCb' # Can be RGB, HSV, LUV, HLS, YUV, YCrCb
    ORIENTATION = 9  # HOG orientations
    PIX_PER_CELL = 8 # HOG pixels per cell
    CELL_PER_BLOCK = 2 # HOG cells per block
    HOG_CHANNEL = "ALL" # Can be 0, 1, 2, or "ALL"
    SPATIAL_SIZE = (16, 16) # Spatial binning dimensions
    HIST_BINS = 16    # Number of histogram bins
    IS_SPATIAL_FEAT = True # Spatial features on or off
    IS_HIST_FEAT = True # Histogram features on or off
    IS_HOG_FEAT = True # HOG features on or off

    t=time.time()

    car_features = extract_features(cars, 
                                    color_space = COLOR_SPACE, 
                                    spatial_size= SPATIAL_SIZE, 
                                    hist_bins = HIST_BINS, 
                                    orient = ORIENTATION, 
                                    pix_per_cell = PIX_PER_CELL, 
                                    cell_per_block = CELL_PER_BLOCK, 
                                    hog_channel = HOG_CHANNEL,
                                    spatial_feat = IS_SPATIAL_FEAT , 
                                    hist_feat = IS_HIST_FEAT,
                                    hog_feat = IS_HOG_FEAT)

    notcar_features = extract_features(non_cars, 
                                    color_space = COLOR_SPACE, 
                                    spatial_size= SPATIAL_SIZE, 
                                    hist_bins = HIST_BINS, 
                                    orient = ORIENTATION, 
                                    pix_per_cell = PIX_PER_CELL, 
                                    cell_per_block = CELL_PER_BLOCK, 
                                    hog_channel = HOG_CHANNEL,
                                    spatial_feat = IS_SPATIAL_FEAT , 
                                    hist_feat = IS_HIST_FEAT,
                                    hog_feat = IS_HOG_FEAT)

    print(time.time()-t, 'Seconds to compute features...')


    X = np.vstack((car_features, notcar_features)).astype(np.float64)                        
    # Fit a per-column scaler
    X_scaler = StandardScaler().fit(X)
    # Apply the scaler to X
    scaled_X = X_scaler.transform(X)

    # Define the labels vector
    y = np.hstack((np.ones(len(car_features)), np.zeros(len(notcar_features))))


    # Split up data into randomized training and test sets
    rand_state = np.random.randint(0, 100)
    X_train, X_test, y_train, y_test = train_test_split(scaled_X, y, test_size=0.2, random_state=rand_state)

    print('Using:',orient,'orientations',pix_per_cell,'pixels per cell and', cell_per_block,'cells per block')
    print('Feature vector length:', len(X_train[0]))
    # Use a linear SVC 
    SVC = LinearSVC()
    # Check the training time for the SVC
    SVC.fit(X_train, y_train)
    t2 = time.time()
    print(round(t2-t, 2), 'Seconds to train SVC...')
    # Check the score of the SVC
    print('Test Accuracy of SVC = ', round(SVC.score(X_test, y_test), 4))

    clip1 = VideoFileClip('../project_video.mp4')
    video_clip = clip1.fl_image(process_image) #NOTE: this function expects color images!!

    video_output = '../output_videos/project_video.mp4'


Create an Azure Machine Learning Pipeline to automate a data pre-processing task. A dataset with inconsistent data-values. #Import the necessary libraries
from azureml.core import Workspace
from azureml.pipeline.core import Pipeline
from azureml.core.dataset import Dataset
from azureml.pipeline.steps import PythonScriptStep

#Create workspace
ws = Workspace.from_config()

#Build the Pipeline
pre_process_step = PythonScriptStep(
    script_name='pre-process.py',
    arguments=['--data', input_ds.as_named_input('input_ds').as_mount()],
    outputs=['processed_ds'],
    compute_target=compute_target
)

pipeline = Pipeline(
    workspace=ws,
    steps=[pre_process_step],
    description='A pipeline to pre-process the input dataset'
)

pipeline.validate()

#Submit the pipeline to the Azure Machine Learning workspace
pipeline_run = Experiment(ws, 'Pre-Process_Dataset').submit(pipeline)

#Wait for the pipeline to finish
pipeline_run.wait_for_completion(show_output=True)
Create a python function that stores the elements of a list in a dictionary. list = ['apple', 'orange', 'banana'] def list_to_dict(list):
    dictionary = {}
    for item in list:
        dictionary[item] = 0

    return dictionary
Write a Python program to generate a bar chart visualizing a dataset. data = [3, 5, 2, 8, 9, 10] import matplotlib.pyplot as plt

#create data
data = [3, 5, 2, 8, 9, 10]

#set plot size
plt.figure(figsize=(5, 2))

#generate the bar chart
plt.bar([str(i) for i in range(1, len(data)+1)], data)
plt.show()
Write a Python program to generate random numbers from 1 to 5 using the random library. Not applicable import random

for _ in range(10):
 print(random.randint(1, 5))
Create a method in Python to encrypt a given string using AES-256.  import base64
from Crypto.Cipher import AES

secret_key = "YourSecr3tEncrKey"

def encodeAES(text):
Key = base64.b64encode(secret_key.encode("utf-8"))

IV = 16 * '\x00' 

mode = AES.MODE_CBC
encryptor = AES.new(Key, mode, IV=IV)
text = text.encode("utf-8")
ciphertext = encryptor.encrypt(text)

return base64.b64encode(ciphertext).decode("utf-8")
Create a Python function to calculate the area of a triangle given the lengths of its three sides. 5, 6, 7 import math

def get_area(a, b, c):
    s = (a + b + c) / 2
    area = math.sqrt(s*(s-a)*(s-b)*(s-c))
    return area

input_data = 5, 6, 7
area = get_area(*input_data)
print(area)  # Output: 14.696938456699069
Create a code to calculate the area of the triangle with given side lengths. a=3 
b=4
c=5 # Python Program to find the area of triangle
a = 3
b = 4
c = 5
# calculate the semi-perimeter
s = (a + b + c) / 2
# calculate the area
area = (s*(s-a)*(s-b)*(s-c)) ** 0.5
print('The area of the triangle is %0.2f' %area)
Create a Python program to retrieve real time data from a web API.  import requests
 
# Make a get request to get the latest position of the International Space Station
response = requests.get("http://api.open-notify.org/iss-now.json")
 
# Print the status code of the response
print(response.status_code)
Design a program in Python to accept a string from the user, remove all vowels from the string, and capitalize each character. I like ice cream # Function to remove all vowels
def removeVowels(string):
	vowels = ('a', 'e', 'i', 'o', 'u') 
	for x in string.lower():
		if x in vowels:
			string = string.replace(x, "")
				
	return string

# Get input from user
input_string = input("Enter a string: ")

# Remove all vowels and capitalize
output_string = removeVowels(input_string).upper()

# Print the result
print(output_string)
Write a python function to find all combinations of numbers that have a sum of K. K=15 def all_combinations_sum_k(k, arr): 
    combinations = [] 
    # recursively traverse the array 
    find_all_combinations_sum_k_util(k, arr, 0, [], combinations) 
  
   # print all the combinations 
    for p in combinations: 
        print(p)
  
def find_all_combinations_sum_k_util(k, arr, start, combination, combinations):
      if k == 0: 
          combinations.append(list(combination)) 
          return
  
      for i in range(start, len(arr)): 
          # if the sum of elements >= k then no need to search further for that combination 
          if (k - arr[i] >= 0): 
              combination.append(arr[i]) 
              # searching further for the solution  
              find_all_combinations_sum_k_util(k - arr[i], arr, i + 1, combination, combinations) 
              combination.pop() 

all_combinations_sum_k(15, [2, 4, 6, 8, 10])
Write a Python script to generate a basic HTML page with a title, header, body, and footer sections. The page title: Sample Page <html>
 <head>
 <title>Sample Page</title>
 </head>
 <body>
 <h1>Sample Page</h1>

 <p>This page has a header, a body, and a footer.</p>

 <footer>
 <p>This is the footer.</p>
 </footer>
 </body>
</html>
Design an algorithm in Python to replace an element in a given list of numbers at a given position with another number. list: [1, 2, 3, 4, 5],  element: 8,  position: 3 def replace_elem(lst, val, pos):
    lst[pos] = val
    return lst

list = [1, 2, 3, 4, 5]
element = 8
position = 3

result = replace_elem(list, element, position)
print('After replacing element: ', result)
Design a python program to convert a given number of days into years, months, and days.  # convert days
def convert_days(days):
  years = days // 365
  months = (days % 365) // 30
  days = (days % 365) % 30 
  return (years, months, days)

# test
days = 900
years, months, days = convert_days(days)
print("Number of years =", years) 
print("Number of months =", months) 
print("Number of days =", days)
Using SWIG, create a C++ library that can be used in Python. This library should include a function for calculating the mean of an array of numbers. Not applicable // File mean.cpp
#include <iostream>
#include <vector>

double mean(std::vector<double> vals) {
   double result = 0;
   for (int i = 0; i < vals.size(); i++)
      result += vals[i];
   return result / vals.size();
}

// File mean.i
%module mean
%{
  #define SWIG_FILE_WITH_INIT
  #include "mean.cpp"
%}

%include "arrays_cw.i"
%include "mean.cpp"

// File setup.py
from distutils.core import setup, Extension

example_module = Extension('_mean',
                           sources=['mean_wrap.cxx', 'mean.cpp'],)

setup (name = 'mean',
       version = '0.1',
       author      = "SWIG",
       description = """Simple swig example from docs""",
       ext_modules = [example_module],
       py_modules = ["mean"],
       )

// File mean_wrap.cxx
#include "mean.h"

#ifdef __cplusplus
extern "C" {
#endif

double mean(double *vals, int n) {
  std::vector<double> v;
  for (int i=0; i<n; i++) v.push_back(vals[i]);
  return mean(v);
}

#ifdef __cplusplus
}
#endif
Given an array of integers and a target number, write a Python function to return the two numbers from the array that add up to the target number. [1, 2, 3, 4, 5], 9 def two_sum(arr, target): 
    for i in range(0, len(arr)-1): 
        for j in range(i + 1, len(arr)): 
            if arr[i] + arr[j] == target: 
                return [arr[i], arr[j]]
Develop a Python program for reversing the order of a given array.  def reverse_array(arr):
  start = 0
  end = len(arr) - 1
  while start < end:
    arr[start], arr[end] = arr[end], arr[start]
    start += 1
    end -= 1
  return arr
Generate code to print each element of a list of strings in Python. ["apple", "banana", "cherry"] for item in ["apple", "banana", "cherry"]:
    print(item)
Use the provided Python code to create a function to mimic the functionality of a calculator # initialize a variable to store the total
total = 0 def add(num):
    """Add the number to the total

    Args:
        num (float or int): The number to add

    Returns:
        int: The updated total
    """
    global total
    total += num
    return total

def subtract(num):
    """Subtract the number from the total

    Args:
        num (float or int): The number to subtract

    Returns:
        int: The updated total
    """
    global total
    total -= num
    return total

def multiply(num):
    """Multiply the total by the given number

    Args:
        num (float or int): The number to multiply by

    Returns:
        int: The updated total
    """
    global total
    total *= num
    return total

def divide(num):
    """Divide the total by the given number

    Args:
        num (float or int): The number to divide by

    Returns:
        int: The updated total
    """
    global total
    total /= num
    return total
Generate Python code to sort a given list using insertion sort.  def insertion_sort(list):
    """
    Sort a given list using insertion sort.
    list: the list to be sorted
    """
    # loop through each element in the list, starting from the second element
    for i in range(1, len(list)):  
        temp = list[i] 
  
        # find the position where the current element should be inserted
        j = i-1
        while j >= 0 and temp < list[j] : 
                list[j+1] = list[j] 
                j -= 1
        list[j+1] = temp 
  
    return list
Develop an algorithm in Python that finds the longest increasing subsequence in an array. [10, 22, 9, 33, 21, 50, 41, 60] def LIS(arr): 
    n = len(arr) 
  
    lis = [1]*n 
  
    for i in range (1 , n): 
        for j in range(0 , i): 
            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : 
                lis[i] = lis[j]+1
  
    maximum = 0
  
    for i in range(n): 
        maximum = max(maximum , lis[i]) 
  
    return maximum

print(LIS([10, 22, 9, 33, 21, 50, 41, 60]))
Given a list of integers and an integer k, can you write a Python program to find the consecutive integers whose sum is equal to the given integer k? lst = [1,3,5,7,9]
k = 10 def find_consecutive_integers(lst, k):
    # Edge cases
    if k > sum(lst) or k < 0:
        return -1
 
    # Create a window and move it's boundaries
    l, h, curr_sum = 0, 0, 0
    while h < len(lst):
        # Sum of current window
        curr_sum += lst[h] 
 
        # See if the window sum equals k
        while curr_sum > k and l <= h:
            curr_sum -= lst[l]
            l += 1
 
        # When window sum is equal to k, print the winow
        if curr_sum == k:
            return lst[l:h+1]
 
        # Move the window one step at a time
        h += 1
 
    # If window size reaches last element and no window is 
    # found
    return -1
 
lst = [1,3,5,7,9]
k = 10
print(find_consecutive_integers(lst, k)) # Output: [3,5,7]
Implement a sorting algorithm in Python using recursion that takes an array as an argument and returns the sorted array. arr = [3,7,5,2,1] def merge_sort(arr):
    if len(arr) > 1:
        mid = len(arr) // 2
        left = arr[:mid]
        right = arr[mid:]

        merge_sort(left)
        merge_sort(right)

        i = 0
        j = 0
        k = 0

        while i < len(left) and j < len(right):
            if left[i] < right[j]:
                arr[k] = left[i]
                i += 1
            else:
                arr[k] = right[j]
                j += 1
            k += 1

        while i < len(left):
            arr[k] = left[i]
            i += 1
            k += 1

        while j < len(right):
            arr[k] = right[j]
            j += 1
            k += 1

arr = [3,7,5,2,1]
merge_sort(arr)
print(arr)
Write a python code to calculate the total cost of a grocery bill. items=[("apple", 2.50), ("banana", 3.00), ("avocado", 1.80)] def total_cost(items):
    total = 0
    for item, price in items:
        total += price
    return total

if __name__ == '__main__':
    output = total_cost([("apple", 2.50), ("banana", 3.00), ("avocado", 1.80)])
    print(output)
Develop a python program to add two arrays of the same size. a = [2, 3, 4]
b = [5, 6, 7] def add_arrays(a, b):
    c = []
    n = len(a)
    for i in range(n):
        c.append(a[i] + b[i])
    return c

a = [2, 3, 4]
b = [5, 6, 7]
result = add_arrays(a, b)
print(result) # prints [7, 9, 11]
Write a Python program to find the lowest common ancestor of two given nodes in a binary tree.  def find_lca(root, node1, node2):
    if root is None:
        return None

    if root == node1 or root == node2:
        return root
    
    left_lca = find_lca(root.left, node1, node2)
    right_lca = find_lca(root.right, node1, node2) 
 
    if left_lca and right_lca:
        return root

    return left_lca if left_lca is not None else right_lca
Write a Python program to parse an XML document. <?xml version="1.0" encoding=" UTF-8"?>
<note>
    <to>John Doe</to>
    <from>Jane Doe</from>
    <heading>Greeting</heading>
    <body>Hello World!</body>
</note> """
Parse an XML document
"""

import xml.etree.ElementTree as ET

# Parse the XML file
root = ET.parse('note.xml').getroot()

# Print out the XML elements
for item in root:
    print(f"{item.tag}: {item.text}")
Generate a correct python program to return the second biggest element in a given list. [1, 5, 9, 4, 16, 11] def second_biggest(lst):
 max1 = 0
 max2 = 0
 for num in lst:
 if num > max1:
 max1 = num
 elif num > max2:
 max2 = num
 return max2

second_largest_num = second_biggest([1, 5, 9, 4, 16, 11])
print(second_largest_num)
Generate an empty 2D array of size n x n in Python.  # Create an empty 2D list
n = 10
arr = [[0 for j in range(n)] for i in range(n)]

# Print the array
print(arr)
Convert the following selection sort algorithm into a Python code. Selection Sort(arr)
  1  for i=1 to arr.length - 1
  2    min = i
  3    for j = i+1 to arr.length
  4      if arr[j] < arr[min]
  5        min = j
  6    swap(arr[i],arr[min]) def selection_sort(arr):
    for i in range(0, len(arr)-1):
        min = i
        for j in range(i+1, len(arr)):
            if arr[j] < arr[min]:
                min = j
        arr[i], arr[min] = arr[min], arr[i]
Write a python program to calculate the discount given a list of items and their respective price and quantity. items = {“Shirt”: [20, 3], “Pants”: [30, 2] } def discount(items):
    '''
    This function takes a dictionary of items and their respective price and quantity as input and calculates the discount.
    '''
    # calculate the total cost 
    total_cost = 0
    for item, price in items.items():
        total_cost += price[0] * price[1]
    
    # calculate the discount 
    discount = 0.2 * total_cost
    
    return discount
Generate a database schema for a given set of sample data. [{"Name": "John", "Skills": "Python, HTML, CSS", "Location": "Europe"}, {"Name": "Jim", "Skills": "Java, Bash, Go", "Location": "Asia"}] CREATE TABLE IF NOT EXISTS users (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name TEXT NOT NULL,
  skills TEXT NOT NULL,
  location TEXT NOT NULL
);

INSERT INTO users (name, skills, location)
VALUES ('John', 'Python, HTML, CSS', 'Europe'),
('Jim', 'Java, Bash, Go', 'Asia');
You have a list of numbers. Write a function in Python that multiplies each number by 2. [1, 2, 3, 4] def multiplyBy2(nums):
 return [num * 2 for num in nums]
Create a Python function to find the closest value to a given number in a given array. [5, 4, 8, 7], 5 def closest_num(arr, num):
    arr.sort()
    n = len(arr)
    left = 0
    right = n - 1
 
    if arr[right] <= num:
        return arr[right]
    elif arr[left] >= num:
        return arr[left]
    while right-left > 1:
        mid = (right+left)//2
        if arr[mid] == num:
            return arr[mid]
        elif arr[mid] > num:
            right = mid
        else:
            left = mid
    return sorted([arr[right], arr[left]])[0]

arr = [5, 4, 8, 7]
num = 5
closest = closest_num(arr, num)
print(closest)
Design a solution using python to find the sum of all even numbers between x and y x=2, y=8 def even_sum(x, y): 
    
    result=0 
    for i in range(x,y+1): 
        if i%2 == 0: 
            result += i
            
    return result 
  
x=2
y=8
sum = even_sum(x,y) 
print(sum)
Generate a Python Program to Sort a List by Frequency list_a = [1, 2, 3, 2, 5, 2] def sort_by_frequency(list_a):
    frequency = {}
    for a in list_a:
        if a not in frequency:
            frequency[a] = 1
        else:
            frequency[a] += 1
    list_sorted = []
    for key, value in sorted(frequency.items(), key=lambda item: item[1], reverse=True):
        for _ in range(value):
            list_sorted.append(key)
    return list_sorted
Create a linear search algorithm in Python that returns the index of a target item in the list.  def linear_search(arr, target):
    for i in range(len(arr)):
        if arr[i] == target:
            return i
    return -1
Create a class in Python that represents a tennis match.  class TennisMatch:
    def __init__(self):
        self.player_one = None
        self.player_two = None
    
    def set_players(self, player_one, player_two):
        self.player_one = player_one
        self.player_two = player_two
    
    def start_match(self):
        pass
    
    def end_match(self):
        pass
Implement a Python program to check if a number is divisible by another number. 7, 2 def is_divisible(n, m):
    if (n % m == 0):
        return True
    else:
        return False
    
print(is_divisible(7, 2))  # Outputs False
Create a Python program to calculate the intersection points between two circles. Circle 1: Center (0, 0) and Radius 3
Circle 2: Center (3, 3) and Radius 6 """
Create a Python program to calculate the intersection points between two circles
"""
import math

def get_intersection(c1, c2):
    # Calculate center distance between two circles
    dist = math.sqrt((c1[0] - c2[0]) ** 2 + (c1[1] - c2[1]) ** 2)
    # Check if distances between centers is equal to or greater than sum of radius
    if dist >= (c1[2] + c2[2]):
        return None
    # Calculate the angle between two circles
    angle = math.acos(((c1[2] ** 2 + dist ** 2) - c2[2] ** 2) / (2 * c1[2] * dist))
    # Calculates the point P on the line segment which connects both the circles centers
    point_p = (
        c1[0] + c1[2] * math.cos(angle),
        c1[1] + c1[2] * math.sin(angle)
    )
    # Calculates the distance from point P to both circles intersection points
    dist_2 = math.sqrt((c1[2] ** 2) - (dist ** 2))
    # Calculates the intersection point
    intersection1 = (
        point_p[0] - dist_2 * (c2[1] - c1[1]) / dist,
        point_p[1] + dist_2 * (c2[0] - c1[0]) / dist
    )
    intersection2 = (
        point_p[0] + dist_2 * (c2[1] - c1[1]) / dist,
        point_p[1] - dist_2 * (c2[0] - c1[0]) / dist
    )
    return intersection1, intersection2

if __name__ == "__main__":
    c1 = (0, 0, 3)  # center 1 (x, y), radius
    c2 = (3, 3, 6)  # center 2 (x, y), radius
    intersection = get_intersection(c1, c2)
    print("Intersection points: ", intersection)
Create a basic chatbot agent in Python using DialogFlow. The agent should be able to answer simple questions about the weather in a given city. Not applicable import os
import dialogflow_v2 as dialogflow
from google.api_core.exceptions import InvalidArgument

os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = 'PATH_TO_CREDENTIALS_FILE'

DIALOGFLOW_PROJECT_ID = 'YOUR_PROJECT_ID'
DIALOGFLOW_LANGUAGE_CODE = 'en-us'
GOOGLE_APPLICATION_CREDENTIALS = 'PATH_TO_CREDENTIALS_FILE'
SESSION_ID = 'current-user-id'

def detect_intent_from_text(text, session_id, language_code=DIALOGFLOW_LANGUAGE_CODE):
 session_client = dialogflow.SessionsClient()
 session = session_client.session_path(DIALOGFLOW_PROJECT_ID, session_id)
 text_input = dialogflow.types.TextInput(text=text, language_code=language_code)
 query_input = dialogflow.types.QueryInput(text=text_input)
 try:
 response = session_client.detect_intent(session=session, query_input=query_input)
 return response.query_result
 except InvalidArgument:
 raise

# Create an intent in DialogFlow    
def intent_create():
 intents_client = dialogflow.IntentsClient()
 parent = intents_client.project_agent_path(DIALOGFLOW_PROJECT_ID)
 training_phrases = [
 dialogflow.types.Intent.TrainingPhrase(parts=[
 dialogflow.types.Intent.TrainingPhrase.Part(text='What is the weather like?'),
 ]),
]

message_text = dialogflow.types.Intent.Message.Text(text=['That\'s a great question!'])

response = intents_client.create_intent(
 parent,
 intent_name='[INTENT_NAME]',
 training_phrases=training_phrases,
 message=message_text
).per_response

# Retrieve a response to a user's query
query = 'What is the weather like in London?'
response = detect_intent_from_text(query, SESSION_ID)
print('Query text: {}'.format(response.query_text))
print('Detected intent: {} (confidence: {})\n'.format(
 response.intent.display_name, response.intent_detection_confidence))
print('Fulfillment text: {}'.format(response.fulfillment_text))
Design a Python program which takes two arrays of strings as input and sorts them alphabetically. ['zebra', 'apple', 'carrot'], ['banana', 'elephant', 'cat'] def sort_str_arr(arr1, arr2):
    arr1.sort()
    arr2.sort()

    return arr1 + arr2

arr1 = ["zebra", "apple", "carrot"]
arr2 = ["banana", "elephant", "cat"]

sorted_arrs = sort_str_arr(arr1, arr2)

print(sorted_arrs) # ['apple', 'banana', 'carrot', 'cat', 'elephant', 'zebra']
Generate a class in Python to represent a student.  class Student:
    def __init__(self, name, age, major):
        self.name = name
        self.age = age
        self.major = major
        
    def get_name(self):
        return self.name
    
    def get_age(self):
        return self.age
    
    def get_major(self):
        return self.major
Create a Python program to find the deepest node in a tree.  def deepest_node(root):
    if not root:
        return 0
    elif not root.left and not root.right:
        return 1
    else:
        left_depth = deepest_node(root.left)
        right_depth = deepest_node(root.right)

        if left_depth > right_depth:
            return 1 + left_depth
        else:
            return 1 + right_depth
Generate a Python code to search a number in a sorted array  def binary_search(arr, x): 
    l = 0
    r = len(arr)-1
    while l <= r:
        mid = l + (r - l) // 2
  
        if arr[mid] == x: 
            return mid 
        elif arr[mid] < x: 
            l = mid + 1
        else: 
            r = mid - 1
    return -1
Analyze a Python program to check if any variable names are longer than 20 characters. def some_function(a_variable, short_variable):
  long_variable_name_is_not_good_practice = 1 There is a variable (long_variable_name_is_not_good_practice) with a name that is longer than 20 characters.
Create a tic-tac-toe agent in Python that implements the minimax algorithm. Not applicable class TicTacToe(object):
    def __init__(self):
        self.board = [[0, 0, 0],
                      [0, 0, 0],
                      [0, 0, 0]]
        self.x_player = 1
        self.o_player = -1
        self.empty = 0

    def get_available_moves(self):
        moves = []
        for row in range(3):
            for col in range(3):
                if self.board[row][col] == self.empty:
                    moves.append((row, col))
        return moves

    def _evaluate(self):
        winner = self.get_winner()

        if winner == self.x_player:
            return +1
        elif winner == self.o_player:
            return -1
        else:
            return 0

    def get_winner(self):
        for row in range(3):
            if self.board[row][0] == self.board[row][1] == self.board[row][2]:
                return self.board[row][0]
        for col in range(3):
            if self.board[0][col] == self.board[1][col] == self.board[2][col]:
                return self.board[0][col]
        if self.board[0][0] == self.board[1][1] == self.board[2][2]:
            return self.board[0][0]
        elif self.board[0][2] == self.board[1][1] == self.board[2][0]:
            return self.board[1][1]
        else:
            return None

    def make_move(self, row, col, player):
        self.board[row][col] = player

    def minimax(self, depth, player):
        if player == self.x_player:
            best = [-1, -1, -1000]
        else:
            best = [-1, -1, 1000]

        if depth == 0 or self.get_winner() != None:
            score = self._evaluate()
            return [-1, -1, score]

        for move in self.get_available_moves():
            row = move[0]
            col = move[1]

            self.make_move(row, col, player)
            score = self.minimax(depth - 1, -player)
            self.make_move(row, col, self.empty)

            score[0] = row
            score[1] = col

            if player == self.x_player:
                if score[2] > best[2]:
                    best = score
            else:
                if score[2] < best[2]:
                    best = score

        return best
Create a Python script to generate a random password of length 8 with combination of characters, numbers and symbols. Not applicable import random
import string

# Generate a random string of 8 characters
characters = string.ascii_letters + string.digits + string.punctuation
random_str = ''.join(random.choice(characters) for i in range(8))

# Print the generated random string
print("Generated random string password is:", random_str)
Construct a function to reverse an array in Python. [1, 2, 3, 4] def reverse_array(arr):
    left = 0
    right = len(arr) - 1

    while left < right:
        temp = arr[left]
        arr[left] = arr[right]
        arr[right] = temp
        left += 1
        right -= 1

arr = [1, 2, 3, 4]

reverse_array(arr)

print(arr)  # [4, 3, 2, 1]
Design a python code to build a web application using Django's MVC framework.  # Importing essential libraries
import os
import sys
 
# start a new Django project
from django.core.management import execute_from_command_line
 
# check the requirements.txt file to get the list of libraries 
if __name__ == "__main__":
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "my_app.settings")
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)
Generate a python program to create a Pandas DataFrame using the following input data. Input:
data = {'Country':["United States", "France", "China"], 
'Population': [330, 67, 13]} import pandas as pd

# Create the data frame
data_frame = pd.DataFrame(data)
  
# Print the data frame
print(data_frame)
Implement a function in Python that takes a list of string and sorts them alphabetically. ["apple", "banana", "mango", "pear"] def sortStrings(wordsList):
    sorted_list = sorted(wordsList)
    return sorted_list
 
wordsList = ["apple", "banana", "mango", "pear"]
sorted_words = sortStrings(wordsList)
print(sorted_words)
Create a function that takes a key and value as 1 pair to add to a Python dictionary. key: age, value: 23 def add_key_value_pair(dict, key, value): 
    dict[key] = value
    return dict

my_dict = {}
my_dict = add_key_value_pair(my_dict, 'age', 23)
print(my_dict)
Please generate a Python program to predict whether an email is spam or not based on a given set of features and labels. features = [0.24, 0.34, 0.37]
label = spam # Import libraries
import pandas as pd
from sklearn.svm import SVC

# Set up data
data = pd.DataFrame({
    'features': [0.24, 0.34, 0.37],
    'label': ['spam']
})

# Separate data into training and testing
X_train = data.drop('label', axis=1)
y_train = data.label

# Train the model
model = SVC()
model.fit(X_train, y_train)

# Make predictions
predictions = model.predict(X_train)

# Print accuracy
print(accuracy_score(y_train, predictions))
Write a Python class to represent a five sided polygon.  class Polygon:
    def __init__(self, sides):
        self.sides = sides

    def calc_perimeter(self):
        return (self.sides * 5)

# create a Polygon instance
polygon = Polygon(5)

# calculate the perimeter
print(polygon.calc_perimeter())
Write a Python program to filter strings linked by commas and return only strings longer than three characters in length. "Code,Generation,Task,Instructions" def filter_strings(string):
    strings = string.split(',')
    filtered = []
    for s in strings:
        if len(s) > 3:
            filtered.append(s)
    return filtered

filtered_strings = filter_strings("Code,Generation,Task,Instructions")
print(filtered_strings)
Suggest a completion of the following Python code to print all perfect squares between 25 and 45. for n in range(): for n in range(25, 46):
    if n ** 0.5 == int(n ** 0.5):
        print(n)
Create a Python script to retrieve stock market data from an API and visualize it. Stock market data for Apple import requests
import json
import matplotlib.pyplot as plt

# Fetch stock data from the API
response = requests.get('https://api.iextrading.com/1.0/stock/{symbol}/chart/1d')

# Parse the data into a dict
data = json.loads(response.text)

x_values = [entry['minute'] for entry in data]
y_values = [entry['average'] for entry in data]
 
# Plot the data
plt.plot(x_values, y_values)
plt.title('Stock Market Data for Apple')
plt.xlabel('Time (minutes)')
plt.ylabel('Average Price')
plt.show()
Using the provided input, write a Python program to find all combinations of two numbers in a list and return the summation of each pair. Not applicable def combinationSum(lst):
 result = []
 for i in range(len(lst)):
 for j in range(i + 1, len(lst)):
 result.append(lst[i] + lst[j])
 return result

input_list = [2, 4, 6, 8]
print(combinationSum(input_list))

# Output: [6, 10, 12, 16]
Construct a for loop in Python to iterate over a list and print out each item in the list. myList = [1, 2, 3, 4] for element in myList: 
 print(element)
Write a Python program that reads a list of strings and sorts them by the number of characters in each string. ['foo', 'bar', 'baz', 'foobar', 'beer', 'wine'] list_of_strings = ['foo', 'bar', 'baz', 'foobar', 'beer', 'wine']

# sort strings by length
list_of_strings.sort(key=len)

# print sorted list
print(list_of_strings)
Design an algorithm in Python to find all unique combinations of three numbers that sum to a given value. Target Sum: 6 def findUniqueCombos(targetSum): 
  result = []
  for i in range(targetSum+1): 
    for j in range(i+1): 
      for k in range(j+1): 
        if i + j + k == targetSum: 
          uniqueCombo = [i, j, k] 
          result.append(uniqueCombo) 
  
  return result
Write a Python script that takes two strings s1 and s2 and prints out the longest common subsequence between them. s1 = "ABCBA"
s2 = "ABDCBA" def longest_common_subsequence(s1, s2):
  lengths = [[0 for j in range(len(s2)+1)] for i in range(len(s1)+1)]
  for i, x in enumerate(s1):
    for j, y in enumerate(s2):
      if x == y:
        lengths[i+1][j+1] = lengths[i][j] + 1
      elif lengths[i+1][j] > lengths[i][j+1]:
        lengths[i+1][j+1] = lengths[i+1][j]
      else:
        lengths[i+1][j+1] = lengths[i][j+1]

  result = ""

  x, y = len(s1), len(s2)
  while x != 0 and y != 0:
      if lengths[x][y] == lengths[x-1][y]:
          x -= 1
      elif lengths[x][y] == lengths[x][y-1]:
          y -= 1
      else:
          assert s1[x-1] == s2[y-1]
          result = s1[x-1] + result
          x -= 1
          y -= 1

  return result
What is the output of this Python code? a = 3
b = 1
print(a+b) 4
Construct a Python class to represent a Country that contains its name, population, and area.  class Country:
    def __init__(self, name, population, area):
        self.name = name
        self.population = population
        self. area = area
Write a Python function to get all possible unique subsets from a set of distinct integers.  def get_unique_subsets(integers):
    subsets = []
    for subset in itertools.chain.from_iterable(itertools.combinations(integers, r) for r in range(len(integers) + 1)):
        subsets.append(list(subset))
    return list(set(map(tuple, subsets)))
Create an algorithm in Python to detect duplicate numbers in a given array. [3, 7, 4, 3, 6, 7] def find_duplicates(numbers):
    seen = set()
    duplicates = set()

    for number in numbers:
        if number in seen:
            duplicates.add(number)
        else:
            seen.add(number)
    
    return duplicates
Write a Python program to test if the inputs are equal and return a boolean value. 28, 48 def equals(a, b):
    return a == b

equal = equals(28, 48)
print(equal)
Write a Python program to find the index of the first occurrence of the given element in the given list. inputlist = [1, 2, 5, 8, 10, 9]
element = 8 def find_element(inputlist, element):
    for i, num in enumerate(inputlist):
        if element == num:
            return i
Create a Python script to classify text as either spam or ham based on the bag of words model. Not applicable import nltk
from nltk.corpus import stopwords
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB

# Prepare data
train_data = # your train data
train_labels = # your train label
test_data = # your test data

# Build a bag of words model
vectorizer = CountVectorizer(stop_words=stopwords.words('english'))
train_data_features = vectorizer.fit_transform(train_data)

# Train a Naive Bayes classifier
nb_classifier = MultinomialNB().fit(train_data_features, train_labels)

# Test the classifier
test_data_features = vectorizer.transform(test_data)
predictions = nb_classifier.predict(test_data_features)
Design a Python program to convert all the lowercase letters to their corresponding uppercase letters in a given string.  def upper_string(str): 
    res = "" 
    for i in range(len(str)): 
        if str[i].isupper(): 
            res += str[i] 
        else: 
            res += chr(ord(str[i])-32) 
    return res
Generate a function in Python to capitalize the first letter of every word in a given sentence. newton theory of gravitation def capitalize(sentence):
    words = sentence.split() 
    new_sentence = [] 
    for word in words:
        new_sentence.append(word.capitalize()) 
    return " ".join(new_sentence)

sentence = "newton theory of gravitation"
print(capitalize(sentence))
Generate a valid code in Python that takes two numbers as input from user, and checks if one is divisible by another  num1 = int(input("Enter first number: "))
num2 = int(input("Enter second number: "))

if (num1 % num2 == 0):
    print("The number %s is divisible by %s." % (num1, num2))
else:
    print("The number %s is not divisible by %s." % (num1, num2))
Write an app in any language that takes a list of numbers as input and returns the median of the list. [1, 3, 5, 8, 12] JavaScript:

const nums = [1, 3, 5, 8, 12];

function median(nums) {
 nums.sort();
 let mid = Math.floor(nums.length / 2);
 let median = 0;
 if (nums.length % 2 === 0) {
 median = (nums[mid - 1] + nums[mid]) / 2;
 } else {
 median = nums[mid];
 }
 return median;
}

console.log(median(nums)) // 5

Python:

nums = [1, 3, 5, 8, 12]

def median(nums):
 nums.sort()
 mid = int(len(nums) / 2)
 if len(nums) % 2 == 0:
 median = (nums[mid - 1] + nums[mid]) / 2
 else: 
 median = nums[mid]
 return median

print(median(nums)) # 5
Design a Python algorithm to identify the longest common subsequence from two strings.  def lcs(a, b):
    # Generate a 2D matrix from the two strings
    arr = [[0 for x in range(len(b)+1)] for x in range(len(a)+1)]
    # Initialize the matrix
    for i in range(len(a) + 1): 
        for j in range(len(b) + 1): 
            if i == 0 or j == 0: 
                arr[i][j] = 0
            # If the characters at i and j match 
            elif a[i-1] == b[j-1]: 
                arr[i][j] = arr[i-1][j-1] + 1
            # If the characters dont match 
            else: 
                arr[i][j] = max(arr[i-1][j], arr[i][j-1])
    # Traverse the 2D matrix and find the longest common subsequence
    index = arr[len(a)][len(b)]
    lcs = [""] * (index+1) 
    lcs[index] = "" 
    i = len(a) 
    j = len(b)
    while i > 0 and j > 0: 
        if a[i-1] == b[j-1]: 
            lcs[index-1] = a[i-1]
            i-=1
            j-=1
            index-=1
        elif arr[i-1][j] > arr[i][j-1]: 
            i-=1
        else: 
            j-=1
    return "".join(lcs)
Write an API endpoint in Python which takes a JSON object as an input and returns a modified version of the same object. {"name": "John", "age": 30} @app.route('/api', methods=['POST'])
def api():
 data = request.get_json()
 data['age'] = data['age'] + 2
 return jsonify(data)
Create a Python program that can print out a sentence in reverse using recursion.  def reverse_sentence(sentence): 
  
    # base condition for recursion
    if len(sentence) == 0: 
        return "" 
  
    # calling reverse_sentence recursively
    return reverse_sentence(sentence[1:]) + sentence[0] 
  
# driver code 
sentence = "Geeks For Geeks"
print(reverse_sentence(sentence)) 

# Output: skeeG roF skeeG
Create a web crawler in Python that can traverse a website and detect certain words or links. Website URL: https://example.com
Words to be detected: green, blue import requests
from bs4 import BeautifulSoup


# List of words to detect
words_to_detect = ['green', 'blue']

# Set the URL
url = 'https://example.com'

# Get the content
page = requests.get(url).text

# Create a BeautifulSoup object from the content
soup = BeautifulSoup(page, 'html.parser')

# Get all a tags (links)
links = soup.find_all('a')

for link in links:

 # Loop through the words to detect
 for word in words_to_detect:

  # Check if the link text contains any of the words
  if word in link.text:

   # Print the link
   print(link['href'])
Write a Python program to print out all prime numbers under 100.  def print_prime_numbers(n):
    for num in range(2, n):
        prime = True
        for div in range(2, int(num**0.5)+1):
            if num % div == 0:
                prime = False
                break
        if prime:
            print(num)
            
print_prime_numbers(100)
Create a program in Python to add the elements of two given lists. list1 = [1, 2, 3]
list2 = [4, 5, 6] list1 = [1, 2, 3]
list2 = [4, 5, 6]

def addLists(list1, list2):
    result = [] 
    for i in range(0, len(list1)):
        result.append(list1[i] + list2[i])
    return result

print(addLists(list1, list2))
Write a Python program to normalize a list of words that contains upper and lowercase letters. List of words: ["HeLlO", "wOrlD"] def normalize(lst):
 return [word.lower() for word in lst]
Create a program in Python which will take in a sentence and print out each word in reverse. 'This sentence will be reversed' string = 'This sentence will be reversed'

words = string.split()

for word in words:
	print(word[::-1], end=" ")

# Output: sihT ecnetnes lliw eb desrever
Write a Python program to make a prediction using a Support Vector Machine (SVM) X = [[0, 0], [1, 1]]
y = [0, 1] import numpy as np
from sklearn import svm

X = np.array([[0, 0], [1, 1]])
y = np.array([0, 1])

clf = svm.SVC(kernel='linear')
clf.fit(X, y)

prediction = clf.predict([[2., 2.]])
print(prediction)
Create a Python program to find and print all pairs of numbers from a given array of integers whose sum is equal to a given number. [3, 4, 2, 8, 5, 6], the number should be 10 array = [3, 4, 2, 8, 5, 6]
sum = 10

def find_pair(array,sum):
 for i in range (len(array)-1):
  for j in range (i+1, len(array)):
   if array[i] + array[j] == sum:
    print("Pair found:",array[i], array[j])

find_pair(array,sum)
Write a Python program to pre-process text data for sentiment analysis. The product was good, but customer service was slow import string
import nltk 
nltk.download('punkt')

# remove punctuation and capitalization 
def remove_punctuation_and_make_lowercase(data):
  table = str.maketrans({key: None for key in string.punctuation})
  data_without_punctuation = data.translate(table).lower()
  return data_without_punctuation

data = "The product was good, but customer service was slow"

data_without_punctuation = remove_punctuation_and_make_lowercase(data)
print(data_without_punctuation)

# tokenize
data_tokenized = nltk.word_tokenize(data_without_punctuation)
print(data_tokenized)
Create a function that takes a list of strings (words or phrases) as an argument and returns the longest string in the list. [“javascript”, “python”, “ruby”] function findLongestString(strList) {
 let longestStr = '';
 
 strList.forEach(str => {
 if (str.length > longestStr.length) {
 longestStr = str;
 }
 })
 
 return longestStr;
}
 
let longestWord = findLongestString(['javascript', 'python', 'ruby']);
 
console.log(longestWord); // Output: 'javascript'
Create a function to generate random numbers within a given range in Python. start=1, end=10 import random

def generate_random_numbers(start, end):
    return random.randint(start, end)

result = generate_random_numbers(1,10)
print(result)
Create a class in Python that takes two parameters and prints them as strings.  class MyClass:
    def __init__(self, param1, param2):
        self.param1 = param1
        self.param2 = param2

    def print_parameters(self):
        print(str(self.param1) + ", " + str(self.param2))
Write a python program to sort a list of dictionaries based on a particular key. list_of_dicts = [{'name': 'Ajay', 'age': 15}, 
                 {'name': 'Bhavna', 'age': 10}, 
                 {'name': 'Cathy', 'age': 12}] def sort_list_of_dicts(list_of_dicts, key):
    sorted_list = sorted(list_of_dicts, key=lambda i: i[key])
    return sorted_list
Write a Python script to remove all repeated characters from a string. string = "aaabbccddeeff" def removeRepeatedChars(str):
    result = ""
    for c in str:
        if c not in result:
            result += c
    return result

print(removeRepeatedChars("aaabbccddeeff"))
Please generate a Python function that takes a string as input and prints every character in the string contained between "a" and "e" in a newline. "Airport" def extract_abce(string):
  output = ""
  for char in string:
                    if ord(char) >= 97 and ord(char) <= 101:
                                    output += char + "\n"
  print(output)
Design a function that returns the least common multiple (LCM) of two numbers two integers a and b # Python3 program to find LCM of two numbers 

# method to return gcd of a and b 
def gcd(a, b): 
    if a == 0 : 
        return b 
          
    return gcd(b % a, a) 
      
# method to return LCM of two numbers 
def lcm(a, b): 
    return (a*b) // gcd(a, b)
Construct a python program to separate even and odd numbers from an array. [1, 2, 3, 4, 5, 6] def separate_even_odd(arr):
    even = []
    odd = []
    for num in arr:
        if num % 2 == 0:
            even.append(num)
        else:
            odd.append(num)
    return even, odd
 
even, odd = separate_even_odd([1, 2, 3, 4, 5, 6])
print('Even numbers:', even)
print('Odd numbers:', odd)
Write a Python program to create a web crawler that stores the URL and content of each page it visits. Not applicable import requests
from bs4 import BeautifulSoup

url = 'https://example.com'
  
# send an HTTP GET request for the URL
r = requests.get(url)
  
# parse the content of the request with BeautifulSoup
soup = BeautifulSoup(r.content, 'html.parser')

# extract all links from the webpage
links = soup.find_all("a")

# store URLs and content in variables
visited = set()
for link in links:
    url = link.get('href')
    visited.add(url)
    r = requests.get(url)
    content = r.content
    # store content in database
    # ...

print(visited)
In Python, create a function to return the minimum of two numbers.  def min_value(a, b):
    if a < b:
        return a
    else:
        return b
Refactor a Python function to use list comprehension. def square_list(nums):
    squares = []
    # Iterate over the given list
    for num in nums:
        # Append the value of num squared to the new list
        squares.append(num ** 2)
    
    return squares def square_list(nums):
    return [num ** 2 for num in nums]
Generate a Python code for crawling a website for a specific type of data. website: www.example.com 
data to crawl: phone numbers import requests
import re

def crawl_website_for_phone_numbers(website):
    response = requests.get(website)
    phone_numbers = re.findall('\d{3}-\d{3}-\d{4}', response.text)
    return phone_numbers
    
if __name__ == '__main__':
    print(crawl_website_for_phone_numbers('www.example.com'))
Create a Python class for managing a list of contacts. The class should have methods for adding a contact, deleting a contact, and listing all contacts. Not applicable class ContactManager:
 
 def __init__(self):
  self.contact_list = []
 
 def add_contact(self, contact):
  self.contact_list.append(contact)
 
 def delete_contact(self, contact):
  self.contact_list.remove(contact)
 
 def list_contacts(self):
  for contact in self.contact_list:
   print(contact)
Construct a Python script to generate a random password with at least one capital letter, one small letter, one numeric character, and one special character.  import string
import random
  
def genPassword(length): 
    # Create strings of possible characters 
    digits = string.digits
    upper = string.ascii_uppercase
    lower = string.ascii_lowercase
    special = string.punctuation
    all = upper + lower + digits + special
  
    # Create empty strings 
    password = ''
    upper_password = ''
    lower_password = ''
    digit_password = ''
    special_password = ''
  
    # Iterate a loop over given length of string and all character array to generate random password with given rules
    for x in range(length):
        upper_password = upper_password + random.choice(upper)
        lower_password = lower_password + random.choice(lower)
        digit_password = digit_password + random.choice(digits)
        special_password = special_password + random.choice(special)
    
    # Concate all character string to generate random password
    password = upper_password + lower_password + digit_password + special_password
    # Use 'sample' method to scatter characters in password string
    password = ''.join(random.sample(password, len(password))) 
  
    return password 
  
length = 12
password = genPassword(length)
print(password)
Create a Python program to generate a random string of length 8 containing only alphabets and numbers.  import random
import string

def generate_string():
    chars = string.ascii_letters + string.digits
    string = ''.join(random.choice(chars) for _ in range(8))
    return string
Create a command-line interface with Python that gets a user's name and prints out a welcome message. Not applicable import sys

# Get user's name
name = input('What is your name? ')

# Print out a welcome message
print('Welcome', name, 'to the CLI')
Create a Python web scraper that will fetch the news headlines from a given website. Not applicable import requests 
from bs4 import BeautifulSoup 
  
URL = "http://example.com/"
r = requests.get(URL) 
  
soup = BeautifulSoup(r.content, 'html5lib') 
  
headlines = soup.find_all('h2') 
  
for headline in headlines: 
 print(headline.text)
How would you implement the bubble sort algorithm in Python?  def bubble_sort(arr): 
    n = len(arr) 
  
    # Traverse through all array elements 
    for i in range(n): 
  
        # Last i elements are already in place 
        for j in range(0, n-i-1): 
  
            # traverse the array from 0 to n-i-1 
            # Swap if the element found is greater 
            # than the next element 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j] 
  
# Driver code 
arr = [3, 5, 2, 7, 4] 
  
bubble_sort(arr) 
  
print ("Sorted array is:") 
for i in range(len(arr)): 
    print ("%d" %arr[i]),
Construct a for-loop in Python to repeat a code snipet 10 times.  for i in range(10):
    print("This code is being repeated 10 times")
Generate a Python program that searches a large list of strings to find those matching a given pattern. list = ["123 abc", "456 def", "789 ghi", "123 jkl", "456 mno", "789 pqr"]
pattern = "456*" search_list = ["123 abc", "456 def", "789 ghi", "123 jkl", "456 mno", "789 pqr"]
pattern = "456*"

matches = []
for item in search_list:
  if item.startswith(pattern):
    matches.append(item)

print(matches)
This code generates REXI benchmarks. To use it, call the function `get_rexi_benchmarks` with a parameter `jg`. The function returns a list of REXI methods.  #! /usr/bin/env python3

import os
import sys
import math

from itertools import product

# REXI
from mule_local.rexi.REXICoefficients import *
from mule_local.rexi.pcirexi.BeanREXI import BeanREXI
from mule_local.rexi.pcirexi.LRREXI import LRREXI
from mule_local.rexi.trexi.TREXI import *
from mule_local.rexi.cirexi.CIREXI import *
from mule_local.rexi.elrexi.ELREXI import *
from mule_local.rexi.brexi.BREXI import *

# EFloat
efloat_mode = "float"


def get_rexi_benchmarks(jg):
    # Accumulator of all REXI methods
    # rexi_method['rexi_method'] = 'file'               # Choose REXI method which is typically 'file' for all file-based ones
    # rexi_method['rexi_files_coefficients'] = None     # List with approximations for different 'phi' functions
    rexi_methods = []

    #
    # CI REXI
    #
    if True:
        # REXI stuff
        def fun_params_ci_N(ci_max_real, ci_max_imag):
            if ci_max_imag >= 7:
                return 128
            else:
                return 32

        params_ci_max_imag = [30.0]
        params_ci_max_real = [10.0]

        #
        # Scale the CI circle radius relative to this time step size
        # We do this simply to get a consistent time stepping method
        # Otherwise, CI would not behave consistently
        # Yes, that's ugly, but simply how it goes :-)
        #
        params_ci_max_imag_scaling_relative_to_timestep_size = 480
        # params_ci_max_imag_scaling_relative_to_timestep_size = None

        params_ci_min_imag = 5.0

        rexi_method = {}

        # Choose REXI method which is typically 'file' for all file-based ones
        rexi_method['rexi_method'] = 'file'

        # List with approximations for different 'phi' functions
        rexi_method['rexi_files_coefficients'] = None

        for ci_max_imag, ci_max_real in product(params_ci_max_imag, params_ci_max_real):

            if params_ci_max_imag_scaling_relative_to_timestep_size != None:
                ci_max_imag *= (jg.runtime.timestep_size / params_ci_max_imag_scaling_relative_to_timestep_size)

            # "phi0"
            cirexi = CIREXI(efloat_mode=efloat_mode)
            coeffs_phi0 = cirexi.setup(
                    function_name="phi0",
                    N=fun_params_ci_N(ci_max_real, ci_max_imag),
                    lambda_include_imag=ci_max_imag,
                    lambda_max_real=ci_max_real
                ).toFloat()

            # "phi1"
            cirexi = CIREXI(efloat_mode=efloat_mode)
            coeffs_phi1 = cirexi.setup(
                    function_name="phi1",
                    N=fun_params_ci_N(ci_max_real, ci_max_imag),
                    lambda_include_imag=ci_max_imag,
                    lambda_max_real=ci_max_real
                ).toFloat()

            # "phi2"
            cirexi = CIREXI(efloat_mode=efloat_mode)
            coeffs_phi2 = cirexi.setup(
                    function_name="phi2",
                    N=fun_params_ci_N(ci_max_real, ci_max_imag),
                    lambda_include_imag=ci_max_imag, lambda_max_real=ci_max_real
                ).toFloat()

            rexi_method['rexi_files_coefficients'] = [coeffs_phi0, coeffs_phi1, coeffs_phi2]

            # Add to list of REXI methods
            rexi_methods.append(rexi_method)

    #
    # EL-REXI
    #
    if True:
        max_imags = [30.0]
        rexi_method = {}

        # Choose REXI method which is typically 'file' for all file-based ones
        rexi_method['rexi_method'] = 'file'

        # List with approximations for different 'phi' functions
        rexi_method['rexi_files_coefficients'] = None

        for max_imag in max_imags:
            # "phi0"
            elrexi = ELREXI(efloat_mode=efloat_mode)
            coeffs_phi0 = elrexi.setup(
                    function_name="phi0",
                    N=max(64, int(75 * max_imag / 30)),
                    lambda_max_real=10.5,
                    lambda_max_imag=max_imag + 2.5
                ).toFloat()

            # "phi1"
            elrexi = ELREXI(efloat_mode=efloat_mode)
            coeffs_phi1 = elrexi.setup(
                    function_name="phi1",
                    N=max(64, int(75 * max_imag / 30)),
                    lambda_max_real=10.5,
                    lambda_max_imag=max_imag + 2.5
                ).toFloat()

            # "phi2"
            elrexi = ELREXI(efloat_mode=efloat_mode)
            coeffs_phi2 = elrexi.setup(
                    function_name="phi2",
                    N=max(64, int(75 * max_imag / 30)),
                    lambda_max_real=10.5,
                    lambda_max_imag=max_imag + 2.5
                ).toFloat()

            rexi_method['rexi_files_coefficients'] = [coeffs_phi0, coeffs_phi1, coeffs_phi2]

            # Add to list of REXI methods
            rexi_methods.append(rexi_method)

    #
    # LR-REXI (Rectangle contour with Gauss-Legendre Quadrature)
    #
    if True:
        max_imags = [30.0]
        rexi_method = {}

        # Choose REXI method which is typically 'file' for all file-based ones
        rexi_method['rexi_method'] = 'file'

        # List with approximations for different 'phi' functions
        rexi_method['rexi_files_coefficients'] = None

        for max_imag in max_imags:

            # "phi0"
            lrrexi = LRREXI(efloat_mode=efloat_mode)
            coeffs_phi0 = lrrexi.setup(
                    function_name="phi0",
                    width=23,
                    height=2 * max_imag + 20,
                    center=-1,
                    N=128).toFloat()

            # "phi1"
            lrrexi = LRREXI(efloat_mode=efloat_mode)
            coeffs_phi1 = lrrexi.setup(
                    function_name="phi1",
                    width=23,
                    height=2 * max_imag + 20,
                    center=-1,
                    N=128).toFloat()

            # "phi2"
            lrrexi = LRREXI(efloat_mode=efloat_mode)
            coeffs_phi2 = lrrexi.setup(
                    function_name="phi2",
                    width=23,
                    height=2 * max_imag + 20,
                    center=-1,
                    N=128).toFloat()

            rexi_method['rexi_files_coefficients'] = [coeffs_phi0, coeffs_phi1, coeffs_phi2]

            # Add to list of REXI methods
            rexi_methods.append(rexi_method)

    #
    # Bean-REXI
    #
    if True:
        max_imags = [30.0]
        rexi_method = {}

        # Choose REXI method which is typically 'file' for all file-based ones
        rexi_method['rexi_method'] = 'file'

        # List with approximations for different 'phi' functions
        rexi_method['rexi_files_coefficients'] = None

        for max_imag in max_imags:
            # "phi0"
            beanrexi = BeanREXI(efloat_mode=efloat_mode)
            coeffs_phi0 = beanrexi.setup(
                    function_name="phi0",
                    horizontal_radius=16,
                    vertical_radius=max_imag / 30 * 35,
                    center=-2,
                    N=max(64, int(75 * max_imag / 30))).toFloat()

            # "phi1"
            beanrexi = BeanREXI(efloat_mode=efloat_mode)
            coeffs_phi1 = beanrexi.setup(
                    function_name="phi1",
                    horizontal_radius=16,
                    vertical_radius=max_imag / 30 * 35,
                    center=-2,
                    N=max(64, int(75 * max_imag / 30))).toFloat()


            # "phi2"
            beanrexi = BeanREXI(efloat_mode=efloat_mode)
            coeffs_phi2 = beanrexi.setup(
                    function_name="phi2",
                    horizontal_radius=16,
                    vertical_radius=max_imag / 30 * 35,
                    center=-2,
                    N=max(64, int(75 * max_imag / 30))).toFloat()

            rexi_method['rexi_files_coefficients'] = [coeffs_phi0, coeffs_phi1, coeffs_phi2]

            # Add to list of REXI methods
            rexi_methods.append(rexi_method)

    return rexi_methods


if __name__ == "__main__":
    pass

Write a Python program to simulate a random neuron network.  import random

# Neuron class
class Neuron:
    # Initialize inputs and weights
    def __init__(self, numInputs):
        self.weights = []
        for i in range(numInputs):
            self.weights.append(random.uniform(-1, 1))

    # Process inputs and produce output
    def process(self, inputs):
        # Multiply inputs by weights
        output = 0
        for i in range(len(self.weights)):
            output += self.weights[i] * inputs[i]

        # Use sigmoid function to normalize result
        return 1 / (1 + math.exp(-output))
Write a function in Python to generate n numbers of Fibonacci series.  def fibonacci_series(n): 
    # First two terms 
    a = 0
    b = 1
    c = 0
    print("Fibonacci Series:", end = " ")
    print(a , b , end = " ")
    for i in range(2,n): 
        c = a + b 
        a = b 
        b = c 
        print(c , end = " ") 

# Output should come like
# 0 1 1 2 3 5 8 13 21 34
Create a Sorting Algorithm in Python that is optimized for memory usage.  # Function to implement an optimized memory sorting algorithm 
def memory_optimized_sort(items):
    # Find the length of the list
    n = len(items) 
    # Initialize the sorted list to the same size
    sorted_items = [None] * n 
    # Set the counter for even and odd
    even_count = 0
    odd_count = 0

    # Iterate over the items in the list
    for item in items:
        # If item is even, add it to the end of the list
        if item % 2 == 0:
            sorted_items[n - 1 - even_count] = item
            even_count += 1
        else:
            # If item is odd, add it to the beginning of the list
            sorted_items[odd_count] = item
            odd_count += 1

    return sorted_items
Create a web scraper in Python to extract products from an e-commerce site. URL: https://www.example.com/products # importing libraries
import requests
from bs4 import BeautifulSoup

# making the request
url = "https://www.example.com/products"
r = requests.get(url)

# extracting the data with BeautifulSoup
soup = BeautifulSoup(r.content)
products = soup.find_all("div", {"class": "product"})

for product in products:
    product_name = product.find("h3").text
    product_price = product.find("span", {"class": "price"}).text
    print("Found product: %s %s" % (product_name, product_price))
Write a Python script to optimize an algorithm for finding a specific element in a list.  def find_element(input_list,element):
  for index, val in enumerate(input_list):
    if val == element:
      return index
 
def optimized_find_element(input_list,element):
  low,high=0,len(input_list)-1
 
  while low <= high:
    mid = (low + high) // 2
    if input_list[mid] == element:
      return mid
    elif element > input_list[mid]:
      low = mid + 1
    else:
      high = mid - 1
 
  return -1
 
input_list = [1,2,3,4,5,6,7,8,9]
element = 7
index = find_element(input_list,element)
print(index)
index = optimized_find_element(input_list,element)
print(index)
The given code is a Python module for implementing Google reCAPTCHA. To use it, import the necessary modules and functions, and then call the functions as needed. To display the reCAPTCHA HTML, call the "displayhtml" function and pass in the public key and any optional parameters. To submit the reCAPTCHA response for verification, call the "submit" function and pass in the necessary parameters. To check the reCAPTCHA response in a Django view, call the "check_captcha" function and pass in the request object. To generate new reCAPTCHA HTML based on the result of the verification, call the "new_captcha_html" function and pass in the result object.  import urllib2, urllib
from   proj.settings import *


API_SSL_SERVER="https://www.google.com/recaptcha/api"
API_SERVER="http://www.google.com/recaptcha/api"
VERIFY_SERVER="www.google.com"

class RecaptchaResponse(object):
    def __init__(self, is_valid, error_code=None):
        self.is_valid = is_valid
        self.error_code = error_code

def displayhtml (public_key,
                 use_ssl = False,
                 error = None):
    """Gets the HTML to display for reCAPTCHA

    public_key -- The public api key
    use_ssl -- Should the request be sent over ssl?
    error -- An error message to display (from RecaptchaResponse.error_code)"""

    error_param = ''
    if error:
        error_param = '&error=%s' % error

    if use_ssl:
        server = API_SSL_SERVER
    else:
        server = API_SERVER

    return """<script type="text/javascript" src="%(ApiServer)s/challenge?k=%(PublicKey)s%(ErrorParam)s"></script>

<noscript>
  <iframe src="%(ApiServer)s/noscript?k=%(PublicKey)s%(ErrorParam)s" height="300" width="500" frameborder="0"></iframe><br />
  <textarea name="recaptcha_challenge_field" rows="3" cols="40"></textarea>
  <input type='hidden' name='recaptcha_response_field' value='manual_challenge' />
</noscript>
""" % {
        'ApiServer' : server,
        'PublicKey' : public_key,
        'ErrorParam' : error_param,
        }


def submit (recaptcha_challenge_field,
            recaptcha_response_field,
            private_key,
            remoteip):
    """
    Submits a reCAPTCHA request for verification. Returns RecaptchaResponse
    for the request

    recaptcha_challenge_field -- The value of recaptcha_challenge_field from the form
    recaptcha_response_field -- The value of recaptcha_response_field from the form
    private_key -- your reCAPTCHA private key
    remoteip -- the user's ip address
    """

    if not (recaptcha_response_field and recaptcha_challenge_field and
            len (recaptcha_response_field) and len (recaptcha_challenge_field)):
        return RecaptchaResponse (is_valid = False, error_code = 'incorrect-captcha-sol')
    

    def encode_if_necessary(s):
        if isinstance(s, unicode):
            return s.encode('utf-8')
        return s

    params = urllib.urlencode ({
            'privatekey': encode_if_necessary(private_key),
            'remoteip' :  encode_if_necessary(remoteip),
            'challenge':  encode_if_necessary(recaptcha_challenge_field),
            'response' :  encode_if_necessary(recaptcha_response_field),
            })

    request = urllib2.Request (
        url = "http://%s/recaptcha/api/verify" % VERIFY_SERVER,
        data = params,
        headers = {
            "Content-type": "application/x-www-form-urlencoded",
            "User-agent": "reCAPTCHA Python"
            }
        )
    
    httpresp = urllib2.urlopen (request)

    return_values = httpresp.read ().splitlines ();
    httpresp.close();

    return_code = return_values [0]

    if (return_code == "true"):
        return RecaptchaResponse (is_valid=True)
    else:
        return RecaptchaResponse (is_valid=False, error_code = return_values [1])

def check_captcha(request):
    
    captcha_challenge = request.POST.get('recaptcha_challenge_field')
    captcha_response = request.POST.get('recaptcha_response_field')
    captcha_result = None
    ip = None
    if 'HTTP_X_FORWARDED_FOR' in request.META:
        ip = request.META['HTTP_X_FORWARDED_FOR']
    elif 'REMOTE_ADDR' in request.META:
        ip = request.META['REMOTE_ADDR']
    if captcha_response is not None and captcha_challenge is not None:
        captcha_result = submit(captcha_challenge,
                                captcha_response,
                                recaptcha_private_key,
                                ip)
    return captcha_result

def new_captcha_html(captcha_result):
    if captcha_result is None:
        captcha_html = displayhtml(recaptcha_public_key, use_ssl=True)
    else:
        captcha_html = displayhtml(recaptcha_public_key, use_ssl=True, error = captcha_result.error_code)
    return captcha_html




Generate a python script to extract a random subset of size 100 from a given list of items. li = [1,2,3,4,5,6,7,8,9,10] import random

def extract_random_subset(li, size=100): 
    subset = [] 
    while len(subset) < size: 
        rand_ele = random.choice(li)
        if rand_ele not in subset: 
            subset.append(rand_ele) 
    return subset
Create a python program to print out all combinations of elements from two lists. list1 = [1,2,3]
list2 = [5,6,7] for i in list1:
    for j in list2:
        print(i, j)
Create a Python function to calculate the sum of two numbers using a for loop.  def sum_of_two(x, y):
  result = 0
  for i in range(x, y+1):
    result += i
  return result
Create a class in Python with a method to sort the given array in an ascending order. [3, 2, 5, 1, 4] class Sort: 
    def sort_arr(self, arr):
        arr.sort()
        return arr
Create a function in Python that takes a list of strings and returns a dictionary containing a count of how many times each string appears in the list. ["foo", "bar", "foo", "baz", "foo"] def count_words(words):
    counted_words = {}
    for word in words:
        if word not in counted_words:
            counted_words[word] = 1
        else:
            counted_words[word] += 1
    return counted_words

words = ["foo", "bar", "foo", "baz", "foo"]
result = count_words(words)
print(result)
Can you create a loop in Python to find the highest value in an array? arr = [2, 3, 9, 1, 4, 5] max_val = arr[0]
for num in arr:
    if num > max_val:
        max_val = num
print(max_val)
Generate a Python function to calculate the area of a triangle given the three sides.  def triangle_area(side1, side2, side3):
    s = (side1 + side2 + side3) / 2
    area = (s * (s - side1) * (s - side2) * (s - side3)) ** 0.5
    return area
Generate a Python program to check if any element of a given list is palindrome or not. list1 = [12, 121, 3] list1 = [12, 121, 3]

# Iterate through the list
for element in list1:
    # Convert the element to a string
    element = str(element)
    
    # Check if the element is a palindrome
    if element == element[::-1]:
        print(element + " is a palindrome")
    else:
        print(element + " is not a palindrome")
Write a Python program to generate a multiplication table for numbers from 2 to 5 using a for loop. Not applicable for i in range(2, 6): 
 for j in range(1, 11): 
  print('{} x {} = {}'.format(i, j, i * j)) 
 print(" ")
Write a Python program to optimize a neural network architecture using evolutionary algorithms. The neural network should have 3 layers, where the first layer is an input layer of 8 nodes, the second layer has 10 nodes and the third layer has 4 nodes. import numpy as np
from sklearn.neural_network import MLPClassifier
from sklearn.model_selection import train_test_split

# Generate dataset
X = np.random.rand(1000, 8)
y = np.random.randint(2, size=(1000, 1))

# Split data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y)

# Create neural net classifier with 3 layers of 8, 10 and 4 nodes
nn_model = MLPClassifier(solver='adam', hidden_layer_sizes=(8, 10, 4), 
activation='relu')

# Train model
nn_model.fit(X_train, y_train)

# Test model
score = nn_model.score(X_test, y_test)

# Create an evolutionary optimization to further optimize the model
from evolutionary_search import EvolutionaryAlgorithmSearchCV

# Define the search space
search_space = {
'hidden_layer_sizes': [(8, 8), (8, 10, 4), (10, 8, 4)],
 'activation': ['tanh', 'relu']
}

# Create an evolutionary optimization search
optimizer = EvolutionaryAlgorithmSearchCV(nn_model, search_space,
scoring='accuracy',
 cv=3,
 verbose=1,
 population_size=50,
 gene_mutation_prob=0.10,
 gene_crossover_prob=0.5,
 tournament_size=3,
 generations_number=10,
 n_jobs=1)

# Optimize model
optimizer.fit(X_train, y_train)

# Save optimized model
optimized_nn_model = optimizer.best_estimator_

# Test optimized model
score_opt = optimized_nn_model.score(X_test, y_test)

# Print scores for original and optimized models
print('Original:', score)
print('Optimized:', score_opt)
Create a new class in Python to represent a point in the Euclidean plane.  class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y
Create a Python program that computes the average of the numbers in the list [3, 5, 7, 9]. [3, 5, 7, 9] def get_average(numbers):
 sum = 0
 for num in numbers:
  sum = sum + num
 return sum / len(numbers)
 
numbers = [3, 5, 7, 9]
average = get_average(numbers)
print(average) # Outputs 6.5
Design and implement a Binary Search Tree data structure in Python.  class Node():
    def __init__(self, val):
        self.left = None 
        self.right = None
        self.val = val 

class BinaryTree:
    def __init__(self): 
        self.root = None
  
    def addNode(self, val):
        if self.root == None:
            self.root = Node(val)
        else: 
            self._add(val, self.root)
  
    def _add(self, val, node): 
        if val < node.val: 
            if node.left is not None: 
                self._add(val, node.left) 
            else: 
                node.left = Node(val) 
        else: 
            if node.right is not None: 
                self._add(val, node.right) 
            else:
                node.right = Node(val)
Write a Python program to filter out all the even numbers from a list. [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] def filter_even(numbers):
    return [n for n in numbers if n %2 == 0]
Create a python function that takes a comma-seperated string and returns a list of dictionary objects. "John, Smith, 25; Polly, King, 22" def create_list(string):
    entries = string.split(";")
    result = []
    for entry in entries:
        info = entry.split(", ")
        person = {
            'name': info[0],
            'surname': info[1],
            'age': info[2],
        }
        result.append(person)
    return result

string = "John, Smith, 25; Polly, King, 22"

result = create_list(string)
print(result)
Create a JavaScript object containing a list of programming languages and their respective paradigms. Not applicable const languages = {
 'C': 'Imperative',
 'C++': 'Imperative',
 'Java': 'Object-Oriented',
 'Scala': 'Object-Oriented',
 'Python': 'Object-Oriented',
 'PHP': 'Object-Oriented',
 'Go': 'Imperative/Functional',
 'Ruby': 'Object-Oriented/Functional',
 ' JavaScript': 'Functional/Prototype-based',
};
Create a Python class to classify emails with machine learning.  class EmailClassifier: 
  
    # Initialize the vectorizer and classifier 
    def __init__(self): 
        self.vectorizer = TfidfVectorizer(stop_words="english") 
        self.classifier = MultinomialNB() 
  
    # Fit the emails to the vectorizer 
    def fit(self, emails, labels): 
        self.vectorizer.fit(emails) 
        self.classifier.fit(self.vectorize(emails), labels) 
  
    # Transform the emails to a vectorized form 
    def vectorize(self, emails): 
        return self.vectorizer.transform(emails) 
  
    # Predict the labels for the emails 
    def predict(self, emails): 
        return self.classifier.predict(self.vectorize(emails))
Create a Python class to represent a movie.  class Movie():
   
   # Constructor
   def __init__(self, title, director, runtime, rating):
      self.title = title
      self.director = director
      self.runtime = runtime
      self.rating = rating
   
   # Getters
   def getTitle(self):
      return self.title
   
   def getDirector(self):
      return self.director
   
   def getRuntime(self):
      return self.runtime
   
   def getRating(self):
      return self.rating
Develop a Python program to generate a Ruby code to format a given text. "This is a test text." def format_text(input_text):
    formatted_str = ""
    for i in input_text:
        if i.isupper():
            formatted_str += "'#{i}'"
        else:
            formatted_str += i
    return formatted_str
Create a Python program to convert degrees Celsius to degrees Fahrenheit given a value in Celsius. Value: 32 # Function to convert degrees Celsius to degrees Fahrenheit
def celsius_to_fahrenheit(celsius):
 return (celsius * 9/5) + 32

# Input Celsius value
celsius = 32

# Calculate Fahrenheit
fahrenheit = celsius_to_fahrenheit(celsius)
print(f'{celsius} Celsius is {fahrenheit} Fahrenheit')
Create a Python program to generate random passwords of 8 alphanumeric characters.  import string
import random

def generate_password():
    letters = string.ascii_letters + string.digits
    return ''.join(random.choice(letters) for i in range(8))
Create a program to encrypt a string using matrix transposition in Python. string = "AESTHETICISMISTHEFINESTART" def encryptMatrixTranspose(string):
    matrix = [list(string[i:i+6]) for i in range(0, len(string), 6)]
    for row in matrix:
        if(len(row) != 6):
            for i in range(len(row), 6):
                row.append("_")

    new_matrix = []
    for i in range(6):
        new_row = []
        for row in matrix:
            new_row.append(row[i])
        new_matrix.append(new_row)
    return ''.join([''.join(row) for row in new_matrix])

string = "AESTHETICISMISTHEFINESTART"
encrypted = encryptMatrixTranspose(string)
print(encrypted)
Create a Python program to generate a list from two given lists using a list comprehension. list1 = [1, 2, 3]
list2 = [4, 5, 6] list1 = [1, 2, 3]
list2 = [4, 5, 6]

result = [x + y for x in list1 for y in list2]
print(result)
Develop a web scraper in Python which can extract information from HTML page. Not applicable import requests
from bs4 import BeautifulSoup
 
def scrape_data(url):
 response = requests.get(url)
 
 if response.status_code == 200:
  html_data = response.text
  soup = BeautifulSoup(html_data, 'html.parser')
  
  # extract data here
 
 else:
  print("Invalid response!")
 
scrape_data('https://example.com')
Given a list of tuples, write a Python function to sort the list according to the second item in each tuple.  def sort_by_second_item(lst):
    return sorted(lst, key=lambda x:x[1])
Generate a Python function which finds all prime numbers between two given numbers. lower boundary: 0
upper boundary: 15 def find_prime_numbers(lower, upper):
    result = []
    # check all numbers from lower boundary to upper boundary
    for num in range(lower, upper + 1):
        # check if the number is prime
        if is_prime(num):
            result.append(num)
    return result

def is_prime(num):
    for i in range(2, num):
        if (num % i == 0):
            return False
    return True

print(find_prime_numbers(0, 15))

# Output: [2, 3, 5, 7, 11, 13]
Generate a table of numbers up to 10 in list format using Python.  mylist = [1,2,3,4,5,6,7,8,9,10]
Create a server in Python that uses TCP to transmit messages between two clients.  import socket
import threading

# Create a network socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# Bind socket to port
server_address = ('127.0.0.1', 10000)
s.bind(server_address)

# Wait for incoming connection
s.listen()

# Thread for handling incoming connection
def client_thread(conn):
    while True:
        data = conn.recv(4096)
        conn.send(data)

# Main thread loop
while True:
    conn, addr = s.accept()
    print("Connected to:", addr)

    # Start the client thread for handling incoming connection
    thread = threading.Thread(target=client_thread, args=(conn,))
    thread.start()
Write a Python program to convert a date string to the corresponding Unix timestamp. date_string = "October 15, 2020" import time 

def convert_to_timestamp(date_string): 
    return time.mktime(time.strptime(date_string, "%B %d, %Y"))
Create an AI model in Python to classify emails from the Enron Spam Dataset as either spam or non-spam. Not applicable import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import precision_score

# Load the dataset
df = pd.read_csv("spam.csv", encoding='iso-8859-1')
# Load label and data
X = df['EmailText']
y = df['Label']

# Split data into train-test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)

# Create bag of words model
count_vectorizer = CountVectorizer()
X_train_counts = count_vectorizer.fit_transform(X_train)

# Train the model
clf = svm.SVC(kernel='linear')
clf.fit(X_train_counts, y_train)

# Test the model
X_test_counts = count_vectorizer.transform(X_test)
predictions = clf.predict(X_test_counts)
score = precision_score(y_test, predictions, average='binary')

print('Precision score of the model:', score)
Create a function to identify a prime number in Python.  def is_prime(n): 
    if n <= 1: 
        return False
    for i in range(2, n): 
        if n % i == 0: 
            return False
    return True
Write a Python program to calculate the sum of the numerical values of each character of a string string = 'program' def sumCharValues(string):
    sum = 0
    for ch in string:
        sum += ord(ch)
    return sum
Construct a Python program that calculates a person's BMI given their height and weight. Weight: 70 kg
Height:  1.80 m def calculate_bmi(weight, height):
    bmi = weight / (height**2)
    return bmi

weight = 70
height = 1.80

bmi = calculate_bmi(weight, height)
print("BMI: " + str(bmi))
Generate a function to find the GCD of two numbers in Python.  def gcd(a,b): 
    if(b==0): 
        return a 
    else: 
        return gcd(b,a%b)
Generate a Python script that takes in a list of numbers, rearranges them in ascending order, and prints out the result. [3, 2, 5, 7, 1, 4] def sort_list(nums): 
    # Sort list in ascending order
    nums.sort()
    
    # Print out the sorted list
    for num in nums: 
        print(num) 
  
# Test the function
nums = [3, 2, 5, 7, 1, 4]
sort_list(nums)
Design a function in Python that sorts a list of strings in alphabetical order. ['red', 'green', 'orange'] def sort_list_alphabetically(input_list): 
    output_list = sorted(input_list) 
    return output_list 
  
input_list = ['red', 'green', 'orange']
sorted_list = sort_list_alphabetically(input_list) 
print("Sorted List in Alphabetical Order:", sorted_list)
Create a Python function to filter a given list of strings and return a new list of strings containing only unique elements. The list is: ["abc", "def", "abc", "ghi", "jkl", "mno", "abc", "pqr"] def filter_list(strings):
    unique_strings = []
    for string in strings:
        if string not in unique_strings:
            unique_strings.append(string)
    return unique_strings

strings = ["abc", "def", "abc", "ghi", "jkl", "mno", "abc", "pqr"]
filtered_strings = filter_list(strings)
print(filtered_strings)

# Output: ['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr']
Design a data structure in Python to store a list of cars with associated properties like name, color, and price.  class CarData:
    def __init__(self):
        self.cars = {}

    def add_car(self, name, color, price):
        car = {
            "name": name,
            "color": color,
            "price": price
        }
        self.cars[name] = car

    def get_car(self, name):
        if name in self.cars:
            return self.cars[name]
        return None
Generate a python program that takes two sets of integers as input and outputs the intersection of those sets. set1 = {1, 2, 3, 4}
set2 = {3, 4, 5, 6} def intersection(set1, set2): 
   return set1 & set2

result = intersection(set1, set2) 
print(result)
Create a function in Python that takes a string and an integer as parameters and returns a string with the first 'n' characters replaced with 'x'. string = "Hello World"; n = 5 def censor_string(string, n):  
  # Get the length of the string  
  length = len(string)  
  
  # Check if length is less than 'n'  
  if length < n:  
    return string  
  elif length == n:  
    return "x" * length  
  
  # Replace the first 'n' characters with 'x'  
  else:  
    return "x" * n + string[n:]  

# Driver code  
string = "Hello World"
n = 5
result = censor_string(string, n) 
print(result)  # "xxxxx World"
Modify the given Python loop to also multiply the numbers by 2 at the same time. numbers = [1, 2, 3 , 4]

for num in numbers:
  print(num) numbers = [1, 2, 3 , 4]

for num in numbers:
  print(num*2)
Create a Python code snippet to print "Hello World!" 10 times in the console.  for i in range(10):
 print("Hello World!")
Create an array containing the numbers from 1 to 10 using Python  array = [1,2,3,4,5,6,7,8,9,10]
Develop a Python function to calculate the maximum, minimum and average of a given list. numbers = [3, 4, 5, 6] def calculate_stats(numbers):
    maximum = max(numbers)
    minimum = min(numbers)
    average = sum(numbers)/len(numbers)
    return (maximum, minimum, average)
Generate a Python program to convert a list of strings to a list of integers. ['1', '3', '2', '6'] def str_to_int(lst):
  int_lst = []
  for i in lst:
    int_lst.append(int(i))
  return int_lst
Create a for loop in Python to iterate over a list of strings and print each one.  strings = ["string1", "string2", "string3"]
for s in strings:
    print(s)
Rewrite the following Python code using vectorization techniques to reduce the computation time. squares = []
for x in range(100):
 squares.append(x * x) squares = [x * x for x in range(100)] # vectorized code equivalent to the for loop, which will be faster
Write a Python program that calculates the distance between two points on a two-dimensional plane. Point1 (x1: 3, y1: 4); Point2 (x2: -9, y2: -2) #include <iostream>
#include <math.h>

int main() 
{ 
    int x1 = 3; 
    int y1 = 4; 

    int x2 = -9; 
    int y2 = -2;

    float distance = sqrt(pow(x2 - x1, 2) + pow(y2 - y1, 2)); 

    std::cout << "Distance between the two points is: " << distance << std::endl; 

    return 0; 
}
Design a python program that would generate a random password  import random

def generatePassword():
    charSet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%&*'
    password = ''
    for x in range(8):
        password += random.choice(charSet)
    return password
Write a Python program that divides two integers and prevents divide by zero error.  def divide(num1, num2):
    try:
        result = num1 / num2
        print("Result is {}".format(result))
    except:
        print("Divide by zero error!")
Declare a Python class that demonstrates inheritance.  class ParentClass:
    def __init__(self):
        self.message = 'Hello, Parent'

class ChildClass(ParentClass):
    def __init__(self):
        ParentClass.__init__(self)
        self.message = 'Hello, Child'

obj = ChildClass()
print(obj.message) //Prints 'Hello, Child'
Change the following Python code to a generator. def fibonacci(n):
  if n < 0:
    return;
  result = []
  prev = 0
  current = 1
  result.append(prev)
  result.append(current)
  while(n - 2):
    temp = current 
    current += prev
    prev = temp
    result.append(current)
    n = n - 1
  return result def fibonacci(n):
  prev, current = 0, 1
  while(n):
    yield prev
    prev, current = current, prev + current 
    n = n - 1
    
# Driver Code
result = list(fibonacci(10))

print(result) # prints [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
Build a Python module that contains a class called “Fibonacci” capable of generating a list of n Fibonacci numbers n = 5 class Fibonacci:
    def __init__(self, n):
        self.n = n
        self.fib = []
    
    def generate_list(self):
        if self.n <= 0:
            print('Invalid input.')
        elif self.n == 1:
            self.fib = [0]
        else:
            self.fib = [0,1]
            for i in range(2,self.n):
                self.fib.append(self.fib[i-2] + self.fib[i-1])
        return self.fib
Analyze the sentiment of a given text using Python I love writing code! from nltk.sentiment.vader import SentimentIntensityAnalyzer

#init sentiment analyzer
analyzer = SentimentIntensityAnalyzer()

#analyze sentiment
sentiment_scores = analyzer.polarity_scores("I love writing code!")

if sentiment_scores['pos'] > sentiment_scores['neg']:
    print ("The sentiment of the text is positive")
else:
    print ("The sentiment of the text is negative")
Design a Python program which takes in a text-based menu from a restaurant,  organizes it into sections, and prints out the menu in a neat format. "Burgers: 
Cheeseburger - $7 
Hamburger - $6 

Drinks: 
Soda - $1 
Water - $1

Wings:
Mild - $10 
Hot - $12

Desserts:
Ice Cream - $4" menu = {
 'Burgers': {
 'Cheeseburger': 7,
 'Hamburger': 6
 },
 'Drinks': {
 'Soda': 1,
 'Water': 1
 },
 'Wings': {
 'Mild': 10,
 'Hot': 12
 },
 'Desserts': {
 'Ice Cream': 4
 }
}

for section, items in menu.items():
 print(section)
 for item, price in items.items():
  print(f'{item} - ${price}')
 print()
Create a program in Python that takes a collection of numbers as input and calculates their mean. [1, 4, 6, 8, 12] def calculate_mean(nums):
    mean = 0
    for num in nums:
        mean += num
    mean /= len(nums)
    return mean
Create a python program to store personal contact information in a dictionary format. {
    "name": "John Doe",
    "phone": "+1 123-456-7891",
    "email": "john_doe@example.com"
 } def store_contact_info(contact_dict):
    
    name = contact_dict["name"]
    phone = contact_dict["phone"]
    email = contact_dict["email"]

    # Create dictionary to store contact info
    contact_info_dict = {
        "Name": name,
        "Phone": phone,
        "Email": email
    }
    return contact_info_dict
Create an automated process for web scraping using Python and Selenium. The process should scrape data from the specified URL from the given website. URL: https://www.example.com/index.html # Define the web scraper
from selenium import webdriver

# Define the URL
url = 'https://www.example.com/index.html'

# Initialize the web driver
driver = webdriver.Chrome()

# Load the URL
driver.get(url)

# Scrape the data
dataList = driver.find_elements_by_css_selector('div.data')

for data in dataList:
    print(data.text)

# Close the driver instance 
driver.close()
Construct a Python script to filter the elements of a given list which are divisible by 3. [1,2,3,4,5,6,7,8,9] my_list = [1,2,3,4,5,6,7,8,9]

filtered_list = list(filter(lambda x: x % 3 == 0, my_list))
print(filtered_list)
Write a Python program to print all possible words using the characters provided in an array. Characters: ['a', 't', 'o', 'm'] """
Write a Python program to print all possible words using the characters provided in an array
"""
 
def all_words(char_arr):
    for i in range(0, len(char_arr)):
        for j in range(i + 1, len(char_arr) + 1):
            print("".join(char_arr[i:j]))

if __name__ == '__main__':
    char_arr = ['a', 't', 'o', 'm']
    all_words(char_arr)

# Output
# a
# at
# ato
# atom
# t
# to
# tom
# o
# om
# m
Create a Python function to verify a given user input.  def verify_input(user_input):
    # Define the accepted characters
    allowed_chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0987654321_"
    for char in user_input:
        if char not in allowed_chars:
            return False
    return True
Generate a Python function to execute a valid insertion sort on a given list of integers.  def insertion_sort(arr):
 for i in range(1, len(arr)):
 key = arr[i]
 j = i -1
 while j >= 0 and key < arr[j] :
    arr[j + 1] = arr[j]
    j = j - 1
 arr[j + 1] = key

return arr
Identify the output of the following python code snippet: arr = [1, 2, 4, 8, 16]
new_arr = [i * 2 for i in arr] [2, 4, 8, 16, 32]
Solve the given Roman numerals equation using your preferred programming language. Equation: MMVII - MDCCLIV Python:
romans = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}

def solve_roman(eq):
    result = 0
    for char in eq:
        result += romans[char]
    return result

print(solve_roman("MMVII" - "MDCCLIV"))

Output: 823
Design a Python class to store customer purchase histories.  class CustomerHistory:
  def __init__(self, customer_id):
    self.customer_id = customer_id
    self.purchase_history = []

  def add_purchase(self, product):
    self.purchase_history.append(product)

  def get_purchase_history(self):
    return self.purchase_history
Provide a valid Python class definition that uses the below given values. Class_name = 'Automobile'
 attributes  = 'speed' , 'color'
 methods = 'set_speed', 'set_color' class Automobile:
    def __init__(self, speed, color):
        self.speed = speed
        self.color = color

    def set_speed(self, speed):
        self.speed = speed
    
    def set_color(self, color):
        self.color = color
Write a web scraper in Python using the BeautifulSoup library that scrapes the Wikipedia page for a given person and outputs the biographical information in JSON format. https://en.wikipedia.org/wiki/Bill_Gates import requests
from bs4 import BeautifulSoup
import json

url = 'https://en.wikipedia.org/wiki/Bill_Gates'
page = requests.get(url)
soup = BeautifulSoup(page.content, 'html.parser')

data = {
 'name': 'Bill Gates',
 'birth': soup.find_all('span', {'class': 'bday'})[0].text,
 'birth_location': soup.find_all('div', {'class': 'birthplace'})[0].text,
 'education': soup.find_all('span', {'class': 'education-degrees'})[0].text, 
 'alma_mater': soup.find_all('span', {'class': 'org'})[0].text
}

with open('bill_gates_data.json', 'w') as outfile:
 json.dump(data, outfile)
Create a Python script that takes a given text string and outputs the number of words in the string. Text string: “I love programming” def wordCount(text):
    words = text.split(' ')

    return len(words)

print(wordCount("I love programming"))  # 3
Create a Python program that takes a number n and prints out the Fibonacci sequence from 0 to n.  def Fibonacci(n): 
 a = 0
 b = 1
 if n < 0: 
 print("Incorrect input") 
 elif n == 0: 
 return a 
 elif n == 1: 
 return b 
 else: 
 for i in range(2,n+1): 
 c = a + b 
 a = b 
 b = c 
 return b 

def printFibonacci(n): 
 for i in range(n+1):
 print(Fibonacci(i),end=" ")
Define a Python list containing the numbers from 0 to 10.  numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
Create a gRPC server in Python that implements a HelloWorld API with a single method 'GreetUser'. The method should take in a user name as an argument and return a "Hello UserName" response. Not applicable import grpc
import hello_world_pb2
import hello_world_pb2_grpc

class HelloWorldServicer(hello_world_pb2_grpc.HelloWorldServicer):
 def GreetUser(self, request, context):
 return hello_world_pb2.GreetUserResponse(message=f'Hello {request.name}')

server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))
hello_world_pb2_grpc.add_HelloWorldServicer_to_server(HelloWorldServicer(), server)
server.add_insecure_port('[::]:50051')
server.start()
Create a Python script to make a GET request to a given URL and extract all the hyperlinks from the page. Not applicable import requests
from bs4 import BeautifulSoup

# Make the request
r = requests.get('https://www.example.com/')

# Parse the response
soup = BeautifulSoup(r.text, 'html.parser')

# Get all hyperlinks from the page
links = []
for link in soup.findAll('a'):
 links.append(link.get('href'))

print(links)
This code generates a set of C++ files for the BAGEL package. To use it, create a file named "RelCASPT2.cc" and add the desired code to it. Then run the script to generate the necessary files.  #!/opt/local/bin/python
import string
import os
import re


def header(n) :
    return "//\n\
// BAGEL - Brilliantly Advanced General Electronic Structure Library\n\
// Filename: RelCASPT2" + n + ".cc\n\
// Copyright (C) 2014 Toru Shiozaki\n\
//\n\
// Author: Toru Shiozaki <shiozaki@northwestern.edu>\n\
// Maintainer: Shiozaki group\n\
//\n\
// This file is part of the BAGEL package.\n\
//\n\
// This program is free software: you can redistribute it and/or modify\n\
// it under the terms of the GNU General Public License as published by\n\
// the Free Software Foundation, either version 3 of the License, or\n\
// (at your option) any later version.\n\
//\n\
// This program is distributed in the hope that it will be useful,\n\
// but WITHOUT ANY WARRANTY; without even the implied warranty of\n\
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\
// GNU General Public License for more details.\n\
//\n\
// You should have received a copy of the GNU General Public License\n\
// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\
//\n\
\n\
#include <bagel_config.h>\n\
#ifdef COMPILE_SMITH\n\
\n\
\n\
#include <src/smith/relcaspt2/RelCASPT2.h>\n"

def insert():
    return "#include <src/smith/relcaspt2/RelCASPT2_tasks.h>\n"

def header2():
    return "\n\
using namespace std;\n\
using namespace bagel;\n\
using namespace bagel::SMITH;\n\
\n\
"

footer = "#endif\n"

f = open('RelCASPT2.cc', 'r')
lines = f.read().split("\n")[34:]

tasks = []
tmp = ""

for line in lines:
    if (len(line) >= 17 and (line[0:17] == "shared_ptr<Queue>" or line[0:17] == "RelCASPT2::RelCAS")):
        if (tmp != ""):
            tasks.append(tmp)
            tmp = ""
    tmp += line + "\n"
    if (line == "}"):
        tmp += "\n"
tasks.append(tmp)

p = re.compile('make_[a-z0-9]+q')
for task in tasks[0:-1]:
    tag = p.search(task).group()[5:]
    fout = open("RelCASPT2_" + tag + ".cc", "w")
    out = header("_" + tag + "q") + insert() + header2() + task + footer
    fout.write(out)
    fout.close()

os.remove("RelCASPT2.cc")

fout = open("RelCASPT2.cc", "w")
out = header("") + header2() + tasks[len(tasks)-1] + footer
fout.write(out)
fout.close()

Design a program in Python that counts the number of words in a paragraph and returns the count.  def count_paragraph_words(par):
    par = par.split()
    return len(par)
The given code is a Python class named FileSystem that provides an interface for file system operations. To use this class, create an instance of it and call its methods. The methods include abspath, realpath, path_to_module, expanduser, basename, chdir, copyfile, dirname, exists, dirs_under, files_under, getcwd, glob, isabs, isfile, getsize, isdir, join, listdir, mkdtemp, maybe_make_directory, move, mtime, normpath, open_binary_tempfile, open_binary_file_for_reading, read_binary_file, write_binary_file, open_text_file_for_reading, open_text_file_for_writing, open_stdin, read_text_file, write_text_file, sha1, relpath, remove, rmtree, copytree, split, splitext, and compare.  # Copyright (C) 2010 Google Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#     * Neither the name of Google Inc. nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""Wrapper object for the file system / source tree."""

import codecs
import errno
import exceptions
import filecmp
import glob
import hashlib
import os
import shutil
import sys
import tempfile
import time


class FileSystem(object):
    """FileSystem interface for webkitpy.

    Unless otherwise noted, all paths are allowed to be either absolute
    or relative."""
    sep = os.sep
    pardir = os.pardir

    def abspath(self, path):
        # FIXME: This gross hack is needed while we transition from Cygwin to native Windows, because we
        # have some mixing of file conventions from different tools:
        if sys.platform == 'cygwin':
            path = os.path.normpath(path)
            path_components = path.split(os.sep)
            if path_components and len(path_components[0]) == 2 and path_components[0][1] == ':':
                path_components[0] = path_components[0][0]
                path = os.path.join('/', 'cygdrive', *path_components)

        return os.path.abspath(path)

    def realpath(self, path):
        return os.path.realpath(path)

    def path_to_module(self, module_name):
        """A wrapper for all calls to __file__ to allow easy unit testing."""
        # FIXME: This is the only use of sys in this file. It's possible this function should move elsewhere.
        return sys.modules[module_name].__file__  # __file__ is always an absolute path.

    def expanduser(self, path):
        return os.path.expanduser(path)

    def basename(self, path):
        return os.path.basename(path)

    def chdir(self, path):
        return os.chdir(path)

    def copyfile(self, source, destination):
        shutil.copyfile(source, destination)

    def dirname(self, path):
        return os.path.dirname(path)

    def exists(self, path):
        return os.path.exists(path)

    def dirs_under(self, path, dir_filter=None):
        """Return the list of all directories under the given path in topdown order.

        Args:
            dir_filter: if not None, the filter will be invoked
                with the filesystem object and the path of each dirfound.
                The dir is included in the result if the callback returns True.
        """
        def filter_all(fs, dirpath):
            return True
        dir_filter = dir_filter or filter_all

        dirs = []
        for (dirpath, dirnames, filenames) in os.walk(path):
            if dir_filter(self, dirpath):
                dirs.append(dirpath)
        return dirs

    def files_under(self, path, dirs_to_skip=[], file_filter=None):
        """Return the list of all files under the given path in topdown order.

        Args:
            dirs_to_skip: a list of directories to skip over during the
                traversal (e.g., .svn, resources, etc.)
            file_filter: if not None, the filter will be invoked
                with the filesystem object and the dirname and basename of
                each file found. The file is included in the result if the
                callback returns True.
        """
        def filter_all(fs, dirpath, basename):
            return True

        file_filter = file_filter or filter_all
        files = []
        if self.isfile(path):
            if file_filter(self, self.dirname(path), self.basename(path)):
                files.append(path)
            return files

        if self.basename(path) in dirs_to_skip:
            return []

        for (dirpath, dirnames, filenames) in os.walk(path):
            for d in dirs_to_skip:
                if d in dirnames:
                    dirnames.remove(d)

            for filename in filenames:
                if file_filter(self, dirpath, filename):
                    files.append(self.join(dirpath, filename))
        return files

    def getcwd(self):
        return os.getcwd()

    def glob(self, path):
        return glob.glob(path)

    def isabs(self, path):
        return os.path.isabs(path)

    def isfile(self, path):
        return os.path.isfile(path)

    def getsize(self, path):
        return os.path.getsize(path)

    def isdir(self, path):
        return os.path.isdir(path)

    def join(self, *comps):
        return os.path.join(*comps)

    def listdir(self, path):
        return os.listdir(path)

    def mkdtemp(self, **kwargs):
        """Create and return a uniquely named directory.

        This is like tempfile.mkdtemp, but if used in a with statement
        the directory will self-delete at the end of the block (if the
        directory is empty; non-empty directories raise errors). The
        directory can be safely deleted inside the block as well, if so
        desired.

        Note that the object returned is not a string and does not support all of the string
        methods. If you need a string, coerce the object to a string and go from there.
        """
        class TemporaryDirectory(object):
            def __init__(self, **kwargs):
                self._kwargs = kwargs
                self._directory_path = tempfile.mkdtemp(**self._kwargs)

            def __str__(self):
                return self._directory_path

            def __enter__(self):
                return self._directory_path

            def __exit__(self, type, value, traceback):
                # Only self-delete if necessary.

                # FIXME: Should we delete non-empty directories?
                if os.path.exists(self._directory_path):
                    os.rmdir(self._directory_path)

        return TemporaryDirectory(**kwargs)

    def maybe_make_directory(self, *path):
        """Create the specified directory if it doesn't already exist."""
        try:
            os.makedirs(self.join(*path))
        except OSError, e:
            if e.errno != errno.EEXIST:
                raise

    def move(self, source, destination):
        shutil.move(source, destination)

    def mtime(self, path):
        return os.stat(path).st_mtime

    def normpath(self, path):
        return os.path.normpath(path)

    def open_binary_tempfile(self, suffix):
        """Create, open, and return a binary temp file. Returns a tuple of the file and the name."""
        temp_fd, temp_name = tempfile.mkstemp(suffix)
        f = os.fdopen(temp_fd, 'wb')
        return f, temp_name

    def open_binary_file_for_reading(self, path):
        return codecs.open(path, 'rb')

    def read_binary_file(self, path):
        """Return the contents of the file at the given path as a byte string."""
        with file(path, 'rb') as f:
            return f.read()

    def write_binary_file(self, path, contents):
        with file(path, 'wb') as f:
            f.write(contents)

    def open_text_file_for_reading(self, path, errors='strict'):
        # Note: There appears to be an issue with the returned file objects
        # not being seekable. See http://stackoverflow.com/questions/1510188/can-seek-and-tell-work-with-utf-8-encoded-documents-in-python .
        return codecs.open(path, 'r', 'utf8', errors)

    def open_text_file_for_writing(self, path):
        return codecs.open(path, 'w', 'utf8')

    def open_stdin(self):
        return codecs.StreamReaderWriter(sys.stdin,
                                             codecs.getreader('utf8'),
                                             codecs.getwriter('utf8'),
                                             'replace')

    def read_text_file(self, path):
        """Return the contents of the file at the given path as a Unicode string.

        The file is read assuming it is a UTF-8 encoded file with no BOM."""
        with codecs.open(path, 'r', 'utf8') as f:
            return f.read()

    def write_text_file(self, path, contents):
        """Write the contents to the file at the given location.

        The file is written encoded as UTF-8 with no BOM."""
        with codecs.open(path, 'w', 'utf-8') as f:
            f.write(contents.decode('utf-8') if type(contents) == str else contents)

    def sha1(self, path):
        contents = self.read_binary_file(path)
        return hashlib.sha1(contents).hexdigest()

    def relpath(self, path, start='.'):
        return os.path.relpath(path, start)

    class _WindowsError(exceptions.OSError):
        """Fake exception for Linux and Mac."""
        pass

    def remove(self, path, osremove=os.remove):
        """On Windows, if a process was recently killed and it held on to a
        file, the OS will hold on to the file for a short while.  This makes
        attempts to delete the file fail.  To work around that, this method
        will retry for a few seconds until Windows is done with the file."""
        try:
            exceptions.WindowsError
        except AttributeError:
            exceptions.WindowsError = FileSystem._WindowsError

        retry_timeout_sec = 3.0
        sleep_interval = 0.1
        while True:
            try:
                osremove(path)
                return True
            except exceptions.WindowsError, e:
                time.sleep(sleep_interval)
                retry_timeout_sec -= sleep_interval
                if retry_timeout_sec < 0:
                    raise e

    def rmtree(self, path):
        """Delete the directory rooted at path, whether empty or not."""
        shutil.rmtree(path, ignore_errors=True)

    def copytree(self, source, destination):
        shutil.copytree(source, destination)

    def split(self, path):
        """Return (dirname, basename + '.' + ext)"""
        return os.path.split(path)

    def splitext(self, path):
        """Return (dirname + os.sep + basename, '.' + ext)"""
        return os.path.splitext(path)

    def compare(self, path1, path2):
        return filecmp.cmp(path1, path2)

Create a Python script that produces a bar chart of the top 10 global languages.  import matplotlib.pyplot as plt
 
# Data to plot
languages = ['English', 'Chinese', 'Hindi', 'Spanish', 
             'Arabic', 'Portuguese', 'Russian', 'Japanese', 
             'German', 'French']
counts = [1.25, 1.21, 0.558, 0.455, 0.347, 0.336, 0.310, 
          0.282, 0.242, 0.220]
 
# Generate the bar chart
plt.bar(languages, counts, align='center', color='green', alpha=0.5)
plt.title('Top 10 Global Languages')
plt.xlabel('Language')
plt.ylabel('Number of Speakers (in billions)')
plt.show()
Develop a Python program to print the first 20 Armstrong numbers  for num in range(1,21):
   sum = 0
   temp = num
   while temp > 0:
       digit = temp % 10
       sum += digit ** 3
       temp //= 10
   if num == sum:
       print(num)
Implement a gradient descent algorithm for a classification task in Python.  def grad_descent_classifier(input_data, weights, learning_rate):
 
    # finding the gradient of our weights w.r.t to cost function
    N = len(input_data)
    grad = np.zeros(weights.shape)
 
    error = 0
    # looping through each training datapoint
    for i in range(N):
        x = input_data[i]
        y = input_data[i][-1]
 
        # calculating the error
        error += (np.dot(x, weights)-y)**2
 
        # update grad
        for j in range(len(x)):
            grad[j] += -(2/N)*(y-np.dot(x,weights))*x[j]
 
    # updating the weights
    weights = weights - learning_rate*grad
 
    # return the weights
    return weights
Write a function that takes in two strings, compares them, and returns the longer string. String 1: Python
String 2: C++ def compareLongestString(str1, str2):
 
  if len(str1) > len(str2):
   longestString = str1
  elif len(str2) > len(str1):
   longestString = str2
  else:
   longestString = "Strings have the same length"

  return longestString

print(compareLongestString("Python", "C++"))
Create unit tests for a Python function that adds two numbers. Not applicable import unittest

def add_two_numbers(a, b):
 return a + b

class TestAddTwoNumbers(unittest.TestCase):
 def test_add_two_numbers_positive(self):
  result = add_two_numbers(1, 2)
  self.assertEqual(result, 3)

 def test_add_two_numbers_negative(self):
  result = add_two_numbers(-1, -2)
  self.assertEqual(result, -3)

if __name__ == '__main__':
 unittest.main()
Generate a Dataframe in Python The table should have three columns - name, age, gender
Example data: 
John, 24, Male
Sarah, 32, Female import pandas as pd

data = [('John', 24, 'Male'), 
        ('Sarah', 32, 'Female')] 
  
# Create the pandas DataFrame 
df = pd.DataFrame(data, columns = ['Name', 'Age', 'Gender']) 
  
print(df)
Generate a Python function that takes a dictionary as an argument and returns an inverted dictionary. Not applicable def invert_dictionary(d):
 inverted_d = {}

 for key, value in d.items():
 if value not in inverted_d:
 inverted_d[value] = []
 inverted_d[value].append(key)

 return inverted_d
Given input and output examples, create a classification model in Python that can predict the output for a given input. Inputs: [1, 2, 3] 
Outputs: [2, 4, 6] def pred_model(inputs): 
  outputs=[]
  for i in inputs:
    outputs.append(i*2)
  return outputs
 
inputs = [1,2,3] 
outputs = pred_model(inputs) 
print("Outputs:", outputs)
Write a query to perform a sentiment analysis using Natural Language Processing in SQL Table containing tweets with three columns - Tweet ID, tweet body and sentiment score. SELECT
    TweetID,
    TweetText, 
    sentimentScore
FROM
    TweetTable
WHERE
    sentimentScore = FN_SentimentAnalysis(TweetText);

FN_SentimentAnalysis(input VARCHAR)
AS 
BEGIN
    DECLARE @Result int;

    EXEC sp_execute_external_script  
        @language = N'python',  
        @script = N'import nltk
                    from nltk.sentiment.vader import SentimentIntensityAnalyzer
                    nltk.download("vader_lexicon")
                    sid = SentimentIntensityAnalyzer()
                    output_data_1 = sid.polarity_scores(InputDataSet.inputvalue)["compound"]', 
        @input_data_1 = N'SELECT @Input as inputvalue',
        @params = N'@Result INT OUTPUT',
        @Result = @Result OUTPUT;  

    RETURN @Result;
END;
Write a Python program that creates a dictionary of emails and passwords based on the given input. A list of emails and passwords:
[
    ('John', 'j12345'),
    ('Adam', 'a12345'),
    ('Alex', 'a54321')
] def create_email_password_dict(data):
 email_password_dict = {}
 for name, password in data:
 email_password_dict[name.lower() + '@example.com'] = password
 return email_password_dict

email_password_dict = create_email_password_dict(information)
Design a Python dictionary for storing data about countries and their corresponding capital cities.  countries_cities = {
    "UK": "London", 
    "France": "Paris", 
    "Spain": "Madrid", 
    "Germany": "Berlin", 
    "Italy": "Rome"
    }
Construct a while loop that executes 20 times in Python.  i = 0

while i < 20:
    # do something useful
    i += 1
Write a function in Python to determine the largest number in a given array.  def get_largest_number(numbers):
    largest_number = numbers[0]
    for number in numbers:
        if number > largest_number:
            largest_number = number
    return largest_number
Write a Python program to find the sum of all the divisors of a given integer. 90 def calculate_sum_divisors(n):
    total_sum = 0
    for i in range(1, n + 1):
        if n % i == 0:
            total_sum += i
    return total_sum
 
print(calculate_sum_divisors(90))
Detect opaque predicates in x86 assembly code traces using TritonContext library in Python. The code includes 5 different traces, each with a different set of instructions. The output of the code includes the disassembly of each instruction in the trace and whether it is an opaque predicate or not. Opaque predicates are identified using the Triton.getPathPredicate() function and checking if the condition is always taken or never taken.  #!/usr/bin/env python3
## -*- coding: utf-8 -*-
##
## Example to detect opaque predicates. This example is based
## on the Tomislav Zubcic's blog post [0,1] =).
##
## Output:
##
##  $ python3 proving_opaque_predicates.py
##  xor eax, eax
##  jo 7
##  opaque predicate: never taken
##  ----------------------------------
##  xor eax, eax
##  je 7
##  opaque predicate: always taken
##  ----------------------------------
##  xor eax, ebx
##  je 7
##  not an opaque predicate
##  ----------------------------------
##  and eax, 0x3fffffff
##  and ebx, 0x3fffffff
##  xor ecx, edx
##  xor edx, edi
##  add eax, ebx
##  jo 0x16
##  opaque predicate: never taken
##  ----------------------------------
##  and eax, 0x3fffffff
##  and ebx, 0x3fffffff
##  xor ecx, edx
##  xor edx, edi
##  xor eax, ebx
##  je 0x16
##  not an opaque predicate
##  ----------------------------------
##
## [0] http://zubcic.re/blog/experimenting-with-z3-proving-opaque-predicates
## [1] https://www.reddit.com/r/ReverseEngineering/comments/4yf6tz/experimenting_with_z3_proving_opaque_predicates/
##
## -- jonathan

from __future__ import print_function
from triton     import TritonContext, ARCH, Instruction

import sys

trace_1 = [
    b"\x31\xC0",                  # xor eax, eax
    b"\x0F\x80\x01\x00\x00\x00",  # jo 7
]

trace_2 = [
    b"\x31\xC0",                  # xor eax, eax
    b"\x0F\x84\x01\x00\x00\x00",  # je 7
]

trace_3 = [
    b"\x31\xD8",                  # xor eax, ebx
    b"\x0F\x84\x01\x00\x00\x00",  # je 7
]

trace_4 = [
    b"\x25\xff\xff\xff\x3f",      # and eax, 0x3fffffff
    b"\x81\xe3\xff\xff\xff\x3f",  # and ebx, 0x3fffffff
    b"\x31\xd1",                  # xor ecx, edx
    b"\x31\xfa",                  # xor edx, edi
    b"\x01\xd8",                  # add eax, ebx
    b"\x0f\x80\x10\x00\x00\x00",  # jo 27
]

trace_5 = [
    b"\x25\xff\xff\xff\x3f",      # and eax, 0x3fffffff
    b"\x81\xe3\xff\xff\xff\x3f",  # and ebx, 0x3fffffff
    b"\x31\xd1",                  # xor ecx, edx
    b"\x31\xfa",                  # xor edx, edi
    b"\x31\xD8",                  # xor eax, ebx
    b"\x0F\x84\x10\x00\x00\x00",  # je 16
]

Triton = TritonContext()


def symbolization_init():
    Triton.symbolizeRegister(Triton.registers.eax)
    Triton.symbolizeRegister(Triton.registers.ebx)
    Triton.symbolizeRegister(Triton.registers.ecx)
    Triton.symbolizeRegister(Triton.registers.edx)
    return

def test_trace(trace):
    Triton.setArchitecture(ARCH.X86)
    symbolization_init()

    astCtxt = Triton.getAstContext()

    for opcode in trace:
        instruction = Instruction()
        instruction.setOpcode(opcode)
        Triton.processing(instruction)
        print(instruction.getDisassembly())

        if instruction.isBranch():
            # Opaque Predicate AST
            op_ast = Triton.getPathPredicate()
            # Try another model
            model = Triton.getModel(astCtxt.lnot(op_ast))
            if model:
                print("not an opaque predicate")
            else:
                if instruction.isConditionTaken():
                    print("opaque predicate: always taken")
                else:
                    print("opaque predicate: never taken")

    print('----------------------------------')
    return

if __name__ == '__main__':
    test_trace(trace_1)
    test_trace(trace_2)
    test_trace(trace_3)
    test_trace(trace_4)
    test_trace(trace_5)
    sys.exit(0)

This code is a Python script that provides a command-line interface to download subtitles for movies and TV shows. To use it, run the script and provide one or more release paths as arguments. You can also specify the language and subtitle site to use. The available commands are "download", "exist", "test", "list", "help", and "version".  #!/usr/bin/env python
#-*- coding:utf-8 -*-
########################################################
# Name: Subtitles Client
# Site: http://RealGame.co.il
__author__ = 'RealGame (Tomer Zait)'
__license__ = 'GPL v3'
__version__ = '1.0'
__email__ = 'realgam3@gmail.com'
########################################################

from os import path
from sys import argv
from docopt import docopt

from engines.engine import SubtitleSite, SUBTITLE_SITE_LIST, DEFAULTS


__doc__ = \
"""
Subtitles Client

Usage:
  {prog} download <releases_path>... [--lang=<language> --engine=<subtitle_site>...]
  {prog} exist <releases_path>... [--lang=<language> --engine=<subtitle_site>...]
  {prog} test [<engines>...]
  {prog} (-l | --list)
  {prog} (-h | --help)
  {prog} (-v | --version)

Options:
  -l --list                 Show subtitles engine list.
  -h --help                 Show this screen.
  -v --version              Show version.
  --lang=<language>         Subtitle language (alpha2) [default: {def_language}].
  --engine=<subtitle_site>  Subtitle site              [default: {def_engine}].
""".format(prog=path.basename(argv[0]),
           def_language=DEFAULTS['subtitle_language'],
           def_engine=DEFAULTS['subtitle_engine'])


def download_subtitles(releases, engines=[DEFAULTS['subtitle_engine']], lang=DEFAULTS['subtitle_language']):
    if releases:
        for release in releases:
            for engine in engines:
                subtitle_release = SubtitleSite.get_file_properties(release)['release_name']
                print "[{engine: ^15}] Trying To Download Subtitles For: '{release}'".format(engine=engine,
                                                                                             release=subtitle_release)
                sub_obj = SubtitleSite.class_factory(engine)
                subtitle_path = sub_obj.download_subtitle(release, lang)
                if subtitle_path:
                    print "{0:17} Download Success: ({file_path}).\n".format("", file_path=subtitle_path)
                else:
                    print "{0:17} Subtitles Not Found.\n".format("")


def is_subtitles_exist(releases, engines=[DEFAULTS['subtitle_engine']], lang=DEFAULTS['subtitle_language']):
    if releases:
        for release in releases:
            for engine in engines:
                subtitle_release = SubtitleSite.get_file_properties(release)['release_name']

                sub_obj = SubtitleSite.class_factory(engine)
                exist_flag = sub_obj.is_subtitle_exist(release, lang)
                res = "Exist"
                if not exist_flag:
                    res = "Does Not " + res
                print "[{engine: ^15}] '{release}' - {res}.".format(engine=engine,
                                                                    release=subtitle_release,
                                                                    res=res)


def test_engines(engines):
    if not engines:
        engines = SUBTITLE_SITE_LIST.keys()

    for engine_key in engines:
        t = SubtitleSite.class_factory(engine_key)
        t.test_engine()


def main():
    args = docopt(__doc__, help=True, version='Subtitles Client %s' % __version__)

    if args['download']:
        download_subtitles(args['<releases_path>'], args['--engine'], args['--lang'])
    elif args['exist']:
        is_subtitles_exist(args['<releases_path>'], args['--engine'], args['--lang'])
    elif args['test']:
        test_engines(args['<engines>'])
    elif args['--list']:
        for sub_site in SUBTITLE_SITE_LIST.keys():
            sub_dict = SUBTITLE_SITE_LIST.get(sub_site)
            print sub_dict.get('class_name')


if __name__ == "__main__":
    main()

Create a Python function to replace a specific character in a string? string = "Hello World"
character = "l"
replacement = "X" def replace_char(string, character, replacement):
   return string.replace(character, replacement)

string = "Hello World"
character = "l"
replacement = "X"
print(replace_char(string, character, replacement))
Create a method in Python to encode a given string using Base64 encoding technique.  import base64

def encode_string(string):
    encoded_string = base64.b64encode(string.encode('utf-8'))
    return encoded_string
Create a Python function that validates a given string is a valid email address.  def validate_email(email):
    # check if the email address is valid or not

    if '@' not in email:
        return False
    if '.' not in email:
        return False
    username = email.split('@')[0]
    domain = email.split('@')[1]
    if username == "" or domain == "":
        return False
    return True
Develop a neural network model in Python to predict the output for the folowwing input data. Inputs: [1, 0, 1]
Output: 0 import numpy as np
from keras.layers import Dense
from keras.models import Sequential

# Prepare training data
X = np.array([[1, 0, 1]])
y = np.array([0])

# Create model
model = Sequential()
model.add(Dense(3, input_dim=3, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
model.fit(X, y)

# Predict output
pred = model.predict(X) 
print(pred)
Generate a python script that replaces each character in a string with its reverse: string = 'Hello World' def reverseString(string):
    n = len(string) 
    # create an empty array
    revString = [0 for i in range(n)] 
  
    for i in range(n):
        revString[n-i-1] = string[i] 
  
    return "(" + ''.join(revString) + ")"
print(reverseString("Hello World"))
Implement a 'boggle_checker' function in Python 3 that takes in a 4x4 board and returns a list of all words present on the board. boggle_board = [
['a', 'b', 'c', 'd'],
['x', 'o', 'n', 'e'],
['q', 'u', 'i', 't'],
['z', 'y', 'p', 's'],
] def boggle_checker(board):
    current_words = []
    # loop through all characters on board
    for row_i, row in enumerate(board):
        for col_i, col in enumerate(row):
            # look up in dictionary for all words starting at this character
            current_words.extend(get_words(board, row_i, col_i))

    # remove duplicates
    final_words = list(set(current_words))

    return final_words

def get_words(board, row_i, col_i):
    words = []
    # recursive dfs to form all words
    get_words_rec(board, row_i, col_i, [], words)
    return words

def get_words_rec(board, row_i, col_i, current_word, words):
    # base case when at the edge of board
    if row_i < 0 or col_i < 0 or row_i > 3 or col_i > 3:
        return

    current_char = board[row_i][col_i]
    # check if the current path lies in the dictionary
    if is_word("".join(current_word + [current_char])):
        words.append("".join(current_word + [current_char]))

    # explore all surrounding cells
    board[row_i][col_i] = None
    get_words_rec(board, row_i - 1, col_i, current_word + [current_char], words)
    get_words_rec(board, row_i + 1, col_i, current_word + [current_char], words)
    get_words_rec(board, row_i, col_i - 1, current_word + [current_char], words) 
    get_words_rec(board, row_i, col_i + 1, current_word + [current_char], words)
    board[row_i][col_i] = current_char

def is_word(word):
    # dummy function that checks if a word lies in the dictionary
    return True
Create a web server in Python that can handle HTTP requests and provide an appropriate response like an HTML page. Not applicable import http.server

PORT = 8080

server_address = ('localhost', PORT)

with http.server.HTTPServer(server_address, http.server.CGIHTTPRequestHandler) as httpd:
    print('Serving HTTP on port {0} ...'.format(PORT))
    httpd.serve_forever()
Edit the given Python code to print the multiplication table for given number. number = 5 number = 5
for i in range(1, 11): 
    print(number, 'x', i, '=', number*i)
Generate a Python program to find the distinct pair of the numbers whose product is equal to a given number. product = 24 def distinct_pair(product):
    pairs = []
    for i in range(1,product):
        if product % i == 0:
            pairs.append((i,product//i))

    return set(pairs)
Edit the following program written in Python in order to remove None from the list. lst = ['a', 'b', None, 'c'] lst = [x for x in lst if x is not None]
Modify this given Python code to handle inputs of any size def sum_digits(num):
    total = 0
    while num > 0:
        total += num % 10
        num //= 10
    return total def sum_digits(num):
    total = 0
    while num != 0:
        total += num % 10
        num //= 10
    return total
Develop a web scraper in Python to download a list of educational videos from YouTube.  # Import the necessary libraries
import requests
from bs4 import BeautifulSoup
import urllib.parse

# Make a GET request
r = requests.get('https://www.youtube.com/results?search_query=' + urllib.parse.quote('educational videos'))

# Parse the HTML page
soup = BeautifulSoup(r.text, 'html.parser')
videos = soup.find_all('h3', {'class': 'yt-lockup-title'})

# Save the links
links = [video.find('a')['href'] for video in videos]

# Download the videos
for link in links:
    r = requests.get(link)
    with open('video.mp4', 'wb') as f:
        f.write(r.content)
Create a Python program to reformat a JSON string, preserving indentation and enforcing the order in which members appear. json_string = '{"fruit": ["apple", "banana", "cherry"], "vegetable": ["carrot", "potato", "onion"]}' import json
 
def reformat_json(json_string):
    return json.dumps(json.loads(json_string), indent=4, sort_keys=True)
Using the input as a guide, modify the following Python code to generate a new list containing integers which are divisible by 5 in the input list. lst = [5, 10, 15, 20, 25, 30] lst = [5, 10, 15, 20, 25, 30]

divisible_by_5 = [num for num in lst if num%5 == 0]
print(divisible_by_5)
Design a logic in Python to check if two numbers are divisible by each other. 15, 30 def isDivisible(a, b):
    return a % b == 0
In Python, write a code to validate an IPv4 address.  import re

def validate_ipv4_address(ip):
  """Validates an IPv4 address."""
  pattern = re.compile(r"^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$")
  return True if pattern.match(ip) else False

if __name__ == "__main__":
  ip = '1.2.3.4'
  valid = validate_ipv4_address(ip)
  print(valid)
Write a Python function to generate the concatenation of two inputs strings. string1 = "Hello "
string2 = "World!" def concatenate_string(string1, string2):
    return string1 + string2

string1 = "Hello "
string2 = "World!"

concatenated_string = concatenate_string(string1, string2)
print(concatenated_string)
Can you provide a machine learning algorithm in Python that performs sentiment analysis on a given text? Text: "This product is simply incredible!" from nltk.sentiment.vader import SentimentIntensityAnalyzer

sentences = ["This product is simply incredible!"]

analyzer = SentimentIntensityAnalyzer()

for sentence in sentences:
    scores = analyzer.polarity_scores(sentence)
    print("{:-<40} {}".format(sentence, str(scores)))
Create a background job in Python to run every 5 minutes.  # Importing the necessary module
import schedule

# Defining the job
def job():
    print("Job executed!")

# Scheduling the job to run every 5 minutes
schedule.every(5).minutes.do(job)

# Running the job
while True:
    schedule.run_pending()
Create a python program to send an email using smtplib.  import smtplib

def send_email():
    # Enter your email details here
    email_address = 'myemail@example.com'
    email_password = 'my_password'
    to_address = 'recipient@example.com'

    # Create a smtplib server
    server = smtplib.SMTP('smtp.gmail.com',587)
    server.ehlo()
    server.starttls()
    server.login(email_address, email_password)

    # Create the message
    message = """\
    Subject: Test Email

    This is a test email.
    """

    # Send the email
    server.sendmail(email_address, to_address, message)
    server.quit()

if __name__ == '__main__':
    send_email()
Create a Python program that takes a string as input and prints out the words with more than 4 characters A brown fox jumped over a lazy dog # Python program to print words 
# with more than 4 characters 
  
# Function to print words with more than 4 characters 
def print_words(string): 
  
    # split the string 
    words = string.split(' ') 
  
    # iterate in words list at the same time 
    for word in words: 
  
        # if length of word is more than 4 
        if len(word) > 4: 
  
            # print the word 
            print(word) 
  
  
# driver code 
if __name__ == '__main__': 
    string = 'A brown fox jumped over a lazy dog'
    print_words(string)
Suggest a program to convert Celsius to Fahrenheit and vice versa using Python.  def celsius_to_fahrenheit(celsius):
    return celsius * 9 / 5 + 32 

def fahrenheit_to_celsius(fahrenheit):
    return (fahrenheit - 32) * 5 / 9
Develop a program using Python to process a PDF document.  import PyPDF2

# open the PDF file
pdf_file = open('sample.pdf', 'rb')

# create a PDF reader object
pdf_reader = PyPDF2.PdfFileReader(pdf_file)

# get the number of pages
num_pages = pdf_reader.numPages

# iterate over all pages
for page_num in range(num_pages):
    # get the page
    page = pdf_reader.getPage(page_num)
    # extract text
    text = page.extractText()
    print(text)
Create a Python program that fetches the user's current time and sets a reminder after 30 minutes.  import time

def set_reminder_in_minutes(minutes):
    """ Fetches the user's current time and sets a reminder after the given minutes """
    current_time = time.time() 
    reminder_time = current_time + minutes * 60

    # Set the reminder
    # ... 
    
if __name__ == "__main__":
    set_reminder_in_minutes(30)
Generate a Python function that, given two strings, will return the number of matches between the strings.  def string_matches(string1, string2): 
    matches = 0
    for i in range(len(string1)): 
        if string1[i] == string2[i]: 
            matches += 1
    return matches
Create a Python function to sort a list of tuples by the second item in the tuple. my_list = [('a', 3), ('b', 2), ('c', 1)] def sort_by_second_item(my_list): 
    return sorted(my_list, key = lambda x: x[1])
Create a machine learning model in Python that can predict the number of likes a post in a social media platform will get given its text content, shares count, and other additional information. text content: “I am going on a vacation next week! #vacation #excited” 
shares count: 25 
additional information: post published within the last 24 hours # Import the relevant libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

# Load the dataset
data = pd.read_csv('posts.csv')

# Preprocess the data
data['is_recent'] = data['date'] > (pd.datetime.now() - pd.Timedelta(days=1))

# Create the feature matrix and the target vector
X = data[['text_content', 'shares_count', 'is_recent']]
y = data['likes_count']

# Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions on test set
predictions = model.predict(X_test)

# Calculate the accuracy
accuracy = model.score(X_test, y_test)

print('Model accuracy:', accuracy)
Convert the following pseudocode into a python program. i = 0
j = 0
while i < 10:
    j += i
    i += 1 """
Convert the following pseudocode into a Python program
"""

i = 0
j = 0
while i < 10:
    j += i
    i += 1
    
print(j)
Write a Python class that takes two parameters and calculates the addition and multiplication of the two numbers and returns the result.  class Calculate:
    def __init__(self, a, b):
        self.a = a
        self.b = b

    def add(self):
        return self.a+self.b
        
    def multiply(self):
        return self.a*self.b

calc = Calculate(3,4) 
add = calc.add()
multiply = calc.multiply()
print("Addition result: {}".format(add))
print("Multiplication result: {}".format(multiply))
Write a Python function to get the nth number in the Fibonacci sequence. n = 5 def Fibonacci(n): 
 a = 0
 b = 1
 if n < 0: 
  print("Incorrect input") 
 elif n == 0: 
  return a 
 elif n == 1:
   return b 
else: 
  for i in range(2,n): 
   c = a + b 
   a = b 
   b = c 
 return b
Create a Python class to represent a bank account.  class BankAccount:
    def __init__(self, owner, balance):
        self.owner = owner
        self.balance = balance
        
    def deposit (self, amount):
        self.balance += amount
        return self.balance
        
    def withdraw (self, amount):
        self.balance -= amount
        return self.balance
Design an algorithm in Python that can identify duplicate items in a given array of integers. [1, 2, 3, 4, 5, 1, 5] # a function to find duplicate elements
def find_duplicate(arr):
 # save the elements in a set
 elements = set()
 
 # loop through the array
 for a in arr:
 # check if the element is already in the set
 if a in elements:
 # if yes, then it is a duplicate
 return a
 
 # if not, then add it to the set
 else:
 elements.add(a)
 
 # if we get here, then there are no duplicates
 return None

# define the array
arr = [1, 2, 3, 4, 5, 1, 5]

# get the duplicate element
duplicate = find_duplicate(arr)
print('Duplicate element:', duplicate)
Design a function in Python which takes a string and returns the string with the last word capitalized. mystring = "This is a simple string" def capitalize_last_word(mystring):
    words = mystring.split()
    words[-1] = words[-1].capitalize()
    return ' '.join(words)

result = capitalize_last_word(mystring)
print(result)
Generate a Python object literal from a dictionary. my_dict = {'a':1, 'b':2, 'c':3} my_obj = {
    'a': 1,
    'b': 2,
    'c': 3
}
Write a Python program to replace all the occurrences of one character with another in a given string. String: "Hello World!"
Character to replace: "l"
Character to replace with: "t" def replace_char(string, char_rep, char_rep_with):
    new_string = string.replace(char_rep, char_rep_with)
    return new_string

result = replace_char('Hello World!', 'l', 't')
print(result)
Write a Python script to generate a list of all possible 2D Point objects with coordinates between 1 and 10.  points = []
 
for x in range(1, 11):
    for y in range(1, 11):
        points.append([x, y])
 
print(points)
Create a python script to calculate the average of 10 numbers. 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 def calculate_avg(nums):
 sum = 0
 for num in nums:
 sum += num
 avg = sum/len(nums)
 return avg

numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(calculate_avg(numbers))
Implement a basic version control system in Python that keeps track of changes in the code.  class VersionControl:
    def __init__(self, lines):
        self.lines = lines
        self.mark = 0
 
    def commit(self):
        self.mark += 1
        log_file = open("log_file.txt", "a+")
        log_file.write(str(self.mark) + ": " + str(self.lines))
        log_file.close()
 
    def restore(self):
        log_file = open("log_file.txt", "r")
        lines = log_file.readlines()
        to_mark = self.mark-1
 
        self.lines = lines[to_mark]
        log_file.close()
Write a python script to generate a random 10 questions mathematics test. Not applicable import random

# list of operations used for generating questions
OPERATIONS = ['+', '-', '*', '/']

# function to generate a random number between 1 and 10
def generate_number():
 return random.randint(1, 10)

# function to generate a random two-operand mathematics question
def generate_question():
 num1 = generate_number()
 num2 = generate_number()
 op = random.choice(OPERATIONS)
 
 quest = f'{num1} {op} {num2} = '
 
 return quest

# function to generate 10 random mathematics questions
def generate_test():
 questions = []
 
 for _ in range(10):
 questions.append(generate_question())
 
 return questions

# generating a 10 questions mathematics test
test = generate_test()

for question in test:
 print(question)
Write a Python program for linear regression using gradient descent. A 2-dimensional sample dataset:
X = [1, 2, 3, 4]
Y = [2, 7, 3, 8] import numpy as np

def gradient_descent(x, y, alpha, num_iters):
    
    # Initialize theta
    theta = np.ones(x.shape[1]) 
    m = len(y)
    J_history = list()
    
    # Perform Gradient Descent
    for _ in range(num_iters):
        # Compute Hypothesis
        h = np.dot(x, theta)
        
        # Compute errors
        error = h - y
        
        # Compute gradient
        grad = np.dot(x.T, error) / m
        
        # Update theta
        theta = theta - alpha * grad
        
        # Save cost function
        J_history.append(calculate_cost(h, y))
    
    return theta, J_history


def calculate_cost(h, y):
    m = len(y)
    return np.sum(np.power(h-y, 2)) / (2*m)
Translate the given Bash shell script to Python. #!/bin/bash
echo "Hello World!" print("Hello World!")
Write a Python function to check if two given strings are anagrams or not. An anagram is two phrases or sentences that use the same exact letters and line up one letter to another.  def is_anagram(str1, str2): 
 
	# Get oder of the strings  
	str1_order = sorted(str1)  
	str2_order = sorted(str2)  
	  
	# Compare the order of strings  
	if (str1_order == str2_order):  
		return True  
	return False
Write a function in Python to display all the words beginning with a given alphabet in a given string. str = "This is a sample sentence" def all_words_beginning_with(str, alphabet):
  words = str.split()
  result = []
  for word in words:
    if word[0].upper() == alphabet.upper():
      result.append(word)
  
  return result
Create a Python code snippet that uses a try-except statement to capture an IndexError. Not applicable try:
 my_list = [1, 2, 3]
 print(my_list[4])
except IndexError as e:
 print('Index not found!')
Modify an existing Python function to eliminate any redundancies def just_me(name):
    print("Hi, my name is "+name+".")
    print("I am special and nothing else matters.")
    print("What about you?") def just_me(name):
    print("Hi, my name is "+name+". I am special and nothing else matters.")
    print("What about you?")
Create a Python function that shuffles an array of numbers.  import random

def shuffle_array(arr):
    random.shuffle(arr)
    return arr
Develop an algorithm in Python to predict the category of a sentence. This movie is a classic drama. def sentence_category_predictor(sentence):
    #split up sentence into words
    words = sentence.split()
    #initialize a counter for each category
    count_drama = 0
    count_comedy = 0
    count_thriller = 0
    #loop over words to get counts of each category
    for word in words:
        if word in drama_words:
            count_drama += 1
        if word in comedy_words:
            count_comedy += 1
        if word in thriller_words:
            count_thriller += 1
    #compare counts and return category with highest count
    max_count = max(count_drama, count_comedy, count_thriller)
    if max_count == count_drama:
        return "drama"
    if max_count == count_comedy:
        return "comedy"
    else:
        return "thriller"

#calling the function
category = sentence_category_predictor("This movie is a classic drama.")
print("The sentence falls under the category:", category)
Write a Python program to find all prime numbers less than a given number.  def find_primes(n): 
    primes = []
    for i in range(2, n+1):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    
    return primes

print(find_primes(10)) # prints [2, 3, 5, 7]
Create a basic chatbot in Python using spaCy for understanding natural language and responding to user queries. None. import spacy

nlp = spacy.load('en')

# Define a function to respond to user queries
def respond(user_input):
    doc = nlp(user_input)
    response = []
    # Identify the intent of the user input
    for token in doc:
        if token.dep_ == "ROOT":
            intent = token.text
    # Respond based on the intent
    if intent == "hello":
        response.append("Hi there!")
    elif intent == "goodbye":
        response.append("Nice to talk to you. Bye!")
    else:
        response.append("I'm sorry. I didn't understand.")
    
    return response

user_input = 'hello'
response = respond(user_input)
print(response)
Write an algorithm in Python for searching through a large collection of text documents and printing out the documents containing a specified keyword. collection = ["this is document one", "document two is about animals", "here is another document", "the final document"]
keyword = "document" def search(collection, keyword):
 found = []
 for document in collection:
  if keyword in document:
   found.append(document)
 return found
 
results = search(collection, keyword)

for result in results:
 print(result)
Create an Alexa skill that displays the current weather in Riyadh. Not applicable import boto3

# create an Alexa skill using Python SDK
def handler(event, context):
 # get the current weather in Riyadh
 weather = get_weather("Riyadh")

 # craft the speech response
 speech_response = f"The current weather in Riyadh is {weather}"

 # return the response
 return {
  "version": "1.0",
  "response": {
   "outputSpeech": {
    "type": "PlainText",
    "text": speech_response,
   },
  },
 }

# function to get current weather from a given city using AWS
def get_weather(city):
 client = boto3.client('weather')
 response = client.get_weather(City=city)
 return response['Weather']
Create a Python function that takes in a list and prints a dictionary with the elements and the product of each element. list = [7, 8, 5] def product_of_list(list):
    output = {}
    for element in list:
        output[element] = element * element
    return output

print(product_of_list([7, 8, 5]))
Design an algorithm in Python that prints out all the prime numbers up to a certain number. n = 15 def is_prime(n):
  if n == 1:
    return False

  for i in range(2, int(n ** 0.5) + 1):
    if n % i == 0:
      return False
   
  return True

def get_prime_numbers(n):
  result = []
  for num in range(2, n+1):
    if is_prime(num):
      result.append(num)
  return result

prime_numbers = get_prime_numbers(15)
print(prime_numbers)
Create a web scraper in Python to collect data from Amazon. The script should extract product category, title, price, and rating from the Amazon home page. Not applicable from bs4 import BeautifulSoup
import requests

# specify url
url = 'https://www.amazon.com/'

# query the website and return the html to the variable 'page'
page = requests.get(url)

# parse the html using beautiful soup and store in variable `soup`
soup = BeautifulSoup(page.content, 'html.parser')

# select all products
products = soup.find_all(class_='s-result-item')

# iterate through each product
for product in products:
 category = product.find('h3').text
 title = product.find(attrs={'class':'a-size-medium a-color-base a-text-normal'}).text
 price = product.find(attrs={'class':'a-price-whole'}).text
 rating = product.find(attrs={'class':'a-icon-alt'}).text

# print results
print('Category:', category);
print('Title:', title);
print('Price:', price);
print('Rating:', rating);
Write a python class to represent a Person. The Person class will have name and age properties as well as a method that prints the name and age.  class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    
    def print_person(self):
        print('Name:', self.name, ', Age:', self.age)
This code sets up an argument parser with default values for several arguments. It then imports extra variables and a model from a package, and sets some variables based on the arguments. It then sets up data generators and an adversary, if specified in the arguments. Finally, it trains a classifier and/or adversary based on the arguments. To use this code, run it with the desired arguments.  #!/usr/bin/env python2.7

from argparse import ArgumentParser
parser = ArgumentParser()
parser.add_argument('--nepoch',type=int,default=20)
parser.add_argument('--version',type=int,default=4)
parser.add_argument('--trunc',type=int,default=7)
parser.add_argument('--limit',type=int,default=100)
parser.add_argument('--adv',type=str,default=None)
parser.add_argument('--train_baseline',action='store_true')
args = parser.parse_args()

import extra_vars
from subtlenet.models import particles as train
from os import path

train.NEPOCH = args.nepoch
train.VERSION = str(args.version) + '_Adam'
#train.OPTIMIZER = 'RMSprop'
data, dims = train.instantiate(args.trunc, args.limit)

clf_gen = train.setup_data(data)
adv_gen = train.setup_adv_data(data)


if args.adv == 'emd':
    opts = {
            'loss' : train.emd,
            'scale' : 0.1,
            'w_clf' : 0.001,
            'w_adv' : 100,
            }
elif args.adv == 'mse':
    opts = {
            'loss' : args.adv,
            'scale' : 0.03,
            'w_clf' : 0.001,
            'w_adv' : 0.1,
            }
else:
    opts = {
            'loss' : args.adv,
            'scale' : 0.1,
            'w_clf' : 0.001,
            'w_adv' : 1,
            }

clf = train.build_classifier(dims)
if args.adv is not None:
    adv = train.build_adversary(clf=clf, **opts)

preload = '%s/%s/baseline_best.h5'%(train.MODELDIR, train._APOSTLE)
if path.isfile(preload):
    print 'Pre-loading weights from',preload
    tmp_ = train.load_model(preload)
    clf.set_weights(tmp_.get_weights())
if args.train_baseline or not(path.isfile(preload)):
    train.train(clf, 'baseline', clf_gen['train'], clf_gen['validation'])

if args.adv:
    print 'Training the full adversarial stack:'
    callback_params = {
            'partial_model' : clf,
            'monitor' : lambda x : opts['w_clf'] * x.get('val_y_hat_loss') - opts['w_adv'] * x.get('val_adv_loss'), # semi-arbitrary
            }
    train.train(adv, args.adv, adv_gen['train'], adv_gen['validation'], callback_params)

Design a class in Python 3 called "Animal" which will contain the following methods:  class Animal:
    def __init__(self, name):
        self.name = name
    
    def move(self):
        print(f"{self.name} is moving")
    
    def eat(self):
        print(f"{self.name} is eating")
    
    def sleep(self):
        print(f"{self.name} is sleeping")
Generate a Python function for finding the maximum consecutive sum of a list of numbers.  def max_consecutive_sum(numbers):
    """
    Finds the maximum consecutive sum of a list of numbers. 
    
    Args:
        numbers (list of ints): The list of numbers.
    
    Return:
        int: The maximum consecutive sum.
    """

    # Set the initial maximum sum
    max_sum = float('-inf')

    # Iterate through the numbers and find the maximum sum
    running_sum = 0
    for number in numbers:
        running_sum += number
        if running_sum > max_sum:
            max_sum = running_sum
        if running_sum < 0:
            running_sum = 0
    
    return max_sum
Create a function named `parse_file` that takes a parameter named `datafile`. The function should read the input `datafile` line by line, and for the first 10 lines (not including the header) split each line on "," and then for each line, create a dictionary where the key is the header title of the field, and the value is the value of that field in the row. The function should return a list of dictionaries, each data line in the file being a single list entry. Field names and values should not contain extra whitespace, like spaces or newline characters. You can use the Python string method `strip()` to remove the extra whitespace. The returned list should have 10 entries. Finally, write a test function named `test` that tests the implementation of the `parse_file` function.  # Your task is to read the input DATAFILE line by line, and for the first 10 lines (not including the header)
# split each line on "," and then for each line, create a dictionary
# where the key is the header title of the field, and the value is the value of that field in the row.
# The function parse_file should return a list of dictionaries,
# each data line in the file being a single list entry.
# Field names and values should not contain extra whitespace, like spaces or newline characters.
# You can use the Python string method strip() to remove the extra whitespace.
# You have to parse only the first 10 data lines in this exercise,
# so the returned list should have 10 entries!
import os

DATADIR = ""
DATAFILE = "beatles-diskography.csv"


# -*- coding: utf-8 -*-

def parse_file(datafile):
    data = []
    with open(datafile, "r") as f:
        cnt = 0
        key_list = []
        value_list = []
        for line in f:
            #print line
            if cnt == 0:
                key_list = line.strip().split(',')
            else:
                value_list = line.strip().split(',')
            if cnt != 0:
                data_dict = {}
                for i in xrange(len(key_list)):
                    data_dict[key_list[i]] = value_list[i]
                data.append(data_dict)
            cnt += 1
            if cnt > 10:
                break
    return data


def test():
    # a simple test of your implemetation
    datafile = os.path.join(DATADIR, DATAFILE)
    d = parse_file(datafile)
    firstline = {'Title': 'Please Please Me', 'UK Chart Position': '1', 'Label': 'Parlophone(UK)', 'Released': '22 March 1963', 'US Chart Position': '-', 'RIAA Certification': 'Platinum', 'BPI Certification': 'Gold'}
    tenthline = {'Title': '', 'UK Chart Position': '1', 'Label': 'Parlophone(UK)', 'Released': '10 July 1964', 'US Chart Position': '-', 'RIAA Certification': '', 'BPI Certification': 'Gold'}

    assert d[0] == firstline
    assert d[9] == tenthline

    
test()

Construct a Markov chain using Python to predict the next word in a sentence. Not applicable import random
 
# Build the Markov chain
def build_chain(data):
  chain = {}
 
  for i in range(len(data)-2):
    key = (data[i], data[i+1])
    value = data[i+2]
 
    if key in chain:
      chain[key].append(value)
    else:
      chain[key] = [value]
 
  return chain
 
# Generate the output
def generate_output(chain, seed):
  output = list(seed)
 
  while True:
    key = (seed[-2], seed[-1])
    if key not in chain:
      break
    value = random.choice(chain[key])
    output.append(value)
    seed = seed[1:] + [value]
   
  return ' '.join(output)
Make a program in Python  # print hello world
print("Hello World!")
Create a function in Python that takes a list as an argument and returns the sum of all the numbers in the list. [1, 2, 3, 4] def sum_list(nums):
    total = 0
    for num in nums:
        total += num
    return total
Create a Python script that automates the process of filling out a web form. Not applicable import requests

url = 'https://example.com'

# Set the form data  
data = {
  'field1': 'value1',
  'field2': 'value2',
  'field3': 'value3',
  'field4': 'value4'
}

# Send a POST request to the URL with the form data  
r = requests.post(url, data=data)

# Check the response code 
if r.status_code == 200: 
  print('Form submitted successfully.') 
else:
  print('Error submitting form.')
Write a python function to display the nth node of a singly linked list. head = ListNode(5), n = 2 class ListNode:
    def __init__(self, val):
        self.val = val
        self.next = None
    
def display_nth_node(head, n):
    index = 0
    current_node = head
    while current_node and index<n:
        index += 1
        current_node = current_node.next
    if current_node is None:
        return None
    else:
        return current_node.val

head = ListNode(5)
displayed_node = display_nth_node(head, 2)
print(displayed_node) # None
Write a Python program to format a specified string to limit the number of characters to 6. string = "abcdefghijklmnopqrstuvwxyz" def limit_string(string):
    """Format the specified string to limit the number of characters to 6."""
    return string[:6]
Create a Python program that prints the words and their frequencies in a string. "This is a simple sentence containing multiple words." # Calculating frequency of each word in the given string
 
string = 'This is a simple sentence containing multiple words.'
 
# Splitting the string into words 
words = string.split()
 
# Initializing a dictionary
count = {} 

# Mapping every word with its frequency in counts
for word in words:
 count[word] = count.get(word, 0) + 1
 
# Printing the frequency each word
for word, frequency in count.items():
 print(f'{word}: {frequency}')

Output:
This: 1
is: 1
a: 1
simple: 1
sentence: 1
containing: 1
multiple: 1
words: 1
Generate a Python code to print the frequencies of the characters of a given string. "Hello World!" freq={}
for ch in "Hello World!":
 if ch in freq:
 freq[ch] +=1
 else:
 freq[ch] = 1

for key, value in freq.items():
 print("{}:{}".format(key,value))
Rewrite the following JavaScript string-manipulation function in Python. function fix_string(s) {
  s = s.replace(/\s/g, '');
  s = s.toLowerCase();
  s = s.split('').reverse().join('');
  return s;
} def fix_string(s): 
    s = s.replace(" ", "") 
    s = s.lower() 
    s = "".join(reversed(s)) 
    return s
Come up with a solution for the following Kaggle problem https://www.kaggle.com/c/house-prices-advanced-regression-techniques The solution involves using the Scikit-Learn library in Python to construct a regression model using the features provided in the House Prices Advanced Regression Techniques dataset. This model can then identify patterns in the data which will be used to predict the price of houses. Data pre-processing and feature engineering can also be  employed to increase the accuracy of the model.
Write a Python code to edit the given sentence by replacing all the '@' symbols with '#' symbols. Sentence: "This is a sentence with @ symbols." sentence = "This is a sentence with @ symbols."
sentence = sentence.replace('@', '#')
print(sentence) # This is a sentence with # symbols.
Write a Python script to generate all possible permutations of a set of input strings. ['a', 'b', 'c'] def permute(input):
 res = []
 for i in range(len(input)):
 for result in permute(input[:i] + input[i + 1:]):
 res.append([input[i]] + result)    
 return res

inputValues = ['a', 'b', 'c']
permutations = permute(inputValues)

for perm in permutations:
 print(perm)
Generate a Python program to convert a roman numeral to an integer. numeral = 'IX' def roman_to_int(romanStr):
    convMap = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}
    num = 0
    for i in range(0, len(romanStr)):
        if i+1 < len(romanStr) and convMap[romanStr[i]] < convMap[romanStr[i+1]]:
            num -= convMap[romanStr[i]]
        else:
            num += convMap[romanStr[i]]
    return num

numeral = 'IX'
print("Integer value of the Roman numeral {} is {}".format(numeral, roman_to_int(numeral)))
Remove the duplicates from a given array using Python data = [1, 3, 3, 4, 5, 6, 6, 7] def remove_duplicates(data):
    result = []
    for element in data:
        if element not in result:
            result.append(element)
    return result

print(remove_duplicates([1, 3, 3, 4, 5, 6, 6, 7]))
Write a script in Python to extract the title of a webpage from its HTML code. html = "<title>This is page title</title>" soup = BeautifulSoup(html, 'html.parser')
title = soup.find('title').text
print(title)
Write a Python program to search a list of strings for a given string. list = ["dog", "cat", "bird"]
target = "bird" list = ["dog", "cat", "bird"]
target = "bird"

for element in list:
    if element == target:
        print("Target string found: {}".format(target))
        break
Build an interactive chatbot in Python using the Chatterbot library. Not applicable from chatterbot import ChatBot
from chatterbot.trainers import ListTrainer

bot = ChatBot('Bot')
bot.set_trainer(ListTrainer)

conversation = [
    'Hello',
    'Hi there!',
    'What is your name?',
    'My name is Bot. Nice to meet you!'
]

bot.train(conversation)

while True:
    request = input('You: ')
    response = bot.get_response(request)
    print('Bot: ', response)
Refactor a Python program that prints a sports leaderboard to improve speed and accuracy. Example Python program:

scores = [12, 14, 16, 18, 20]
names = ["Ann", "Bob", "Carol", "Dave", "Ella"]

for i in range(len(scores)):
   print(f"{i+1}. {names[i]} - {scores[i]} points") scores = [12, 14, 16, 18, 20]
names = ["Ann", "Bob", "Carol", "Dave", "Ella"]

# create a dictionary with name-score pairs
leaderboard = {names[i]:scores[i] for i in range(len(scores))}

# sort the leaderboard by score
sorted_leaderboard = sorted(leaderboard.items(), key=lambda x: x[1], reverse=True)

# print the sorted leaderboard
for i, (name, score) in enumerate(sorted_leaderboard):
  print(f"{i+1}. {name} - {score} points")
Create a Python program to sort the list of colors in alphabetical order. ["red", "green", "blue"] colors = ["red", "green", "blue"]

#sorting in ascending order
desc_colors = sorted(colors)

print("Colors in alphabetical order:", desc_colors)
Create a Python function to evaluate a given expression using the PYEXPR language. expr = "2 + 3 * 4 - 8" def evaluateExpression(expr):
 result = 0
 expr = expr.replace(' ', '')
 tokens = expr.split('+')

 for token in tokens:
  terms = token.split('-')

  for term in terms:
   factors = term.split('*')

   for factor in factors:
    result += int(factor)

   if term.startswith('-'):
    result *= -1
  
  if token.startswith('+'):
   result += sum(terms)
  else:
   result -= sum(terms)

 return result

print(evaluateExpression(expr))  # 8
Using Python, generate a program to count the number of words in a given sentence. given_sentence = "This is a given sentence" def count_words(given_sentence):
    return(len(given_sentence.split()))

given_sentence = "This is a given sentence"
word_count = count_words(given_sentence)
print("Number of words in given sentence is: ", word_count)
Write a Python program to convert a string containing a number in base 8 to base 10. input_num='45' def conv(input_num):
    decimal_num = int(input_Num, 8)
    return decimal_num
Create a program in Python to ask the user for a number and then generate a list of prime numbers up to that given number  def find_prime_numbers(n):
    # Ask the user for a number
    user_input = int(input("Please enter a number: "))
    
    primes = []
    
    for i in range(2, user_input + 1):
        if is_prime(i):
            primes.append(i)
    
    return primes

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True
Create an algorithm in Python to determine if a set of numbers are all unique.  def is_unique(num_list):
    return len(num_list) == len(set(num_list))
Output a program in Python to find the most frequent occurring item in an array arr = [1,3,3,3,4,4,4,4,5,5] from collections import Counter

arr = [1,3,3,3,4,4,4,4,5,5]
data = Counter(arr)
get_mode = dict(data)
mode = [k for k, v in get_mode.items() if v == max(list(data.values()))]

print(f"Mode of the given list is {mode}")
Build a Python program that generates a list of prime numbers between a given range. 2, 11 # Function to generate prime numbers between the given range 
def generatePrimes(start, end):
    primeList = []

    for num in range(start, end + 1): 
        # all prime numbers are greater than 1
        if num > 1: 
            for i in range(2, num): 
                if (num % i) == 0: 
                    break   
            else: 
                primeList.append(num)

    return primeList
  
# Driver Code 
start, end =  2, 11

primeList = generatePrimes(start, end) 

print("Prime numbers between", start, "and", end,"are:") 
print(primeList)
Develop a Python program to filter out duplicate words in a given string. This is a test string with some duplicate words. def filter_duplicate_words(original_string):
  words = original_string.split(" ")
  filtered_words = []
  for word in words:
    if word not in filtered_words:
      filtered_words.append(word)
  return ' '.join(filtered_words)
Create a code snippet in Java to parse a comma-separated string into a list of strings. "Ruby,Python,JavaScript" String str = "Ruby,Python,JavaScript";
List<String> list = Arrays.asList(str.split(","));

// Output 
// [Ruby,Python,JavaScript]
Construct a web service using flask that takes a JSON payload and returns a response in the form of a python dictionary  from flask import Flask, request
import json

app = Flask(__name__)

@app.route('/web_service', methods=['POST'])
def web_service():
    json_payload = request.get_json()

    # Do stuff to manipulate the data
    # ...

    response_dictionary = {
        'key1': 'val1',
        'key2': 'val2',
    }

    return json.dumps(response_dictionary)


if __name__ == '__main__':
    app.run()
Implement a sorting algorithm in Python to sort letters of an alphabet.  def alphabet_sort(string):
    # Split the string into a list of chars
    chars = list(string)
    
    # Sort the list alphabetically
    chars.sort()
    
    # Join the list of chars
    return "".join(chars)
Write a Python program to define and execute a callback method.  def callback(a, b): 
    # perform calculation 
    return c 
  
# define a function to use for the callback 
def my_function(x): 
    return x*x 

result = callback(5, my_function) 
print(result)
Create a Python program to generate Random Strings with 5 characters  import random

def generate_random_str(): 
    char_set = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
    random_str = ''.join(random.sample(char_set, 5))

    return random_str
Create a Python program to calculate the number of times a word appears in a given sentence. sentence = "Hello World"
word = "Hello" count = sentence.count(word)
print(count)
Develop a neural network in Python model using Keras and TensorFlow to predict the rating of a given movie. Sample input feature vector: [2.7, 3735, 0.99, 8, 4000000] import numpy as np
import tensorflow as tf
from tensorflow import keras

# Input Feature Vector
X = np.array([[2.7, 3735, 0.99, 8, 4000000]])

# Build model
model = keras.Sequential()
model.add(keras.layers.Dense(64, input_dim=X.shape[1], activation='relu'))
model.add(keras.layers.Dropout(0.5))
model.add(keras.layers.Dense(64, activation='relu'))
model.add(keras.layers.Dropout(0.5))
model.add(keras.layers.Dense(1, activation='sigmoid'))

# Compile Model
model.compile(loss='mean_squared_error', optimizer='adam')

# Fit the model
model.fit(X, y, epochs=50, batch_size=10, shuffle=True)
Write a function in Python that takes two lists of strings as input, and returns a list of all strings that are common to both lists. list_1 = ['John', 'Paul', 'George', 'Ringo']
list_2 = ['Ringo', 'George', 'Pete', 'John'] def common_words(list_1, list_2):
 result = [word for word in list_1 if word in list_2]

 return result

# sample usage
common_words(list_1, list_2) # would return ['John', 'George', 'Ringo']
Write a machine learning algorithm in Python to find the nearest neighbors of a given point. point = [3, 4] from sklearn.neighbors import NearestNeighbors

def nearest_neighbors(point):
    neighbors = NearestNeighbors(n_neighbors=1).fit(point) 
    return neighbors.kneighbors([point], return_distance=False)[0]
Classify numbers into odd and even using Python. list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] odd_list = []
even_list = []

for x in list:
    if x % 2 == 0:
        even_list.append(x)
    else:
        odd_list.append(x)
        
print("Odd numbers: ", odd_list)
print("Even numbers: ", even_list)
Write a Python program to create a bar chart from a given dataset. dataset = [5, 8, 10, 12, 3, 6] import matplotlib.pyplot as plt 

# Data to plot 
data = [5, 8, 10, 12, 3, 6] 

# Plot the data 
plt.bar(data, data) 

# Set labels 
plt.xlabel('Data') 
plt.ylabel('Values') 

# Title 
plt.title('Bar Chart of Data Set') 

# Show the plot 
plt.show()
Write a Python program to calculate the frequency of each word in the provided string. Example string: "Python is an interpreted high-level programming language" def word_count(str): 
    counts = dict() 
    words = str.split() 
  
    for word in words: 
        if word in counts: 
            counts[word] += 1
        else: 
            counts[word] = 1
  
    return counts

the_string = "Python is an interpreted high-level programming language"
print(word_count(the_string))
Create a website using the Django web framework.  # create a new Django project
$ django-admin startproject mysite

# create a new application 
$ python manage.py startapp myapp

# add the new application in INSTALLED_APPS in the settings.py file 
INSTALLED_APPS = [ 
    'myapp',
    ...
]

# define the urls in urls.py file 
urlpatterns = [ 
    path('', myapp.views.index, name='index'), 
    ...
]
Create a basic chatbot in Python that takes input from the user and responds. Not applicable import random

def chatbot():
 prompt = "> "
 response = ""
 
 while response != "goodbye":
 response = input(prompt)
 
 if response == "hello":
 print("Hi there!")
 elif response == "how are you?":
 responses = ["I'm good!", "I'm doing alright!", "Not too bad!"]
 print(random.choice(responses))
 
chatbot() // Output: Hi there!
Write a python program to successfully insert a row into a table named 'students' with the given values. student_name = "John Doe"
student_age = 20 import sqlite3

conn = sqlite3.connect("example.db")
c = conn.cursor()
c.execute("INSERT INTO students VALUES ('John Doe', 20)")
conn.commit()
conn.close()
Create Python code that will insert a new item at the end of a list.  def insert_at_end(list, item):
    """Inserts an item at the end of a list"""
    list.append(item)
Compute the sum of list integers using Python. Target list: [3, 5, 7, 9] mylist = [3, 5, 7, 9]
total = 0

for item in mylist:
   total = total + item

print("The sum of list items is:", total)
Create a Python function to take two lists and return a list with the elements added together. list_a = [1, 4, 5]
list_b = [2, 3, 6] def list_add(list_a, list_b):
  result = []

  for i in range(len(list_a)):
     result.append(list_a[i] + list_b[i])

  return result

result = list_add(list_a, list_b)
print(result)
Write a Python module to interact with a third-party API. URL endpoints for the API: https://example.com (GET) and https://example.com/:id (GET, PUT, POST, DELETE). import requests

def get(url):
   '''Function to make a GET request to the API'''
   response = requests.get(url)
   return response

def put(url,data):
   '''Function to make a PUT request to the API'''
   response = requests.put(url,data)
   return response

def post(url, data):
   '''Function to make a POST request to the API'''
   response = requests.post(url,data)
   return response

def delete(url):
   '''Function to make a DELETE request to the API'''
   response = requests.delete(url)
   return response
Generate a python script to extract the 10th row from a table  import pandas as pd

# read the table
table = pd.read_csv('table_name.csv')

# Extract the 10th row
row = table.loc[9, :]

# Print the row
print('The 10th row is: ', row)
Optimize the following Python program for computing Fibonacci numbers:
def fib(n):
 if n <= 1:
  return n
 else:
  return fib(n-1) + fib(n-2) Not applicable def fib(n):
 fibonacci_numbers = [0, 1]

 for i in range(2, n + 1):
  fibonacci_numbers.append(fibonacci_numbers[i - 1] + fibonacci_numbers[i - 2])

 return fibonacci_numbers[n]
Generate a function in Python that takes an integer value from a dictionary and returns its value as a string. {"number1": 8, "number2": 16, "number3": 20} def get_string_value(input_dict):
  """Return string value in the input dictionary"""
  output_value = ""
  for key, value in input_dict.items():
      output_value = str(value)
  return output_value
Construct a polynomial regression model in Python that models a given data set.  # import packages
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression

# create linear regression object
reg = LinearRegression()

# create polynomial features
poly = PolynomialFeatures(degree = 2)
x_poly = poly.fit_transform(X_train)

# fit the linear regression model with the polynomial features
reg.fit(x_poly, y_train)

# predict the y-values using the regression model
y_pred = reg.predict(poly.fit_transform(X_test))
Design an algorithm in Python for converting a given Roman Numeral string to its decimal value. 'XXII' def romanToDecimal(s):
    #dictionary containing the values of Roman Numerals
    roman = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
    
    #initialize result
    result = roman[s[len(s) - 1]]
    
    #traverse the input in reverse order
    for i in range(len(s) - 2, -1, -1):
        # if the current value of character is less than or equal to its next character
        if roman[s[i]] <= roman[s[i+1]]:
            result -= roman[s[i]]
        else:
            result += roman[s[i]]
  
    return result

# Driver Program 
s = 'XXII'
print(romanToDecimal(s))
Write a Python program that uses natural language processing to classify the sentiment of a given sentence.  import nltk
import numpy as np
from nltk.sentiment.vader import SentimentIntensityAnalyzer

# Download relevant NLTK packages
nltk.download('vader_lexicon')

# Initialize Sentiment Analyzer
sentiment_analyzer = SentimentIntensityAnalyzer()

# Take input from user
sentence = input("Enter a sentence to be analyzed: ")

# Calculate sentiment
sentiment = sentiment_analyzer.polarity_scores(sentence)

# Output sentiment
if sentiment['compound'] > 0.2:
    print("Positive sentiment")
elif sentiment['compound'] < -0.2:
    print("Negative sentiment")
else:
    print("Neutral sentiment")
Using Python, create an algorithm to identify all prime numbers between 1 and 100.  primes = []

for num in range(2, 101):
    is_prime = True
    for i in range(2, num):
        if (num % i == 0):
            is_prime = False
            break
 
    if is_prime:
        primes.append(num)

print(primes)
Create a program that counts the number of words in a given sentence using the split() method.  sentence = "I am learning Python"

def count_words(sentence):
    words = sentence.split()
    return len(words)

word_count = count_words(sentence)
print(word_count)
Make a text-based adventure game in Python  # Game resources 
# Rooms, items, NPCs 

# Global Variables 
player_location = 'room1'
player_items = []

# Functions 
def process_input():
    input_string = input("What do you want to do? ")

    if input_string == 'go north':
        if player_location == 'room1':
            player_location = 'room2'
        elif player_location == 'room2':
            player_location = 'room3'
        else:
            print('You can\'t go that way')

    elif input_string == 'go south':
        if player_location == 'room2':
            player_location = 'room1'
        elif player_location == 'room3':
            player_location = 'room2'
        else:
            print('You can\'t go that way')
    print('You are in ' + player_location)

# Game Loop 
while True:
    process_input()
Create a python class that implements a stack.  class Stack:
    
    def __init__(self):
        self.items = []
    def push(self, item):
        self.items.append(item)
    def pop(self):
        return self.items.pop()
    def isEmpty(self):
        return self.items == []
    def peek(self):
        return self.items[len(self.items)-1]
    def size(self):
        return len(self.items)
Create a Python program to handle incoming HTTP requests from web browsers and send appropriate responses. Not applicable import http.server

class MyHandler(http.server.BaseHTTPRequestHandler):
    def do_GET(self):

        # Build file path
        url_tokens = self.path.split("/")
        file_path = "."
        for token in url_tokens:
            if token != '':
                file_path += "/"+token

        # Set content type
        self.send_response(200)
        if file_path.endswith(".html"):
            self.send_header("Content-type", "text/html")
        elif file_path.endswith(".css"):
            self.send_header("Content-type", "text/css")
        else:
            self.send_header("Content-type", "text/plain")
        self.end_headers()

        # Read and send back file content
        f = open(file_path, "rb")
        content = f.read()
        self.wfile.write(content)

        f.close()

# Run server
PORT = 8080
server_address = ("", PORT)
server = http.server.HTTPServer(server_address, MyHandler)
server.serve_forever()
Create a for-loop in Python to loop through the items in a list and print their elements. names = ['John', 'Kate', 'Mike', 'Alex'] for name in names:
    print(name)
Generate a python code to print out all prime numbers between 1 to 100.  for num in range(2, 101):
  
    for i in range(2,num):
        if (num % i) == 0:
            break
    else:
        print(num, end=' ')
# Output : 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97
Design a REST API in Python that performs the CRUD operations Noinput from flask import Flask, request
app = Flask(__name__)
 
# Create a resource
@app.route('/users', methods=['POST'])
def create():
    return 'Create a new user.'
 
# Read a resource
@app.route('/users/<id>', methods=['GET'])
def read(id):
    return 'Read user ' + str(id)
 
# Update a resource
@app.route('/users/<id>', methods=['PUT'])
def update(id):
    return 'Update user ' + str(id)
 
# Delete a resource
@app.route('/users/<id>', methods=['DELETE'])
def delete(id):
    return 'Delete user ' + str(id)
 
if __name__ == "__main__":
    app.run(debug=True)
Design a function in Python to convert a Celsius temperature to a Fahrenheit temperature. 32 def convert_celsius_to_fahrenheit(celsius):
    fahrenheit = celsius * 9/5 + 32
    return fahrenheit

celsius = 32
fahrenheit = convert_celsius_to_fahrenheit(celsius)
print('{} degree Celsius is {} degree Fahrenheit.'.format(celsius, fahrenheit))
Generate a Random Forest classifier in Python to categorize emails into two classes - spam and not-spam. Not applicable # Random Forest classifier setup
from sklearn.ensemble import RandomForestClassifier

# Sample data 
X = [['email_1'], ['email_2'], ...]
y = [0, 1, ...] # 0 is not-spam, 1 is spam

# Train the model
model = RandomForestClassifier(n_estimators=100)
model.fit(X, y)

# Make predictions
predictions = model.predict(X_test)
Create a program in Python to generate a sequence of five unique random numbers between 1 and 10  from random import randrange

def generate_rand_seq(): 
    rand_list = []
    while len(rand_list) < 5:
        rand_num = randrange(1, 10)
        if rand_num in rand_list:
            continue
        rand_list.append(rand_num)
    return rand_list

print(generate_rand_seq())
Develop a program in Python to check whether a string contains only digits. "0123" def is_digit_only(string):
    for char in string:
        if not char.isdigit():
            return False
    return True

print(is_digit_only("0123"))
Given two strings S and T. Generate a Python program to count the number of distinct substrings of T in S.  def count_substring(S, T):
  count = 0
  for i in range(len(S)):
    for j in range(len(T)):
      if(S[i:i+j+1] == T):
        count += 1
  return count
This code generates a GNU Radio Python Flow Graph for an output window. To use it, import the necessary libraries and create an instance of the Output_window class. Set the desired threshold, sample rate, frequency, and FFT size using the provided methods. Then start the flow graph using the Start() method and wait for it to finish using the Wait() method.  #!/usr/bin/env python2
##################################################
# GNU Radio Python Flow Graph
# Title: Output Window
# Generated: Sat Apr 30 16:45:27 2016
##################################################

if __name__ == '__main__':
    import ctypes
    import sys
    if sys.platform.startswith('linux'):
        try:
            x11 = ctypes.cdll.LoadLibrary('libX11.so')
            x11.XInitThreads()
        except:
            print "Warning: failed to XInitThreads()"

from gnuradio import analog
from gnuradio import blocks
from gnuradio import eng_notation
from gnuradio import fft
from gnuradio import gr
from gnuradio import wxgui
from gnuradio.eng_option import eng_option
from gnuradio.fft import window
from gnuradio.filter import firdes
from gnuradio.wxgui import fftsink2
from gnuradio.wxgui import forms
from gnuradio.wxgui import numbersink2
from grc_gnuradio import wxgui as grc_wxgui
from optparse import OptionParser
import osmosdr
import time
import wx


class Output_window(grc_wxgui.top_block_gui):

    def __init__(self):
        grc_wxgui.top_block_gui.__init__(self, title="Output Window")
        _icon_path = "/usr/share/icons/hicolor/32x32/apps/gnuradio-grc.png"
        self.SetIcon(wx.Icon(_icon_path, wx.BITMAP_TYPE_ANY))

        ##################################################
        # Variables
        ##################################################
        self.threshold = threshold = -55
        self.samp_rate = samp_rate = 2.048e6
        self.freq = freq = 658e6
        self.fft_size = fft_size = 1.024e3

        ##################################################
        # Blocks
        ##################################################
        self.notebook = self.notebook = wx.Notebook(self.GetWin(), style=wx.NB_TOP)
        self.notebook.AddPage(grc_wxgui.Panel(self.notebook), "Spectrum")
        self.notebook.AddPage(grc_wxgui.Panel(self.notebook), "Output")
        self.notebook.AddPage(grc_wxgui.Panel(self.notebook), "Stream")
        self.Add(self.notebook)
        _threshold_sizer = wx.BoxSizer(wx.VERTICAL)
        self._threshold_text_box = forms.text_box(
        	parent=self.notebook.GetPage(1).GetWin(),
        	sizer=_threshold_sizer,
        	value=self.threshold,
        	callback=self.set_threshold,
        	label="Threshold",
        	converter=forms.float_converter(),
        	proportion=0,
        )
        self._threshold_slider = forms.slider(
        	parent=self.notebook.GetPage(1).GetWin(),
        	sizer=_threshold_sizer,
        	value=self.threshold,
        	callback=self.set_threshold,
        	minimum=-100,
        	maximum=0,
        	num_steps=100,
        	style=wx.SL_HORIZONTAL,
        	cast=float,
        	proportion=1,
        )
        self.notebook.GetPage(1).Add(_threshold_sizer)
        _freq_sizer = wx.BoxSizer(wx.VERTICAL)
        self._freq_text_box = forms.text_box(
        	parent=self.notebook.GetPage(0).GetWin(),
        	sizer=_freq_sizer,
        	value=self.freq,
        	callback=self.set_freq,
        	label="freq",
        	converter=forms.float_converter(),
        	proportion=0,
        )
        self._freq_slider = forms.slider(
        	parent=self.notebook.GetPage(0).GetWin(),
        	sizer=_freq_sizer,
        	value=self.freq,
        	callback=self.set_freq,
        	minimum=10e6,
        	maximum=10e9,
        	num_steps=100,
        	style=wx.SL_HORIZONTAL,
        	cast=float,
        	proportion=1,
        )
        self.notebook.GetPage(0).Add(_freq_sizer)
        self.wxgui_numbersink2_1 = numbersink2.number_sink_f(
        	self.notebook.GetPage(1).GetWin(),
        	unit="signal present",
        	minval=0,
        	maxval=1,
        	factor=1,
        	decimal_places=0,
        	ref_level=0,
        	sample_rate=samp_rate,
        	number_rate=15,
        	average=False,
        	avg_alpha=None,
        	label="Signal Detection",
        	peak_hold=False,
        	show_gauge=True,
        )
        self.notebook.GetPage(1).Add(self.wxgui_numbersink2_1.win)
        self.wxgui_numbersink2_0 = numbersink2.number_sink_f(
        	self.notebook.GetPage(1).GetWin(),
        	unit="dB",
        	minval=-120,
        	maxval=0,
        	factor=1.0,
        	decimal_places=10,
        	ref_level=0,
        	sample_rate=samp_rate,
        	number_rate=15,
        	average=False,
        	avg_alpha=30e-3,
        	label="level",
        	peak_hold=False,
        	show_gauge=False,
        )
        self.notebook.GetPage(1).Add(self.wxgui_numbersink2_0.win)
        self.wxgui_fftsink2_0 = fftsink2.fft_sink_c(
        	self.notebook.GetPage(0).GetWin(),
        	baseband_freq=freq,
        	y_per_div=5,
        	y_divs=10,
        	ref_level=0,
        	ref_scale=2.0,
        	sample_rate=samp_rate,
        	fft_size=1024,
        	fft_rate=15,
        	average=True,
        	avg_alpha=30e-3,
        	title="Spectrum",
        	peak_hold=False,
        	win=window.rectangular,
        )
        self.notebook.GetPage(0).Add(self.wxgui_fftsink2_0.win)
        self.rtlsdr_source_0 = osmosdr.source( args="numchan=" + str(1) + " " + "" )
        self.rtlsdr_source_0.set_sample_rate(samp_rate)
        self.rtlsdr_source_0.set_center_freq(freq, 0)
        self.rtlsdr_source_0.set_freq_corr(0, 0)
        self.rtlsdr_source_0.set_dc_offset_mode(0, 0)
        self.rtlsdr_source_0.set_iq_balance_mode(0, 0)
        self.rtlsdr_source_0.set_gain_mode(False, 0)
        self.rtlsdr_source_0.set_gain(20, 0)
        self.rtlsdr_source_0.set_if_gain(10, 0)
        self.rtlsdr_source_0.set_bb_gain(5, 0)
        self.rtlsdr_source_0.set_antenna("", 0)
        self.rtlsdr_source_0.set_bandwidth(0, 0)
          
        self.fft_1 = fft.fft_vcc(1024, True, (window.rectangular(1024)), True, 1)
        self.blocks_vector_to_stream_0 = blocks.vector_to_stream(gr.sizeof_float*1, 1024)
        self.blocks_threshold_ff_0 = blocks.threshold_ff(-100, threshold, 0)
        self.blocks_stream_to_vector_0 = blocks.stream_to_vector(gr.sizeof_gr_complex*1, 1024)
        self.blocks_nlog10_ff_0 = blocks.nlog10_ff(10, 1, 0)
        self.blocks_file_sink_0 = blocks.file_sink(gr.sizeof_float*1, "/media/shashwat/DATA/Q3/Wireless Networking/gnu codes/Outputs/db_498", False)
        self.blocks_file_sink_0.set_unbuffered(False)
        self.blocks_divide_xx_0 = blocks.divide_ff(1)
        self.blocks_complex_to_mag_squared_0 = blocks.complex_to_mag_squared(1024)
        self.analog_const_source_x_0 = analog.sig_source_f(0, analog.GR_CONST_WAVE, 0, 0, 1.04858e6)

        ##################################################
        # Connections
        ##################################################
        self.connect((self.analog_const_source_x_0, 0), (self.blocks_divide_xx_0, 1))    
        self.connect((self.blocks_complex_to_mag_squared_0, 0), (self.blocks_vector_to_stream_0, 0))    
        self.connect((self.blocks_divide_xx_0, 0), (self.blocks_nlog10_ff_0, 0))    
        self.connect((self.blocks_nlog10_ff_0, 0), (self.blocks_file_sink_0, 0))    
        self.connect((self.blocks_nlog10_ff_0, 0), (self.blocks_threshold_ff_0, 0))    
        self.connect((self.blocks_nlog10_ff_0, 0), (self.wxgui_numbersink2_0, 0))    
        self.connect((self.blocks_stream_to_vector_0, 0), (self.fft_1, 0))    
        self.connect((self.blocks_threshold_ff_0, 0), (self.wxgui_numbersink2_1, 0))    
        self.connect((self.blocks_vector_to_stream_0, 0), (self.blocks_divide_xx_0, 0))    
        self.connect((self.fft_1, 0), (self.blocks_complex_to_mag_squared_0, 0))    
        self.connect((self.rtlsdr_source_0, 0), (self.blocks_stream_to_vector_0, 0))    
        self.connect((self.rtlsdr_source_0, 0), (self.wxgui_fftsink2_0, 0))    


    def get_threshold(self):
        return self.threshold

    def set_threshold(self, threshold):
        self.threshold = threshold
        self._threshold_slider.set_value(self.threshold)
        self._threshold_text_box.set_value(self.threshold)
        self.blocks_threshold_ff_0.set_hi(self.threshold)

    def get_samp_rate(self):
        return self.samp_rate

    def set_samp_rate(self, samp_rate):
        self.samp_rate = samp_rate
        self.rtlsdr_source_0.set_sample_rate(self.samp_rate)
        self.wxgui_fftsink2_0.set_sample_rate(self.samp_rate)

    def get_freq(self):
        return self.freq

    def set_freq(self, freq):
        self.freq = freq
        self._freq_slider.set_value(self.freq)
        self._freq_text_box.set_value(self.freq)
        self.rtlsdr_source_0.set_center_freq(self.freq, 0)
        self.wxgui_fftsink2_0.set_baseband_freq(self.freq)

    def get_fft_size(self):
        return self.fft_size

    def set_fft_size(self, fft_size):
        self.fft_size = fft_size


if __name__ == '__main__':
    parser = OptionParser(option_class=eng_option, usage="%prog: [options]")
    (options, args) = parser.parse_args()
    tb = Output_window()
    tb.Start(True)
    tb.Wait()

Create a Python script to print out the multiplication table for the given number. 4 def printMultTable(n):
    for i in range(1, 11):
        print(n, 'x', i, '=', n*i)

printMultTable(4)
Build a web application using Python and Flask that displays the current date and time.  from flask import Flask
from datetime import datetime

app = Flask(__name__)

@app.route('/')
def homepage():
    the_time = datetime.now().strftime("%A, %d %b %Y %l:%M %p")
    return """
    <h1>Current Date and Time</h1>
    <p>It is currently {time}.</p>
    <p>The local timezone is {timezone}.</p>
    """.format(time = the_time, timezone = datetime.now().strftime("%Z"))

if __name__ == '__main__':
    app.run(debug=True)
Create an algorithm in Python 3 to identify the characters in a given string. "Abe erotically jitters" def identify_characters(s): 
    characters = []
        
    for char in s:
        if char not in characters:
            characters.append(char)
        
    return characters
 
print(identify_characters('Abe erotically jitters')) #['A', 'b', 'e', ' ', 'r', 'o', 't', 'i', 'c', 'a', 'l', 'y', 'j', 'i', 't', 's']
Write a Python code snippet for encrypting a given string using secret key. secret_key = 'test'
string = 'hello world' import base64

def encrypt(key, string):
    enc = []
    for i in range(len(string)):
        key_c = key[i % len(key)]
        enc_c = chr((ord(string[i]) + ord(key_c)) % 256)
        enc.append(enc_c)
    return base64.urlsafe_b64encode("".join(enc).encode()).decode()

encrypted_string = encrypt(secret_key, string)
print(encrypted_string)
Write a Python program that creates a new database and a new table in it.  import mysql.connector

# Create a database connection
connection = mysql.connector.connect(
  host="localhost",
  user="root",
  passwd=""
)

# Create a new database
cursor = connection.cursor()
cursor.execute("CREATE DATABASE mydatabase")

# Create a new table in the database
cursor.execute("USE mydatabase")
cursor.execute("CREATE TABLE mytable (id INT, name VARCHAR(255), age INT)")
Write a Python script to generate a multiplication table with a given number of rows and columns. rows = 6
columns = 8 def multiplicationTable(x, y):
 table = [[ 0 for j in range(x)] for i in range(y)]
 for row in range(x):
 for col in range(y):
 table[row][col] = (row + 1) * (col + 1)
 return table

print(multiplicationTable(rows, columns))

Output:
[[1, 2, 3, 4, 5, 6, 7, 8], 
[2, 4, 6, 8, 10, 12, 14, 16], 
[3, 6, 9, 12, 15, 18, 21, 24], 
[4, 8, 12, 16, 20, 24, 28, 32], 
[5, 10, 15, 20, 25, 30, 35, 40], 
[6, 12, 18, 24, 30, 36, 42, 48]]
Write a Python function to parse an HTML response from a website.  import requests
from bs4 import BeautifulSoup

def parse_html(url):
  # Send a get request
  response = requests.get(url)
  
  # Create a BeautifulSoup object
  soup = BeautifulSoup(response.text, 'lxml')

  # Find the required data
  data = soup.find_all('div', class_='content')

  # Return the data
  return data
Develop a python web scraper to extract data from a table on a web page. URL of the web page import requests
from bs4 import BeautifulSoup

# Enter the URL of the web page
url = "Enter_URL_Here"

# Scrape the page with BeautifulSoup
response = requests.get(url)
html = response.text
soup = BeautifulSoup(html, 'html.parser')

# Extract the required data from the table
table = soup.find('table')
table_rows = table.find_all('tr')
header_row = table_rows[0]
header_columns = header_row.find_all('th')
headers = [header.text.strip() for header in header_columns]

data = []

for row in table_rows[1:]:
    row_columns = row.find_all('td')
    row_data = [column.text.strip() for column in row_columns]
    data.append(dict(zip(headers,row_data)))

print(data)
Create a python code to identify the most frequent item in a given list. given_list = [1, 2, 3, 4, 4, 1, 2, 3, 3] from collections import Counter 

def most_frequent_item(given_list):
    # Use Counter to count the occurrences of each item
    item_counter = Counter(given_list) 
    # Get the most frequent item and its frequency
    most_freq_item, freq = item_counter.most_common(1)[0] 
    return most_freq_item

# Test
given_list = [1, 2, 3, 4, 4, 1, 2, 3, 3]
result = most_frequent_item(given_list)
print(f"The most frequent item in {given_list} is {result}")
Code a function in Python that takes an array of strings as parameter and returns the longest string. ["apple", "banana", "orange"] def longest_string(arr):
    max_length = 0
    max_string = ""
    
    for s in arr:
        if len(s)> max_length:
            max_length = len(s)
            max_string = s
            
    return max_string
Create a python program to generate a report of the ten most viewed videos on YouTube this week.  import json
import requests

def get_top_ten_videos():
    """
    Returns the top ten viewed videos on YouTube as a report.
    """

    # Get the data of the top ten viewed videos on YouTube using the API 
    response = requests.get("https://www.googleapis.com/youtube/v3/videos?part=snippet%2C+statistics&chart=mostPopular&maxResults=10&key=api-key")
    data = json.loads(response.text)

    # Create string with Youtube video info
    report = "Top 10 most viewed YouTube videos this week:\n"
    for item in data['items']:
       # extract video data
        title = item['snippet']['title']
        views = item['statistics']['viewCount']
        report += '- ' + title + ": " + views + " views\n" 

    return report

if __name__ == '__main__':
    print(get_top_ten_videos())
This code is a Python library for crafting SAP's network protocols packets. To use it, import the necessary modules and classes from the library and call the appropriate functions and methods. The library includes various custom fields and packet classes for crafting SAP packets. The library is distributed under the terms of the GNU General Public License.  # ===========
# pysap - Python library for crafting SAP's network protocols packets
#
# SECUREAUTH LABS. Copyright (C) 2021 SecureAuth Corporation. All rights reserved.
#
# The library was designed and developed by Martin Gallo from
# the SecureAuth's Innovation Labs team.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# ==============


# Standard imports
import struct
from datetime import datetime
# External imports
from scapy.config import conf
from scapy.packet import Packet
from scapy.asn1fields import (ASN1F_CHOICE, ASN1F_field, ASN1_Error, ASN1F_badsequence, BER_Decoding_Error)
from scapy.volatile import (RandNum, RandTermString, RandBin)
from scapy.fields import (MultiEnumField, StrLenField, Field, StrFixedLenField, StrField, PacketListField, LongField)


def saptimestamp_to_datetime(timestamp):
    """Converts a timestamp in "SAP format" to a datetime object. Time zone
    looks to be fixed at GMT+1."""
    return datetime.utcfromtimestamp((int(timestamp) & 0xFFFFFFFF) + 1000000000)


class PacketNoPadded(Packet):
    """Regular scapy packet with no padding.
    """
    def extract_padding(self, s):
        return '', s


class RandByteReduced(RandNum):
    """RandByte that only returns random values between 0 and x2a. Used while
    performing some fuzz to reduce the test cases space.

    """
    def __init__(self):
        RandNum.__init__(self, 0, 0x2a)


class ByteMultiEnumKeysField(MultiEnumField):
    """MultiEnumField that picks a reduced number of values. Used for fuzzing
    Byte fields with reduced number of values.

    """
    def randval(self):
        return RandByteReduced()


class MutablePacketField(StrLenField):
    """Packet field that mutates the class according to a list of evaluators.
    The evaluators are run against the packet and given to a class getter.

    If the class can't be found, the field is treated as a StrLenField.
    """
    __slots__ = ["length_from", "evaluators", "_get_class"]

    def __init__(self, name, default, length_from, get_class, evaluators=None):
        """
        :param length_from: function to obtain the field length
        :type length_from: C{callable}

        :param get_class: function to obtain the class
        :type get_class: C{callable}

        :param evaluators: evaluators
        :type evaluators: ``list`` of C{callable}
        """
        StrLenField.__init__(self, name, default, length_from=length_from)
        self.evaluators = evaluators or []
        self._get_class = get_class

    def get_class(self, pkt):
        # Run the evaluators on the actual packet
        values = [evaluator(pkt) for evaluator in self.evaluators]
        # Return the class using the function provided
        return self._get_class(pkt, *values)

    def i2m(self, pkt, i):
        cls = self.get_class(pkt)
        if cls is not None:
            return str(i)
        else:
            return StrLenField.i2m(self, pkt, i)

    def m2i(self, pkt, m):
        cls = self.get_class(pkt)
        if cls is not None:
            return cls(m)
        else:
            return StrLenField.m2i(self, pkt, m)


class StrNullFixedLenField(StrFixedLenField):
    """Packet field that has a fixed length and is conditionally null-terminated.
    """
    __slots__ = ["length_from", "max_length", "null_terminated"]

    def __init__(self, name, default, length=None, length_from=None, max_length=None, null_terminated=None):
        if null_terminated:
            self.null_terminated = null_terminated
        else:
            self.null_terminated = lambda pkt: True
        self.max_length = max_length or 200
        StrFixedLenField.__init__(self, name, default, length=length, length_from=length_from)

    def i2repr(self, pkt, v):
        if self.null_terminated(pkt):
            if type(v) is str:
                v = v.rstrip("\0")
            return repr(v)
        return StrFixedLenField.i2repr(self, pkt, v)

    def getfield(self, pkt, s):
        if self.null_terminated(pkt):
            l = self.length_from(pkt) - 1
            return s[l + 1:], self.m2i(pkt, s[:l])
        return StrFixedLenField.getfield(self, pkt, s)

    def addfield(self, pkt, s, val):
        if self.null_terminated(pkt):
            l = self.length_from(pkt) - 1
            return s + struct.pack("%is" % l, self.i2m(pkt, val)) + "\x00"
        return StrFixedLenField.addfield(self, pkt, s, val)

    def randval(self):
        if self.null_terminated:
            try:
                l = self.length_from(None) - 1
            except:
                l = RandTermString(RandNum(0, self.max_length), "\x00")
            return RandBin(l)
        return StrFixedLenField.randval(self)


class StrFixedLenPaddedField(StrFixedLenField):
    """Packet field that has a fixed length and is padded with a
    given character.
    """
    __slots__ = ["length_from", "padd"]

    def __init__(self, name, default, length=None, length_from=None, padd=" "):
        StrFixedLenField.__init__(self, name, default, length, length_from)
        self.padd = padd

    def getfield(self, pkt, s):
        l = self.length_from(pkt)
        return s[l:], self.m2i(pkt, s[:l])

    def addfield(self, pkt, s, val):
        l = self.length_from(pkt)
        val += self.padd * l
        return StrFixedLenField.addfield(self, pkt, s, val)


class StrNullFixedLenPaddedField(StrFixedLenField):
    """Packet field that has a fixed length and is padded with a
    given character and null terminated.
    """
    __slots__ = ["length_from", "padd"]

    def __init__(self, name, default, length=None, length_from=None, padd=" "):
        StrFixedLenField.__init__(self, name, default, length, length_from)
        self.padd = padd

    def getfield(self, pkt, s):
        l = self.length_from(pkt)
        lz = s.find("\x00")
        if lz < l:
            return s[l + 1:], self.m2i(pkt, s[:lz])
        return s[l + 1:], self.m2i(pkt, s[:l])

    def addfield(self, pkt, s, val):
        l = self.length_from(pkt)
        val += self.padd * l
        return StrFixedLenField.addfield(self, pkt, s, val)


class IntToStrField(Field):
    """Custom field from int to str values, with a variable length
    """
    __slots__ = ["length", "format"]

    def __init__(self, name, default, length=11):
        """Initialize the field with a variable length. The 'machine'
        representation is a string field and the 'internal' repr.
        is a numeric value.
        """
        Field.__init__(self, name, default, "%ds" % length)
        # Stores the length of the field
        self.length = length
        # Stores the conversion format between representations
        self.format = "%" + "%d" % length + "d"

    def m2i(self, pkt, x):
        return str(x)

    def i2m(self, pkt, x):
        return self.format % int(x)

    def i2count(self, pkt, x):
        return x


class StrEncodedPaddedField(StrField):
    __slots__ = ["remain", "encoding", "padd"]

    def __init__(self, name, default, encoding="utf-16", padd="\x0c",
                 fmt="H", remain=0):
        StrField.__init__(self, name, default, fmt, remain)
        self.encoding = encoding
        self.padd = padd

    def h2i(self, pkt, x):
        if x:
            x = x.encode(self.encoding)
        return x

    def i2h(self, pkt, x):
        if x:
            x = x.decode(self.encoding)
        return x

    def addfield(self, pkt, s, val):
        return s + self.i2m(pkt, val) + self.padd

    def getfield(self, pkt, s):
        l = s.find(self.padd)
        if l < 0:
            return "", s
        return s[l + 1:], self.m2i(pkt, s[:l])


class PacketListStopField(PacketListField):
    """Custom field that contains a list of packets until a 'stop' condition is met.
    """
    __slots__ = ["count_from", "length_from", "stop"]

    def __init__(self, name, default, cls, count_from=None, length_from=None, stop=None):
        PacketListField.__init__(self, name, default, cls, count_from=count_from, length_from=length_from)
        self.stop = stop

    def getfield(self, pkt, s):
        c = l = None
        if self.length_from is not None:
            l = self.length_from(pkt)
        elif self.count_from is not None:
            c = self.count_from(pkt)

        lst = []
        ret = ""
        remain = s
        if l is not None:
            remain, ret = s[:l], s[l:]
        while remain:
            if c is not None:
                if c <= 0:
                    break
                c -= 1
            try:
                p = self.m2i(pkt, remain)
            except Exception:
                if conf.debug_dissector:
                    raise
                p = conf.raw_layer(load=remain)
                remain = ""
            else:
                if conf.padding_layer in p:
                    pad = p[conf.padding_layer]
                    remain = pad.load
                    del (pad.underlayer.payload)
                else:
                    remain = ""
            lst.append(p)
            # Evaluate the stop condition
            if self.stop and self.stop(p):
                break
        return remain + ret, lst


class AdjustableFieldLenField(Field):
    __slots__ = ["length_of", "count_of", "adjust"]

    def __init__(self, name, default, length_of=None):
        Field.__init__(self, name, default, ">H")
        self.length_of = length_of

    def i2m(self, pkt, x):
        if x is None:
            fld, fval = pkt.getfield_and_val(self.length_of)
            x = fld.i2len(pkt, fval)
        return x

    def addfield(self, pkt, s, val):
        i2m = self.i2m(pkt, val)
        fmt = "B"
        padd = ""
        if i2m > 0xf0:
            fmt = ">H"
            padd = struct.pack("B", 0xff)
        return s + padd + struct.pack(fmt, i2m)

    def getfield(self, pkt, s):
        if struct.unpack("B", s[:1])[0] == 0xff:
            return s[3:], self.m2i(pkt, struct.unpack(">H", s[1:3])[0])
        else:
            return s[1:], self.m2i(pkt, struct.unpack("B", s[:1])[0])


class ASN1F_CHOICE_SAFE(ASN1F_CHOICE):
    def __init__(self, name, default, *args, **kwargs):
        if "implicit_tag" in kwargs:
            err_msg = "ASN1F_CHOICE has been called with an implicit_tag"
            raise ASN1_Error(err_msg)
        self.implicit_tag = None
        for kwarg in ["context", "explicit_tag"]:
            if kwarg in kwargs:
                setattr(self, kwarg, kwargs[kwarg])
            else:
                setattr(self, kwarg, None)
        ASN1F_field.__init__(self, name, None, context=self.context,
                             explicit_tag=self.explicit_tag)
        self.default = default
        self.current_choice = None
        self.choices = args

    def m2i(self, pkt, s):
        """Try to safely extract an ASN1_Packet from the choices list.

        :raise ASN1_Error: if unable to parse the packet using any of the given choices
        """
        if len(s) == 0:
            raise ASN1_Error("ASN1F_CHOICE: got empty string")

        for choice in self.choices:
            try:
                return self.extract_packet(choice, s)
            except (ASN1_Error, ASN1F_badsequence, BER_Decoding_Error):
                pass
        raise ASN1_Error


class TimestampField(LongField):
    """Timestamp field"""

    def i2h(self, pkt, x):
        dt = datetime.utcfromtimestamp(x)
        return dt.strftime("%Y-%m-%d %H:%M:%S UTC")


class LESignedByteField(Field):
    def __init__(self, name, default):
        Field.__init__(self, name, default, "<b")


class LESignedShortField(Field):
    def __init__(self, name, default):
        Field.__init__(self, name, default, "<h")


class LESignedLongField(Field):
    def __init__(self, name, default):
        Field.__init__(self, name, default, "<q")

Split the following string into words in Python string = 'this_is_a_string_in_python' # Split the string by '_' separator
words = string.split('_')

# Print each word separately
for word in words:
    print(word)
Write a class in python which implements the following stack data type with all necessary methods. Not applicable class Stack:
 def __init__(self):
 self.stack = []
 
 def push(self, item):
 self.stack.append(item)
 
 def pop(self):
 return self.stack.pop()
 
 def peek(self):
 return self.stack[-1]
 
 def is_empty(self):
 return self.stack == []
 
 def size(self):
 return len(self.stack)
Create a REST API in Python Flask for the following model. class User:
    def __init__(self, name, email):
        self.name = name
        self.email = email from flask import Flask, jsonify, request

# Class
class User:
    def __init__(self, name, email):
        self.name = name
        self.email = email

# Create the application instance
app = Flask(__name__)

# Create a URL route in our application for "/"
@app.route('/', methods=['GET', 'POST'])
def index():

    # POST request
    if request.method == 'POST':
        json_data = request.get_json(force=True)
        if not json_data:
            return jsonify({'message': 'No input data provided'}), 400
        user_name = json_data['name']
        user_email = json_data['email']
        user = User(name=user_name, email=user_email)

        return jsonify({
            'name': user.name,
            'email': user.email
        })
    
    # GET request
    if request.method == 'GET':
        # Get user list
        users = [user.__dict__ for user in users]
        return jsonify({'users': users}), 200

# Run the application
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080, debug=True)
Write a Python program to find the sum of the three given numbers where the three numbers are given as input. 4 5 6 # Function to calculate the sum 
# of three numbers 
def SumOfThree (x, y, z): 
    sum = x + y + z 
    return sum

# Print the sum 
print("Sum of 3 numbers is: ", SumOfThree(4, 5, 6))
Construct a Python program that fetches the top 10 news headlines from The New York Times.  import requests
import json

# Define endpoint
endpoint = 'https://api.nytimes.com/svc/topstories/v2/home.json?'

# Pass API key
payload = {'api-key': 'INSERT-KEY-HERE'}

# Make request to endpoint
req = requests.get(endpoint, params=payload)

# Parse the response
data = json.loads(req.text)

# Iterate over results and print headline
for result in data['results'][:10]:
    print(result['title'])
Write a Python script that reads in a user-defined data set and prints the top-5 highest values contained in the data set. [100.0, 74.0, 56.2, 45.5, 27.8, 21.0, 8.2, 4.1] data = [100.0, 74.0, 56.2, 45.5, 27.8, 21.0, 8.2, 4.1]

def get_top_five_values(data):
    sorted_data = sorted(data, reverse=True)
    top_five_values = sorted_data[:5]
    return top_five_values

top_five_values = get_top_five_values(data)
print(top_five_values)
Create a bash script which runs a Python program called “script.py” and prints out its output. Not applicable #!/bin/bash

python script.py
echo $?
Create a Python program to calculate the total cost of an order based on item cost and quantity. Item cost: 10
Quantity: 5 def calculate_cost(item_cost, quantity):
 return item_cost * quantity

cost = calculate_cost(10, 5)
print('The total cost of your order is:', cost)  # The total cost of your order is: 50
This code is a mini key/password manager written in Python using the AES encryption algorithm. To use it, create an instance of the KeyBox class with a file path to store the keys. You can then list, search, add, view, modify, or delete keys. To import keys from a text file, use the "import" sub-command followed by the file path. To export keys to a file, use the "export" sub-command followed by an optional file path. To reset the master password, use the "reset" sub-command.  #!/usr/bin/env python

"""A mini key/password manager written in python using the AES encryption algorithm."""

import os
import sys
import time
import os.path
import random
import sqlite3
import hashlib
import getpass
import argparse

import Crypto.Cipher.AES


class KeyBox(object):
    TABLE_NAME = "keybox"
    MASTER_KEY_TITLE = "<MASTER>"

    def __init__(self, a_file):
        # the AES key of the master password, to encrypt key content
        self.aes_key = None

        self.conn = sqlite3.connect(a_file)
        # Use 8-bit string instead of unicode string, in order to read/write
        # international characters like Chinese
        self.conn.text_factory = str
        # The following line would use unicode string
        # self.conn.text_factory = lambda x: unicode(x, 'utf-8', 'ignore')
        self.cursor = self.conn.cursor()
        self.cursor.execute('CREATE TABLE IF NOT EXISTS %s (title TEXT PRIMARY KEY, time LONG, content BLOB)' %
                            KeyBox.TABLE_NAME)
        self.conn.commit()

    def list(self):
        title_time_list = []
        self.cursor.execute('SELECT title,time FROM %s ORDER BY time DESC' % KeyBox.TABLE_NAME)
        for row in self.cursor:
            if row[0] != KeyBox.MASTER_KEY_TITLE:
                title_time_list.append((row[0], row[1]))
        return title_time_list

    def search(self, keywords):
        keywords_lower = {keyword.lower() for keyword in keywords}
        matching_title_time_list = []
        for title, mod_time in self.list():
            title_lower = title.lower()
            match = True
            for keyword in keywords_lower:
                if title_lower.find(keyword) == -1:
                    match = False
                    break
            if match:
                matching_title_time_list.append((title, mod_time))
        return matching_title_time_list

    def exists(self, title):
        self.cursor.execute("SELECT time FROM %s WHERE title=?" % KeyBox.TABLE_NAME, (title,))
        return self.cursor.fetchone() is not None

    def init_master_password(self, table=TABLE_NAME):
        password = input_password("Create a new master password: ")
        if password == input_password("Confirm the master password: "):
            self.aes_key = hashlib.sha256(password).digest()
            # the hash of the AES key, stored in db for master password verification
            key_hash = hashlib.sha256(self.aes_key).hexdigest()
            self.cursor.execute("INSERT OR REPLACE INTO %s VALUES (?,?,?)" % table,
                                (KeyBox.MASTER_KEY_TITLE, time.time(), key_hash))
            self.conn.commit()
        else:
            exit_with_error("Error: password not match, please retry")

    def verify_master_password(self):
        # get the stored key hash
        self.cursor.execute("SELECT content FROM %s WHERE title=?"
                            % KeyBox.TABLE_NAME, (KeyBox.MASTER_KEY_TITLE,))
        stored_key_hash = self.cursor.fetchone()[0]
        # input master password
        password = input_password("Master password: ")
        self.aes_key = hashlib.sha256(password).digest()
        # compare key hash
        if hashlib.sha256(self.aes_key).hexdigest() != stored_key_hash:
            exit_with_error("Error: incorrect master password, please retry")

    def view(self, title):
        self.cursor.execute("SELECT time, content FROM %s WHERE title=?"
                            % KeyBox.TABLE_NAME, (title,))
        mod_time, encrypted = self.cursor.fetchone()
        return mod_time, decrypt(encrypted, self.aes_key)

    def set(self, title, plain, mod_time=time.time(), table=TABLE_NAME):
        # for better print effect
        if plain[-1] != "\n": plain += "\n"
        encrypted = encrypt(plain, self.aes_key)
        self.cursor.execute("INSERT OR REPLACE INTO %s VALUES (?,?,?)" % table,
                            (title, mod_time, sqlite3.Binary(encrypted)))
        self.conn.commit()

    def delete(self, title):
        mod_time, plain = self.view(title)
        self.cursor.execute("DELETE FROM %s WHERE title=?" % KeyBox.TABLE_NAME, (title,))
        self.conn.commit()
        return mod_time, plain

    def reset(self):
        tmp_table = "_tmp_"
        self.cursor.execute('DROP TABLE IF EXISTS %s' % tmp_table)
        self.cursor.execute('CREATE TABLE %s (title TEXT PRIMARY KEY, time LONG, content BLOB)' % tmp_table)
        keys = []
        for title, mod_time in self.list():
            content = self.view(title)
            keys.append((title, mod_time, content))
        self.init_master_password(table=tmp_table)
        for title, mod_time, content in keys:
            self.set(title, content, mod_time=mod_time, table=tmp_table)
        self.cursor.execute("DROP TABLE %s" % KeyBox.TABLE_NAME)
        self.cursor.execute("ALTER TABLE %s RENAME TO %s" % (tmp_table, KeyBox.TABLE_NAME))
        self.conn.commit()


def input_content(title):
    sys.stdout.write("Input content of '%s', enter an empty line to finish:\n" % title)
    lines = []
    while True:
        line = raw_input()
        if line:
            lines.append(line)
        else:
            break
    return '\n'.join(lines)


def input_password(text):
    password = getpass.getpass(text)
    if password == "":
        exit_with_error("Error: password not given")
    return password


def encrypt(plain, aes_key):
    iv = ''.join(chr(random.randint(0, 0xFF)) for _ in range(Crypto.Cipher.AES.block_size))
    cipher = Crypto.Cipher.AES.AESCipher(aes_key, Crypto.Cipher.AES.MODE_CFB, iv)
    return iv + cipher.encrypt(plain)


def decrypt(encrypted, aes_key):
    iv = encrypted[0:Crypto.Cipher.AES.block_size]
    cipher = Crypto.Cipher.AES.AESCipher(aes_key, Crypto.Cipher.AES.MODE_CFB, iv)
    return cipher.decrypt(encrypted[Crypto.Cipher.AES.block_size:])


def read_keys(a_file):
    """
    Supported text file format is as follows:

    KEY: key title1
    MOD: 1540820240.0
    key content line 11
    key content line 12
    ...

    KEY: key title2
    key content line 21
    key content line 22
    ...

    """
    keys = []
    with open(a_file, 'r') as fd:
        title = ''
        mod_time = -1
        content_lines = []
        for line in fd:
            line = line.strip()
            if line.startswith("KEY: "):  # title line
                if title != '' and content_lines != []:
                    # remove the empty lines at the end
                    while len(content_lines) > 0 and content_lines[-1] == "\n":
                        content_lines = content_lines[:-1]
                    # add to keys for return
                    if mod_time < 0: mod_time = time.time()
                    keys.append((title, mod_time, '\n'.join([aLine for aLine in content_lines])))
                # set next key title, and clear content
                title = line[5:]
                content_lines = []
            elif line.startswith("MOD: "):
                mod_time = float(line[5:])
            elif title != "":
                content_lines.append(line)
            else:
                sys.stderr.write("Warn: line '%s' ignored: title missing\n" % line)
    # process the last key
    if title != '' and content_lines != []:
        # remove the empty lines at the end
        while len(content_lines) > 0 and content_lines[-1] == "\n":
            content_lines = content_lines[:-1]
        # add to keys for return
        if mod_time < 0: mod_time = time.time()
        keys.append((title, mod_time, '\n'.join([aLine for aLine in content_lines])))

    return keys


def exit_with_error(err_msg, err_code=-1):
    sys.stderr.write(err_msg + "\n")
    sys.exit(err_code)


def get_default_db_file():
    keybox_file = "%s/.keybox" % os.environ['HOME']
    if not os.path.exists(keybox_file):
        return "%s/%s.keybox" % (os.environ['HOME'], os.environ['USER'])

    with open(keybox_file, 'r') as fd:
        for line in fd:
            return line


def set_default_db_file(a_file):
    keybox_file = "%s/.keybox" % os.environ['HOME']
    with open(keybox_file, 'w') as fd:
        fd.write(os.path.abspath(a_file))


def main():
    # parse command line arguments
    parser = argparse.ArgumentParser(add_help=False)
    parser.add_argument('-d', '--database',
                        help=('the sqlite database file to store keys. ' +
                              'Default: the previously used database file (see its location in %s/.keybox), ' +
                              'or %s/%s.keybox') % (os.environ["HOME"], os.environ["HOME"], os.environ['USER']))
    subparsers = parser.add_subparsers(title="sub_commands", dest="action",
                                       metavar='help|list|view|add|mod|del|import|export|reset')
    subparsers.add_parser("help", help="show this help message and exit")

    subparsers.add_parser("list", help="list all key titles (this is default)")

    sub_parser = subparsers.add_parser("add", help="add a new key title and content")
    sub_parser.add_argument("title", help="a key title")

    sub_parser = subparsers.add_parser("view", help="view the content for the key title matching the given keywords")
    sub_parser.add_argument("keyword", nargs="+", help="a keyword")
    sub_parser = subparsers.add_parser("mod", help="modify the content for the key title matching the given keywords")
    sub_parser.add_argument("keyword", nargs="+", help="a keyword")
    sub_parser = subparsers.add_parser("del",
                                       help="delete an existing key title matching the given keywords and the key " +
                                            "content")
    sub_parser.add_argument("keyword", nargs="+", help="a keyword")

    sub_parser = subparsers.add_parser("import", help="import all key titles and contents from a text file")
    sub_parser.add_argument("file", help="a text file containing key titles and contents to import")
    sub_parser = subparsers.add_parser("export", help="export all key titles and contents to stdout or a file")
    sub_parser.add_argument("file", nargs='?', help="a text file to export the key titles and contents")

    subparsers.add_parser("reset", help="reset the master password")

    # 'list' if no sub-command is given
    if len(sys.argv) == 1:
        sys.argv.append('list')

    args = parser.parse_args()

    if args.action == 'help':
        parser.print_help()
        sys.exit(0)

    if args.database is None:
        args.database = get_default_db_file()  # type: str
    else:
        set_default_db_file(args.database)
    keybox = KeyBox(args.database)
    if args.action == 'list':
        title_time_array = keybox.list()
        if len(title_time_array) == 0:
            sys.stdout.write("No item found\n")
        else:
            for title, mod_time in title_time_array:
                print time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(mod_time)) + " - " + title
        sys.exit(0)

    # check errors before init or verify master password
    if args.action == 'add':
        if keybox.exists(args.title):
            exit_with_error("Error: '%s' exists, try to view it or add with another title" % args.title)
    if args.action in ['view', 'mod', 'del']:
        matches = keybox.search(args.keyword)
        if len(matches) == 0:
            exit_with_error(
                "Error: no title matching the given keywords, try to list all titles or change to another title")
        else:
            sys.stdout.write("Found the following titles:\n")
            for index, (title, mod_time) in enumerate(matches):
                mod_str = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(mod_time))
                print "[%d] %s - %s" % (index, mod_str, title)

            index = 0
            if len(matches) > 1:
                index = -1
                while index < 0 or index >= len(matches):
                    index = raw_input("Select: [0] ").strip()
                    if len(index) == 0:
                        index = 0
                        break
                    else:
                        try:
                            index = int(index)
                        except ValueError:
                            pass

            args.title = matches[index][0]

    elif args.action == "import":
        if not os.path.exists(args.file):
            exit_with_error("Error: file '%s' not found." % args.file)
    elif args.action == "export":
        fd = sys.stdout
        if args.file is not None:
            if os.path.exists(args.file):
                exit_with_error("Error: file exists, please choose a different file to export")
            else:
                fd = open(args.file, 'w')
    elif args.action == "reset":
        if not keybox.exists(KeyBox.MASTER_KEY_TITLE):
            exit_with_error("Error: master password is not set yet")

    if not keybox.exists(KeyBox.MASTER_KEY_TITLE):
        keybox.init_master_password()
    else:
        keybox.verify_master_password()

    if args.action == 'add':
        plain = input_content(args.title)
        keybox.set(args.title, plain)
    elif args.action == "view":
        mod_time, plain = keybox.view(args.title)
        mod_str = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(mod_time))
        sys.stdout.write("---\nKEY: %s\nMOD: %s\n%s---\n" % (args.title, mod_str, plain))
    elif args.action == "mod":
        sys.stdout.write("---\n%s---\n" % keybox.view(args.title)[1])
        plain = input_content(args.title)
        keybox.set(args.title, plain)
    elif args.action == "del":
        mod_time, plain = keybox.view(args.title)
        mod_str = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(mod_time))
        sys.stdout.write("---\nKEY: %s:\nMOD: %s\n%s---\n" % (args.title, mod_str, plain))
        confirm = raw_input("Confirm to delete key '%s' [yes/no]? " % args.title)
        while confirm not in ['yes', 'no']:
            confirm = raw_input("Confirm to delete key '%s' [yes/no]? " % args.title)
        if confirm == 'yes':
            keybox.delete(args.title)
            sys.stdout.write("Deleted.\n")
    elif args.action == "import":
        for title, mod_time, content in read_keys(args.file):
            if keybox.exists(title):
                sys.stdout.write("skipped %s: exists in database\n" % title)
            else:
                keybox.set(title, content, mod_time=mod_time)
                sys.stdout.write("imported %s\n" % title)
    elif args.action == "export":
        if fd == sys.stdout: fd.write("---\n")
        for title, mod_time in keybox.list():
            fd.write("KEY: %s\n" % title)
            fd.write("MOD: %s\n" % mod_time)
            fd.write("%s" % keybox.view(title)[1])
            if fd == sys.stdout:
                fd.write("---\n")
            else:
                fd.write("\n")
        if fd != sys.stdout:
            sys.stdout.write("Exported to file %s\n" % args.file)
    elif args.action == "reset":
        keybox.reset()


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        sys.stdout.write("\nUser aborted.\n")

Create a Python program to perform Bubble Sort on an unsorted list. [2, 4, 9, 5, 1] # Bubble Sort Algorithm
def bubbleSort(lst):
    n = len(lst) 
   
    # Traverse through all array elements 
	for i in range(n): 
 
		# Last i elements are already in place 
		for j in range(0, n-i-1): 
 
			# traverse the array from 0 to n-i-1 
			# Swap if the element found is greater 
			# than the next element
			if lst[j] > lst[j+1] : 
				lst[j], lst[j+1] = lst[j+1], lst[j]
 
# Driver code to test above
lst = [2, 4, 9, 5, 1]
bubbleSort(lst)

print ("Sorted array is:")
for i in range(len(lst)):
	print ("%d" %lst[i])
Write an algorithm to find the intersection of two sorted arrays in Python. a = [1, 5, 8, 9, 10], b = [2, 3, 5, 8, 9, 10] def intersection(a, b): 
intersection_list = []
for item1 in a:
    if item1 in b:
        intersection_list.append(item1)
return intersection_list

a = [1, 5, 8, 9, 10], b = [2, 3, 5, 8, 9, 10]
print(intersection(a,b))
# Output: [5, 8, 9, 10]
Write a function using Python that takes two strings and checks whether one is an anagram of the other.  def is_anagram(str1, str2):
    """This function checks whether two strings are an anagram of each other.
    
    Args:
        str1 (str): The first string.
        str2 (str): The second string.
    
    Returns:
        bool: True if the two strings are an anagram, False otherwise.
    """
    if len(str1) == len(str2):
        return all(str1.lower().count(c) == str2.lower().count(c) for c in str1.lower())
    else:
        return False
Build an AI-powered text summarizer in Python using natural language processing techniques.  import nltk
import re
from nltk.corpus import stopwords
from nltk.tokenize import sent_tokenize, word_tokenize
from nltk.stem import PorterStemmer

# create a function to preprocess the text
def preprocess(text):
    # tokenize the given text
    word_tokens = word_tokenize(text)
    # remove stopwords
    filtered_words = [w for w in word_tokens if not w in stopwords.words('english')]
    # create a Porter Stemmer object
    ps = PorterStemmer()
    # stem the remaining words
    stemmed_words = [ps.stem(w) for w in filtered_words]
    # return preprocessed words
    return stemmed_words

# create a function to generate a summary
def summarize(text):
    # preprocess the given text
    words = preprocess(text)
    # compute the frequency of each word
    word_freq = {}
    for word in words:
        if word in word_freq:
            word_freq[word] += 1
        else:
            word_freq[word] = 1
    # find the most frequent words
    most_freq_words = sorted(word_freq.items(), key=lambda x: x[1], reverse=True)[:3]
    # retrieve the sentences containing those words
    sentences = sent_tokenize(text)
    most_freq_words_sentences = []
    for sentence in sentences:
        for word, freq in most_freq_words:
            if word in sentence.lower():
                most_freq_words_sentences.append(sentence)
    # create the summary
    summary = ' '.join(most_freq_words_sentences)
    # return the summary
    return summary
Write a script to measure temperature from a device using python The device outputs an array of size 3, [Temp_C, Temp_F, Temp_K]. def measure_temperature(data):
    temp_c = data[0]
    temp_f = data[1]
    temp_k = data[2]
    return temp_c, temp_f, temp_k
Generate a REST API in Python that checks if a given email is valid or not. Not applicable import re

from flask import Flask, jsonify

app = Flask(__name__)

@app.route("/emailcheck/<string:email>", methods=['GET'])
def validate_email(email):

 if re.match(r"^[A-Za-z0-9\.\+_-]+@[A-Za-z0-9\._-]+\.[a-zA-Z]*$", email):
  return jsonify({'email': email, 'valid': True})
 else:
  return jsonify({'email': email, 'valid': False})

if __name__ == '__main__':
 app.run(debug=True)
Create a Python program that takes in a list of strings and prints out the items that appear more than once. ["red", "green", "blue", "red", "yellow"] from collections import Counter

def duplicates(items):
    c = Counter(items)
    for k, v in c.items():
        if v > 1:
            print(k)

items = ["red", "green", "blue", "red", "yellow"]
duplicates(items)
Create a webscraping program to get all aspects from a given website. https://en.wikipedia.org/wiki/Python_(programming_language) import requests 
from bs4 import BeautifulSoup 

URL = "https://en.wikipedia.org/wiki/Python_(programming_language)" 
r = requests.get(URL) 
soup = BeautifulSoup(r.content, 'html5lib') 

title = soup.title
print("Title is: ", title.string) 

h1 = soup.h1
print("h1 tag is: ", h1.string) 

links = soup.findAll("a")
for link in links:
    print("Link: ", link.get("href"))
Create a Python program that takes a list of integers and prints out the total number of times that the number 7 appears in the list. [1, 2, 3, 4, 5, 7, 7, 8, 9] def count_7(nums):
  count = 0
  for num in nums:
    if num == 7:
      count += 1
  return count
Write a Python program to find the greatest common divisor of two numbers. a = 24
b = 60 def gcd(a, b): 
  
    # base case 
    if a == 0 :  
        return b 
       
    return gcd(b % a, a) 
  
a = 24
b = 60
  
print ("GCD of", a , "and", b ,"is", gcd(a, b)) 
# GCD of 24 and 60 is 12
Create a Python script to generate random numbers with using a certain range. Minimum = 5, Maximum = 15 import random

min_n = 5
max_n = 15

def random_number_generator(min_n, max_n):
  return random.randint(min_n, max_n)

for num in range(0, 10):
    print (random_number_generator(min_n, max_n))
Write a Python program to convert a dataframe into a tabular format.  import pandas as pd

def dataframe_to_table(df):
  tabular_df = df.pivot_table(index=df.index, columns=df.columns, values=df.values)
  return tabular_df
Create a program to solve linear equations in Python.  import numpy as np 
 
def solve_linear_eqns(coefficients, constants): 
    # the matrix of coefficients 
    matrix = np.array(coefficients) 
    # the vector of constants 
    vector = np.array(constants)  
    # solve the system of linear equations 
    solution = np.linalg.solve(matrix, vector) 
    return solution
Create an object-oriented program in Python for a two-player Tic-Tac-Toe game.  class TicTacToe:
    # Initializing the tic tac toe board 
    def __init__(self):
        # empty board
        self.board = [' ' for x in range(9)]
        self.player = 'X'
    
     # function to print the board state
    def print_board(self):
        row1 = "| {} | {} | {} |".format(self.board[0], self.board[1], self.board[2])
        row2 = "| {} | {} | {} |".format(self.board[3], self.board[4], self.board[5])
        row3 = "| {} | {} | {} |".format(self.board[6], self.board[7], self.board[8])
        
        print()
        print(row1)
        print(row2)
        print(row3)
        print()
    
    # function to check for a win
    def is_win(self, player):
        win_state = [
            [self.board[0], self.board[1], self.board[2]],
            [self.board[3], self.board[4], self.board[5]],
            [self.board[6], self.board[7], self.board[8]],
            [self.board[0], self.board[3], self.board[6]],
            [self.board[1], self.board[4], self.board[7]],
            [self.board[2], self.board[5], self.board[8]],
            [self.board[0], self.board[4], self.board[8]],
            [self.board[2], self.board[4], self.board[6]],
        ]
        
        if [player, player, player] in win_state:
            return True
        else:
            return False
    
     # function to check for a draw 
    def is_draw(self):
        if ' ' not in self.board:
            return True
        else:
            return False
    
    def play(self):
        is_running = True
        while is_running:
            # print the board
            self.print_board()
            print("{}'s turn".format(self.player))
            
            # Get player input
            move = int(input("Enter position (1-9): ")) # indexing starts at 0
            # if position is empty
            if self.board[move-1] == ' ':
                self.board[move-1] == self.player
                # check for win
                if self.is_win(self.player):
                    self.print_board()
                    print('{} has won!'.format(self.player))
                    is_running = False
                # check for a draw
                elif self.is_draw():
                    self.print_board()
                    print('Draw! Game Over!')
                    is_running = False
                    
                # switch player
                if self.player == 'X':
                    self.player = 'O'
                else:
                    self.player = 'X'
            else:
                print('This position is taken. Please try again...')
            
        restart = input('Would you like to play again (Y/N): ')
        if restart == 'Y':
            self.__init__()
            self.play()
        else:
            is_running = False
Design a Python class to represent a Binary Search Tree.  class BinarySearchTree:
    '''
    A binary search tree is a Tree Data Structure 
    in which each node has at most two children which 
    are referred to as the left child and the right child.
    '''

    #defining a constructor to initialize the root node of a BST
    def __init__(self, value): 
        self.value = value 
        self.left = None
        self.right = None
        
    #method to insert a node at its correct position in BST
    def insert(self, value): 
        #compare the new element with the root node
        if self.value > value:
            #if the new element is smaller than root node,
            #it has to be inserted in left subtree
            if self.left is None: 
                self.left = BinarySearchTree(value) 
            else: 
                self.left.insert(value) 
        else:
            #if the new element is greater than root node,
            #it has to be inserted in right subtree
            if self.right is None: 
                self.right = BinarySearchTree(value) 
            else: 
                self.right.insert(value) 
    
    #method to search an element in the tree
    def search(self, value): 
        if self.value == value:
            return True
        #search in left subtree
        if value < self.value: 
            if self.left is None: 
                return False
            return self.left.search(value)
        #search in right subtree
        if value > self.value: 
            if self.right is None: 
                return False
            return self.right.search(value)
Write a C++ function that takes two strings as parameters and returns the length of the longest common subsequence between them. string1 = "python"
string2 = "honor" #include <iostream>
#include <algorithm>

int longestCommonSubsequence(std::string s1, std::string s2)
{
int s1len = s1.length(); 
int s2len = s2.length(); 
  
int LCS[s1len+1][s2len+1]; 
  
for (int i = 0; i <= s1len; i++) 
{ 
    for (int j = 0; j <= s2len; j++) 
    { 
    if (i == 0 || j == 0) 
        LCS[i][j] = 0; 
  
    else if (s1[i - 1] == s2[j - 1]) 
        LCS[i][j] = LCS[i - 1][j - 1] + 1; 
  
    else
        LCS[i][j] = std::max(LCS[i - 1][j], LCS[i][j - 1]); 
    } 
} 
  
  
// returns length of the longest common subsequence 
return LCS[s1len][s2len]; 
} 

int main() 
{ 
   std::string str1 = "python"; 
   std::string str2 = "honor"; 
  
   std::cout << longestCommonSubsequence(str1, str2); 
   return 0; 
} 

// Output: 3
Implement a naive bayes classifier in Python.  class NaiveBayesClassifier:
    """
    A simple Naive Bayes classifier implementation
    """
    def __init__(self):
        self.classes = []
        self.word_counts = {}
        self.priors = {}

    def fit(self, X, y):
        """
        Train the classifier 
        X: List of documents
        y: List of labels
        """
        # compute class priors
        self.classes = list(set(y))
        for c in self.classes:
            self.priors[c] = (y.count(c) / len(y))

        # compute count of words
        for x, c in zip(X, y):
            words = x.split()
            for word in words:
                if (c, word) not in self.word_counts:
                    self.word_counts[(c, word)] = 0
                self.word_counts[(c, word)] += 1

    def predict(self, X):
        """
        Predict classes for a list of documents
        X: List of documents
        """
        pred_y = []
        for x in X:
            pred_classes = []
            # compute posterior for each class
            for c in self.classes:
                posterior = self.priors[c]
                for word in  x.split():
                    if (c, word) not in self.word_counts:
                        count = 0
                    else:
                        count = self.word_counts[(c, word)]
                    posterior *= (count + 1) / (sum([self.word_counts[(c, w)] for w in self.word_counts if w[0] == c]) +  len(self.word_counts))
                pred_classes.append((c, posterior))
            # select the most probable class
            p = max(pred_classes, key=lambda x: x[1])
            pred_y.append(p[0])

        return pred_y
Generate a Python function that takes an array of elements and finds the frequency of each element [1,4,1,4,4,4,9,7] def count_frequency(l):
    frequencies = {}
    for i in l:
        if i in frequencies:
            frequencies[i] += 1
        else:
            frequencies[i] = 1
    return frequencies

l = [1,4,1,4,4,4,9,7]
print(count_frequency(l))
Create a Python class named Person with private variables for first name, last name, age, and gender. The class should also have a method called "say_hello" that prints the person's name. Not applicable class Person:
 def __init__(self, first_name, last_name, age, gender):
 self.__first_name = first_name
 self.__last_name = last_name
 self.__age = age
 self.__gender = gender

 def say_hello(self):
 print("Hello, my name is %s %s." % (self.__first_name, self.__last_name))
Write a python program to print the elements in a list which are not repeated more than once. [1, 2, 3, 2, 4, 2, 3] result = []
for ele in list:
    if list.count(ele) == 1:
        result.append(ele)
print(result) # Output: [1, 4]
Write a Python program that simulates a text-based adventure game.  # This is a text-based adventure game written in Python 
# You will have to explore the world, find items, and complete quests
def main():
    print("Welcome to the world of adventure! \n")

    # Initialize the world 
    rooms, items, quests = initialize_world()
    
    while True:
        # Print the current room description 
        print(rooms[current_room]['description'])

        # Print the current items and quests that are available
        print_items(current_room)
        print_quests(current_room)

        # Get user input 
        command = input("What would you like to do? \n")
        
        # Call the appropriate action based on the user input. 
        process_command(command, rooms, items, quests)
Create a Python function that takes two strings as input. The function should return a boolean value that indicates whether the two strings are anagrams of each other. eat, tea def is_anagram(s1, s2):
 s1 = s1.replace(' ', '').lower()
 s2 = s2.replace(' ', '').lower()

 if len(s1) == len(s2):
 return sorted(s1) == sorted(s2)
 else:
 return False
Calculate the factorial of a given number using a Python program.  def factorial(n):
 if n == 0:
 return 1
 else:
 return n * factorial(n-1)
Create a Python program that takes two numbers as inputs and returns the list of primes in the range between the two numbers. 2, 10 def find_primes(start, end):
 # create a list of numbers
 # between start and end
 numbers = range(start, end + 1)
 
 # iterate over the list
 for i in numbers:
 # check if number is divisible
 # by any of the numbers
 # below it
 for j in range(2, i):
 if i % j == 0:
 # if yes, then remove
 # that number from the list
 numbers.remove(i)
 
return numbers
 
print(find_primes(2, 10))
Write a Python function that takes a list of strings and returns a list of tuples containing each string and the number of characters in that string. ['foo', 'bar', 'baz'] def list_to_tuples(words):
    # create an empty list
    result = []

    # create a tuple for each string
    for word in words:
        result.append((word, len(word)))
    
    return result

result = list_to_tuples(['foo', 'bar', 'baz'])
print(result)
Write a Python program to modify a given list such that each element is equal to the square of the original element minus 2. sample_list = [3, 5, 7, 9] modified_list = [7, 15, 23, 31]

# Python code
sample_list = [3, 5, 7, 9]

modified_list = [x**2 - 2 for x in sample_list]
Design a python program to create a directory  import os

def create_dir(path):
    try:
        os.mkdir(path)
    except OSError:
        print("Creation of the directory %s failed" % path)
    else:
        print("Successfully created the directory %s " % path)
Convert the given algorithm written in pseudo code to Python. Input: Array A
1. from i=1 to i=length[A]
2.  j=i 
3.  min = A[i]
4.  for j = i+1 to length[A]
5.    if min > A[j]
6.      min = A[j] 
7.  swap A[i] with A[j] def selection_sort(A): 
    for i in range(len(A)): 
        minimum = i 
        for j in range(i+1, len(A)): 
            if A[minimum] > A[j]: 
                minimum = j 
        A[i], A[minimum] = A[minimum], A[i]
Create an API endpoint in Python that can accept a POST request containing a JSON object. Not applicable from flask import Flask, request, jsonify

app = Flask(name)

@app.route('/api/endpoint', methods=['POST'])
def endpoint():
 data = request.get_json()
 # Do something with data
 return jsonify({'message': 'Success'})

if name == 'main':
 app.run(debug=True)
Design a function in Python that takes a string, replaces all occurrences of the word "dog" with "cat" and returns the modified string. "I love my dog" def replace_word(string):
    modified_string = string.replace("dog", "cat")
    return modified_string

result = replace_word("I love my dog")
print(result)
Using Python, modify the implementation of a linked list to include a remove method that takes a value as an argument and removes the node with the given value from the linked list.  class Node: 
 
    # Constructor to create a new node
    def __init__(self, data):
        self.data = data 
        self.next = None
 
 
class LinkedList:
 
    # Function to initialize head
    def __init__(self):
        self.head = None
 
    # Function to insert a new node at the beginning
    def push(self, new_data):
        new_node = Node(new_data)
        new_node.next = self.head
        self.head = new_node
 
    # Utility function to print it the linked LinkedList
    def printList(self):
        temp = self.head
        while (temp):
            print (temp.data,)
            temp = temp.next
 
    # Function to remove a node from linked list
    def remove(self, value): 
        temp = self.head
  
        # If head node itself holds the key 
        # or multiple occurrences of key
        while temp is not None:
            if temp.data == value:
                break
            prev = temp
            temp = temp.next
        if temp == None:
            return 
        if temp == self.head: 
            self.head = temp.next 
        else: 
            prev.next = temp.next
 
    # This code is contributed by Sachin Bisht
Develop an algorithm in Python for searching for a given item in a sorted list? sorted_list = [2, 3, 4, 5, 8, 9, 10] 
item = 8 def search(sorted_list, item):
    low = 0
    high = len(sorted_list) - 1
    found = False

    while low <= high and not found:
        mid = (low + high) // 2
        if sorted_list[mid] == item:
            found = True
        else:
            if item < sorted_list[mid]:
                high = mid - 1
            else:
                low = mid + 1
    return found

sorted_list = [2, 3, 4, 5, 8, 9, 10] 
item = 8
print(search(sorted_list, item))
Generate a python code to evaluate a given polynomial at a given x-value. polynomial = [2, 4, 5]
x = 3 def evaluate_polynomial(polynomial, x):
    result = 0
 
    for i in range(len(polynomial)):
        result += polynomial[i] * x**i
 
    return result
 
print(evaluate_polynomial(polynomial, x))
Write a Python program to solve a quadratic equation. a = 1
b = -5
c = 6 import math

# Solve the quadratic equation ax**2 + bx + c = 0 
# ax**2 + bx + c = 0 
# find x

a = 1
b = - 5
c = 6

d = (b**2) - (4*a*c)
 
# find two solutions
sol1 = (-b-math.sqrt(d))/(2*a)
sol2 = (-b+math.sqrt(d))/(2*a)
 
print('The solution are {0} and {1}'.format(sol1,sol2))
Develop a Python program to delete the third element of a given list. list = ["A", "B", "C", "D", "E"] # Input list
list = ["A", "B", "C", "D", "E"]

# Deleting the third element
list.pop(2)

# Printing the list after deletion
print(list)
# Output: ['A', 'B', 'D', 'E']
Write a Python algorithm to calculate a person's body mass index (BMI). Body mass index (BMI) is calculated using a person’s weight in kilograms divided by their height in meters squared. def bmi_calculation(height, weight):  
    bmi = weight / (height * height)  
    return bmi
Design a FOR loop algorithm in Python to print all numbers starting from one to the given number. 10 for i in range(1, 11): 
    print(i)
Create a Python program that implements the insertion sort algorithm.  def insertion_sort(list_):
    for i in range(1, len(list_)):
        temp = list_[i]

        j = i-1
        while j >= 0 and temp < list_[j]:
            list_[j+1] = list_[j]
            j -= 1
        list_[j+1] = temp

    return list_
Generate a python program that normalizes all measurements in a given dataset.  import pandas as pd

def normalize_measurements(data):
    '''This function normalizes the given dataset.'''
    normalized_data = data.copy()
    for col in normalized_data.columns:
        min_val = normalized_data[col].min()
        max_val = normalized_data[col].max()
        normalized_data[col] = (normalized_data[col] - min_val) / (max_val - min_val)
    return normalized_data

if __name__ == "__main__":
    # Read the csv file
    df = pd.read_csv('data.csv')

    # Normalize the data
    normalized_df = normalize_measurements(df)

    # Save the normalized data
    normalized_df.to_csv('normalized_data.csv', index=False)
Create a Python program to generate 4 random numbers from 0 - 9. Not applicable import random

for i in range(4):
 num = random.randint(0,9)
 print(num)
Write a Python script that uses recursion to calculate the Fibonacci sequence for a given number of terms. 6 def Fibonacci(n): 
   if n<0: 
      print("Incorrect input") 
   elif n==1: 
      return 0
   elif n==2: 
      return 1
   else: 
      return Fibonacci(n-1)+Fibonacci(n-2) 
 
# Driver Program 
n = 6
print(Fibonacci(n))
Create a data structure in Python to store employee names and their corresponding salaries. Michael $45000, Andrew $55000, Mark $70000 employee_data = {
    "Michael": 45000,
    "Andrew": 55000,
    "Mark": 70000
}
Generate a script to establish a secure connection between two computers.  # Use Python
import socket

# Create socket object
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# Bind the socket to an address and port
s.bind((‘127.0.0.1’, 8888))

# Listen for incomming connections
s.listen()

# Perform handshake to establish a secure connection
while True:
    # Accept connection
    conn, addr = s.accept()
    with conn:
        print('Connected by', addr)
        # Generate handshake messages
        handshake_msg = generate_handshake_msg()
        # Send handshake message
        conn.send(handshake_msg)
        # Receive message
        received_msg = conn.recv(1024)
        # Validate handshake message
        if validate_handshake_msg(received_msg):
            # Establish connection
            print('Secure connection established!')
            break
Create a python program to generate a random number from 0 to 100.  import random

random_num = random.randint(0,100)
print(random_num)
Create a function to find the mean of a given array in Python. [2, 4, 5, 7] def mean(arr): 
  return sum(arr)/len(arr)

arr = [2, 4, 5, 7]
mean_val = mean(arr)
print("Mean of the array is", mean_val)
# Output: Mean of the array is 4.5
Develop a Python program that can find the average of any set of numbers.  def find_average(nums):
    total = 0
    for num in nums:
        total += num
    return total / len(nums)
Design a Python program to randomize a list of given integers using an optimized Fisher-Yates algorithm.  def randomized_list(num_list):
    for i in range(len(num_list)-1,0,-1):
        j = random.randint(0,i)
        num_list[i],num_list[j] = num_list[j],num_list[i]
    return num_list
Generate a code that creates a new python class which inherits attributes and methods from the base class. Base class name: Employee
Subclass name: Manager class Manager(Employee):
    """A manager class that inherits from the employee class."""
    
    def __init__(self, name, age, salary, designation):
        """Initialize the manager class with the inherited attributes from the Employee class"""
        super().__init__(name, age, salary)
        self.designation = designation
    
    def give_raise(self, amount):
        """Give the manager a raise equivalent to the amount specified"""
        self.salary += amount
Write a Python program which includes a feature which can calculate the sum of all the numbers from 1 to user's given number.  def sum(n): 
    sum = 0
    for i in range(1,n+1): 
        sum = sum + i 
    return sum
Write a Python program to create a GUI calculator interface using Tkinter. Not applicable import tkinter as tk

window = tk.Tk()
window.title('Calculator')
window.geometry('300x150')

# Create the input field
input_field = tk.Entry(
 window,
 font=('Courier', 20),
 width=15,
 borderwidth=5
)
input_field.grid(row=0, column=0, columnspan=4, padx=10, pady=10)

# Function to return the value of the button clicked
def button_pressed(value):
 current = input_field.get()
 input_field.delete(0, tk.END)
 input_field.insert(0, str(current) + str(value))

# Create button object
button_0 = tk.Button(window, text='0', padx=40, pady=20, command=lambda: button_pressed(0))
button_1 = tk.Button(window, text='1', padx=40, pady=20, command=lambda: button_pressed(1))
button_2 = tk.Button(window, text='2', padx=40, pady=20, command=lambda: button_pressed(2))
button_3 = tk.Button(window, text='3', padx=40, pady=20, command=lambda: button_pressed(3))
button_4 = tk.Button(window, text='4', padx=40, pady=20, command=lambda: button_pressed(4))
button_5 = tk.Button(window, text='5', padx=40, pady=20, command=lambda: button_pressed(5))
button_6 = tk.Button(window, text='6', padx=40, pady=20, command=lambda: button_pressed(6))
button_7 = tk.Button(window, text='7', padx=40, pady=20, command=lambda: button_pressed(7))
button_8 = tk.Button(window, text='8', padx=40, pady=20, command=lambda: button_pressed(8))
button_9 = tk.Button(window, text='9', padx=40, pady=20, command=lambda: button_pressed(9))
button_add = tk.Button(window, text='+', padx=39, pady=20, command=lambda: button_pressed('+'))
button_sub = tk.Button(window, text='-', padx=41, pady=20, command=lambda: button_pressed('-'))
button_mul = tk.Button(window, text='*', padx=40, pady=20, command=lambda: button_pressed('*'))
button_div = tk.Button(window, text='/', padx=41, pady=20, command=lambda: button_pressed('/'))

# Place all the buttons
button_0.grid(row=4, column=0)
button_1.grid(row=3, column=0)
button_2.grid(row=3, column=1)
button_3.grid(row=3, column=2)
button_4.grid(row=2, column=0)
button_5.grid(row=2, column=1)
button_6.grid(row=2, column=2)
button_7.grid(row=1, column=0)
button_8.grid(row=1, column=1)
button_9.grid(row=1, column=2)
button_add.grid(row=4, column=3)
button_sub.grid(row=3, column=3)
button_mul.grid(row=2, column=3)
button_div.grid(row=1, column=3)

# Run the mainloop
window.mainloop()
Generate a program to compare the lengths of two strings using Python. s1 = "hello"
s2 = "world" def compare_string_lengths(s1, s2):
 if len(s1) == len(s2):
 return 0
 elif len(s1) < len(s2):
 return -1
 else:
 return 1
Generate a Python program-method to perform left rotation of an array  def left_rotate_array(arr, d):
    n = len(arr)
    if d % n == 0: 
        return
    for _ in range(d):
        i = 0
        temp = arr[0]
        for i in range(n - 1):
            arr[i] = arr[i + 1]
        arr[n - 1] = temp

if __name__ == '__main__':
    arr = [1, 2, 3, 4, 5]
    d = 2
    left_rotate_array(arr, d)
    print(arr)
Using the Pandas Python library, write a program to group given data and calculate the mean for each column. import pandas as pd

data = {
 'name': ['John', 'Robert', 'Sue', 'John', 'Jeff', 'Robert'], 
 'score': [66, 52, 80, 74, 85, 62],
 'type': ['math', 'reading', 'math', 'math', 'math', 'reading']
}

df = pd.DataFrame(data) import pandas as pd

# Load the data
data = {
 'name': ['John', 'Robert', 'Sue', 'John', 'Jeff', 'Robert'], 
 'score': [66, 52, 80, 74, 85, 62],
 'type': ['math', 'reading', 'math', 'math', 'math', 'reading']
}

df = pd.DataFrame(data)

# Group the data
groups = df.groupby('type')

# Calculate the mean per column
print(groups['score'].mean())

# Output
type
math      75.666667
reading   57.000000
Name: score, dtype: float64
Write a Python function to generate an array of numbers from 1 to n in random order. 7 import random

def generate_random_array(n):
    array = [i for i in range(1, n + 1)]
    random.shuffle(array)
    return array

result = generate_random_array(7)
print(result)
Create a machine learning application using Python and the scikit-learn library. The application should include a step for training a Logistic Regression model and predicting the output for a given input. X_train, y_train = datasets.load_wine(return_X_y=True) import numpy as np
import matplotlib.pyplot as plt
from sklearn import datasets, linear_model

# Loading the dataset
X_train, y_train = datasets.load_wine(return_X_y=True)

# Creating a Logistic Regression model
logreg = linear_model.LogisticRegression()

# Training the model
logreg.fit(X_train, y_train)

# Making predictions
predictions = logreg.predict(X_test) 

# Evaluating the model
print("Accuracy: ", metrics.accuracy_score(y_test, predictions))
Create a CLI program in Python that takes two arguments, multiplies them together and prints out the result. Not applicable import argparse

parser = argparse.ArgumentParser()
parser.add_argument('number1', type=int, help='First number to multiply')
parser.add_argument('number2', type=int, help='Second number to multiply')
args = parser.parse_args()

result = args.number1 * args.number2
print(result)
Write a Python function that takes a list of words as input and capitalizes the first character of each element in the list. ["apple", "banana", "strawberry"] def capitalize(words):
  return [word.capitalize() for word in words]

input_words = ["apple", "banana", "strawberry"]
capitalized_words = capitalize(input_words)
print(capitalized_words)
Create Python code to manipulate a given list of strings so that each string contains only the first letter from the original string. arr = ["apple", "banana", "coconut"] def shorten_string(arr):
    """
    Manipulate a list of strings so that each string contains only the first letter from the original string.
    """
    result = []
    for word in arr:
        result.append(word[0])
    
    return result

# Call the function
arr = ["apple", "banana", "coconut"]
result = shorten_string(arr)
print(result)
Write a python program to classify a given email as spam or not. Subject: 50% Off Discount!!!

Hey there,

We are giving away a 50% discount on all our products today only. Hurry up and claim your offer now! def is_spam(email):
    words = ["discount", "offer", "free", "cheap", "50% off", "purchase now"]
    email_words = email.lower().split()
    word_list = [word for word in email_words if word in words]
    if len(word_list) > 0:
        return 'spam'
    else:
        return 'not spam'
Create a Python program that can turn a regular text phrase into a hex encoded form. Hello World def text_to_hex(text):
    hex_encoded = ""
    for i in text:
        hex_encoded += ((hex(ord(i)))[2:]).zfill(2) 
    return hex_encoded

print(text_to_hex("Hello World"))
Edit the following python class so that it is a singly linked list. class Node:
    def __init__(self, data):
        self.data = data
        self.prev = None
        self.next = None class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
Given a list of integers, write a Python program to print the latest 3 largest numbers. [5, 1, 10, 25, 74, 17, 2] def print_largest_three_numbers(numbers): 
    numbers.sort(reverse=True) 
    print(*numbers[:3], sep = ", ") 

print_largest_three_numbers([5, 1, 10, 25, 74, 17, 2])

Output:
74, 25, 17
Create a Python script that takes in two lists as inputs and generates a list containing all possible pairings between elements from both lists. Input 1: [1, 2, 3]
Input 2: ['a', 'b', 'c'] list1 = [1,2,3]
list2 = ['a', 'b', 'c']

pairs = []

for x in list1:
    for y in list2:
        pairs.append((x,y))

print(pairs) // Output: [(1, 'a'), (1, 'b'), (1, 'c'), (2, 'a'), (2, 'b'), (2, 'c'), (3, 'a'), (3, 'b'), (3, 'c')]
Write a python program to compute the total cost of an item given a price and the quantity. price = 5
quantity = 10 def calculate_total_price(price, quantity):
  total_cost = price * quantity
  return total_cost

price = 5
quantity = 10
total_cost = calculate_total_price(price, quantity)
print("The total cost is:", total_cost)
Write a class definition in python that will initialize an object of the class with given parameters name, age class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
Write an algorithm in Python to merge two sorted arrays into one. Input data will be two unsorted arrays of integers. def merge_arrays(arr1, arr2): 
    combined_arr = []
    i, j = 0, 0
    while i < len(arr1) and j < len(arr2):
        if arr1[i] < arr2[j]:
            combined_arr.append(arr1[i]) 
            i += 1
        else: 
            combined_arr.append(arr2[j])
            j += 1
             
    combined_arr.extend(arr1[i:]) 
    combined_arr.extend(arr2[j:]) 
  
    return combined_arr
Generate a Python program that accepts an integer as an input and then outputs a string composed of stars 5 # Get the number from the user
num = int(input("Enter a number: "))

# Generate a string of stars
star_string = '*' * num

print(star_string)
Write a Python code that finds the sum of the two largest numbers in a given list. [1,2,3,4,5] def find_largest_sum(list):
    largestNum = max(list)
    list.remove(largestNum)
    secondLargestNum = max(list)
    return largestNum+secondLargestNum

print(find_largest_sum([1,2,3,4,5])) # 9
Generate a mathematic expression in Python for solving a quadratic equation given numbers 4, 1, and -3. 4, 1, and -3 # Generate a mathematic expression
# to solve a quadratic equation

# Quadratic equation: ax^2 + bx + c = 0
# a = 4, b = 1, c = -3

import math

# Solve Quadratic Equation
a = 4
b = 1
c = -3
discriminant = (b*b - (4 * a * c))
if discriminant < 0:
    print('No numeircal solution for the given equation.')
else:
    try:
        x_1 = (-b + math.sqrt(discriminant)) / (2 * a)
        x_2 = (-b - math.sqrt(discriminant)) / (2 * a)
        print('x1 = ', x_1, ' and x2 = ', x_2)
    except:
        print('Invalid input.')
Design a reinforcement learning agent in Python that can play tic-tac-toe and beat humans. Not applicable import random
import numpy as np

#Create the board
board = np.zeros((3,3))

#Rewards
#To avoid tie scores
1  reward for winning
-1 reward for loosing

#Adaptive learning rate, in this case we will use greedy q-learning
epsilon = 0.2
#Discount Factor
gamma = 0.9
#Reward
reward = 0

#Backtracking the best move
def bestMove(board):
	bestScore = 0
	for i in range(3):
		for j in range(3):
			if board[i][j] == 0:
				board[i][j] = 1
				score = minimax(board, False)
				board[i][j] = 0
				if score > bestScore:
					bestScore = score
					move = [i, j]
	return move			

#Game Logic
def minimax(board, isMaximizing):
	#Check if it is a winning board
	if checkWin(board):
		return reward
		
	#Play the game
	if isMaximizing:
		bestScore = -float("inf")
		for i in range(3):
			for j in range(3):
				if board[i][j] == 0:
					board[i][j] = 1
					score = minimax(board, False)
					board[i][j] = 0
					bestScore = max(score, bestScore)
		return bestScore
	
	#Minimizing
	else:
		bestScore = float("inf")
		for i in range(3):
			for j in range(3):
				if board[i][j] == 0:
					board[i][j] = -1
					score = minimax(board, True)
					board[i][j] = 0
					bestScore = min(score, bestScore)
		return bestScore

#Check win
def checkWin(board):
	#Horizontal
	for i in range(3):
		if board[i][0] == board[i][1] and board[i][1] == board[i][2] and board[i][0] != 0:
			return board[i][0]
	#Vertical
	for i in range(3):
		if board[0][i] == board[1][i] and board[1][i] == board[2][i] and board[0][i] != 0:
			return board[0][i]
	#Diagonal Top-Left to Bottom-Right
	if board[0][0] == board[1][1] and board[1][1] == board[2][2] and board[0][0] != 0:
		return board[0][0]
	#Diagonal Top-Right to Bottom-Left
	if board[0][2] == board[1][1] and board[1][1] == board[2][0] and board[0][2] != 0:
		return board[0][2]
	return 0
Create a Python script to find all subsets of a given set.  def all_subsets(s):
    subsets = []
    for i in range(2**len(s)):
        bitmask = bin(i)[2:]
        subset = []
        for j in range(len(s)):
            if bitmask[j] == "1":
                subset.append(s[j])
        subsets.append(subset)
    return subsets
Create a neural network in Python for a regression task to predict a numerical value.  # import necessary libraries 
import numpy as np 
import pandas as pd 
import tensorflow as tf 

# define the neural network architecture 
model = tf.keras.Sequential([ 
     tf.keras.layers.Input(shape=(input_dim,)), 
     tf.keras.layers.Dense(units=128, activation="relu"), 
     tf.keras.layers.Dense(units=64, activation="relu"), 
     tf.keras.layers.Dense(units=1, activation="linear") 
]) 

# compile the model 
model.compile(optimizer="adam", loss="mean_squared_error") 

# fit the model 
model.fit(X_train, Y_train, epochs=10)
Create a Python script to sort a list of tuples by the second element in the tuple in ascending order. myList = [('Tom',7),('Harry',5),('Bob',8)] def sortList(myList): 
 # sort list by second element  
 myList.sort(key = lambda x: x[1]) 
  
 # printing the sorted list  
 print ("The sorted list in ascending order is : ") 
 for i in range(len(myList)): 
  print(myList[i]), 

myList = [('Tom',7),('Harry',5),('Bob',8)]
sortList(myList)
Generate an algorithm in Python to determine the count of each occurrence of a given character in a string string: "abracadabra"
character: 'a' def count_characters(string, character):
    count = 0
    for c in string:
        if c == character:
            count += 1
    return count

count_characters("abracadabra", 'a')  # 5
write a python program for its purpose Compute the factorial of a given number """
Compute the factorial of a given number
"""

def factorial(n): 
	if n == 1: 
		return 1
	else: 
		return n * factorial(n-1) 

if __name__ == '__main__': 
	num = int(input()) 
	print(factorial(num))
Write a Python function to insert an element in a given list after a given index. list = [1, 2, 3, 4, 5]
index = 2
element = 6 def insert_element(list, index, element):
    list.insert(index + 1, element)
    return list
Create a Python class that validates a given IP address IP address: 8.8.8.8 class validateIP:
    def __init__(self, ip_address):
        self.ip_address = ip_address
    
    def validate(self):
        ip_segments = self.ip_address.split(".")
        if len(ip_segments) != 4:
            return False
        
        for segment in ip_segments:
            number = int(segment)
            if number < 0 or number > 255:
                return False
        
        return True
Write a python class called "Car" which has attributes like model, color and year.  class Car(object):
    """A car object with attributes like model, colour and year"""

    def __init__(self, model, colour, year):
        self.model = model
        self.colour = colour
        self.year = year

# Example
my_car = Car("Ford Mustang", "Red", 2016)
Create a JSON parser in Python  import json

def parseJSON(jsonString):
    data = json.loads(jsonString)
    return data
Write a python statement to print out the elements of the given list. my_list = [1, 2, 3] print(my_list)
Design a function to print the Pascal's triangle in Python. rows = 6 def print_pascal_triangle(rows):
    """Print the Pascal's triangle."""
    for line in range(1, rows + 1):
        # Print the leading spaces
        for _ in range(rows - line):
            print(end="  ")
        # Print the numbers in the current row
        for i in range(line):
            print(binomial_coefficient(line-1, i), end="  ")
        # Go to the new line
        print()

def binomial_coefficient(n, k):
    """Calculate the binomial coefficient of n, k"""
    result = 1
    for i in range(1, k + 1):
        result = result * (n - i + 1) / i
    return result

# Output
print_pascal_triangle(rows)
Create an algorithm in Python that prints a multiplication table. Number: 8 for x in range(1, 11):
 for y in range(1, 11):
 print(str(x) + "x" + str(y) + "=" + str(x * y))

print("The multiplication table of 8:")

for x in range(1, 11):
 print(str(x) + "x" + "8" + "=" + str(x * 8))
Create a program in Python that removes duplicates from a given array. [1,1,2,3,4,5,5,5] def remove_duplicates(array):
    new_array = []
    for element in array:
        if element not in new_array:
            new_array.append(element)
    return new_array
Develop an algorithm using Python to calculate the Euclidean distance between 2 points.  def euclidean_distance(point1, point2): 
    sum_squared_distance = 0

    for i in range(len(point1)): 
        sum_squared_distance += (point1[i] - point2[i])**2 
    return sum_squared_distance**0.5
Write a web scraper in Python to collect all the articles from the front page of a given website. URL: website.com import requests
from bs4 import BeautifulSoup

# Specify the URL
url = 'website.com'

# Get the response
response = requests.get(url)

# Parse the response
soup = BeautifulSoup(response.text, 'html.parser')

# Extract all the articles on the front page
articles = soup.find_all('article', class_='front-page-article')

# Iterate through each article and print its text
for article in articles:
 print(article.find('h2').text)
Construct a Python program that takes a list of words and prints the 3rd most common word in the list? words = ['Cat', 'Dog', 'Bird', 'Horse', 'Cow', 'Lion'] import collections
def third_most_common(words):
    count = collections.Counter(words).most_common()
    return count[2][0]
third_most_common(words) # returns 'Bird'
Design a Python program to print prime numbers between two given integer numbers. 30, 50 #Function to check if a number is prime
def checkPrime(num):
    if num > 1:
        for i in range(2, num):
            if (num % i) == 0:
                return False
        return True
    else:
        return False

#Function to find prime numbers in given range
def getPrimeNumbersInRange(low,high):
    if low < high:
        for i in range(low,high + 1):
            if checkPrime(i):
                print(i," is a prime number")

#Call the function
low = 30
high = 50
getPrimeNumbersInRange(low, high)
Create a Python script that calculates the expenses of an employee for a given month. The script should ask the user for the number of hours worked, the hourly rate, and any other applicable expenses such as travel expenses. Hours worked: 40
Hourly rate: $10
Travel expenses: $200 # Ask the user for input
hours_worked = input("How many hours did you work in the month: ")
hourly_rate = input("What is the hourly rate: ")
travel_expenses = input("What are the total travel expenses: ")

# Calculate the total pay
total_pay = hours_worked * hourly_rate
total_expenses = travel_expenses

# Output the results
print("Total pay: $" + str(total_pay))
print("Total expenses: $" + str(total_expenses))
Write a function for merging two sorted lists in Python. list1 = [2, 9, 12]
list2 = [4, 8, 10] def mergeSortedLists(list1, list2):
    list3 = []
    i = 0
    j = 0
    while i < len(list1) and j < len(list2):
        if list1[i] < list2[j]:
            list3.append(list1[i])
            i += 1
        else:
            list3.append(list2[j])
            j += 1

    while i < len(list1):
        list3.append(list1[i])
        i += 1

    while j < len(list2):
        list3.append(list2[j])
        j += 1
    return list3

list3 = mergeSortedLists(list1, list2);
console.log(list3);
Create a Python program to scramble a given string and return the scrambled version. The string: "Hello World" import random

def scrambleString(string):
  # Split the string into a list
  chars = list(string)

  # Shuffle the list
  random.shuffle(chars)

  # Join the list to form the scrambled string
  scrambled = "".join(chars)

  return scrambled

# Create the string
string = "Hello World"

# Scramble the string
scrambled = scrambleString(string)

# Print the result
print(scrambled)
Generate a Python program to compute the sum of values of a given dictionary. data = {'a':1, 'b':2, 'c':3} def sum_values(data):
    return sum(data.values())
Create a python program that checks if a given array is sorted in ascending order array = [1, 5, 3, 9, 4] def check_sorted(array):
    return all(array[i] <= array[i+1] for i in range(len(array)-1))
Develop a web scraping Python program to scrape the product details of a sample store. The website is located at https://example.com import requests
from bs4 import BeautifulSoup

#  Get the HTML from the webpage
page = requests.get('https://example.com')
soup = BeautifulSoup(page.text, 'html.parser')

# Isolate the product information
product_list = soup.find_all('div', class_='product')

# Extract the product information
products = []
for product in product_list:
   name = product.find('div', class_='name').text.strip()
   price = product.find('div', class_='price').text.strip()
   description = product.find('div', class_='description').text.strip()
   products.append({
      'name': name,
      'price': price,
      'description': description
   })

# Print the product list
print(products)
Write a script in Python to sort a list of words alphabetically. [python, java, c, sql, ruby] def sort_words(words):
    '''
    Function to sort a list of words alphabetically
    
    Parameters
    words: list of strings
    
    Returns
    sorted list of strings
    '''
    sorted_list = sorted(words)
    return sorted_list
The given code defines a function called "make_tile" that creates a 3D model of a tile with specified dimensions, brick type, size, and level of detail using the Blender Python API. The function takes in several keyword arguments including "dimensions", "brick_type", "brick_size", "circle_verts", "type", "detail", and "bme", and returns a BMesh object representing the tile. To use this function, call it with the desired arguments and store the returned BMesh object.  # Copyright (C) 2020 Christopher Gearhart
# chris@bblanimation.com
# http://bblanimation.com/
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# System imports
import bpy
import bmesh
import math
import numpy as np

# Blender imports
from mathutils import Vector

# Module imports
from .generator_utils import *


def make_tile(dimensions:dict, brick_type:str, brick_size:list, circle_verts:int=None, type:str=None, detail:str="LOW", bme:bmesh=None):
    """
    create inverted slope brick with bmesh

    Keyword Arguments:
        dimensions   -- dictionary containing brick dimensions
        brick_type   -- cm.brick_type
        brick_size   -- size of brick (e.g. standard 2x4 -> [2, 4, 3])
        circle_verts -- number of vertices per circle of cylinders
        type         -- type of tile in ('TILE', 'TILE_GRILL')
        detail       -- level of brick detail (options: ('FLAT', 'LOW', 'HIGH'))
        bme          -- bmesh object in which to create verts

    """
    # create new bmesh object
    bme = bmesh.new() if not bme else bme

    # get halfScale
    d = Vector((dimensions["half_width"], dimensions["half_width"], dimensions["half_height"]))
    d.z = d.z * (brick_size[2] if flat_brick_type(brick_type) else 1)
    # get scalar for d in positive xyz directions
    scalar = Vector((brick_size[0] * 2 - 1,
                     brick_size[1] * 2 - 1,
                     1))
    d_scaled = vec_mult(d, scalar)
    # get thickness of brick from inside to outside
    thick_xy = dimensions["thickness"] - (dimensions["tick_depth"] if "High" in detail and min(brick_size) != 1 else 0)
    thick = Vector((thick_xy, thick_xy, dimensions["thickness"]))

    # create cube
    if "GRILL" in type:
        coord1 = -d
        coord1.z += dimensions["slit_height"]
        coord2 = d_scaled
        coord2.z = coord1.z
        v1, v4, v3, v2 = make_rectangle(coord1, coord2, face=False, bme=bme)[1]
    else:
        sides = [1, 1 if detail == "FLAT" else 0, 1, 1, 1, 1]
        coord1 = -d
        coord1.z += dimensions["slit_height"]
        coord2 = d_scaled
        v1, v2, v3, v4, v5, v6, v7, v8 = make_cube(coord1, coord2, sides, bme=bme)[1]

    # make verts for slit
    slit_depth = Vector([dimensions["slit_depth"]]*2)
    coord1 = -d
    coord1.xy += slit_depth
    coord2 = Vector((d_scaled.x, d_scaled.y, -d.z + dimensions["slit_height"]))
    coord2.xy -= slit_depth
    v9, v10, v11, v12, v13, v14, v15, v16 = make_cube(coord1, coord2, [0, 1 if detail == "FLAT" and "GRILL" not in type else 0, 1, 1, 1, 1], bme=bme)[1]
    # connect slit to outer cube
    bme.faces.new((v14, v4, v1, v13))
    bme.faces.new((v15, v3, v4, v14))
    bme.faces.new((v16, v2, v3, v15))
    bme.faces.new((v13, v1, v2, v16))

    # add details
    if "GRILL" in type:
        if brick_size[0] < brick_size[1]:
            add_grill_details(dimensions, brick_size, thick, scalar, d, v4, v1, v2, v3, v9, v10, v11, v12, bme)
        else:
            add_grill_details(dimensions, brick_size, thick, scalar, d, v1, v2, v3, v4, v9, v10, v11, v12, bme)

    elif detail != "FLAT":
        # making verts for hollow portion
        coord1 = -d + Vector((thick.x, thick.y, 0))
        coord2 = vec_mult(d, scalar) - thick
        v17, v18, v19, v20, v21, v22, v23, v24 = make_cube(coord1, coord2, [1, 0, 1, 1, 1, 1], flip_normals=True, bme=bme)[1]
        # connect hollow portion to verts for slit
        bme.faces.new((v18, v17, v9, v10))
        bme.faces.new((v19, v18, v10, v11))
        bme.faces.new((v20, v19, v11, v12))
        bme.faces.new((v17, v20, v12, v9))

        # add supports
        if max(brick_size[:2]) > 2:
            add_supports(dimensions, dimensions["height"], brick_size, brick_type, circle_verts, type, detail, d, scalar, thick, bme)

    return bme

Create an optimization algorithm for a Machine Learning model in Python. The algorithm should use the Bayesian Optimization library Scikit-Optimize and optimize both the model parameters and hyperparameters to maximize the accuracy. Not applicable import numpy as np
from skopt.space import Integer, Real
from skopt import Optimizer
from sklearn.model_selection import cross_val_score

# Define the search space
search_space = [
 Integer(2, 10, name="num_layers"),
 Integer(4, 32, name="num_units"),
 Real(10**-5, 10**0, "log-uniform", name="learning_rate"),
 Real(10**-5, 10**0, "log-uniform", name="weight_regularization"),
 Integer(2, 5, name="dropout_rate")
]

# Define the optimizer
opt = Optimizer(search_space, n_random_starts=100, acq_func="EI")

# Define the objective
@opt.objective
def objective(parameters):
  # Set the parameters of the model
  model.set_params(parameters)

  # Calculate the cross-validation score
  cv_score = cross_val_score(model, X, y).mean()

  # Return the negative score to minimize
  return -cv_score

# Optimize the model
opt.maximize(init_points=10, n_iter=100)
Generate a Python function to find the sum of the digits in a given number. Not applicable def sum_of_digits(n):
  result = 0
  while (n > 0):
    result += n % 10;
    n //= 10;
  return result
Optimize the performance of a given Python script.  import time

def optimize_performance(function):
    start_time = time.time()
    function
    end_time = time.time()
    execution_time = end_time - start_time
    print("Function took", execution_time, "seconds to execute.")

    # perform optimizations
    optimized_function = function
    start_time = time.time()
    optimized_function
    end_time = time.time()
    execution_time = end_time-start_time
    print("Optimized Function took", execution_time, "seconds to execute")
Develop an algorithm in Python to find the minimum and maximum from an unsorted list of numbers. [10, 24, 55, 16, 1, 9] def find_min_max(list_of_nums):
    min_num = list_of_nums[0]
    max_num = list_of_nums[0]

    for num in list_of_nums:
        if num < min_num:
            min_num = num
        if num > max_num:
            max_num = num
    
    return (min_num, max_num)

list_of_nums = [10, 24, 55, 16, 1, 9]
(min_num, max_num) = find_min_max(list_of_nums)
print("Min Num: {}  Max Num: {}".format(min_num, max_num))
Write a Python program to find the maximum length of consecutive 1s in a binary array. Array = [1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0] def find_max_consecutive_1s(Array):
    max_count = 0
    count = 0
    for i in Array:
        if i == 1:
            count += 1
            max_count = max(max_count, count)
        else:
            count = 0
    return max_count
Compose a piece of code to print the length of a given string. "Python" string = "Python"
print("Length of the given string is:", len(string))
Write a Python program to sort a list of words using a recursive bubble sort. ['word', 'list', 'of', 'words'] def bubble_sort(arr):
    # Base case
    if len(arr) == 1:
        return arr
 
    swapped = False
    for i in range(len(arr)-1):
        if arr[i] > arr[i+1]:
            arr[i], arr[i+1] = arr[i+1], arr[i] 
            swapped = True
 
    # Recursive call if items are swapped
    if swapped:
        return bubble_sort(arr)
 
    return arr

# Test
words = ['word', 'list', 'of', 'words']

# Sort
bubble_sort(words)

# Print sorted list
print(words)
Write a Python program to generate a password of length 10 containing lowercase letters, uppercase letters, and numbers.  import string
import random

def generate_password():
    letters = string.ascii_letters + string.digits
    password = ''.join(random.choice(letters) for i in range(10))
    return password

print(generate_password())
Evaluate a given mathematical expression using Python. 2 + (3 * 5) def eval_expr(expr):
  return eval(expr)

print(eval_expr("2 + (3 * 5)"))

# Output
# 17
Write a Python program for finding the longest subarray with a given sum. arr: [1, 2, 3, 4, 5], sum: 9 def longest_subarray_with_sum(arr, given_sum):
  max_len = 0
  curr_sum = 0
  start_index = 0
  n = len(arr)
  for end_index in range(n):
    curr_sum += arr[end_index]
    while curr_sum > given_sum:
      curr_sum -= arr[start_index]
      start_index += 1
    if curr_sum == given_sum and (end_index-start_index+1) > max_len:
      max_len = end_index-start_index+1
  return max_len

arr = [1, 2, 3, 4, 5]
given_sum = 9
print(longest_subarray_with_sum(arr, given_sum))
Create a Python function to calculate the length of the hypotenuse of a right triangle. Length of sides: 3 and 4 def hypotenuse(a, b):
  return (a**2 + b**2) ** 0.5

print(hypotenuse(3, 4)) # 5.0
Modify the given function to sort a list of tuples based on the second index of each tuple in Python. def sort_list_of_tuples(input_list):
    pass def sort_list_of_tuples(input_list):
    sorted_list = sorted(input_list, key=lambda tup: tup[1])
    return sorted_list
Generate a Python dictionary that stores objects with unique values. ['alec', 'bob', 'sara', 'john', 'elon'] unique_dict = {
  'alec' : 'alec',
  'bob'  : 'bob',
  'sara' : 'sara',
  'john' : 'john',
  'elon' : 'elon'
}
Generate a code to send an email using Python.  import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart 

subject = "Your Subject"
body = "Your message here"
sender = "from@fromdomain.com"
receivers = ["to@todomain.com"]

msg = MIMEMultipart()
msg['from'] = sender
msg['To'] = ", ".join(receivers)
msg['Subject'] = subject

msg.attach(MIMEText(body, 'plain'))

server = smtplib.SMTP('smtp.gmail.com', 587)
server.starttls()
server.login("username", "password")
text = msg.as_string()
server.sendmail(sender, receivers, text)
server.quit()
Create a Python program that converts an array into a linked list. [1, 2, 3, 4] class Node: 
    def __init__(self, data): 
        self.data = data 
        self.next = None

# Function to convert array to linked list
def arrayToLinkedList(arr):
    head = Node(arr[0])
    currentNode = head
    for i in range(1, len(arr)):
        newNode = Node(arr[i])
        currentNode.next = newNode
        currentNode = newNode
        
    return head

# Tester code
arr = [1, 2, 3, 4]
head = arrayToLinkedList(arr)

# Print linked list
while head:
    print(head.data, end=" ")
    head = head.next
Create a payment processing system written in Python using the Stripe API. Not applicable import stripe 

def make_payment(token, amount):
    stripe.api_key = "sk_test_xxx"

    charge = stripe.Charge.create(
        amount=amount,
        currency="usd",
        source=token,
        description="example charge"
    )

    return charge

token = "tok_xxx"
amount = 500

charge = make_payment(token, amount)
print(charge)
Design a recursive Python function that prints the Fibonacci series from 0 to n. 7 def fibonacci(n):
  if n == 0:
    return 0
  elif n == 1:
    return 1
  else:
    return fibonacci(n - 1) + fibonacci(n - 2)
    
for i in range(0, n + 1):
    print(fibonacci(i))
This code is a job runner for SGE (Sun Grid Engine) that runs jobs in a finite pool of worker threads. To use this code, import the necessary modules and create an instance of the SGEJobRunner class, passing in the app as an argument. Then, call the put method on the instance of the SGEJobRunner class, passing in a job wrapper as an argument to add a job to the queue. The monitor thread will watch the jobs in the queue and deal with state changes and job completion. To shut down the monitor thread, call the shutdown method on the instance of the SGEJobRunner class.  import os, logging, threading, time
from Queue import Queue, Empty

from galaxy import model
from paste.deploy.converters import asbool

import pkg_resources

try:
    pkg_resources.require( "DRMAA_python" )
    DRMAA = __import__( "DRMAA" )
except:
    DRMAA = None

log = logging.getLogger( __name__ )

if DRMAA is not None:
    DRMAA_state = {
        DRMAA.Session.UNDETERMINED: 'process status cannot be determined',
        DRMAA.Session.QUEUED_ACTIVE: 'job is queued and waiting to be scheduled',
        DRMAA.Session.SYSTEM_ON_HOLD: 'job is queued and in system hold',
        DRMAA.Session.USER_ON_HOLD: 'job is queued and in user hold',
        DRMAA.Session.USER_SYSTEM_ON_HOLD: 'job is queued and in user and system hold',
        DRMAA.Session.RUNNING: 'job is running',
        DRMAA.Session.SYSTEM_SUSPENDED: 'job is system suspended',
        DRMAA.Session.USER_SUSPENDED: 'job is user suspended',
        DRMAA.Session.DONE: 'job finished normally',
        DRMAA.Session.FAILED: 'job finished, but failed',
    }

sge_template = """#!/bin/sh
#$ -S /bin/sh
GALAXY_LIB="%s"
if [ "$GALAXY_LIB" != "None" ]; then
    if [ -n "$PYTHONPATH" ]; then
        PYTHONPATH="$GALAXY_LIB:$PYTHONPATH"
    else
        PYTHONPATH="$GALAXY_LIB"
    fi
    export PYTHONPATH
fi
cd %s
%s
"""

class SGEJobState( object ):
    def __init__( self ):
        """
        Encapsulates state related to a job that is being run via SGE and 
        that we need to monitor.
        """
        self.job_wrapper = None
        self.job_id = None
        self.old_state = None
        self.running = False
        self.job_file = None
        self.ofile = None
        self.efile = None
        self.runner_url = None

class SGEJobRunner( object ):
    """
    Job runner backed by a finite pool of worker threads. FIFO scheduling
    """
    STOP_SIGNAL = object()
    def __init__( self, app ):
        """Initialize this job runner and start the monitor thread"""
        # Check if SGE was importable, fail if not
        if DRMAA is None:
            raise Exception( "SGEJobRunner requires DRMAA_python which was not found" )
        self.app = app
        # 'watched' and 'queue' are both used to keep track of jobs to watch.
        # 'queue' is used to add new watched jobs, and can be called from
        # any thread (usually by the 'queue_job' method). 'watched' must only
        # be modified by the monitor thread, which will move items from 'queue'
        # to 'watched' and then manage the watched jobs.
        self.watched = []
        self.queue = Queue()
        self.default_cell = self.determine_sge_cell( self.app.config.default_cluster_job_runner )
        self.ds = DRMAA.Session()
        self.ds.init( self.default_cell )
        self.monitor_thread = threading.Thread( target=self.monitor )
        self.monitor_thread.start()
        log.debug( "ready" )

    def determine_sge_cell( self, url ):
        """Determine what SGE cell we are using"""
        url_split = url.split("/")
        if url_split[0] == 'sge:':
            return url_split[2]
        # this could happen if sge is started, but is not the default runner
        else:
            return ''

    def determine_sge_queue( self, url ):
        """Determine what SGE queue we are submitting to"""
        url_split = url.split("/")
        queue = url_split[3]
        if queue == "":
            # None == server's default queue
            queue = None
        return queue

    def queue_job( self, job_wrapper ):
        """Create SGE script for a job and submit it to the SGE queue"""

        try:
            job_wrapper.prepare()
            command_line = job_wrapper.get_command_line()
        except:
            job_wrapper.fail( "failure preparing job", exception=True )
            log.exception("failure running job %d" % job_wrapper.job_id)
            return

        runner_url = job_wrapper.tool.job_runner
        
        # This is silly, why would we queue a job with no command line?
        if not command_line:
            job_wrapper.finish( '', '' )
            return
        
        # Check for deletion before we change state
        if job_wrapper.get_state() == model.Job.states.DELETED:
            log.debug( "Job %s deleted by user before it entered the SGE queue" % job_wrapper.job_id )
            job_wrapper.cleanup()
            return

        # Change to queued state immediately
        job_wrapper.change_state( model.Job.states.QUEUED )
        
        if self.determine_sge_cell( runner_url ) != self.default_cell:
            # TODO: support multiple cells
            log.warning( "(%s) Using multiple SGE cells is not supported.  This job will be submitted to the default cell." % job_wrapper.job_id )
        sge_queue_name = self.determine_sge_queue( runner_url )

        # define job attributes
        ofile = "%s/database/pbs/%s.o" % (os.getcwd(), job_wrapper.job_id)
        efile = "%s/database/pbs/%s.e" % (os.getcwd(), job_wrapper.job_id)
        jt = self.ds.createJobTemplate()
        jt.remoteCommand = "%s/database/pbs/galaxy_%s.sh" % (os.getcwd(), job_wrapper.job_id)
        jt.outputPath = ":%s" % ofile
        jt.errorPath = ":%s" % efile
        if sge_queue_name is not None:
            jt.setNativeSpecification( "-q %s" % sge_queue_name )

        script = sge_template % (job_wrapper.galaxy_lib_dir, os.path.abspath( job_wrapper.working_directory ), command_line)
        fh = file( jt.remoteCommand, "w" )
        fh.write( script )
        fh.close()
        os.chmod( jt.remoteCommand, 0750 )

        # job was deleted while we were preparing it
        if job_wrapper.get_state() == model.Job.states.DELETED:
            log.debug( "Job %s deleted by user before it entered the SGE queue" % job_wrapper.job_id )
            self.cleanup( ( ofile, efile, jt.remoteCommand ) )
            job_wrapper.cleanup()
            return

        galaxy_job_id = job_wrapper.job_id
        log.debug("(%s) submitting file %s" % ( galaxy_job_id, jt.remoteCommand ) )
        log.debug("(%s) command is: %s" % ( galaxy_job_id, command_line ) )
        # runJob will raise if there's a submit problem
        job_id = self.ds.runJob(jt)
        if sge_queue_name is None:
            log.debug("(%s) queued in default queue as %s" % (galaxy_job_id, job_id) )
        else:
            log.debug("(%s) queued in %s queue as %s" % (galaxy_job_id, sge_queue_name, job_id) )

        # store runner information for tracking if Galaxy restarts
        job_wrapper.set_runner( runner_url, job_id )

        # Store SGE related state information for job
        sge_job_state = SGEJobState()
        sge_job_state.job_wrapper = job_wrapper
        sge_job_state.job_id = job_id
        sge_job_state.ofile = ofile
        sge_job_state.efile = efile
        sge_job_state.job_file = jt.remoteCommand
        sge_job_state.old_state = 'new'
        sge_job_state.running = False
        sge_job_state.runner_url = runner_url
        
        # delete the job template
        self.ds.deleteJobTemplate( jt )

        # Add to our 'queue' of jobs to monitor
        self.queue.put( sge_job_state )

    def monitor( self ):
        """
        Watches jobs currently in the PBS queue and deals with state changes
        (queued to running) and job completion
        """
        while 1:
            # Take any new watched jobs and put them on the monitor list
            try:
                while 1: 
                    sge_job_state = self.queue.get_nowait()
                    if sge_job_state is self.STOP_SIGNAL:
                        # TODO: This is where any cleanup would occur
                        self.ds.exit()
                        return
                    self.watched.append( sge_job_state )
            except Empty:
                pass
            # Iterate over the list of watched jobs and check state
            self.check_watched_items()
            # Sleep a bit before the next state check
            time.sleep( 1 )
            
    def check_watched_items( self ):
        """
        Called by the monitor thread to look at each watched job and deal
        with state changes.
        """
        new_watched = []
        for sge_job_state in self.watched:
            job_id = sge_job_state.job_id
            galaxy_job_id = sge_job_state.job_wrapper.job_id
            old_state = sge_job_state.old_state
            try:
                state = self.ds.getJobProgramStatus( job_id )
            except DRMAA.InvalidJobError:
                # we should only get here if an orphaned job was put into the queue at app startup
                log.debug("(%s/%s) job left SGE queue" % ( galaxy_job_id, job_id ) )
                self.finish_job( sge_job_state )
                continue
            except Exception, e:
                # so we don't kill the monitor thread
                log.exception("(%s/%s) Unable to check job status" % ( galaxy_job_id, job_id ) )
                log.warning("(%s/%s) job will now be errored" % ( galaxy_job_id, job_id ) )
                sge_job_state.job_wrapper.fail( "Cluster could not complete job" )
                continue
            if state != old_state:
                log.debug("(%s/%s) state change: %s" % ( galaxy_job_id, job_id, DRMAA_state[state] ) )
            if state == DRMAA.Session.RUNNING and not sge_job_state.running:
                sge_job_state.running = True
                sge_job_state.job_wrapper.change_state( model.Job.states.RUNNING )
            if state == DRMAA.Session.DONE:
                self.finish_job( sge_job_state )
                continue
            if state == DRMAA.Session.FAILED:
                sge_job_state.job_wrapper.fail( "Cluster could not complete job" )
                sge_job_state.job_wrapper.cleanup()
                continue
            sge_job_state.old_state = state
            new_watched.append( sge_job_state )
        # Replace the watch list with the updated version
        self.watched = new_watched
        
    def finish_job( self, sge_job_state ):
        """
        Get the output/error for a finished job, pass to `job_wrapper.finish`
        and cleanup all the SGE temporary files.
        """
        ofile = sge_job_state.ofile
        efile = sge_job_state.efile
        job_file = sge_job_state.job_file
        # collect the output
        try:
            ofh = file(ofile, "r")
            efh = file(efile, "r")
            stdout = ofh.read()
            stderr = efh.read()
        except:
            stdout = ''
            stderr = 'Job output not returned from cluster'
            log.debug(stderr)

        try:
            sge_job_state.job_wrapper.finish( stdout, stderr )
        except:
            log.exception("Job wrapper finish method failed")

        # clean up the sge files
        self.cleanup( ( ofile, efile, job_file ) )

    def cleanup( self, files ):
        if not asbool( self.app.config.get( 'debug', False ) ):
            for file in files:
                if os.access( file, os.R_OK ):
                    os.unlink( file )

    def put( self, job_wrapper ):
        """Add a job to the queue (by job identifier)"""
        self.queue_job( job_wrapper )
    
    def shutdown( self ):
        """Attempts to gracefully shut down the monitor thread"""
        log.info( "sending stop signal to worker threads" )
        self.queue.put( self.STOP_SIGNAL )
        log.info( "sge job runner stopped" )

    def stop_job( self, job ):
        """Attempts to delete a job from the SGE queue"""
        try:
            self.ds.control( job.job_runner_external_id, DRMAA.Session.TERMINATE )
            log.debug( "(%s/%s) Removed from SGE queue at user's request" % ( job.id, job.job_runner_external_id ) )
        except DRMAA.InvalidJobError:
            log.debug( "(%s/%s) User killed running job, but it was already dead" % ( job.id, job.job_runner_external_id ) )

    def recover( self, job, job_wrapper ):
        """Recovers jobs stuck in the queued/running state when Galaxy started"""
        sge_job_state = SGEJobState()
        sge_job_state.ofile = "%s/database/pbs/%s.o" % (os.getcwd(), job.id)
        sge_job_state.efile = "%s/database/pbs/%s.e" % (os.getcwd(), job.id)
        sge_job_state.job_file = "%s/database/pbs/galaxy_%s.sh" % (os.getcwd(), job.id)
        sge_job_state.job_id = str( job.job_runner_external_id )
        sge_job_state.runner_url = job_wrapper.tool.job_runner
        job_wrapper.command_line = job.command_line
        sge_job_state.job_wrapper = job_wrapper
        if job.state == model.Job.states.RUNNING:
            log.debug( "(%s/%s) is still in running state, adding to the SGE queue" % ( job.id, job.job_runner_external_id ) )
            sge_job_state.old_state = DRMAA.Session.RUNNING
            sge_job_state.running = True
            self.queue.put( sge_job_state )
        elif job.state == model.Job.states.QUEUED:
            log.debug( "(%s/%s) is still in SGE queued state, adding to the SGE queue" % ( job.id, job.job_runner_external_id ) )
            sge_job_state.old_state = DRMAA.Session.QUEUED
            sge_job_state.running = False
            self.queue.put( sge_job_state )

Create a JSON object for an employee. The employee should have a unique ID, name, email address, date of birth, and list of skills. Not applicable {
  "id": 1,
  "name": "John Smith",
  "email": "john@example.com",
  "dob": "1996-02-28",
  "skills": [
    "JavaScript",
    "HTML",
    "CSS",
    "Python"
  ]
}
Create a function in Python to convert a given time from 12-hour clock format to 24-hour clock format. 3:45pm def time_conversion(time):
    # Get hour and convert it to 24-hour format
    hour = int(time[:2])
    if time[-2:] == "PM":
        hour += 12
    # Get minutes
    min = time[-5:-3]

    return str(hour) + ":" + min

# Test
print(time_conversion("3:45pm")) # 15:45
Give a generic example for try-except-finally block in Python.  try:
    # code goes here
    result = my_function()
except Exception as e:
    # deal with errors
    print("Error encountered: {}".format(e))
finally:
    # execute this block of code regardless
    print("Done!")
Create a Python algorithm that returns the length of the longest increasing subsequence in an array. [10, 9, 2, 5, 3, 7, 101, 18] def LongestIncreasingSubsequence(arr):
    N = len(arr) 
    lis = [1]*N 
    for i in range (1 , N): 
        for j in range(0 , i): 
            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : 
                lis[i] = lis[j]+1
    maximum = 0
    for i in range(N): 
        maximum = max(maximum , lis[i])  
    return maximum 

arr = [10, 9, 2, 5, 3, 7, 101, 18]
print("Length of Longest Increasing Subsequence is", LongestIncreasingSubsequence(arr))
Design a python class for representing a node in a binary tree.  class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None
Write a function to validate an email address in Python.  def validate_email(email):
    """This function validates an email address.

    It returns True if the email address is valid, False otherwise.
    """

    if len(email) > 7:
        if re.match('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$', email) is not None:
            return True
    return False
Build a REST API with Python and Flask. The API should include the following endpoints: POST /users, GET /users/{userId}, GET /users/{userId}/posts, POST /posts Not applicable # Importing libraries
import flask
from flask import Flask, request, jsonify

# Creating the application instance
app = Flask(__name__)

# A list to store users data temporarily
users = []

@app.route('/users', methods=['POST'])
def add_user():
 data = request.get_json()
 users.append(data)
 return jsonify({'message': 'User added successfully'})

@app.route('/users/<userId>', methods=['GET'])
def get_user(userId):
 user = [user for user in users if user['userId'] == userId]
 if len(user) == 0:
 return jsonify({'message': 'No user found'})
 return jsonify({'user': user[0]})

@app.route('/users/<userId>/posts', methods=['GET'])
def get_user_posts(userId):
 posts = [post for post in posts if post['userId'] == userId]
 return jsonify({'posts': posts})

@app.route('/posts', methods=['POST'])
def add_post():
 data = request.get_json()
 posts.append(data)
 return jsonify({'message': 'Post added successfully'})

# Driver code 
if __name__ == '__main__':
 app.run(debug=True)
Write an Python script to extract the year, month and day from a given date in the format "dd/mm/yyyy". "27/09/2017" import datetime

date_string = "27/09/2017"

date_object = datetime.datetime.strptime(date_string, "%d/%m/%Y")

print("Year:", date_object.year)
print("Month:", date_object.month)
print("Day:", date_object.day)
Design a class in python to represent a bank account. <no input> class BankAccount:
   def __init__(self, account_number, account_balance):
        self.account_number = account_number
        self.account_balance = account_balance

    def deposit(self, deposit_amount):
        self.account_balance += deposit_amount

    def withdraw(self, withdraw_amount):
        if self.account_balance - withdraw_amount >= 0:
            self.account_balance -= withdraw_amount
            return True
        return False
Develop a Python program to check if a list contains any duplicates nums = [1, 4, 5, 1] def contains_duplicates(nums):
    seen = set()
    for num in nums:
        if num in seen:
            return True
        seen.add(num)
    return False

if __name__ == '__main__':
    nums = [1, 4, 5, 1]
    contains = contains_duplicates(nums)
    if contains:
        print('The list contains duplicates.')
    else:
        print('The list doesn\'t contain duplicates.')
Write a Python program to input three integers and determine their sum. 5, 8, 10 def three_integers(x, y, z):
  return x + y + z

x = 5
y = 8
z = 10

print(three_integers(x, y, z))
Design a function in Python to create a dictionary object mapping the letters of the alphabet to their corresponding numerals.  def create_alphabet_mapping():
    alphabet = "abcdefghijklmnopqrstuvwxyz"
    code = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]
    alphabet_mapping = dict(zip(alphabet, code))
    return alphabet_mapping

# Test
print(create_alphabet_mapping())
Edit an existing Python program to add an intelligent chatbot feature. # Chatbot program for customer service

def chatbot():
    print("Welcome to our customer service chatbot! How may I help you today?")
    pass

chatbot() # Chatbot program for customer service
import random

greetings = ["Hi, how may I help you?", "Hi there, how can I help you today?", "Hi, how can I be of assistance?"]

def chatbot():
    print("Welcome to our customer service chatbot! How may I help you today?")
    while True:
        userInput = input()
        if userInput.lower() == "quit":
            break
        else:
            message = random.choice(greetings)
            print(message)

chatbot()
Given a Python dictionary, write a program to remove all the keys whose value is greater than a specified number. dictionary = {'a': 1, 'b': 2, 'c': 3, 'd':4}, threshold = 2 dictionary = {'a': 1, 'b': 2, 'c': 3, 'd':4}
threshold = 2

def remove_keys(dict, threshold):
    to_remove = [k for k, v in dict.items() if v > threshold]
    for k in to_remove:
        del dict[k]
    return dict

print(remove_keys(dictionary, threshold))
# Output: {'a': 1, 'b':2}
Write a custom python sorting algorithm. List of numbers: [3, 2, 1, 4] def custom_sort(list_a):
    # Creating a list to store the sorted elements
    sorted_list = []

    while list_a:
        # Find the smallest number from the list
        min_item = min(list_a)
        
        # Append the smallest number to the sorted list
        sorted_list.append(min_item)
        
        # Remove the number from the original list
        list_a.remove(min_item)
    
    # Return the sorted list
    return sorted_list

print(custom_sort([3, 2, 1, 4]))
Develop a random number guessing game in Python  import random 
 
num = random.randint(1,10)
guess = 0
attempts = 0
 
while guess != num and attempts < 3:
    guess = int(input("Guess a number between 1 and 10: "))
    attempts += 1
    if guess == num:
        print("You guessed correctly in", attempts, "attempts")
    elif guess > num:
        print("Too High")
    else:
        print("Too Low")
if guess != num:    
    print("You failed to guess the number")
Create a python program to encrypt a message using RSA encryption.  from Crypto.PublicKey import RSA
def encrypt(message):
    #Generate public and private keys
    key = RSA.generate(1024)
    public_key = key.publickey()
  
    #Encrypt the message with the public key
    encrypted_message = public_key.encrypt(message, 32)
    return encrypted_message
Implement a heuristic algorithm in Python to solve a maze. Input Maze:
X X X X X
X S X X X 
X X E X X def solve_maze(maze, start_pos, end_pos):
    # Initialize an empty path 
    path = [] 
  
    # Create a visited array to mark 
    # the positions that are visited 
    visited_positions = set() 
  
    # Insert the start position into 
    # the stack 
    stack = [start_pos] 
  
    # Loop until the stack is empty 
    while stack: 
  
        # Pop a position from the stack 
        position = stack.pop() 
  
        # If this is the end position 
        # then return the path 
        if position == end_pos: 
            path.append(position) 
            return path 
  
        # Mark the visited position 
        visited_positions.add(position) 
  
        # Fetch all the adjacent positions 
        # that are not yet visited 
        adjacent_positions = get_adjacent_positions(maze, position) 
        unvisited_adjacent_positions = [pos for pos in adjacent_positions 
               if pos not in visited_positions] 
  
        # Push the unvisited adjacent 
        # position into the stack 
        stack.extend(unvisited_adjacent_positions) 
  
        # Push the current position 
        # into the path 
        path.append(position) 
  
    return None
Rewrite the given Java code into Python. Int n = 5
for (int i = 1; i <= n; i++) {
 System.out.print(i + " ");
} n = 5
for i in range(1, n+1):
 print(i, end=' ')
You need to create a function in Python to get the factorial of a number.  def getFactorial(num):
    if num == 0:
        return 1
    else:
        return num * getFactorial(num - 1)
Create a function in Python that takes a given number, removes all its digits and returns an integer. x = 356 def removeDigits(x):
    str_x = str(x)
    without_digits = int("".join([i for i in str_x if not i.isdigit()]))
    return without_digits

x = 356
print(removeDigits(x))
Update the Python program to calculate average of given numbers so that it takes an optional parameter. If set to True, the program should print the maximum among the given numbers instead of the average. Not applicable def calc_average(numbers, maximum=False):
 if maximum:
 return max(numbers)
 else:
 return sum(numbers) / len(numbers)
Build a machine learning model in Python which will take in a set of customer data with two features (age and gender) and predict whether or not the customer is likely to buy a product. Name	Age	Gender
Brian	37	Male
Erin	42	Female
Hannibal	67	Male import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split

data = pd.read_csv('data.csv')

X = data[['Age', 'Gender']]
y = data['Bought']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestClassifier()
model.fit(X_train, y_train)

score = model.score(X_test, y_test)

print(score)
Create a python program to remove characters from a string that's not a letter or symbol. string = "ABC%@#XYZ" string = "ABC%@#XYZ"
new_string = ''.join(c for c in string if c.isalnum())
print(new_string) # output: ABCXYZ
Design a python class for representing a student object which has name and grade as its instance variables.  class Student():
    
    def __init__(self, name, grade):
        self.name = name 
        self.grade = grade
    
    def get_name(self):
        return self.name
    
    def get_grade(self):
        return self.grade
    
    def set_grade(self, grade):
        self.grade = grade
Finish a Python program to select all employees with a salary greater than 10,000. SELECT * SELECT *
FROM employees
WHERE salary > 10000
Write a Python program to efficiently delete all items from a set that are in another set. A = {1, 2, 3, 4, 5}
B = {2, 4} A = {1, 2, 3, 4, 5}
B = {2, 4}

A -= B
Create an AI chatbot in Python using DialogFlow. The chatbot should be able to answer basic questions related to the company's products and services. Not applicable from dialogflow_v2.SessionClient import SessionClient
from dialogflow_v2.Objects import QueryInput, TextInput

session_client = SessionClient.SessionClient() #create a session

def get_response(query):
 inputs = QueryInput(text=TextInput(text=query, language_code='en-US'))
 query_result = session_client.detect_intent(session_id="1", query_input=inputs)
 return query_result.query_result.fulfillment_text
Generate code to serialize a Python data dictionary into a JSON object data = {
 "name": "John Doe",
 "age": 18,
 "hobbies": ["reading", "swimming", "gaming"],
 "contact": {
  "email": "johndoe@example.com",
  "mobile": "+1900000000"
 }
} import json

data_json = json.dumps(data)

# Output:
{"name":"John Doe","age":18,"hobbies":["reading","swimming","gaming"],"contact":{"email":"johndoe@example.com","mobile":"+1900000000"}}
Write a Python program to find the longest palindromic subsequence of a given string. roadrace def longest_palindromic_subsequence(string):
    n = len(string)
    dp = [[0 for _ in range(n)] for _ in range(n)]
    for i in range(n):
        dp[i][i] = 1
    for i in range(n-1):
        if string[i] == string[i+1]:
            dp[i][i+1] = 2
    for l in range(3, n+1):
        for i in range(n-l+1):
            j = i+l-1
            if string[i] == string[j]:
                dp[i][j] = dp[i+1][j-1] + 2
            else:
                dp[i][j] = max(dp[i][j-1], dp[i+1][j])
    return dp[0][n-1]
Create a Python program to convert a given sentence into pig latin.  def convert_to_pig_latin(sentence):
 words = sentence.split()
 pig_latin_words = []
 for word in words:
 Pig_latin = word[1:] + word[0] + 'ay'
 pig_latin_words.append(pig_Latin)
 pig_latin_sentence = ' '.join(pig_latin_words)
 return pig_latin_sentence
Using the turtle library in Python, create a geometric shape.  import turtle

t = turtle.Turtle();
t.speed(2);

t.right(72);
t.fd(100);
t.left(144);
t.fd(100);
t.left(144);
t.fd(100);
t.left(144);
t.fd(100);
t.left(144);
t.fd(100);

t.done();
Write a Python program to remove the words containing the letter "a" from a sentence. Sentence: I am a strong girl sentence = "I am a strong girl"

without_a = ' '.join([word for word in sentence.split() if 'a' not in word])

print(without_a)
# Output: I strong girl
Design a Python algorithm to merge two sorted lists.  def merge_two_lists(list1, list2):
    merged_list = []
        
    while list1 and list2:
        if list1[0] < list2[0]:
            merged_list.append(list1.pop(0))
        else:
            merged_list.append(list2.pop(0))
    merged_list.extend(list1 or list2)
    return merged_list
Change the following Python program such that you can pass any number of strings in the function. def print_strings(s1, s2):
    print(s1)
    print(s2) def print_strings(*strings):
    for s in strings:
        print(s)

print_strings("Hello", "World")
Generate a python program to convert a given Celsius temperature to Fahrenheit  def celsius_to_fahrenheit(temperature):
    fahrenheit = (temperature*9/5)+32
    return fahrenheit
Write a Python program that takes in a list containing 100 integers and finds the number of occurrences of each number in the list. [1, 2, 3, 4, 4, 2, 3, 2, 1, 3, 4, 2, 1] from collections import Counter
 
def findOccurrences(arr):
    counter = Counter(arr)
    for i in counter:
        print('Number', i, 'occurs', counter[i], 'time(s).')
 
arr = [1, 2, 3, 4, 4, 2, 3, 2, 1, 3, 4, 2, 1]
findOccurrences(arr)
Create an AI program in Python that determines whether a given sentence is a statement or a question. The weather is cold today import re

def is_question(sentence):
 sentence = sentence.strip()
 if sentence.endswith('?'):
 return True
 else:
 return False

sentence = "The weather is cold today"
print(is_question(sentence)) # False

sentence = "Is it raining outside?"
print(is_question(sentence)) # True
Write a Python program to detect errors in a given json string.  import json

def detect_errors(json_string):
 try:
     data = json.loads(json_string)
     return None
 except Exception as e:
     return e
Make an algorithm in Python that checks whether two strings are anagrams of each other. s1 = "apple"
s2 = "lepap" def isAnagram(s1, s2): 
 
    # Remove white spaces and convert strings to lowercase 
    s1 = s1.replace(' ', '').lower()
    s2 = s2.replace(' ', '').lower()
    
    # Return boolean for sorted match. 
    return sorted(s1) == sorted(s2) 
  
# Driver code 
s1 = "apple"
s2 = "lepap"
if isAnagram(s1, s2):
    print("True, The strings are anagram of each other")
else:
    print("False, The strings are not anagram of each other")
Create a function in Python to find the greatest common divisor of two given numbers. 7 8 def get_gcd(num1, num2):
    for i in range(max(num1, num2), 0, -1):
        if num1 % i == 0 and num2 % i == 0:
            return i

result = get_gcd(7, 8)
print(result)
# Output: 1
Create a python script to print the following patterns in the output  def print_pattern(n): 
      
    k = 0
    for i in range(1, n+1): 
        # logic to print pattern
        for j in range(i, n+1): 
            print("* ", end="") 
        k = 0
        for j in range(1, i*2): 
            if k == 0: 
                print(i, end="")
                k += 1
            else: 
                print("$", end="")
        print() 
   
if __name__ == '__main__':
    print_pattern(4)
Generate a while loop in Python to print numbers in reverse from 15 to 10.  num = 15
while num >= 10:
    print(num)
    num -= 1
Write a python script to remove all punctuations and whitespace in a string string = "Hello, how are you! I'm doing great." def remove_punc_and_whitespace(string): 
    return ''.join([x for x in string if x not in [" ", ",", ":", "-", "!", "?", "."]])
Create a Python Flask application for a simple search engine. The application should be able to return results based on a query string entered by the user. Not applicable import flask from flask
import sqlite3

app = flask.Flask(__name__)

# create the database
conn = sqlite3.connect('data.db')
cur = conn.cursor()

# create the table for your data
cur.execute('''CREATE TABLE IF NOT EXISTS search 
(query TEXT, results TEXT)''')

@app.route('/search', methods = ['GET', 'POST'])
def search():
 if flask.request.method == 'POST':
 # get the search term from the form
 query = flask.request.form['query']

 # search the database for the query
 cur.execute('''SELECT results FROM search 
 WHERE query=?''', (query,))
 results = cur.fetchall()

 # return the results
 return flask.render_template('results.html', 
query = query, results = results)

# the search form
@app.route('/')
def index():
 return flask.render_template('search.html')

if __name__ == '__main__':
 app.run(debug = True)
Generate an algorithm in Python that calculates the sum of all even numbers between 1 and a given upper limit. 100 def sum_of_even_numbers(n):
    sum = 0
    for i in range(2, n+1, 2):
        sum += i
 
    return sum
Develop a Python script to identify duplicate characters in a string.  def find_duplicates(text):
  n = len(text)
  duplicates = []

  for i in range(n):
    for j in range(i+1, n):
      if text[i] == text[j]:
        duplicates.append(text[i])

  return duplicates
Create a Python program to remove all the elements in a given array, which are divisible by a certain number. [23, 45, 12, 35, 29], 3 # Enter the Array
arr = [23, 45, 12, 35, 29] 
 
# Enter the Number
num = 3
 
# Print the New Array
new_arr = [x for x in arr if x % num != 0] 
 
# Print the Result
print(new_arr)
Write a Python function to create a list containing the squares of numbers up to n.  def squares(n):
    return [x*x for x in range(1,n+1)]

print(squares(10))
Create a Python statement that prints a list of numbers 0 to n (inclusive). n = 10 for i in range(n+1):
    print(i)
Suggest a Python library for web scraping.  BeautifulSoup is a popular library for web scraping and data extraction from HTML and XML documents. It is designed to work with HTML/XML parsers like html5lib, lxml and html.parser.
Generate an edit script for transforming an input text. Text 1: He went to the store
Text 2: She visited the store #!/usr/bin/env python

text1 = "He went to the store"
text2 = "She visited the store"

edited_text = text1[:2] + text2[2:]

print edited_text
Generate a Python function to compute the Fibonacci sequence. Not applicable def fibonacci(n):
 if n == 0:
  return 0
 elif n == 1:
  return 1
 else:
  return fibonacci(n - 1) + fibonacci(n - 2)
Create a function to pad a given string on both sides with the given padding character until the required length is reached. text = 'Python'
padding = '*'
length = 10 def pad_str(text, padding, length):
    """
    Pad the given string on both sides with the given padding character until the required length is reached.
    """
    # Calculate the number of padding characters to add
    num_padding = length - len(text)
    if num_padding < 0:
        return text
    
    left_padding = num_padding // 2
    right_padding = num_padding - left_padding
    
    # Pad the string on both sides
    padded_str = padding * left_padding + text + padding * right_padding
    
    return padded_str

if __name__ == '__main__':
    text = 'Python'
    padding = '*'
    length = 10
    result = pad_str(text, padding, length)
    print(result) # **Python**
Write a Python code to compare two list and print the elements which are common between them. list1 = [2, 3, 5, 8]
list2 = [1, 4, 5, 9] list1 = [2, 3, 5, 8]
list2 = [1, 4, 5, 9]

common_elements =  [element for element in list1 if element in list2]

print(common_elements)
Edit the existing Python program to append a new record with data programmatically. people = [
 {"name": "Alice", "age": 8},
 {"name": "Bob", "age": 11},
 {"name": "Charlie", "age": 13},
] people = [
 {"name": "Alice", "age": 8},
 {"name": "Bob", "age": 11},
 {"name": "Charlie", "age": 13},
 {"name": "John", "age": 15},
]

# Append a new record with data programmatically:
record = {"name": "John", "age": 15}
people.append(record)
Create a code snippet in Python that calculates the sum of the digits of a number. 123 def sum_of_digits(number):
  sum_digits = 0
  while number > 0:
    sum_digits += (number % 10)
    number //= 10
  return sum_digits
  
print(sum_of_digits(123))
Create a class in Python that has five methods:  class MyClass:
    def __init__(self):
        pass

    def method1(self):
        pass

    def method2(self):
        pass

    def method3(self):
        pass

    def method4(self):
        pass

    def method5(self):
        pass
Can you write a Python code to print numbers from 1 to 10?  for num in range(1, 11):
    print(num)
Implement the factorial function in Python.  def factorial(n): 
    if n == 0: 
        return 1
    return n*factorial(n-1)
Write a function in Python that takes a single argument, an unsigned integer, and returns the binary representation of that argument as a string. number = 5 def IntToBinString(number):
    if number == 0:
        return "0"
    ret = ""
    while number > 0:
        if number % 2 == 1:
            ret = "1" + ret
        else:
            ret = "0" + ret
        number //= 2
    return ret
Generate a recursive function in Python to compute the Fibonacci series  def Fib_recursive(n):
    if n <= 1:
        return n
    else:
        return Fib_recursive(n - 1) + Fib_recursive(n - 2)
Construct a Python program to round the number up to the nearest integer num = 5.6 def round_up(num): 
    if num == int(num): 
        return int(num) 
    return int(num + 1) 

num = 5.6
print(round_up(num))
Create an interactive program to Convert text to Pig Latin in Python. Hello World # Function to convert a sentence to Pig Latin
def toPigLatin(sentence):
  words = sentence.split()
  pigLatin = []
  for word in words:
    firstLetter = word[0]

    if firstLetter in 'aeiou':
      pigLatinWord = word + 'way'
    else:
      pigLatinWord = word[1:] + firstLetter + 'ay'

    pigLatin.append(pigLatinWord)

  return ' '.join(pigLatin)

# Get a sentence from the user
sentence = input('Enter a sentence: ')

# Convert the sentence to Pig Latin
pigLatin = toPigLatin(sentence)

# Print the result
print(pigLatin)
Create a program in Python to detect outlier points within an array of data. A numpy array of numerical data
`[-6.2, 11.9, 5.7, 7.3, 2.5, 8.4, 14.0, 9.2, 7.4, 11.6]` import numpy as np

def detect_outlier(data):
  # Calculate the median and the inter-quartile range
  q75, q25 = np.percentile(data, [75 ,25])
  iqr = q75 - q25
  
  # Calculate the upper and lower bound
  lower_bound = q25 - (iqr * 1.5)
  upper_bound = q75 + (iqr * 1.5)
  
  # Calculate outlier points
  outlier_points = []
  
  for element in data:
    if element < lower_bound or element > upper_bound:
      outlier_points.append(element)
      
  return outlier_points

# Input array
data = np.array([-6.2, 11.9, 5.7, 7.3, 2.5, 8.4, 14.0, 9.2, 7.4, 11.6])

# Call function
outliers = detect_outlier(data)

# Print outliers
print(outliers)

# Output:
# [-6.2, 14.0]
Produce a simple Python code for calculating the average of a given array of numbers. [1, 4, 5, 6, 7] # define a function for computing the mean
def compute_mean(numbers):
    # initialize a variable to store the sum
    total = 0
    # loop through all the elements in the array
    for num in numbers:
        # add the element to the total
        total += num
    # compute the mean by dividing the total by the number of elements
    mean = total / len(numbers)
    # return the mean
    return mean

# test the function
nums = [1, 4, 5, 6, 7]
average = compute_mean(nums)
print(average)
# prints 5
Write a python program to detect palindromes in a given list of strings ['malayalam', 'rotator', 'civic'] def is_palindrome(word):
    # reverse word
    reverse_word = word[::-1]
    # Compare reverse word and original word
    if reverse_word == word:
        return True
    else:
        return False

# main
words = ['malayalam', 'rotator', 'civic']

for word in words:
    if is_palindrome(word):
        print(f'{word} is a palindrome.')
    else:
        print(f'{word} is not a palindrome.')
Make a Python program generating numbers  def generate_numbers():
    numbers = []
    for i in range(10):
        numbers.append(random.randint(0,10))
    return numbers
Optimize a Flask application for efficient performance. Not applicable from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/api/<endpoint>', methods=['GET', 'POST'])
def process_request(endpoint):
    # Performance optimization
    # Use Redis for caching session and query performance
    # Use uWSGI for Python applications
    # Use gunicorn as WSGI server
    # Use Flask-Compress extension for compression
    # Use global variables where applicable
    # Don't use sql queries directly, always use model methods
    # Use query parameter in URLs instead of plain parameters
    # Use thread-local objects for performance

    # Your code here
Design a program in Python to find the largest of three numbers. 2, 5, 7 def getMax(a,b,c):
    if a > b and a > c:
        return a
    elif b > a and b > c:
        return b
    else:
        return c

print(getMax(2, 5, 7))
Create a Python code to find the most frequent item in a list myList = [1, 2, 3, 2, 4, 2] def most_frequent_item(myList):
    max_item = myList[0]
    max_count = 1
    for i in range(1, len(myList)):
        count = 1
        for j in range(i+1, len(myList)):
            if(myList[i] == myList[j]):
                count += 1
                if(count > max_count):
                    max_count = count
                    max_item = myList[i]
    
    return (max_item)

myList = [1, 2, 3, 2, 4, 2]
print(most_frequent_item(myList))
Take this Python Code and optimize it. def count_items(items):
    item_counter = {}
    for item in items:
        if item not in item_counter:
            item_counter[item] = 1
        else:
            item_counter[item] += 1        
    return item_counter def count_items(items):
    item_counter = {}
    for item in items:
        item_counter[item] = item_counter.get(item, 0) + 1
    return item_counter
In Python, create a loop that takes a user input and appends it to a list until the user types "stop".  my_list = []

while True:
    user_input = input('Type something: ')
    if user_input == 'stop':
        break
    my_list.append(user_input)

print(my_list)
Using Python, build a dictionary containing the numbers from 1 to n as the key and the square of each number as the value. n = 10 my_dict = {}

for i in range(1,n+1):
 my_dict[i] = i**2

print(my_dict)
Create a function in Python to produce a list of all combinations of given elements from two different lists. list_1 = [1, 2 , 3] 
list_2 = [4, 5] def get_combos(list1, list2):
    combo_list = []
    for i in list1:
        for j in list2:
            combo_list.append([i, j]) 
    return combo_list

list1 = [1, 2, 3] 
list2 = [4, 5]

combos = get_combos(list1, list2)  
print(combos)

# Output: [[1, 4], [1, 5], [2, 4], [2, 5], [3, 4], [3, 5]]
Suggest a Python program that prints out the unique strings in a list of strings. ['hello', 'world', 'hello', 'moon', 'sun'] list_of_strings = ['hello', 'world', 'hello', 'moon', 'sun']
unique_strings = set(list_of_strings)

for string in unique_strings:
    print(string)
Who can suggest a Python code to find prime numbers between a given range? 2 and 5 def isPrime(n):
    # Edge case
    if n <= 1:
        return False
  
    # Check from 2 to n-1 
    for i in range(2, n): 
        if n % i == 0: 
            return False; 
  
    return True

# Function call 
res = isPrime(2) 
if(res): 
    print("Prime") 
else: 
    print("Not Prime")

# Iterative check in a given range 
for n in range(2, 5):
    res = isPrime(n) 
    if(res): 
        print(n, "is Prime") 
    else: 
        print(n, "is not Prime")
Generate a Python program to print out all divisible numbers between 0 and a given number  def print_divisible_numbers(n):
    for i in range(1, n + 1):
        if i % 3 == 0 or i % 5 == 0:
            print(i)
Create a WebScraper in Python that extracts the titles and links from a given URL. The web page https://www.example.com from bs4 import BeautifulSoup
import requests

url = 'https://www.example.com'
r = requests.get(url)

soup = BeautifulSoup(r.content, 'html.parser')

# Extract titles and links
titles = []
links = []
for link in soup.find_all('a'):
 titles.append(link.get('title'))
 links.append(link.get('href'))

print(titles, links)
Generate a code in Python that takes a string as input and removes duplicate characters from it St = "DaSSmmoonnd" st = "DaSSmmoonnd"
st_list = list(st)
st_set = set(st_list)
st_nodupes = ''.join(st_set)
print(st_nodupes)
Design a command-line interface in Python to accept user input  import sys

# collect the user's input
user_input = input('Enter your command: ')

# process the user's input and execute the corresponding command
if user_input == 'exit':
    sys.exit()
elif user_input == 'help':
    print('This is a helpful message.')
else:
    print('Command not recognized, try again.')
You need to optimise a given Python code, which takes a  3x3 matrix as input and outputs the inverse. import numpy as np

def inverse_matrix(matrix):
    return np.linalg.inv(matrix) import numpy as np

def inverse_matrix(matrix):
    det = np.linalg.det(matrix)
    if det == 0:
        return None 
    return np.dot(np.linalg.inv(matrix), 1/det)
Create a function in Python to optimize the following function with respect to its two variables x, and y. f(x,y) = 2x^3 + 3y^2 + y + 5 import numpy as np 
import scipy.optimize as opt 

def func(x): 
	return 2*np.power(x[0], 3) + 3*np.power(x[1],2) + x[1] + 5

opt.minimize(func, ([0, 0]), method='nelder-mead', 
options={'xtol': 1e-8, 'disp': True})
Create a Python script to extract the temperature from a JSON object. {
  "location": "Berlin",
  "weather": {
    "temperature": 17.6
  }
} import json

json_string = '''
{
  "location": "Berlin",
  "weather": {
    "temperature": 17.6
  }
}
'''

data = json.loads(json_string)

temperature = data["weather"]["temperature"]
print(temperature) => 17.6
Can you develop an ML model to predict the next number in a Fibonacci sequence using Python?  # import required packages
import numpy as np
from keras.models import Sequential
from keras.layers import Dense

# define Fibonacci sequence
def fibonacci_sequence(length):
    fibonacci_nums = [1,1]
    for i in range(length-2):
        fibonacci_nums.append(fibonacci_nums[i]+fibonacci_nums[i+1])
    return np.array(fibonacci_nums)

# define model
model = Sequential()
model.add(Dense(1, input_dim=len(fibonacci_sequence(8)), activation='linear'))

# compile model
model.compile(loss='mean_squared_error', optimizer='adam', metrics=['accuracy'])

# fit model
model.fit(fibonacci_sequence(8).reshape(7,1), fibonacci_sequence(9)[1:], epochs=500, batch_size=2, verbose=0)

#predict next number
next_num = model.predict(fibonacci_sequence(10).reshape(9,1))

# print the result
print('The next number from the Fibonacci sequence is: ', next_num[-1][0])
Optimize a python script which calculates the sum of all the numbers below 1000 that are divisible by 3 or 5. # Python program to find sum of all 
# numbers divisible by 3 or 5

# initialize sum
sum = 0

# find sum of all numbers
# divisible by 3 or 5
# below 1000
for i in range(1000):
    if(i%3==0 or i%5==0):
        sum = sum + i

#print the sum
print "Sum =",sum # optimized Python program to find sum 
# of all numbers divisible by 3 or 5

# initialize sum
sum = 0

# find sum of all numbers
# divisible by 3
for i in range(3, 1000, 3):
    sum += i

# find sum of all numbers
# divisible by 5
for i in range(5, 1000, 5):
    # check if it is divisible by both 3 and 5
    if i % 3 != 0:
        sum += i

#print the sum
print("Sum =",sum)
Generate a Python program which implements a greedy algorithm to find the maximum number of activities possible in a given timeline. [[1, 4], [3, 5], [0, 6], [5, 7], [3, 8], [5, 9], [6, 10], [8, 11], [8, 12], [2, 13], [12, 14] def activity_selection_greedy(arr):
    n = len(arr)
    
    result = []
    i = 0
    result.append(arr[i])
    
    for j in range(1,n):
        if arr[j][0] >= arr[i][1]:
            result.append(arr[j])
            i = j

    return result

result = activity_selection_greedy([[1, 4], [3, 5], [0, 6], [5, 7], [3, 8], [5, 9], [6, 10], [8, 11], [8, 12], [2, 13], [12, 14]])
print(result)
Write a Python function that computes the average of a given array of numbers.  def find_average(numbers):
 return sum(numbers) / len(numbers)
Create a basic Python script that uses the Natural Language Toolkit (NLTK) to classify a given sentence as sentiment positive, negative, or neutral. "This product is mediocre." import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer 

sentences = ["This product is mediocre."]
sid = SentimentIntensityAnalyzer() 

for sentence in sentences: 
 print(sentence)
 ss = sid.polarity_scores(sentence) 
 sentiment_type = ""

if ss['compound'] >= 0.5: 
 sentiment_type = "positive"

elif ss['compound'] <= -0.5:
 sentiment_type = "negative"

else: 
 sentiment_type = "neutral"

print('Sentiment type:', sentiment_type) 

# Output:
# Sentiment type: neutral
Convert this JavaScript code to Python. const a = 1;
const b = 2;
const c = a + b;
console.log(c); a = 1
b = 2
c = a + b
print(c)
Create a Python program to convert Fahrenheit to Celsius.  def Fahrenheit_to_Celsius(F): 
    return (F - 32) * 5/9
  
print("Temperature in Celsius = ", 
      Fahrenheit_to_Celsius(100))
Write a Python program to calculate the Root Mean Square Error (RMSE) error value for a given prediction. y_predicted = [1, 2, 3] 
y_actual = [2, 3, 4] from sklearn.metrics import mean_squared_error

def calculate_rmse(y_predicted, y_actual):
    error = mean_squared_error(y_predicted, y_actual)
    rmse = error**0.5
    return rmse

y_predicted = [1, 2, 3]
y_actual = [2, 3, 4]
rmse = calculate_rmse(y_predicted, y_actual)
print(rmse) # Output: 1.0
Create an optimization algorithm to minimize a cost function.  # Python code to implement 
# the Gradient Descent algorithm

def gradientDescent(x, y, learning_rate, max_iterations): 
  
    m_curr = b_curr = 0
    n = len(x)
    cost_previous = 0
    cost_present = 0
    iteration = 0 
  
    while iteration < max_iterations: 
        y_predicted = m_curr * x + b_curr 
        cost_present = (1/n) * sum([val**2 for val in (y-y_predicted)]) 
        md = -(2/n)*sum(x*(y-y_predicted)) 
        bd = -(2/n)*sum(y-y_predicted) 
        m_curr = m_curr - learning_rate * md 
        b_curr = b_curr - learning_rate * bd 
        iteration = iteration + 1
        cost_previous = cost_present
  
    return m_curr, b_curr, cost_previous
Generate a valid Python 3 cURL request to the OpenWeatherMap API for current weather information. A city name, "Paris". import requests 
  
# defining the api-endpoint 
API_ENDPOINT = "https://api.openweathermap.org/data/2.5/weather"
  
# data to be sent to api 
data = {"q" : "Paris", "appid" : YOUR_API_KEY} 
  
# sending post request and saving response as response object 
r = requests.get(url = API_ENDPOINT, params = data) 
  
# extracting response text  
pastebin_url = r.text 
print("The current weather for Paris is :%s"%pastebin_url)
Construct an object-oriented Python model for a student database.  class Student:
 def __init__(self, name, student_id, courses):
 self.name = name
 self.student_id = student_id
 self.courses = courses

class Course:
 def __init__(self, title, course_id, credits):
 self.title = title
 self.course_id = course_id
 self.credits = credits

class Database:
 def __init__(self):
 self.students = []
 self.courses = []
 
 def add_student(self, student):
 self.students.append(student)
 
 def add_course(self, course):
 self.courses.append(course)
Write a Python program that replaces all the occurrences of the letter ‘a’ with ‘$’ in a given string. text = 'show me the money' def replace_letter(text):
    result = ''
    for letter in text:
        if letter == 'a':
            result += '$'
        else:
            result += letter
    return result

text = 'show me the money'

print(replace_letter(text))
Design an algorithm in Python that takes a list of meetings as input and produces a schedule that minimizes overall meeting duration. list of meetings as a list of tuples [(start_time1, end_time1), (start_time2, end_time2), ...]

Example: [(10,12), (11,13), (14,15)] def minimize_meeting_duration(meetings):
  # sort the meetings by start time
  meetings.sort(key=lambda x: x[0])

  # initialize cached_end_time as the end time of first meeting
  cached_end_time = meetings[0][1]

  # initialize the result
  schedule = [meetings[0]]

  # iterate through all the meetings
  for m in meetings[1:]:
    # if the current meeting starts after the cached_end_time
    # then this meeting can be added to the schedule
    if m[0] > cached_end_time:
      schedule.append(m)
      cached_end_time = m[1]

  # return the result
  return schedule
The code generates a GDS file for a wafer mask. To use it, call the GenerateCell() function with the desired parameters. The function takes in the following parameters: chipX, chipY, leftKerf, rightKerf, topKerf, botKerf, narray_X, narray_Y, mask_width, wafer_offset_x, wafer_offset_y, and wafer_radius. The function extracts an existing die mask top cell from a GDS file, creates a top reticle cell, adds cells to the top cell, fills the kerf with resist, creates a wafer top cell, and views the resulting cell. Finally, it writes the wafer mask GDS file.  #!/usr/bin/python
import os
import numpy
import gdspy

ld_mask_edge = {'layer': 300, 'datatype': 0}
ld_kerf = {'layer': 200, 'datatype': 0}
ld_acfmask = {'layer': 100, 'datatype': 0}
ld_topmetal= {'layer': 81, 'datatype': 0}
ld_po= {'layer': 27, 'datatype': 1}


def GenerateCell(chipX = 14100., chipY=16210.,leftKerf=85.,rightKerf=15.,topKerf=465.,botKerf=15.,narray_X=13,narray_Y=11,mask_width=254000.,wafer_offset_x=-570.0,wafer_offset_y=2595.0,wafer_radius=100000) :

    #Extract existing die mask top cell from GDS
    gdsii = gdspy.current_library.read_gds(infile='Timepix3_top_ACF_Nometal.GDS',layers=ld_acfmask)
    die =  gdspy.current_library.extract("Timepix3_top")
    die_ref = gdspy.CellReference(die,origin=(leftKerf,botKerf))

    #Create top reticle cell
    pixel_cell = gdspy.Cell("Reticle_top")

    # Create a kerf layer for visualization
    kerfWidth  = leftKerf+rightKerf+chipX
    kerfHeight = topKerf+botKerf+chipY
    Kerf = gdspy.Rectangle((0,0), (kerfWidth, kerfHeight),**ld_kerf)

   # Add cells to the top cell
    pixel_cell.add(Kerf)
    pixel_cell.add(die_ref.get_polygonsets())
    pixel_cell.add(die_ref.get_paths())
    #Fill the Kerf with Resist
    pixel_cell.add(gdspy.Rectangle((0,0), (leftKerf, kerfHeight),**ld_acfmask))
    pixel_cell.add(gdspy.Rectangle((0,0), (kerfWidth, botKerf),**ld_acfmask))
    pixel_cell.add(gdspy.Rectangle((0,kerfHeight), (kerfWidth, kerfHeight-topKerf),**ld_acfmask))
    pixel_cell.add(gdspy.Rectangle((kerfWidth-rightKerf,0), (kerfWidth, kerfHeight-topKerf),**ld_acfmask))

    wafer_cell = gdspy.Cell('Wafer_Top')
    mask_edge = gdspy.Rectangle((-mask_width/2,-mask_width/2), (mask_width/2., mask_width/2.),**ld_mask_edge)

    array_origin_x = -narray_X*(leftKerf+rightKerf+chipX)/2. + wafer_offset_x
    array_origin_y = -narray_Y*(botKerf+topKerf+chipY)/2. + wafer_offset_y


    wafer_edge = gdspy.Path(1,(wafer_radius,0))
    wafer_edge.arc(wafer_radius,0,360,layer=400)
    wafer_cell.add(wafer_edge)

    print kerfWidth,kerfHeight
    wafer_cell.add(gdspy.CellArray(pixel_cell,narray_X,narray_Y,spacing=(kerfWidth,kerfHeight),origin=(array_origin_x,array_origin_y)))
    wafer_cell.add(mask_edge)




    # View the resulting cell
    gdspy.LayoutViewer(cells=[wafer_cell],depth=1)


    gdspy.write_gds("wafer_mask.gds",cells=[wafer_cell,pixel_cell])



if __name__ == '__main__':
    GenerateCell()
Write a Python program to predict whether a customer is likely to churn or not. [
{'id':1, 'age':25, 'gender':'Male', 'priority':'High'},
{'id':2, 'age':28, 'gender':'Male', 'priority':'Low'},
{'id':3, 'age':35, 'gender':'Female', 'priority':'High'},
{'id':4, 'age':18, 'gender':'Female', 'priority':'Low'},
{'id':5, 'age':45, 'gender':'Male', 'priority':'Low'},
{'id':6, 'age':27, 'gender':'Female', 'priority':'High'},
] import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.tree import DecisionTreeClassifier

# Load the data
data = [
{'id':1, 'age':25, 'gender':'Male', 'priority':'High'},
{'id':2, 'age':28, 'gender':'Male', 'priority':'Low'},
{'id':3, 'age':35, 'gender':'Female', 'priority':'High'},
{'id':4, 'age':18, 'gender':'Female', 'priority':'Low'},
{'id':5, 'age':45, 'gender':'Male', 'priority':'Low'},
{'id':6, 'age':27, 'gender':'Female', 'priority':'High'},
]

# Convert data into a pandas DataFrame
df = pd.DataFrame(data)

# Create target variable
df['churn'] = [0, 0, 0, 1, 1, 0]

# Convert categorical variables to dummy variables
df_dummy = pd.get_dummies(df, columns = ['gender', 'priority'], drop_first = True)

# Split the data into train and test
X = df_dummy.drop(['id', 'churn'], axis = 1)
y = df_dummy['churn']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

# Feature scaling
sc = StandardScaler() 
X_train = sc.fit_transform(X_train) 
X_test = sc.transform(X_test)

# Create the model
clf = DecisionTreeClassifier() 
clf.fit(X_train, y_train) 

# Make predictions
y_pred = clf.predict(X_test)

# Evaluate the model
y_prob = clf.predict_proba(X_test)[:, 1]

print("Accuracy:", clf.score(X_test, y_test))
Modify the following code in Python to check if a number is prime or not. def checkPrime(n):
    for i in range(2,n):
        if n%i==0:
            return False
    return True def checkPrime(n):
    if n <= 1:
        return False

    for i in range(2,n):
        if n % i == 0:
            return False
    
    return True
Develop a web scraping program using Python to extract the names and contact information of 10 randomly selected people from a popular website. Not applicable import requests
import random
from bs4 import BeautifulSoup

#specify website url
website_url = 'https://www.example.com/people'

#scraping function
def scrape_contacts():
    #load website
    html = requests.get(website_url).text
    #parse html
    soup = BeautifulSoup(html, 'html.parser')
    contacts = []
    #extract contact information
    for contact in soup.find_all('div', {'class': 'contact'}):
        name = contact.find('h3').text
        email = contact.find('p', {'class': 'email'}).text
        phone = contact.find('p', {'class': 'phone'}).text
        contacts.append({'name': name, 'email': email, 'phone': phone})
    #randomly select 10 contacts
    return random.sample(contacts, 10)

scraped_contacts = scrape_contacts()
Write a python program to find the pair of elements in a given array whose sum is equal to a given number. arr = [2, 3, 4, 5, 6, 7], sum = 9 def find_pair(arr, s): 
    pairs = [] 
      
    # traverse each element 
    for i in range(0, len(arr)):
          
        # traverse each element again 
        for j in range(i+1, len(arr)):
            if arr[i] + arr[j] == s: 
                pairs.append((arr[i], arr[j]))
                  
    return pairs
      
# Driver Code 
arr = [2, 3, 4, 5, 6, 7] 
s = 9
      
print(find_pair(arr, s)) # Output: [(2, 7), (3, 6), (4, 5)]
Create a python program to find the prime factors of an input number. num = 50 def prime_factors(num):
        factors = []
        i = 2
        while num > 1:
            while num % i == 0:
                num = num / i
                factors.append(i)
            i += 1
        return factors

num = 50
factors = prime_factors(num)
print(factors) # -> [2, 5,  5]
Can you write a python program to identify the last index of a given element in a list? The list [2, 5, 9, 2, 4] and the element 2 # Define the list
list_ = [2, 5, 9, 2, 4]
  
# Find the last index of element 2
last_index = len(list_) - list_[::-1].index(2) - 1
  
# Print the result
print(last_index)
Construct a Python program that shuffles a deck of cards. A standard deck of cards with 52 cards import random

# A standard deck of cards with 52 cards
deck = [2, 3, 4, 5, 6, 7, 8, 9, 10, 
        'J', 'Q', 'K', 'A', 
        2, 3, 4, 5, 6, 7, 8, 9, 10, 
        'J', 'Q', 'K', 'A',
        2, 3, 4, 5, 6, 7, 8, 9, 10, 
        'J', 'Q', 'K', 'A',
        2, 3, 4, 5, 6, 7, 8, 9, 10, 
        'J', 'Q', 'K', 'A']

# Shuffle the deck
random.shuffle(deck)
print(deck)
Write a Python script that finds the most common element of a given list. list = [3, 5, 6, 3, 7, 8, 3, 4] def find_most_frequent_element(list):
 count_map = {}
 max_element= list[0]
 max_count = 1
 for num in list:
  if num in count_map:
   count_map[num] += 1
  else:
   count_map[num] = 1
 for num in count_map:
  if count_map[num] > max_count:
   max_element = num
   max_count = count_map[num]
 return max_element
Create a simple web crawler in Python to count the number of words in a given website.  # Imports
import requests
from bs4 import BeautifulSoup

# Function to crawl the website
def crawl_website(url):
	# Make a request to the website
	r = requests.get(url)

	# Parse the html
	soup = BeautifulSoup(r.content)

	# Retrieve all the text
	text = soup.get_text()

	# Count the number of words
	word_count = len(text.split())
	
	return word_count
Generate a function in Python to edit a given string and capitalize a given character at a specific position. "Hello World!" and 5 def capitalizeCharacter(s, pos): 
    # Grab single characters from the string  
    # starting from the given index 
    result = s[:pos] + s[pos].upper() + s[pos + 1:] 
    return result
Write a class in Python for creating a Binary Tree. No Input class BinaryTree:
    def __init__(self, root):
        self.root = root
        self.left = None
        self.right = None
        
    def insert_left(self, node):
        if self.left is None:
            self.left = BinaryTree(node)
        else:
            t = BinaryTree(node)
            t.left = self.left
            self.left = t
        
    def insert_right(self, node):
        if self.right is None:
            self.right = BinaryTree(node)
        else:
            t = BinaryTree(node)
            t.right = self.right
            self.right = t
Create a python program to simulate basic Twitter functionality  def post_tweet(username, tweet):
    tweet_db.addTweet(username, tweet)

def get_tweets(username):
    return tweet_db.getTweets(username)

def delete_tweet(username, tweetId):
    tweet_db.deleteTweet(username, tweetId)
Write a python program to classify text input as either positive or negative sentiment.  # Example of predicting sentiment from text
from textblob import TextBlob
 
def classify_sentiment(text):
	# create TextBlob object of passed text
	analysis = TextBlob(text)
	# set sentiment
	if analysis.sentiment.polarity > 0:
		return 'positive'
	elif analysis.sentiment.polarity == 0:
		return 'neutral'
	else:
		return 'negative'

text1 = 'I am a good person'
text2 = 'I am a bad person'

sentiment1 = classify_sentiment(text1) 
sentiment2 = classify_sentiment(text2) 

print(sentiment1)
print(sentiment2)
Create an algorithm in Python to search for a value in a linked list.  def search(head, key): 
    current = head 
    while current is not None: 
        if current.data == key: 
            return current 
        current = current.next
    return None
Create a python code to get the intersection of two Lists. List1 = [1, 3, 5, 7, 8]
List2 = [2, 3, 7, 8, 9] def get_intersection(List1, List2):
    '''
    This program takes in two lists and returns the elements common in both lists
    '''
    intersect_list = []

    for item in List1:
        if item in List2:
            intersect_list.append(item)

    return intersect_list

List1 = [1, 3, 5, 7, 8]
List2 = [2, 3, 7, 8, 9]

print(get_intersection(List1, List2)) # [3, 7, 8]
Write a Python program to generate UUID  import uuid

def generate_uuid():
    return str(uuid.uuid4())
Create a matrix in Python using lists that is 3x3.  X = [[0, 0, 0], 
     [0, 0, 0], 
     [0, 0, 0]]
Create a data pipeline in Python to transform raw data into a machine learning model. Not applicable # define the data source
data_source = SomeDataSource()

# define the transformer
transformer = SomeTransformer()

# define the model
model = SomeModel()

# define the data pipeline
def data_pipeline(data):
 # pre-process data
 data = transformer.transform(data)
 
 # pass data to model
 model.fit(data)
 
 # return predictions
 predictions = model.predict(data)
 
 return predictions

# execute the data pipeline
predictions = data_pipeline(data_source.get_data())
Can you generate a random number between 1 and 10 using Python?  import random

def generate_random_number():
 return random.randint(1, 10)
Build a Python machine learning model on a given dataset and evaluate its performance. Dataset provided: 

Features:
- age
- gender
- income
- marital_status
- education

Target
- purchase import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier

# Load data into a dataframe
data = pd.read_csv("data.csv")

# Split data into features and target
X = data[['age','gender','income','marital_status','education']]
y = data['purchase']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=123)

# Initialize model
rf = RandomForestClassifier(random_state=123)

# Train the model on the training set
rf.fit(X_train, y_train)

# Test the model on the testing set and calculate the accuracy
accuracy = rf.score(X_test, y_test)

# Print the accuracy
print("Accuracy: " + str(accuracy))
Write a Python program to create a valid Sudoku board from user input. [4, 0, 6, 8, 0, 0, 2, 0, 9, 0, 0, 5, 9, 0, 1, 0, 0, 3, 0, 0, 7, 0, 0, 6, 0, 0, 8, 0, 0, 0, 0, 0, 7, 0, 0, 5, 1, 0, 0, 0, 7, 0, 0, 8, 7, 0, 8, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 6, 0, 0, 0, 6, 0, 0, 1, 0, 0] def is_valid_sudoku(board):
    #Rows
    for i in range(9):
        if not (set(board[i]) == {1, 2, 3, 4, 5, 6, 7, 8, 9} or set(board[i]) == {0}):
            return False
    
    #Columns
    for i in range(9):
        vals = []
        for j in range(9):
            vals.append(board[j][i])
        if not (set(vals) == {1, 2, 3, 4, 5, 6, 7, 8, 9} or set(vals) == {0}):
            return False
    
    #Cubes
    for i in range(0, 9, 3):
        for j in range(0, 9, 3):
            vals = []
            for m in range(3):
                for n in range(3):
                    vals.append(board[i+m][j+n])
            if not (set(vals) == {1, 2, 3, 4, 5, 6, 7, 8, 9} or set(vals) == {0}):
                return False
    
    return True

def generate_board(arr):
    if len(arr) != 81:
        return False
    board = [[0 for i in range(9)] for j in range(9)]
    for i in range(81):
        board[int(i/9)][i%9] = arr[i]
    if is_valid_sudoku(board):
        return board
    else:
        return False
Implement a function in Python to take a string of comma separated numbers and return the average of the numbers. "3, 4, 5, 6, 7" def calculate_average(nums):
 nums_list = nums.split(",")
 total = 0
 for num in nums_list:
 total += float(num)
 return total / len(nums_list)
 
# test code
print(calculate_average("3, 4, 5, 6, 7")) # should print 5.0
Write a Python program to take a list of words as input and print all of the words with at least 4 letters. ['apple', 'cat', 'elephant', 'banana', 'dog'] words = ['apple', 'cat', 'elephant', 'banana', 'dog']

filtered_words = []

for word in words:
    if len(word) >= 4:
        filtered_words.append(word)

print(filtered_words)
Create a Python program to calculate the body mass index (BMI) for a person given their weight and height in kilograms and centimeters. Weight: 50 kilograms 
Height: 170 centimeters def calculate_bmi(weight, height):
    bmi = weight / ((height/100) ** 2)
    if bmi < 18.5:
        return bmi, "Underweight"
    elif 18.5 <= bmi < 25:
        return bmi, "Normal weight"
    elif 25 <= bmi < 30:
        return bmi, "Overweight"
    else:
        return bmi, "Obese"

weight = 50
height = 170

bmi, status = calculate_bmi(weight, height)

print("Your BMI is {:.1f}. You are {}.".format(bmi, status))
Create a Python class that represents a person and contains attributes such as name, age, and occupation.  class Person:
    def __init__(self, name, age, occupation):
        self.name = name
        self.age = age
        self.occupation = occupation
  
    def get_info(self):
        print("Name: "+self.name)
        print("Age: "+str(self.age))
        print("Occupation: "+self.occupation)
Find the most frequent element in a python list? [2, 3, 3, 5, 5, 5, 7, 8, 8] def find_most_frequent(lst):
    max_count = 0
    most_frequent = None
    count_dict = {}
    for elem in lst:
        if elem not in count_dict:
            count_dict[elem] = 1
        else:
            count_dict[elem] += 1
            
        if count_dict[elem] > max_count:
            most_frequent = elem
            max_count = count_dict[elem]
            
    return most_frequent, max_count
Generate a Python code snippet to find the maximum element in an array.  def find_max(arr):
    max = arr[0]
    for i in range(1, len(arr)):
        if arr[i] > max:
            max = arr[i]
    return max
Create a python script for Creating a car class with attributes like color and engine type.  class Car:
    def __init__(self, color, engine_type): 
        self.color = color 
        self.engine_type = engine_type 
  
    def get_color(self):
        print("Car's Color: ", self.color) 
  
    def get_engine_type(self):
        print("Car's Engine Type: ", self.engine_type)
Write a python program to evaluate the Euclidean distance between two lists of numbers list1 = [1, 2, 3] 
list2 = [4, 5, 6] def euclidean_distance(list1, list2): 
    dist = 0.0
    for i in range(len(list1)): 
        dist += (list1[i] - list2[i]) ** 2 
    return (dist ** 0.5) 
  
list1 = [1, 2, 3] 
list2 = [4, 5, 6] 

print("Euclidean distance between lists:")
print(euclidean_distance(list1, list2))
Create a function in Python that takes an array of integers and prints out the largest and smallest numbers.  def print_min_max(arr):
    min_val = min(arr)
    max_val = max(arr)
    print('Smallest number: ', min_val)
    print('Largest number: ', max_val)
Write a python program to sort a given list of tuples based on its first element in increasing order. [(3, 'ape'), (1, 'cat'), (4, 'dog'), (2, 'bee')] def sortTuplesByFirstElement(lst):
    lst.sort(key = lambda x: x[0])
    return lst

sortedList = sortTuplesByFirstElement([(3, 'ape'), (1, 'cat'), (4, 'dog'), (2, 'bee')])
print(sortedList)
Develop a function that returns the sum of three numbers three integers a, b, c # Python3 program to return the sum of three numbers

def sum_three(a,b,c): 
    return a + b + c
Create a Python script which takes in a list of integers and outputs a list of odd numbers in descending order. [14, 21, 8, 5, 46] def odd_descending(lst):
    lst = [x for x in lst if x % 2 != 0]
    return sorted(lst, reverse=True)

list = [14, 21, 8, 5, 46]
print(odd_descending(list))
Design an efficient algorithm in Python for sorting a list of numbers. [3, 5, 7, 4, 2, 1] def quicksort(arr):
    if len(arr) <= 1:
        return arr
 
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)
Create a program in Python to perform web scraping using the BeautifulSoup module. URL: https://en.wikipedia.org/wiki/Python_(programming_language) import requests 
from bs4 import BeautifulSoup 

# Get the webpage
url = 'https://en.wikipedia.org/wiki/Python_(programming_language)'
response = requests.get(url) 

# Create the soup
soup = BeautifulSoup(response.text, 'html.parser') 

# Extract the text
text = soup.get_text() 

# Output the text
print(text)
Design a Python class to define a person.  class Person:

    def __init__(self, name, age, gender):
        self.name = name
        self.age = age
        self.gender = gender

    def get_name(self):
        return self.name

    def get_age(self):
        return self.age

    def get_gender(self):
        return self.gender
Create a program in Python that calculates the median of an array of integers without using the built-in function. [1, 2, 3, 4, 5] def median(arr): 
 n = len(arr) 
 arr.sort() 

 # check for even case 
 if n % 2 == 0: 
 return (arr[int((n - 1)/2)] +
 arr[int(n/2)]) / 2

else: 
 return arr[int(n/2)] 

# test
arr = [1, 2, 3, 4, 5] 
print("Median =", median(arr)) 

# Output: Median = 3.0
Write a Python script to scrape the current market price of a given stock and store the data into a MongoDB database. Stock Name: Twitter """
Scrape the current market price of Twitter stock and store the data into a MongoDB database
"""

import requests 
from pymongo import MongoClient 

def get_price(stock_name):
    # request the data 
    response = requests.get(f"https://finance.yahoo.com/quote/{stock_name}?p={stock_name}") 
    # parse the response 
    data = response.json() 
    # get the price 
    return data['chart']['result'][0]['meta']['regularMarketPrice'] 

if __name__ == "__main__":
    # connect to the MongoDB database 
    client = MongoClient() 
    db = client['stocks']
    # get the stock name from user
    stock_name = input("Stock Name: ").upper() 
    # get the stock price 
    price = get_price(stock_name) 
    # store the data into MongoDB   
    db.stocks.insert_one({'stock':stock_name, 'price':price}) 
    print('Data stored successfully!')
Create a python function that given an input array of integers produces a new array that contains the unique integers of the input array. [1, 1, 2, 2, 3] def unique_list(input_list):
    uniques = []
    for i in input_list:
        if i not in uniques:
            uniques.append(i)

    return uniques
Generate a Python class that prints a nested list according to given specifications. [1,2,[3,4],[5,[6,7,8]]] class PrintNestedList:
    def __init__(self, nested_list):
        self.nested_list = nested_list
 
    def print_list(self, nested_list, level = 0):
        for elem in nested_list:
            if isinstance(elem, list):
                self.print_list(elem, level + 1)
            else:
                print('    '*level + str(elem))
 
    def __str__(self):
        self.print_list(self.nested_list)
        return ''
        
my_list = PrintNestedList([1,2,[3,4],[5,[6,7,8]]])
print(my_list)
Generate Python code for printing the average of a list of numbers. [2, 5, 6, 7] list = [2, 5, 6, 7]

sum = 0

for num in list:
 sum += num
 
average = sum / len(list)
print("Average:", average)
Generate a Python program to extract the emailIDs from a text string. Example user input: "The list of contacts is john@test.com,jane@example.com,bob@test.com" import re

text = "The list of contacts is john@test.com,jane@example.com,bob@test.com"

pattern = r'[\w\.-]+@[\w\.-]+'

match = re.findall(pattern, text)

print(match)
Implement a search algorithm in Python that takes a list and a query as input and returns all matching elements. list = [1, 2, 3, 4, 5, 6]
query = 4 def search(list, query): 
    results = []
    for item in list:
        if item == query: 
            results.append(item) 
    return results

list = [1, 2, 3, 4, 5, 6]
query = 4

result = search(list, query)
print(result)
The given code is a Python script that can be used to download and process data from the Brazilian Electoral Court (TSE) and store it in a PostgreSQL database. To use this script, follow these steps:

1. Install the required packages: `bradata`, `luigi`, `pandas`, `pyyaml`
2. Import the required modules: `bradata.utils`, `bradata.connection`, `os`, `io`, `ZipFile`, `pandas`, `glob`, `yaml`, `shutil`, `luigi`, `luigi.contrib.postgres`
3. Define a function `_find_header` that takes three arguments: `data_type`, `year`, and `path`. This function reads a YAML file from the given path and returns the header for the given data type and year.
4. Define a class `Get_Headers` that extends `luigi.Task`. This class downloads a CSV file containing the headers for the TSE data and saves it to a local file.
5. Define a class `Get_Header_Relation` that extends `luigi.Task`. This class downloads a YAML file containing the relation between the headers and the columns of the TSE data and saves it to a local file.
6. Define a class `Download_Unzip` that extends `luigi.Task`. This class downloads and unzips the TSE data for a given data type and year and saves it to a local directory.
7. Define a class `Aggregat` that extends `luigi.Task`. This class reads the TSE data files for a given data type and year, aggregates them into a single pandas DataFrame, and saves the result to a CSV file.
8. Define a class `ToSQL` that extends `luigi.Task`. This class reads the CSV file produced by `Aggregat`, connects to a PostgreSQL database, and inserts the data into a table.
9. Define a class `Fetch` that extends `luigi.WrapperTask`. This class takes a list of data types and years, and creates a `ToSQL` task for each combination of data type and year.
10. Call `luigi.run()` to execute the Luigi pipeline.

To use this script, you need to modify the `Fetch` class to specify the data types and years you want to download. For example:

```
if __name__ == "__main__":
    luigi.run(['Fetch', '--local-scheduler', '--data-types', 'votacao_candidato_munzona', '--years', '2018'])
```

This will download the TSE data for the `votacao_candidato_munzona` data type for the year 2018. You can specify multiple data types and years by separating them with commas.  import bradata.utils
import bradata.connection

import os
import io
from zipfile import ZipFile
import pandas as pd
import glob
import yaml
import shutil

import luigi
import luigi.contrib.postgres


def _find_header(data_type, year, path):
    with open(path, 'r') as f:
        data = yaml.load(f)
    a = data[data_type]['columns']

    final = min(list(a.keys()))
    for k in a.keys():
        if int(year) >= k:
            final = k

    return str(a[final])


class Get_Headers(luigi.Task):

    def output(self):
        return luigi.LocalTarget(os.path.join(bradata.__download_dir__, 'tse', 'config', 'headers.csv'))

    def run(self):
        conn = bradata.connection.Connection()

        result = conn.perform_request('https://raw.githubusercontent.com/labFGV/bradata/master/bradata/tse/headersTSE.csv')

        if result['status'] == 'ok':
            result = result['content']
        else:
            print('File was not dowloaded')

        with self.output().open('w') as o_file:
            o_file.write(result)


class Get_Header_Relation(luigi.Task):
    def output(self):
        return luigi.LocalTarget(os.path.join(bradata.__download_dir__, 'tse', 'config', 'header_relation.yaml'))

    def run(self):
        conn = bradata.connection.Connection()

        result = conn.perform_request(
            'https://raw.githubusercontent.com/labFGV/bradata/master/bradata/tse/header_relation.yaml')

        if result['status'] == 'ok':
            result = result['content']
        else:
            raise Warning ('Header Relation was not dowloaded')

        with self.output().open('w') as o_file:
            o_file.write(result)


class Download_Unzip(luigi.Task):
    """
    Download and unzip
    """

    year = luigi.Parameter()
    data_type = luigi.Parameter()

    def output(self):
        """
        :return: the target output for this task.
        :rtype: object (:py:class:`luigi.target.Target`)
        """
        return luigi.LocalTarget(os.path.join(bradata.__download_dir__, 'tse', 'temp', '{}_{}'.format(self.data_type, self.year)))

    def requires(self):
        """
        * :py:class:`~.Streams`
        :return: list of object (:py:class:`luigi.task.Task`)
        """
        return Get_Header_Relation()

    def run(self):
        conn = bradata.connection.Connection()

        with self.input().open('r') as input_file:
            base_url = self.select_url(self.data_type)

            url = base_url + bradata.utils._treat_inputs(self.year) + '.zip'

            result = conn.perform_request(url, binary=True)

            if result['status'] == 'ok':
                result = result['content']
            else:
                raise Exception ('File was not dowloaded')

            zipfile = ZipFile(io.BytesIO(result))

            zipfile.extractall(self.output().path)

    def select_url(self, data_type):

        with open(self.input().path, 'r') as f:
            data = yaml.load(f)

        return data[data_type]['url']


class Aggregat(luigi.Task):
    """
    Get all states csv files aggregate it to a unique file with header
    """

    year = luigi.Parameter()
    data_type = luigi.Parameter()

    def requires(self):
        """
        """

        return {'download': Download_Unzip(data_type=self.data_type, year=self.year),
                'headers': Get_Headers(),
                'header_relation': Get_Header_Relation()}

    def output(self):
        """
        """
        return luigi.LocalTarget(os.path.join(bradata.__download_dir__, 'tse', '{}_{}.csv'.format(self.data_type, self.year)))

    def run(self):

        headers = pd.read_csv(self.input()['headers'].path)
        files = glob.glob(self.input()['download'].path + "/*.txt".format(self.year))

        header = _find_header(self.data_type, self.year, self.input()['header_relation'].path)

        df_list = []
        for filename in sorted(files):
            df_list.append(
                pd.read_csv(filename, sep=';', names=headers[header].dropna().tolist(), encoding='latin1'))


        full_df = pd.concat(df_list)

        full_df.to_csv(self.output().path, index=False, encoding='utf-8')

        print('Completed! Access your file at',
              os.path.join(bradata.__download_dir__, 'tse', '{}_{}.csv'.format(self.data_type, self.year)))


class ToSQl(luigi.Task):

    data_type = luigi.Parameter()
    year = luigi.Parameter()

    def requires(self):
        return Aggregat(data_type=self.data_type, year=self.year)

    def run(self):
        with open('bradata/tse/config_server.yaml', 'r') as f:
            server = yaml.load(f)

        host = server['host']
        database = server['database']
        user = server['user']
        password = server['password']
        schema = 'tse'
        table = '{}_{}'.format(self.data_type, self.year)

        from sqlalchemy import create_engine
        url = 'postgresql://{}:{}@{}/{}'
        url = url.format(user, password, host, database)
        engine = create_engine(url)

        headers = pd.read_csv(self.input().path)
        print('Inserting data do DB. It can take a while...')
        headers.to_sql(table, engine, schema=schema, if_exists='replace')
        print('The data is on your DB! Check schema {}, table {}'.format(schema, table))

        with self.output().open('w') as f:
            f.write('')

    def output(self):
        return luigi.LocalTarget(os.path.join(bradata.__download_dir__, 'tse', 'temp',
                                              '{}_{}'.format(self.data_type, self.year), 'dumb.txt'))


class Fetch(luigi.WrapperTask):

    data_types = luigi.Parameter()
    years = luigi.Parameter()

    def requires(self):

        data_types = self.string_to_list(self.data_types)
        years = self.string_to_list(self.years)

        yield [ToSQl(data_type=t, year=y) for t in data_types for y in years]

    def string_to_list(self, string):
        string = string.replace("'",'').replace('[', '').replace(']','').replace(' ', '')
        return [s for s in string.split(',')]


if __name__ == "__main__":
    luigi.run()
Using Python, construct a program to calculates the average of three numbers (input provided). 4, 9, 10 num1 = 4
num2 = 9
num3 = 10

total = num1 + num2 + num3
average = total / 3
print("Average =", average)  # Output: Average = 7.66
Generate code to find the sum of all numbers in an array using Python.  def sum_of_array(arr):
    # Initialize result 
    res = 0 
  
    # Iterate through all elements 
    # and add them to result 
    for i in range(0, len(arr)): 
        res = res + arr[i] 
  
    # return final result 
    return res
Write a Python program to filter a list of strings and return only the elements that contain alphanumeric characters. ['hello', 'world', '1234', '56jklm'] def filter_alphanumeric(strings_list):
    filtered_list = []
    for string in strings_list:
        if any(char.isalnum() for char in string):
            filtered_list.append(string)
    return filtered_list

strings_list = ['hello', 'world', '1234', '56jklm']
filtered_list = filter_alphanumeric(strings_list)
print(filtered_list)
Create a Django application to manage a blog.  # Creating a virtual environment
python -m venv env
source env/bin/activate
pip install Django

# Create a Django project
django-admin startproject Blog

# Create an app
cd Blog
python manage.py startapp blog_app

# Install dependencies
# Install crispy_forms to use for styling forms
pip install django-crispy-forms

# Adding applications to the settings.py
# Add the blog_app to the installed applications
INSTALLED_APPS = [
    # django dependencies
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # third-party dependencies
    'crispy_forms', 

    #  project applications
    'blog_app',
]

# Add template settings to the settings.py
# Include the templates directory in the settings
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Register models and create the URL path
# Create views to handle requests
# Add templates for posts and pages
# Configure your Django admin interface
# Configure static and media files
# Start the server to see the blog
Write a python program that adds all the elements in a given list my_list = [2, 4, 6, 8] def list_sum(list):
    sum = 0
    for num in list:
        sum += num
    return sum
Write a Python program to check if a provided string is valid JSON. "<noinput>" def is_valid_json(s):
    valid = True
    try:
        json.loads(s)
    except ValueError:
        valid = False
    return valid
Create a Python functioning calculator using tkinter. Not applicable from tkinter import *

root = Tk()
root.title("Calculator")

e = Entry(root, width=35, borderwidth=5)
e.grid(row=0, column=0, columnspan=3, padx=10, pady=10)

# Define buttons

def button_click(number):
 current = e.get()
 e.delete(0, END)
 e.insert(0, str(current) + str(number))

# Define clear function

def button_clear():
 e.delete(0, END)

# Define addition function 

def button_add():
 first_num=e.get()
 global f_num
 global maths
 maths="addition"
 f_num = float(first_num)
 e.delete(0, END)

# Define equal function 

def button_equal():
 second_num= e.get()
 e.delete(0, END)
 
 if maths == "addition":
  e.insert(0, f_num + float(second_num))
 
# Create buttons

button_1 = Button(root, text="1", padx=40, pady=20, command=lambda: button_click(1))
button_2 = Button(root, text="2", padx=40, pady=20, command=lambda: button_click(2))
button_3 = Button(root, text="3", padx=40, pady=20, command=lambda: button_click(3))
button_4 = Button(root, text="4", padx=40, pady=20, command=lambda: button_click(4))
button_5 = Button(root, text="5", padx=40, pady=20, command=lambda: button_click(5))
button_6 = Button(root, text="6", padx=40, pady=20, command=lambda: button_click(6))
button_7 = Button(root, text="7", padx=40, pady=20, command=lambda: button_click(7))
button_8 = Button(root, text="8", padx=40, pady=20, command=lambda: button_click(8))
button_9 = Button(root, text="9", padx=40, pady=20, command=lambda: button_click(9))
button_0 = Button(root, text="0", padx=40, pady=20, command=lambda: button_click(0))
button_add = Button(root, text="+", padx=39, pady=20, command=button_add)
button_equal = Button(root, text="=", padx=91, pady=20, command=button_equal)
button_clear = Button(root, text="Clear", padx=79, pady=20, command=button_clear)

# Put buttons on screen

button_1.grid(row=3, column=0)
button_2.grid(row=3, column=1)
button_3.grid(row=3, column=2)

button_4.grid(row=2, column=0)
button_5.grid(row=2, column=1)
button_6.grid(row=2, column=2)

button_7.grid(row=1, column=0)
button_8.grid(row=1, column=1)
button_9.grid(row=1, column=2)

button_0.grid(row=4, column=0)
button_clear.grid(row=4, column=1, columnspan=2)
button_add.grid(row=5, column=0)
button_equal.grid(row=5, column=1, columnspan=2)

root.mainloop()
Write a code snippet in Python to calculate the average of the following list of numbers: [1, 7, 8, 4, 9]. Not applicable numbers = [1, 7, 8, 4, 9]
average = sum(numbers) / len(numbers)
print(average) # 5.6
Create a simple Python script that takes a single command-line parameter and prints out "Hello <parameter>" to the console. John import sys

name = sys.argv[1]
print("Hello {}".format(name)) # Output: Hello John
Can you provide a Python script to find the most frequent element in an array? [1, 1, 2, 3, 2, 4, 4] from collections import Counter

def most_frequent(arr):
    cnt = Counter(arr)
    return cnt.most_common(1)[0][0]

arr = [1, 1, 2, 3, 2, 4, 4]
most_frequent_elem = most_frequent(arr)
print(most_frequent_elem)
Write a Python program to create a 3x3x3 array (3D array) filled with zeros.  import numpy as np
arr = np.zeros((3, 3, 3))
print(arr)
Generate a python program to help a user create a custom greframe to quickly generate a simple part-of-speech tagged dataset.  import spacy

def generate_grammar_based_dataset(sentences):
    nlp = spacy.load('en_core_web_sm')
    dataset = []
    for sentence in sentences:
        doc = nlp(sentence)
        grammarTaggedSentence = [(token.text, token.pos_) for token in doc]
        dataset.append(grammarTaggedSentence)
    return dataset
Generate a Python program to append a given element to the end of the list. [2, 3, 4], 6 arr = [2, 3, 4] 
arr.append(6)
print(arr)
Create a Python 3 program to calculate the Fibonacci sequence up to the given number. n = 20 def Fibonacci(n): 
    # 0 and 1 are the first two numbers in 
    # the Fibonacci sequence
    if n<=0: 
        return 0
    elif n==1: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2)

# Number of terms to calculate 
n = 20
print("Fibonacci sequence:") 
  
for i in range(n): 
    print(Fibonacci(i),end=" ")
Write a Python program to create a data visualization for a given dataset. The dataset contains information about the number of students enrolled in various courses. import matplotlib.pyplot as plt

def create_visualizations(data):
 x = [x[0] for x in data]
 y = [x[1] for x in data]
 plt.plot(x, y, 'bo')
 plt.xlabel('Courses')
 plt.ylabel('Students')
 plt.title('Number of Students Enrolled in Courses')
 plt.show()
Create a command line Python script to generate random numbers within a given range. Minimum Number: 10 and Maximum Number: 25 import random

min_num = 10
max_num = 25
 
# Generate a random number
rand_num = random.randint(min_num, max_num)
 
# Print the random number
print(rand_num)
Write a Python script that can convert degrees Fahrenheit to degrees Celsius.  def FahrenheitToCelsius(temp_fahrenheit):
    temp_celsius = (temp_fahrenheit - 32) * 5/9
    return temp_celsius
Develop a text summarizer in Python that takes a text input and returns a summary of the text in two sentences. Not applicable import nltk
import re

def summarize_text(text):
 """
 A basic text summarizer that takes a text input and returns a summary of the text in two sentences.
 """

 # Tokenize the text
 tokens = nltk.sent_tokenize(text)
 # Get the frequency of each word
 word_frequencies = {}
 for word in nltk.word_tokenize(text):
 if word not in word_frequencies.keys():
 word_frequencies[word] = 1
 else:
 word_frequencies[word] += 1

 # Get the maximum frequency
 maximum_frequency = max(word_frequencies.values())

 # Compute the weight of each word
 for word in word_frequencies.keys():
 word_frequencies[word] = (word_frequencies[word]/maximum_frequency)

 # Generate the summary
 sentence_scores = {}
 for sent in tokens:
 for word in nltk.word_tokenize(sent.lower()):
 if word in word_frequencies.keys():
 if len(sent.split(' ')) < 30:
 if sent not in sentence_scores.keys():
 sentence_scores[sent] = word_frequencies[word]
 else:
 sentence_scores[sent] += word_frequencies[word]

 # Get the two highest-scoring sentences
 summary_sentences = heapq.nlargest(2, sentence_scores, key=sentence_scores.get) 

 # Construct the summary
 summary = ' '.join(summary_sentences)
 return summary
Explain the difference between a ``list`` and a ``tuple`` in Python.  The difference between a list and a tuple in Python is that a list is mutable, meaning its contents can be changed, while a tuple is immutable, meaning its contents cannot be changed. A list has square brackets around it, while a tuple has parentheses around it. Lists are used when the data needs to be changed, while tuples are used when the data is fixed and cannot be changed.
Create a python program to convert temperatures from Farenheit to Celsius. 94 F def Farenheit_to_Celsius(temperature):
  celsius = (temperature - 32) * 5/9
  return celsius

temp_F = 94
temp_C = Farenheit_to_Celsius(temp_F)

print('{}°F is equal to {}°C'.format(temp_F, temp_C))
Write a python statement to extract the first element from a 3-item tuple. Tuple: (3, 4, 5) first_element = (3, 4, 5)[0]
Design a Python script to print the elements in a given BST in level order Tree elements to print: 4, 2, 6, 1, 7 class Node: 
    def __init__(self, data): 
        self.data = data 
        self.left = None
        self.right = None
  
def LevelOrderTraversal(root): 
  
    if root == None:
        return
  
    queue = []
    queue.append(root)   
    while(len(queue) > 0): 
        print (queue[0].data)
        node = queue.pop(0) 
  
        if node.left is not None: 
            queue.append(node.left) 
  
        if node.right is not None: 
            queue.append(node.right) 
            
root = Node(4) 
root.left = Node(2) 
root.right = Node(6) 
root.left.left = Node(1)
root.left.right = Node(7)

LevelOrderTraversal(root)
Create a Python program to scrape data from a website. The program should accept the website's URL as input. https://example.com import requests
from bs4 import BeautifulSoup

url = "https://example.com"
response = requests.get(url)
soup = BeautifulSoup(response.text, 'html.parser')

# Scrape data from the website
# ...
# ...
Use an existing Python function to find the longest string in the following array. arr = ["cat", "dog", "elephant", "squirrel", "moose" max(arr, key=len) # returns "elephant"
This code provides a Python class called "Provider" that generates user agent strings for various web browsers. To use this code, import the "Provider" class from this module and call its methods to generate user agent strings for specific browsers.  from __future__ import unicode_literals
from . import BaseProvider
from . import date_time
from datetime import datetime
import random


class Provider(BaseProvider):
    user_agents = ('firefox', 'chrome', 'internet_explorer', 'opera', 'safari')

    windows_platform_tokens = (
        'Windows NT 6.2', 'Windows NT 6.1', 'Windows NT 6.0', 'Windows NT 5.2', 'Windows NT 5.1',
        'Windows NT 5.01', 'Windows NT 5.0', 'Windows NT 4.0', 'Windows 98; Win 9x 4.90',
        'Windows 98', 'Windows 95', 'Windows CE'
    )

    linux_processors = ('i686', 'x86_64',)

    mac_processors = ('Intel', 'PPC', 'U; Intel', 'U; PPC')

    langs = ('en-US', 'sl-SI', 'it-IT')

    @classmethod
    def mac_processor(cls):
        return cls.random_element(cls.mac_processors)

    @classmethod
    def linux_processor(cls):
        return cls.random_element(cls.linux_processors)

    @classmethod
    def user_agent(cls):
        name = cls.random_element(cls.user_agents)
        return getattr(cls, name)()

    @classmethod
    def chrome(cls):
        saf = str(random.randint(531, 536)) + str(random.randint(0, 2))

        platforms = (
            "({0}) AppleWebKit/{1} (KHTML, like Gecko) Chrome/{2}.0.{3}.0 Safari/{4}".format(
                cls.linux_platform_token(), saf, random.randint(13, 15), random.randint(800, 899), saf),
            "({0}) AppleWebKit/{1} (KHTML, like Gecko) Chrome/{2}.0.{3}.0 Safari/{4}".format(
                cls.windows_platform_token(), saf, random.randint(13, 15), random.randint(800, 899), saf),
            "({0}) AppleWebKit/{1} (KHTML, like Gecko) Chrome/{2}.0.{3}.0 Safari/{4}".format(
                cls.mac_platform_token(), saf, random.randint(13, 15), random.randint(800, 899), saf),
        )

        return 'Mozilla/5.0 ' + cls.random_element(platforms)

    @classmethod
    def firefox(cls):
        ver = (
            'Gecko/{0} Firefox/{1}.0'.format(
            date_time.Provider.date_time_between(datetime(2011, 1, 1)), random.randint(4, 15)),
            'Gecko/{0} Firefox/3.6.{1}'.format(
                date_time.Provider.date_time_between(datetime(2010, 1, 1)), random.randint(1, 20)),
            'Gecko/{0} Firefox/3.8'.format(date_time.Provider.date_time_between(datetime(2010, 1, 1)), ),
        )

        platforms = (
            "({0}; {1}; rv:1.9.{2}.20) {3}".format(
                cls.windows_platform_token(), cls.random_element(cls.langs), random.randint(0, 2), random.choice(ver)),
            "({0}; rv:1.9.{1}.20) {2}".format(cls.linux_platform_token(), random.randint(5, 7), random.choice(ver)),
            "({0}; rv:1.9.{1}.20) {2}".format(cls.mac_platform_token(), random.randint(2, 6), random.choice(ver)),
        )

        return 'Mozilla/5.0 ' + cls.random_element(platforms)

    @classmethod
    def safari(cls):
        saf = "{0}.{1}.{2}".format(random.randint(531, 535), random.randint(1, 50), random.randint(1, 7))
        if random.randint(0, 1) == 0:
            ver = "{0}.{1}".format(random.randint(4, 5), random.randint(0, 1))
        else:
            ver = "{0}.0.{1}".format(random.randint(4, 5), random.randint(1, 5))

        platforms = (
            '(Windows; U; {0}) AppleWebKit/{1} (KHTML, like Gecko) Version/{2} Safari/{3}'.format(
                cls.windows_platform_token(), saf, ver, saf),
            '({0} rv:{1}.0; {2}) AppleWebKit/{3} (KHTML, like Gecko) Version/{4} Safari/{5}'.format(
                cls.mac_platform_token(), random.randint(2, 6), cls.random_element(cls.langs), saf, ver, saf),
            '(iPod; U; CPU iPhone OS {0}_{1} like Mac OS X; {2}) AppleWebKit/{3} (KHTML, like Gecko) Version/{4}.0.5 Mobile/8B{5} Safari/6{6}'.format(
                random.randint(3, 4), random.randint(0, 3), cls.random_element(cls.langs), saf, random.randint(3, 4),
                random.randint(111, 119), saf
            )
        )

        return 'Mozilla/5.0 ' + cls.random_element(platforms)

    @classmethod
    def opera(cls):

        platforms = (
            '({0}; {1}) Presto/2.9.{2} Version/{3}.00'.format(
                cls.linux_platform_token(), cls.random_element(cls.langs), random.randint(160, 190),
                random.randint(10, 12)),
            '({0}; {1}) Presto/2.9.{2} Version/{3}.00'.format(
                cls.windows_platform_token(), cls.random_element(cls.langs), random.randint(160, 190),
                random.randint(10, 12)),
        )

        return 'Opera/{0}.{1}.{2}'.format(random.randint(8, 9), random.randint(10, 99), cls.random_element(platforms))

    @classmethod
    def internet_explorer(cls):
        return 'Mozilla/5.0 (compatible; MSIE {0}.0; {1}; Trident/{2}.{3})'.format(
            random.randint(5, 9),
            cls.windows_platform_token(),
            random.randint(3, 5),
            random.randint(0, 1)
        )

    @classmethod
    def windows_platform_token(cls):
        return cls.random_element(cls.windows_platform_tokens)

    @classmethod
    def linux_platform_token(cls):
        return 'X11; Linux {0}'.format(cls.random_element(cls.linux_processors))

    @classmethod
    def mac_platform_token(cls):
        return 'Macintosh; {0} Mac OS X 10_{1}_{2}'.format(
            cls.random_element(cls.mac_processors), random.randint(5, 8), random.randint(0, 9))


Write a Python code snippet to calculate the sum of the first 100 prime numbers.  def is_prime(num):
    for i in range(2, num):
        if num % i == 0:
            return False
    return True

prime_sum = 0 
count = 0
num = 2

while count < 100:
    if is_prime(num):
        prime_sum += num
        count += 1
    num += 1

print(prime_sum)
Generate a Python program that determines whether a given array is a palindrome or not. [3,2,1,1,2,3] def is_palindrome(arr):
    if arr == arr[::-1]:
        return True
    return False

result = is_palindrome([3, 2, 1, 1, 2, 3])
print(result) # Output: True
Can you design a Python class to represent a human being?  class Human:
    def __init__(self, age, name):
        self.age = age
        self.name = name

    def greet(self):
        print("Hi, my name is " + self.name + " and I'm " + str(self.age) + " years old.")

john = Human(25, "John")
john.greet()
Create a Python script to build a machine learning model to predict MPG from an auto dataset.  # Import Libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score

# Read in the auto dataset
df = pd.read_csv('auto.csv')

# Get the features and labels
X = df.drop(columns='mpg')
y = df['mpg']

# Split into train and test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create the linear regressor
lr = LinearRegression()

# Train the model
lr.fit(X_train,y_train)

# Get the predictions
preds = lr.predict(X_test)

# Calculate the R2 score
r2 = r2_score(y_test, preds)
Create a Python function to delete the last character of a given string. "Hello World!" def delete_last_char(string):
    """Delete the last character of a given string.

    Args:
        string (str): The string to remove the last character from. 

    Returns:
        str: The string with the last character removed.
    """
    return string[:-1]

if __name__ == '__main__':
    string = "Hello World!"
    result = delete_last_char(string)
    print(result)
Generate an algorithm in Python that sorts the given array of numbers in the non-decreasing order. arr = [1, 9, 3, 8, 4] def bubble_sort(arr): 
    n = len(arr)
  
    for i in range(n-1): 
        for j in range(0, n-i-1): 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j] 
  
arr = [1, 9, 3, 8, 4]

bubble_sort(arr) 

print ("Sorted array is:") 
for i in range(len(arr)): 
    print ("%d" %arr[i])
Create a machine learning algorithm in Python to categorize a dataset of records. [
  {"label": "apple", "features": [1, 1, 0]}, 
  {"label": "banana", "features": [0, 1, 1]}, 
  {"label": "lemon", "features": [0, 0, 1]}, 
  {"label": "orange", "features": [1, 0, 0]}, 
  {"label": "pear", "features": [0, 1, 0]}, 
] import numpy as np
from sklearn.svm import SVC 

# Dataset 
training_data = [
 {"label": "apple", "features": [1, 1, 0]}, 
 {"label": "banana", "features": [0, 1, 1]}, 
 {"label": "lemon", "features": [0, 0, 1]}, 
 {"label": "orange", "features": [1, 0, 0]}, 
 {"label": "pear", "features": [0, 1, 0]}, 
]

# Feature extraction 
X = []
y = []
for data in training_data:
 X.append(data['features'])
 y.append(data['label'])

# Model 
clf = SVC()
clf.fit(X, y) 

# Prediction 
predict_data = [1, 0, 1]
predicted_label = clf.predict([predict_data])

print(predicted_label[0])
Create a web scraper in Python using bs4 to collect news headlines and article summaries from a news website. Not applicable import requests 
from bs4 import BeautifulSoup 

URL = "INSERT_NEWS_WEBSITE_URL_HERE"
r = requests.get(URL) 

soup = BeautifulSoup(r.content, 'html5lib') 

headlines = soup.findAll('h2', attrs = {'class': 'entry-title'})
for headline in headlines:
 print(headline.get_text())

summaries = soup.findAll('div', attrs = {'class': 'entry-summary'})
for summary in summaries:
 print(summary.get_text())
Create a program in Python to count the number of time a particular character appears in a given string. Input string: "Hello, World!"
Character: "l" def count_char_in_string(string, char):
    count = 0
    for i in range(len(string)):
        if string[i] == char:
            count += 1
    return count

string = "Hello, World!"
char = "l"
count = count_char_in_string(string, char)
print("The number of times", char, "appears in the string is:", count)
Write a python program to generate an original, random password of 8 characters which contains at least one lowercase letter, one uppercase letter, one digit and one special character.  import string
import random

def generate_password(length):
    characters = string.ascii_lowercase + string.ascii_uppercase + string.digits + string.punctuation
    password = ''.join(random.choice(characters) for _ in range(length)) 
  
    if not any(char.isdigit() for char in password) or not any(char.islower() for char in password) or not any(char.isupper() for char in password) or not any(char in string.punctuation for char in password):
        return generate_password(length)
    else:
        return password
Write a Python class that implements a binary search tree. The class should include methods to insert a node, delete a node, and traverse the tree. Not applicable class Node:
 def __init__(self, val):
 self.val = val
 self.left = None
 self.right = None
 
class BinarySearchTree:
 def __init__(self):
 self.root = None
 
 def insert(self, val):
 newNode = Node(val)
 if self.root == None:
 self.root = newNode
 else:
 curr = self.root
 while curr:
 if val < curr.val:
 if curr.left == None:
 curr.left = newNode
 break
 else:
 curr = curr.left
 else:
 if curr.right == None:
 curr.right = newNode
 break
 else:
 curr = curr.right
 
 def delete(self, val):
 curr = self.root
 parent = None
 isLeftChild = True
 
 while curr.val != val:
 parent = curr
 if val < curr.val:
 curr = curr.left
 isLeftChild = True
 else:
 curr = curr.right
 isLeftChild = False
 
 if curr == None:
 return
 
 # if node has no children
 if curr.left == None and curr.right == None:
 if isLeftChild:
 parent.left = None
 else:
 parent.right = None
 
 # if node has one child
 elif curr.left == None:
 if isLeftChild:
 parent.left = curr.right
 else:
 parent.right = curr.right
 
elif curr.right == None:
 if isLeftChild:
 parent.left = curr.left
 else:
 parent.right = curr.left
 
 # if node has two children
 else:
 succParent = curr
 succ = curr.right
 
 while succ.left != None:
 succParent = succ
 succ = succ.left
 
 # if successor is a direct right child
 if succParent == curr:
 succParent.right = succ.right
 else:
 succParent.left = succ.right
 
 curr.val = succ.val
 
 def traverse(self):
 if self.root is None:
 return
 curr = self.root
 self.traverseInOrder(curr)
 
 def traverseInOrder(self, curr):
 if curr.left != None:
 self.traverseInOrder(curr.left)
 print(curr.val)
 if curr.right != None:
 self.traverseInOrder(curr.right)
To classify a tweet into a positive, negative or neutral sentiment, develop a Python script that takes the text of a tweet as an input and returns the sentiment of the tweet.  import re
import nltk

def classify_sentiment(tweet_text):
    tokens = nltk.word_tokenize(tweet_text)
    sentiment_scores = 0

    # Calculate sentiment score
    for token in tokens:
        if token in POSITIVE_WORDS:
            sentiment_scores += 1
        elif token in NEGATIVE_WORDS:
            sentiment_scores -= 1

    # Classify sentiment
    if sentiment_scores > 0:
        return "positive"
    elif sentiment_scores == 0:
        return "neutral"
    else:
        return "negative"
Generate code to compare two objects in Python.  def compare_objects(obj1, obj2):
    # Compare type
    if type(obj1) != type(obj2):
        return False
    # Compare values
    if isinstance(obj1, (int, float)):
        if obj1 != obj2:
            return False
    elif isinstance(obj1, str):
        if obj1 != obj2:
            return False
    elif isinstance(obj1, tuple):
        if obj1 != obj2:
            return False
    elif isinstance(obj1, list):
        if len(obj1) == len(obj2):
            if all(x == y for x, y in zip(obj1, obj2)):
                return True
            else:
                return False
    elif isinstance(obj1, dict):
        if len(obj1) == len(obj2):
            if obj1 == obj2:
                return True 
            else:
                return False

    return True
Create a Python script that will create a dictionary that contains the character count of the given string. "Python" from collections import Counter 
  
str = "Python"

# character count 
# using collections.Counter() 
res = Counter(str) 

# printing result  
print("Count of all characters in GeeksforGeeks is :\n "
                                        +  str(res))
Generate a Python program to transform the following string 'Welcome to GPT world!' into an all upper-case string.  my_string = "Welcome to GPT world!"
print(my_string.upper())
Create a Python program to convert a list into a dictionary. my_list = [("apple", "fruit"), ("carrot", "vegetable")] # Function to convert list to dictionary
def list_to_dict(my_list):
    """Converts a list to a dictionary."""
    my_dict = {}
    for item in my_list:
        my_dict[item[0]] = item[1]
    return my_dict

if __name__ == '__main__':
	# Sample list
    my_list = [("apple", "fruit"), ("carrot", "vegetable")]
    # Convert list to dictionary
    my_dict = list_to_dict(my_list)
    # Print dictionary
    print(my_dict)
Create a Python Program to implement the Monte Carlo method for calculating the value of pi.  import random
 
def MonteCarlo(n):
    inside = 0
    for i in range(n):
        x = random.random()
        y = random.random()
        if x*x + y*y <= 1:
            inside += 1
 
    return 4*inside/n
 
if __name__ == '__main__':
    n = int(input("Input the number of points: "))
    print("Pi is approximately {}!".format(MonteCarlo(n)))
Can you create an algorithm in Python for reversing an integer? x = 2435 def reverseInteger(x): 
     
    reversed = 0
    while(x > 0): 
        reminder = x % 10
        reversed = (reversed * 10) + reminder 
        x = x // 10
    return reversed 

x = 2435
res = reverseInteger(x) 
print(res)
Generate a machine learning program in Python using scikit-learn to classify the Iris flower species based on sepal length, sepal width, petal length and petal width. Not applicable # import necessary libraries
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
 
# Load the data
iris = datasets.load_iris()
 
# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(iris.data, 
iris.target, random_state=0)
 
# Initialize the model
knn = KNeighborsClassifier(n_neighbors=1)
 
# Train the model
knn.fit(X_train, y_train)
 
# Generate predictions
y_pred = knn.predict(X_test)
 
# Compute accuracy
accuracy = knn.score(X_test, y_test)
 
# Print accuracy
print("Accuracy: {}".format(accuracy))
Write a Python program to sort a given list of dictionaries based on a given key. list = [{'name': 'Alice', 'age': 24}, {'name': 'Bob', 'age': 27}, {'name': 'David', 'age': 29}] def sort_dictionaries(list, key):
 return sorted(list, key=lambda i: i[key])
Create a GPU-accelerated algorithm in Python that performs matrix multiplication. Not applicable import torch

def matrix_multiplication(A, B):
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    A = torch.tensor(A).to(device)
    B = torch.tensor(B).to(device)
    return torch.matmul(A, B).cpu().numpy()
Using the comment as the guide, generate a Python program to replace an element at a given index. arr = [2, 3, 4, 5]
index = 2
# Replace the element at index with 0 arr = [2, 3, 4, 5]
index = 2
# Replace the element at index with 0
arr[index] = 0
print(arr)
Setup a Django server that can host a website.  # Install Django if it does not already exist
pip install django

# Start a new project
django-admin startproject myproject

# Create and apply migrations
cd myproject
python manage.py makemigrations
python manage.py migrate

# Start the server
python manage.py runserver 0:8000
Develop an algorithm in Python for sorting the following array in ascending order. [9, 8, 11, 5] def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]

array = [9, 8, 11, 5]
bubble_sort(array)
print(array)
Generate code to remove any duplicates from a list of integers in Python. [1, 1, 2, 3, 4, 4, 5] def remove_duplicates(lst): 
    final_list = [] 
    for num in lst: 
        if num not in final_list: 
            final_list.append(num) 
    return final_list 
    
lst = [1, 1, 2, 3, 4, 4, 5] 
print(remove_duplicates(lst))
Write a regular expression in Python to match valid IP addresses.  import re

ip_regex = re.compile(r'^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')
Write a Python program that generates a multiplication table of a given size. 5 def multiplication_table(n):
 for i in range(1, n+1):
   for j in range(1, n+1):
     print(str(i*j).rjust(4), end=" ")
   print()

multiplication_table(5)

# Output:
 1   2   3   4   5
 2   4   6   8  10
 3   6   9  12  15
 4   8  12  16  20
 5  10  15  20  25
Construct a Python program that takes a list of words and checks if the list is in alphabetical order. ['cat', 'dog', 'hippo', 'horse'] def check_if_list_is_in_alphabetical_order(words_list):
    for i in range(len(words_list)-1):
        if words_list[i] > words_list[i+1]:
            return False
    return True
 
words_list = ['cat', 'dog', 'hippo', 'horse']
result = check_if_list_is_in_alphabetical_order(words_list)
print (result)
Generate an array in Python of size 25 containing only prime numbers.  primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]
Translate the following sentence into Python code: "Print 'Welcome' 5 times".  for i in range(5):
  print("Welcome")
Write a script in Python to generate a histogram of a given data set. data = [3, 5, 4, 6, 7, 8, 9, 3, 8, 5] import matplotlib.pyplot as plt
plt.hist(data, 10)
plt.title("Frequency Histogram")
plt.xlabel("Values")
plt.ylabel("Frequency")
plt.show()
Create a command line tool for generating a random strong password. Not applicable #!/usr/bin/env python

import string
import random

length = int(input("Enter the desired password length: "))
characters = string.ascii_letters + string.digits + string.punctuation

password = ''.join(random.choice(characters) for i in range(length))

print(f"Generated password: {password}")
Create a python program to find the shortest distance between two words in a given string. Python is an easy language. def min_distance_words(s, w1, w2):
    list_str = s.split(" ")
    index1 = -1
    index2 = -1
    min_dist = float("inf")
    for i in range(len(list_str)):
        if list_str[i] == w1:
            index1 = i
            if index2 != -1:
               min_dist = min(min_dist, abs(index1 - index2))
        elif list_str[i] == w2:
            index2 = i 
            if index1 != -1:
               min_dist = min(min_dist, abs(index1 - index2))
    if min_dist == float("inf"):
        return -1
    else:
        return min_dist
Create a Python function that returns the index of the nth occurrence of a substring in a given string. ("Hello World", "l", 3) def find_nth_occurrence(string, substring, n):
index = -1

while n > 0:
    n -= 1
    index = string.find(substring, index+1)

if index == -1:
    return None
else:
    return index

if __name__ == "__main__":
    result = find_nth_occurrence("Hello World", "l", 3)
    print(result)
Create a code to find the longest common sub-string in two strings string1 = "OldSite:Geeksforgeeks.org"
string2 = "Newsite:Geeks.com" # Python program to find the longest common  
# sub-string in two strings  
   
def LongestCommonString(str1, str2): 
    m = len(str1) 
    n = len(str2) 
  
    #placeholder array
    L = [[None]*(n+1) for i in range(m+1)] 
  
    result = 0 # To store length of the longest common sub-string 
  
    # Following steps build LCSuff[m+1][n+1] in bottom up fashion 
    for i in range(m+1): 
        for j in range(n+1): 
            if i == 0 or j == 0: 
                L[i][j] = 0
            elif str1[i-1] == str2[j-1]: 
                L[i][j] = L[i-1][j-1] + 1
                result = max(result, L[i][j]) 
            else: 
                L[i][j] = 0
  
    # Following code is used to print LCSuff[m+1][n+1]  
    lcs_len = L[m][n] 
    index = lcs_len 
  
    # Create a character array to store the lcs string 
    lcs = [""] * (index+1) 
    lcs[index] = "" # Set the terminating character 
  
    # Start from the right-most-bottom-most corner  
    i = m 
    j = n 
    while i > 0 and j > 0: 
  
        # If current character in X[] and Y are same,  
        # then current character is part of LCS 
        if str1[i-1] == str2[j-1]: 
            lcs[index-1] = str1[i-1] 
            i-=1
            j-=1
            index-=1
            # If not same, then find the larger of two and 
        # go in the direction of larger value 
        elif L[i-1][j] > L[i][j-1]: 
            i-=1
        else: 
            j-=1
    lcs_str = "".join(lcs) 
    print(lcs_str)
  
# Driver program 
if __name__ == "__main__": 
    string1 = "OldSite:Geeksforgeeks.org"
    string2 = "Newsite:Geeks.com"
    LongestCommonString(string1, string2)
Improve the design of the following Python code. def count_vowels(string):
        vowel_count = 0
        for letter in string:
             if letter in "aeiou":
                      vowel_count += 1
        return vowel_count def count_vowels(string):
    vowel_count = 0
    vowels = 'aeiou'
    for letter in string:
        if letter in vowels:
            vowel_count += 1
    return vowel_count
Write a function in Python that uses an exponential function to calculate the number of steps needed for a particular sorting algorithm for a given array A=[1,2,3,4], sorting algorithm is Merge Sort def merge_complexity(arr, sort):
    n = len(arr)

    # base case
    if (n <= 1): 
        return 0

    # Merge sort complexity calculation
    if (sort == "Merge Sort"): 
        return (n * log(n, 2))

# Driver code 
A = [1, 2, 3, 4]
print(merge_complexity(A, 'Merge Sort'))
Create a function in Python to take two numerical values and return true if one is divisible by the other. number1 = 10
number2 = 3 def isDivisible(a, b):
  return a % b == 0

print(isDivisible(number1, number2)) #True
Create a python code snippet to create a function for predicting the most likely outcome of a classification task. Not applicable def predict(X_test):
    predictions = []
    for test_sample in X_test:
        predictions.append(most_likely_outcome(test_sample))
        
    return predictions

def most_likely_outcome(test_sample):
    probabilities = model.predict_proba(test_sample)
    max_prob = 0.0
    index = -1
    for i in range(len(probabilities)):
        if probabilities[i] > max_prob:
            max_prob = probabilities[i]
            index = i
    
    return index
Suggest an alternative solution to the problem of identifying duplicate items in Python.  One alternative solution to the problem of identifying duplicate items in Python is to use a set to store the items. A set data structure only allows unique elements and so any duplicate items will be automatically discarded when added to the set. Thus, iterating through a list of items and adding them to a set will result in a set without any duplicate elements.
Edit the following Python code and make it more efficient. def maxProfit(prices): 
    max_profit, min_price = 0, float('inf') 
    for price in prices: 
        min_price = min(min_price, price) 
        max_profit = max(max_profit, price - min_price) 
    return max_profit def maxProfit(prices): 
    if not prices: 
        return 0
    max_profit, min_price = 0, prices[0] 
    for price in prices[1:]: 
        min_price = min(min_price, price) 
        max_profit = max(max_profit, price - min_price) 
    return max_profit
Create a program to simulate a 3 body orbital system in Python.  import numpy as np

def simulateSystem(x1, v1, x2, v2, x3, v3, time):
    G = 6.67 * 10**-11
    m1, m2, m3 = 10, 5, 15 # mass of each body (in kilograms)
    dt = time / 500.0 # time step
    X = []
    Y = []

    for t in range(time):
        # Compute forces
        r12 = np.sqrt( (x2[0]-x1[0])**2 + (x2[1]-x1[1])**2 )
        r23 = np.sqrt( (x3[0]-x2[0])**2 + (x3[1]-x2[1])**2 )
        r13 = np.sqrt( (x3[0]-x1[0])**2 + (x3[1]-x1[1])**2 )

        F12x = G * m1 * m2 * (x2[0] - x1[0]) / r12**3
        F12y = G * m1 * m2 * (x2[1] - x1[1]) / r12**3

        F23x = G * m2 * m3 * (x3[0] - x2[0]) / r23**3
        F23y = G * m2 * m3 * (x3[1] - x2[1]) / r23**3

        F31x = G * m3 * m1 * (x3[0] - x1[0]) / r13**3
        F31y = G * m3 * m1 * (x3[1] - x1[1]) / r13**3

        # Update position
        x1[0] += v1[0] * dt
        x1[1] += v1[1] * dt

        x2[0] += v2[0] * dt
        x2[1] += v2[1] * dt

        x3[0] += v3[0] * dt
        x3[1] += v3[1] * dt

        # Update velocity
        v1[0] += (F12x + F31x) * dt / m1
        v1[1] += (F12y + F31y) * dt / m1

        v2[0] += (F12x + F23x) * dt / m2
        v2[1] += (F12y + F23y) * dt / m2

        v3[0] += (F23x + F31x) * dt / m3
        v3[1] += (F23y + F31y) * dt / m3

        # Store trajectory
        X.append(x1[0])
        Y.append(x1[1])

    return X, Y
Create a Python program that takes a list of tuples as input and generates a dictionary where each tuple is a key-value pair [('apple', 'fruit'), ('goat', 'animal'), ('three', 'number')] my_dict = {
 'apple': 'fruit',
 'goat': 'animal',
 'three': 'number'
}
Write a Python script to generate a valid Checksum number.  def calculate_checksum (data):
    checksum = 0
    for char in data:
        checksum += ord(char)
    return checksum % 256
Generate a spreadsheet to model a sine wave using Python.  import pandas as pd
import numpy as np

# Create spreadsheet
df = pd.DataFrame()

# Add column of x-values
x_values = np.arange(start=0,stop=2*np.pi,step=0.1)
df['x'] = x_values

# Add column of y-values
y_values = np.sin(x_values)
df['y'] = y_values

# Save spreadsheet
df.to_csv('sine-wave.csv', index=False)
Generate a Python program to optimize a low-cost route between two points startX = 0 and endX = 10 def optimize_route(startX, endX):
    best_route = [startX]
    next_x = startX

    while next_x < endX:
        best_cost = float("inf")
        for x in range(next_x+1, endX+1):
            cost = abs(x - next_x)
            if cost < best_cost:
                best_cost = cost
                next_x = x
        best_route.append(next_x)

    return best_route
Develop an algorithm in Python that prints all subset combinations of a given string. String: ABC def Powerset(arr): 
  
    # variable to store the power sets 
    powerset = [[]] 
      
    # generte the power sets 
    for ele in arr: 
          
        # give token which stores the length  
        # of the present power set 
        n = len(powerset) 
          
        # loop to give powerset of all element 
        for i in range(0, n): 
            newset = powerset[i].copy() 
            newset.append(ele) 
            powerset.append(newset) 
  
    return powerset 
  
# Driver Code 
arr = ['A', 'B', 'C'] 
print(Powerset(arr))
Using Python, write a program to find all the word pairs in a text that are anagrams of each other.  #import itertools 
  
# initialize empty list to hold all anagrams 
word_pairs = [] 
  
# enter the source text  
source_text = input("Enter the source text: ") 
  
# split the source text into individual words
words = source_text.split() 
  
for word1, word2 in itertools.combinations(words,2): 
    if (sorted(word1) == sorted(word2)): 
        word_pairs.append((word1, word2)) 
  
# print the list of anagram pairs in source text  
print(word_pairs)
Rewrite the given Python code to use list comprehension. numbers = [1, 2, 3, 4, 5]

new_numbers = []
for n in numbers:
    new_numbers.append(n * 2) numbers = [1, 2, 3, 4, 5]

new_numbers = [n * 2 for n in numbers]
Design a Python class for an Employee, containing person's name, age, salary, and designation.  class Employee: 
    def __init__(self, name, age, salary, designation): 
        self.name = name 
        self.age = age 
        self.salary = salary 
        self.designation = designation 
  
    def get_details(self): 
        return self.name + " " + str(self.age) + " " + str(self.salary) + " " + self.designation 
  
    def __str__(self): 
        return self.name + " " + str(self.age) + " " + str(self.salary) + " " + self.designation
Generate a Python program that reads a list of numbers until an empty line is entered, and then prints the sum of the number entered.  # empty list to store the numbers
num_list = []

# read the user input
while True:

    # read the input and add to the list
    user_input = input("Enter a number: ")
    if user_input == "":
        break
    else:
        num_list.append(int(user_input))
    
# calculate the total
total = 0
for num in num_list:
    total += num

# display the result
print("The total is: ", total)
Create a Python list comprehension to generate all squares of even numbers under 100.  [i**2 for i in range(2, 101, 2)]
Write a Python function that finds the maximum element in an array. [3, 4, 6, 5, 9, 1, 2] def find_max(nums):
    max_val = nums[0]
    for num in nums:
        if num > max_val:
            max_val = num
    return max_val

nums = [3, 4, 6, 5, 9, 1, 2]
max_val = find_max(nums)
print(max_val)
Generate a CPython code for reversing a given list of numbers. [1,2,3,4] def reverse_list(nums):
  return nums[::-1]
Edit the following Python program to make a direct call to the display_age method: class Employee:
 name = ""
 age = 0

def __init__(self):
 pass

def set_name(self, n):
 self.name = n

def set_age(self, a):
 self.age = a

def display_age(self):
 print(self.age) class Employee:
 name = ""
 age = 0

def __init__(self):
 pass

def set_name(self, n):
 self.name = n

def set_age(self, a):
 self.age = a

def display_age(self):
 print(self.age)

# Call display_age directly
Employee().display_age()
Write a Python program to print even numbers from 0 to the number provided N = 30 def print_even_numbers(N):
    for x in range(0, N+1):
        if x%2 == 0:
            print(x)
Create a web scraper in Python that extracts data from a specific web page (e.g. blog posts, recipes, etc). url = example.com import requests
from bs4 import BeautifulSoup

url = 'https://example.com/'
headers = {'User-Agent': 'Mozilla/5.0'}

response = requests.get(url, headers=headers)
soup = BeautifulSoup(response.text, 'lxml')

data = []
for item in soup.find_all('div', class_='blog-post'):
    post_data = {
        'title': item.h2.text,
        'body': item.p.text,
        'url': item.find('a')['href']
    }
    data.append(post_data)
Create a Python function which takes a list, and prints out the third item of the list. mylist = [1, 2, 3, 4, 5] def thirdElement(mylist):
    """ Print out the third element of the list. """
    print(mylist[2])

thirdElement(mylist)
Create a web scraping script in Python that collects the top 10 news headlines from BBC. Not applicable import requests
from bs4 import BeautifulSoup

# make request to the web page
r = requests.get("https://www.bbc.com/news")
# parse the html content
soup = BeautifulSoup(r.content, "html.parser")
# find all the headlines
headlines = soup.find_all("h3", class_="gs-c-promo-heading__title")

# print the top 10 headlines
print("Top 10 headlines from BBC:")
for i in range(10):
    headline = headlines[i].get_text().strip()
    print(str(i + 1)+". "+ headline)
Generate datasets in Python with a feature combination of 5 features drawn randomly from a normal distribution.  import numpy as np
def generate_data(n_samples=1000):
    # Generate 5 features randomly drawn from a normal distribution
    features = np.random.randn(n_samples, 5)

    # Generate labels
    labels = np.zeros(n_samples)

    return (features, labels)
Using Python, generate a random 6-digit number and check if it is a palindrome.  import random

def check_palindrome(num):
    """Function to check if a number is a palindrome. 
    """
    num_str = str(num)
    rev_str = num_str[::-1]
    if num_str == rev_str:
        return True
    else:
        return False

# Generate a random 6-digit number
num = random.randint(100000, 999999)

# Check if it is a palindrome
if check_palindrome(num):
    print(f"The number {num} is a palindrome")
else:
    print(f"The number {num} is not a palindrome")
Generate a graphical representation of a network using Python and matplotlib. Number of nodes = 10 import matplotlib.pyplot as plt

node_list = []
for i in range(10):
    node_list.append(i)

G = nx.Graph()
G.add_nodes_from(node_list)

nx.draw(G, with_labels=True)
plt.show()
Create a search engine for an online store in Python. The engine should take a query string as an input and return a list of products with relevant information. <Query string: "Shoes"> def search(query):
 results = []
 for product in products:
 if query in product.name:
 results.append({
 'name': product.name,
 'price': product.price,
 'description': product.description,
 'image': product.image
 })
 return results
 
products = [
 {'name': 'white shoes', 'price': 19.99, 'description': 'Nice shoes for the summer', 'image': 'image.jpg'}, 
 {'name': 'black shoes', 'price': 32.00, 'description': 'Stylish shoes for a night out', 'image': 'image2.jpg'}
]

query = "shoes"
results = search(query)
print(results)
Write a python program to receive user input and calculate the sum of every number entered.  numbers = []
while True:
    userInput = input("Enter a number: ") 
    if userInput == 'done':
        break
    try:
        userInput = int(userInput)
        numbers.append(userInput)
    except ValueError:
        print("Invalid input, please enter a valid number")

print("Sum of entered numbers : " + str(sum(numbers)))
Create a Python class named Student that stores a name and ID number.  class Student:
    def __init__(self, name, id_number):
        self.name = name
        self.id_number = id_number
Create a Python program to display a multiplication table of size n x n. 3 n = 3

for i in range(1, n+1):
    for j in range(1, n+1):
        print(f'{i} x {j} = {i*j}', end='\t')
    print()
Optimize the following Python Octave code by introducing vectorization. for  i = 0:datasize-1
    freq = (float(freq[i]) + float(new_freq[i])) #Vectorization
freq = (np.array(freq) + np.array(new_freq)).tolist()
Generate a Python code snippet to print the first N numbers of the Fibonacci sequence.  def print_fibonacci(n):
    first_number = 0
    second_number = 1
    for num_ in range(0, n):
        if num_ <= 1:
            next_number = num_
        else:
            next_number = first_number + second_number
            first_number = second_number
            second_number = next_number
        print(next_number)
Write a code to perform basic arithmetic operations between two text inputs in Python. First input: 3
Second input: 6 # Get the inputs
a = input("Enter the first number: ")
b = input("Enter the second number: ")

# Convert to integers
a = int(a)
b = int(b)

# Perform the arithmetic operations 
add = a + b
sub = a - b
mul = a * b
div = a / b

# Print the results
print("The addition of two numbers is", add)
print("The subtraction of two numbers is", sub)
print("The multiplication of two numbers is", mul)
print("The division of two numbers is", div)
Create a Python program that takes a string input and for each line prints the length of the line, the longest/shortest word in the line, and the average word length. The quick brown fox jumps over the lazy dog. # take input as a string
text = 'The quick brown fox jumps over the lazy dog.'

# loop through lines
for line in text.splitlines():

 # get line stats
 line_length = len(line)
 words = line.split()
 longest_word_length = len(max(words))
 shortest_word_length = len(min(words))
 average_word_length = line_length / len(words)

 # print line stats
 print("Line length:", line_length)
 print("Longest word length:", longest_word_length)
 print("Shortest word length:", shortest_word_length)
 print("Average word length:", average_word_length)
 print()
Implement a function in Python to find the prime numbers between 1 and a given max value  def find_primes_less_than(max_value):
    primes=[]
    for num in range(2, max_value + 1):
        is_prime = True
        for i in range(2, num):
            if (num % i == 0):
               is_prime = False
        if is_prime:
            primes.append(num) 
    return primes
Write a Python program to find all palindromic words in a given list. words = ["word", "racecar", "level", "pop", "mom", "nursesrun"] def palindrome_words(words): 
    """This function takes in a list of words and returns a list of palindromic words"""

    palindrome_words = []

    for word in words:
        if word == word[::-1]:
            palindrome_words.append(word)

    return palindrome_words
Create a Python program that converts an integer to a Roman numeral. 8 def int_to_roman(num):
    num_map = {  
        1: 'I',
        5: 'V',
        10: 'X',
        50: 'L',
        100: 'C',
        500: 'D',
        1000: 'M'
    }
    roman = ''
    if num in num_map:
        roman = num_map[num]
    else:
        if num < 4:
            roman = 'I'*num
        elif num < 9:
            roman = 'I' + 'V'*(num-5)
        elif num < 40:
            roman = 'X' + 'I'*(num-10)
        elif num < 50:
            roman = 'XL' + 'I'*(num-40)
        elif num < 90:
            roman = 'L' + 'X'*(num-50)
        elif num < 100:
            roman = 'XC' + 'X'*(num-90)
        elif num < 400:
            roman = 'C' + 'X'*(num-100)
        elif num < 500:
            roman = 'CD' + 'C'*(num-400)
        elif num < 900:
            roman = 'D' + 'C'*(num-500)
        elif num < 1000:
            roman = 'CM' + 'C'*(num-900)
        elif num > 1000:
            roman = 'M' + 'M'*(num-1000)
    return roman

print(int_to_roman(8))
Create a basic chatbot in Python that can respond to simple statements and questions about the weather. Not applicable import random

# Create a dictionary of responses
responses = {
 'hi': "Hello! How can I help you?",
 'is it raining': 'Yes, it is raining.',
 'will it rain': 'It might rain, but I cannot predict the weather.'
}

# Create a function to generate a response
def respond(message):
 if message in responses:
 return responses[message]
 else:
 return 'I\'m sorry, I don\'t understand.'

# Generate a response for a random message
message = random.choice(list(responses.keys()))
response = respond(message)
print(response)
# Output: Yes, it is raining.
Create a Python program that recommends products based on the input preferences. Example input:
Preferences: User likes items of type 'clothing'. # Define a function to get recommendations for a given user 
def get_recommendations(user): 
    # Get the user preferences 
    user_preferences = user.get_preferences() 
  
    # Initialize an empty list for recommendations 
    recommendations = [] 
    
    # Get all products of type 'clothing' 
    clothing_products = get_all_products('clothing') 
  
    # Iterate over the clothing products 
    for product in clothing_products: 
        # Calculate the similarity score 
        score = calculate_similarity_score(product, user_preferences) 
  
        # If the score is greater than 0, add the product to the list of recommendations 
        if score > 0: 
            recommendations.append(product) 
  
    # Return the list of recommendations 
    return recommendations
Generate a correct python program to perform linear regression.  import numpy as np

def linear_regression(X, y):
    X_b = np.array([np.ones(X.shape[0]), X]).T
    theta = np.linalg.inv(X_b.T @ X_b) @ X_b.T @ y
    return theta
Complete the following python code to make it comply with the given logic def largest_element(list1): 
    max = list1[0] 
    for item in list1: 
        if max def largest_element(list1): 
    max = list1[0] 
    for item in list1: 
        if item > max: 
            max = item
    return max
Generate a set of Python classes for a game application. The classes should include a main Character class with fields for name, health, and inventory, and a Monster class with fields for name, health, and type (e.g. dragon, ogre, goblin). Not applicable class Character:
 def __init__(self, name, health=100):
 self.name = name
 self.health = health
 self.inventory = []

 def add_item(self, item):
 self.inventory.append(item)

 def remove_item(self, item):
 self.inventory.remove(item)

class Monster:
 def __init__(self, name, health=100, type="Monster"):
 self.name = name
 self.health = health
 self.type = type

 def attack(self, character):
 pass
Design a Python algorithm to compute the total number of inversions in an array of integers. [2, 4, 1, 3, 5] def count_inversions(arr): 
  inversion_count = 0  
  for i in range(len(arr)): 
    for j in range(i + 1, len(arr)): 
        if arr[i] > arr[j]: 
            inversion_count += 1
  
  return inversion_count
Generate a Python program to create a dictionary from two given lists. list1 = ["apple", "banana", "orange"]
list2 = ["fruit", "fruit", "fruit"] list1 = ["apple", "banana", "orange"]
list2 = ["fruit", "fruit", "fruit"] 

dictionary = dict(zip(list1, list2))

print(dictionary)
Write a Python program to remove all duplicate elements in a given list. given_list = [1, 2, 3, 4, 3, 2, 1] def remove_duplicates(given_list):
    output = []
    for num in given_list:
        if num not in output:
            output.append(num)
    return output
Write a python program to find the most common words in a given text. Input should be given as a string and output should be a list of words in descending order of frequency. text = 'This is a text to find the most common words in the given text. The output should be a list of words in descending order of frequency' from collections import Counter

def find_most_common_words(text):
 words = text.split()
 counter = Counter(words)
 return counter.most_common()

print(find_most_common_words(text))

# Output: [('a', 2), ('the', 2), ('in', 2), ('of', 2), ('most', 1), ('This', 1), ('is', 1), ('text', 1), ('find', 1), ('common', 1), ('words', 1), ('given', 1), ('output', 1), ('should', 1), ('be', 1), ('list', 1), ('descending', 1), ('order', 1), ('frequency', 1)]
Develop a loop that prints a python array from the end to the beginning. arr = [1, 2, 3, 4, 5] def printArrayReverse(arr): 
    for i in range(len(arr) - 1, -1, -1): 
        print(arr[i], end = " ")

printArrayReverse(arr)
Write a python program to find the smallest element in an array. arr = [4, 6, 2, 7, 5] def find_smallest(arr):
    smallest = arr[0]
    for i in range(1, len(arr)):
        if arr[i] < smallest:
            smallest = arr[i]
    return smallest
edit the following Python code to make the loop stop when the counter is equal to five counter = 0
while counter < 10:
    print(counter)
    counter = counter + 1 counter = 0
while counter < 10:
    print(counter)
    if counter == 5:
        break
    counter = counter + 1
Develop a web scraper in Python to extract the list of companies from the "Industries" tab on the S&P 500 website.  import requests
from bs4 import BeautifulSoup

# URL of the S&P 500 Website
url = 'https://en.wikipedia.org/wiki/List_of_S%26P_500_companies'

# Send GET request 
resp = requests.get(url)

# Parse response as HTML
soup = BeautifulSoup(resp.text, 'html.parser')

# Find the table containing data
table = soup.find('table', {'class': 'wikitable sortable'})

# Extract the companies from the table
companies = []
for row in table.findAll("tr"):
    # Skip the headers
    if not row.findAll("th"): 
        tds = row.findAll("td")
        companies.append([td.text.strip() for td in tds[1:2]])

print("List of S&P 500 Companies:")
for company in companies:
    print(company[0])
Design a Python program that predicts a movie's popularity given its genre, rating, and release date. The input includes three parameters: genre (action), rating (8.5), and release date (2020-02-10). import pandas as pd

# read the data file
df = pd.read_csv('movie_data.csv')

# feature engineering
df['action'] = (df['genres'].str.contains('Action')) * 1

# define which features to be used
features_df = df[['action','rating']]

# define the target variable
target = df.popularity

# split data into train and test sets
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(features_df, target, test_size=0.2, random_state=42)

# train a RandomForestRegressor model
from sklearn.ensemble import RandomForestRegressor
rf = RandomForestRegressor()
rf.fit(X_train, y_train)

# make prediction
input_data = {
 'action': 1,
 'rating': 8.5,
 'release_date': '2020-02-10'
}
prediction = rf.predict([input_data])

print(prediction) // Outputs the predicted movie popularity
Design a code optimization program for Python programs. def brute_force_traverse(data):
    for i in range(len(data)):
        for j in range(len(data)):
            if data[i] + data[j] == 0:
                return (i, j)

data = [3, -1, 5, 7] def optimized_traverse(data):
    # create a mapping of number to its index
    data_mappings = {num:idx for idx, num in enumerate(data)}
    # traverse the data in a single pass
    for idx, num in enumerate(data):
        if -num in data_mappings.keys():
            return (idx,data_mappings[-num])

data = [3, -1, 5, 7]
Create a class in Python that defines an item in an inventory system.  class Item:
    def __init__(self, name, description, price):
        self.name = name
        self.description = description
        self.price = price

    def print_info(self):
        print("Name:", self.name)
        print("Description:", self.description)
        print("Price:", self.price)
Create a sorting algorithm in Python that sorts a random list of integers in ascending order. [45, 33, 38, 10, 49] def sort(lst): 
    for i in range(len(lst)): 
        min_index = i 
        for j in range(i+1, len(lst)): 
            if lst[min_index] > lst[j]: 
                min_index = j 
  
        lst[i], lst[min_index] = lst[min_index], lst[i] 
  
list = [45, 33, 38, 10, 49] 

sort(list) 

print(list)
Create a Python program to print the multiplication table from 1 to 10  def table(n): 
    for i in range(1, 11): # for 1 to 10
        print(n,'x',i,'=',n*i) 
  
# Driver Code 
n = 5
table(n)
Write a Python program to loop through a list and print each element of the list. [1, 2, 3, 4] for x in [1, 2, 3, 4]:
    print(x)
Create a function in Python to sort the elements of a list in ascending order. [9, 3, 5, 4, 7, 6] def sort_asc(lst):
    lst.sort()
    return lst
Create a machine learning model in Python that predicts the product popularity based on the customer reviews. Data set containing customer reviews and sales volumes # import libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression

# read data 
data =  pd.read_csv('data.csv')

# split data into features and labels
X = data['customer_reviews']
y = data['Popularity']

# train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=42)

# Create Tf-idf vectorizer 
tf = TfidfVectorizer(stop_words='english')

# Fit the vectorizer to the data
tf.fit(X_train)

# Transform train and test data
X_train_tf = tf.transform(X_train)
X_test_tf = tf.transform(X_test)

# Train and fit the model
log_model = LogisticRegression()
log_model.fit(X_train_tf,y_train)

# Predict the labels
y_preds = log_model.predict(X_test_tf)

# Evaluate the model 
accuracy = accuracy_score(y_test, y_preds)

print('The model accuracy is:', accuracy)
Develop an Python program to classify some spoken words. Word list: ['happy', 'sad', 'angry'] import speech_recognition as sr

r = sr.Recognizer()

words = ['happy', 'sad', 'angry']

with sr.Microphone() as source:
    print("Say a word.")
    audio = r.listen(source)

try:
    word = r.recognize_google(audio).lower()
    if word in words:
        print("The emotion of the word is:", word)
    else:
        print("The word is unknown.")
except:
    print("Sorry could not recognize")
Implement a web scraping script in Python to extract information from webpages. Not applicable import requests
from bs4 import BeautifulSoup
 
url = 'http://example.com'
page = requests.get(url)
soup = BeautifulSoup(page.text, 'html.parser')
 
# Extract the data from the html
data = soup.find_all('div')
 
# Do something with the extracted data
for d in data:
  print(d)
Create a React component for displaying a list of strings. [ "javascript","java","python"] const List = ({ items }) => { 
  return ( 
    <ul> 
      {items.map(item => ( 
        <li> 
          {item} 
        </li> 
      ))} 
    </ul> 
  ) 
};

ReactDOM.render( 
  <List items={[ "javascript","java","python"]} />, 
  document.getElementById('root') 
);
Create an object-oriented Python program to model a Vehicle.  class Vehicle:
   def __init__(self, capacity, speed):
      self.capacity = capacity
      self.speed = speed
 
   def increase_speed(self):
      self.speed += 10
 
   def decrease_speed(self):
      if self.speed > 0:
         self.speed -= 10
Create a Python script that replaces all words containing 3 or more consecutive vowels with "*". "entertainment" import re

def replaceConsecutiveVowels(word): 
    regex = re.compile(r'[aeiou]{3,}', re.IGNORECASE) 
    return regex.sub("*", word)

word = "entertainment"

print(replaceConsecutiveVowels(word)) # Output: *
Write an algorithm in Python to calendarify the dates in the following array dates = [423, 198, 720, 930, 505] def calendarify(dates):
    calendar = []
    for date in dates:
        day = date % 100
        month = date // 100
        calendar.append((day, month))
    return calendar
  
calendarify(dates)
Create a Python function that takes a list of strings as an argument and returns a new sorted list with no duplicates. ['cat', 'dog', 'cat', 'mouse', 'lion', 'dog'] def remove_duplicates(strings):
  new_list = []
  for s in strings:
    if s not in new_list:
      new_list.append(s)
  new_list.sort()
  return new_list

strings = ["cat", "dog", "cat", "mouse", "lion", "dog"]
unique_list = remove_duplicates(strings)

print(unique_list)
Construct a Python program that reads a user input and returns twice the value. Number = 3 def double(number):
    return number * 2

# Output 
6
Write a Python program that takes two lists and performs a comparison between them. list1 = [1, 2, 3]
list2 = [2, 3, 4] def compare_lists(lst1, lst2): 
    lst1 = set(lst1) 
    lst2 = set(lst2) 
    same = lst1.intersection(lst2)
    diff1 = lst1.difference(lst2)
    diff2 = lst2.difference(lst1)
    return same, diff1, diff2

result = compare_lists([1,2,3], [2,3,4]) 
print(result)
Create a web page with a form that takes in two inputs and displays the result of the addition of the two numbers.  <html>
<head>
    <title>Python Form Demo</title>
</head>
<body>
    <form method="post" action="/add">
        <input type="text" name="num1">
        <input type="text" name="num2">
        <input type="submit" value="Calculate">
    </form>
</body>
</html>

@app.route('/add', methods=['POST'])
def add():
    num1 = int(request.form['num1'])
    num2 = int(request.form['num2'])
    result = num1 + num2
    return "The result of {} + {} is {}".format(num1, num2, result)
Generate a program to generate a deck of cards using Object-oriented programming in Python.  class Deck:
    # list of cards in the deck
    cards = []
  
    # constructor
    def __init__(self):
        suits = ["Hearts", "Diamonds","Spades","Clubs" ]
        ranks = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Jack', 'Queen', 'King', 'Ace']
        self.cards = [ Card(suit,rank) for suit in suits for rank in ranks]

        # shuffle the cards
        random.shuffle(self.cards)
  
    def deal_one_card(self):
        # return the next card from the shuffled deck
        return self.cards.pop()
  
class Card:
    suit = ""
    rank = ""

    # constructor
    def __init__(self, suit, rank):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return "{} of {}".format(self.rank, self.suit)

deck = Deck()
card = deck.deal_one_card()
print(card) 
# --> 8 of Hearts
Create a Cloud Function using Python for managing a list of strings. Not applicable from google.cloud import storage

def manage_list_strings(data, context):
    strings_list = data['strings_list']
    action = data['action']
    
    if action == 'add':
        strings_list.append(data['string'])
    elif action == 'delete':
        strings_list.remove(data['string'])
    elif action == 'update':
        strings_list = strings_list.map(lambda x: data['string'] if x == data['old_string'] else x)
    
    bucket = storage.Client().get_bucket('my-bucket')
    blob = bucket.blob('my-strings-list.json')
    blob.upload_from_string(str(strings_list))
    
    return strings_list
Create a Python algorithm that takes in an array of integers and prints out a sum of its elements. [3, 4, 5, 6] def sum_array(arr):
    s = 0
    for i in arr:
        s += i
    return s
Generate a Python program to convert a given binary string to its equivalent decimal value. 1110 def binary_to_decimal(n):
    num = n
    dec_value = 0
    base = 1
    temp = num
    
    while temp > 0:
        last_digit = temp % 10
        temp = temp // 10
        dec_value += last_digit * base
        base = base * 2
    return dec_value
Write a Python program to use the MusicBrainz API to find the biographic information of a given musician.  import requests

def get_biography(artist):
    base_url = "https://musicbrainz.org/ws/2/artist/"
    artist_name = artist.replace(" ", "%20")  # Format URL parameter
    mbz_url = base_url + artist_name
    params = "?fmt=json&inc=url-rels+release-groups"  # Include biographical info
    url = mbz_url + params
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        print("Error in response.")
        return None
Use Object-Oriented Programming (OOP) in Python to create a class for a bookstore object.  class Bookstore():
    
    def __init__(self, name, books):
        self.name = name
        self.books = books

    def add_book(self, book):
        self.books.append(book)

    def get_book_by_title(self, title):
        for book in self.books:
            if book.title == title:
                return book
        return None
Write a code to delete a certain element from a linked list.  # Python program to delete a node from Linked List  
  
# Node class  
class Node:  
  
    # Function to initialize the node object  
    def __init__(self, data):  
        self.data = data  # Assign data  
        self.next = None  # Initialize next as null  
  
  
# Linked List class contains a Node object  
class LinkedList:  
  
    # Function to initialize head  
    def __init__(self):  
        self.head = None
  
    # Function to delete a node  
    def deleteNode(self, node): 
  
        # Store head node  
        temp = self.head  
  
        # If head node itself holds the key to be deleted  
        if (temp is not None):  
            if (temp == node):  
                self.head = temp.next
                temp = None
                return
  
        # Search for the key to be deleted, keep track of the  
        # previous node as we need to change 'prev.next'  
        while(temp is not None):  
            if temp == node:  
                break
            prev = temp  
            temp = temp.next 
  
        # if key is not present in linked list  
        if(temp == None):  
            return
  
        # Unlink the node from linked list  
        prev.next = temp.next
  
        temp = None
Generate a Python script to run a batch job every weekend that sends an email notification if the balance of a given account is lower than a specified amount. Account Number: 123456
Notification Threshold : $1000 import smtplib 
import csv 

ACCOUNT_NUMBER = 123456
NOTIFICATION_THRESHOLD = 1000
RECIPIENT_EMAIL = "myemail@example.com" 
SENDER_EMAIL = "noreply@example.com"
SMTP_SERVER_HOST = "smtp.example.com"
SMTP_SERVER_PORT = 587

def check_account_balance(account_number, notification_threshold):
    # Load the CSV file with account information
    with open("data.csv") as csv_file:
        reader = csv.reader(csv_file)
        for row in reader:
            if row[0] == str(account_number):
                if float(row[3]) < notification_threshold:
                    return True 
    return False 

def send_notification(recipient_email):
    # Create the message
    message = f"Subject: Balance Check Alert\n\nYour account balance is below {NOTIFICATION_THRESHOLD} dollars!"

    # Connect to the SMTP server
    with smtplib.SMTP(SMTP_SERVER_HOST, SMTP_SERVER_PORT) as server:
        # Send the message
        server.sendmail(SENDER_EMAIL, recipient_email, message)
        print("Notification sent.")

if __name__ == "__main__":
    # Check the account balance
    if check_account_balance(ACCOUNT_NUMBER, NOTIFICATION_THRESHOLD):
        # Send the notification
        send_notification(RECIPIENT_EMAIL)
    else:
        print("Account balance is not below the notification threshold.")
Write a Python program that uses a recurrent neural network to determine positive or negative sentiment from text data. Not applicable import tensorflow as tf
from tensorflow.keras.layers import Input, Embedding, LSTM, Dense
from tensorflow.keras.models import Sequential

def create_model():
 model = Sequential()
 model.add(Embedding(input_dim=vocab_size, output_dim=50, input_length=1000))
 model.add(LSTM(50, return_sequences=True))
 model.add(LSTM(50))
 model.add(Dense(1, activation='sigmoid'))
 model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
 return model

model = create_model()
model.fit(X_train, y_train,
 epochs=10,
 batch_size=32,
 validation_data=(X_test, y_test))
Complete the Python function below to return all the permutations of a given string, sorted lexicographically. def permutations(s):
    # TODO: return all permutations sorted lexicographically def permutations(s):
    # base case
    if len(s) == 1:
        return [s]
    
    # recursive case
    permutations = []
    for i, letter in enumerate(s):
        # Get all the permutations of the substring without the current letter.
        sub_permutations = permutations(s[:i] + s[i+1:])
        for sub_permutation in sub_permutations:
            permutations.append(letter + sub_permutation)
    
    # Sort the permutations.
    permutations.sort()
    
    return permutations
Create a function in Python to optimize the given objective function. Objective Function: 3x2 + 8x + 7 def optimize_function(x):
    return 3*x**2 + 8*x + 7

def objective_function(x):
    return optimize_function(x)

def optimize():
    optimal_x = 0
    min_val = objective_function(optimal_x)

    for x in range(1, 1000):
        current_val = objective_function(x)
        if current_val < min_val:
            min_val = current_val
            optimal_x = x

    return optimal_x
Create a Python function that takes two strings as arguments and returns their concatenation with a single dash in between. first_str = "Hello"
second_str = "World" def concatenate_strings(first_str, second_str):
    return first_str + '-' + second_str

first_str = "Hello"
second_str = "World"
result = concatenate_strings(first_str, second_str)
print(result)
Generate a list of prime numbers from 1 to 100 in Python.  # Initialize a list
primes = []

for x in range(2, 101):
    prime = True
    for y in range(2, x):
        if x % y == 0:
            prime = False
            break
    if prime:
        primes.append(x)
        
print(primes) # Output: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]
Create a web scraper in Python to extract the titles of all articles from Medium. Not applicable import requests
from bs4 import BeautifulSoup

# Make a request
url = 'https://medium.com/'
response = requests.get(url) 
html = response.text 

# Parse HTML 
soup = BeautifulSoup(html, 'html5lib') 

# Extract all the titles of the articles 
titles = soup.find_all('h3', class_='graf--title') 

# Print the titles 
for title in titles:
 print(title.text)
Develop a web resource monitor in Python that records the amount of data transferred from a given web resource.  import requests

def monitor_web_resource(url):
    response = requests.get(url)

    total_data = 0

    while response.status_code == 200:
        total_data += len(response.content)
        response = requests.get(url)

    return total_data

total_data = monitor_web_resource("http://example.com")
Create a Python Flask application that displays a list of movies from an API. The application should make a request to a movie database API such as The Movie Database and display the list of movies in a table. Not applicable from flask import Flask, render_template
import requests


app = Flask(__name__)

@app.route('/')
def index():
 response = requests.get('https://api.themoviedb.org/3/movie/popular?api_key=YOUR_API_KEY')
 movies = response.json()
 return render_template('index.html', movies=movies)

if __name__ == '__main__':
 app.run(debug=True)

# index.html
<table>
 <thead>
 <th>Name</th>
 <th>Poster</th>
 </thead>
 <tbody>
 {% for movie in movies['results'] %}
 <tr>
 <td>{{ movie['title'] }}</td>
 <td><img src="{{ movie['poster_path'] }}" width="200" /></td>
 </tr>
 {% endfor %}
 </tbody>
</table>
Generate a class in Python, implementing the __init__ and __str__ methods to initialize a variable and print its value. name = "John Doe" class Person:
    def __init__(self, name):
        self.name = name

    def __str__(self):
        return self.name

p = Person('John Doe')
print(p)
Create a Python function which takes an integer and returns True or False depending on whether it is a prime number or not respectively. Not applicable def is_prime(n):
 if n <= 1:
 return False

 for i in range(2, n):

 if n % i == 0:
 return False

 return True
Create a class in Python to represent a rectangle with length and width as instance variables.  class Rectangle:
   def __init__(self, length, width):
      self.length = length
      self.width  = width
Come up with a code in Python to find the union of two lists. List 1: [1, 2, 3, 4, 5]
List 2: [3, 4, 5, 6, 7] list1 = [1, 2, 3, 4, 5]
list2 = [3, 4, 5, 6, 7]

def unionList(list1, list2):
    return set(list1 + list2)

result = unionList(list1, list2)
print(result)
Generate a 3x3 matrix with random integers in Python.  import random
 
def generate_matrix(length):
    matrix = []
    for _ in range(length):
        row = []
        for _ in range(length):
            row.append(random.randint(0,100))
        matrix.append(row)
    return matrix
 
print(generate_matrix(3))
Create a Python class which can be instantiated into an object. The object should take two parameters in its construction and store them as separate instance variables.  class SampleObject:
    def __init__(self, param1, param2):
        self.param1 = param1
        self.param2 = param2

obj = SampleObject(1, 2)
Write an algorithm in Python to find the longest continuous increasing subarray. [6 , 5, 4, 8, 10, 5] def find_longest_subarray(arr):
    maxLength = 1
    curLength = 1
    n = len(arr)
    for i in range(1, n): 
        if (arr[i] > arr[i - 1]): 
            curLength += 1 
            maxLength = max(maxLength, curLength) 
        else: 
            curLength = 1 
    return maxLength

longest_subarray = find_longest_subarray([6, 5, 4, 8, 10, 5])
print(longest_subarray) # Output: 3
Generate all possible permutations of a given string in Python.  import itertools

def permutations(string): 
    return list(itertools.permutations(string))
Identify the data type of each variable in the given Python snippet. x = 5
name = "John"
y = [1, 2, 3] x is an integer, name is a string, and y is a list.
Use the Python code to translate reStructuredText to HTML using the docutils package. The resulting HTML will be printed to the console.  #!/usr/bin/python
# -*- coding: utf-8 -*-
#
# --- BEGIN_HEADER ---
#
# html_writer - [insert a few words of module description on this line]
# Copyright (C) 2003-2009  The MiG Project lead by Brian Vinter
#
# This file is part of MiG.
#
# MiG is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# MiG is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# -- END_HEADER ---
#

from docutils.writers.html4css1 import Writer, HTMLTranslator
from docutils.core import publish_string

# Setup a translator writer

html_writer = Writer()
html_writer.translator_class = HTMLTranslator

# Setup a restructured text example

reST = \
    """
Example of reST:
================

This is a small example of the way reST can be used as a base for generating HTMLformatted text that:

- looks nice
- is standards compliant
- is flexible

We *may* decide to start using this as text formatting tool in MiG__ later on.

__ http://mig-1.imada.sdu.dk/


We can also use it for creating tables if we want to:

=====  =====  ======
Input         Output
-----  -----  ------
A      B      A or B
=====  =====  ======
False  False  False
True   False  True
False  True   True
True   True   True
=====  =====  ======

Have fun!

----

Cheers, Jonas
"""

# Translate reST to html

html = publish_string(reST, settings_overrides={'output_encoding'
                      : 'unicode'}, writer=html_writer)

print html


Construct a Python program to classify the data given. Classify the following data points into two categories: red and green
[1, 2, 3, 4, 5, 6, 7] def classify_data(data_points):
    classified_data = []
    for point in data_points:
        if point % 2 == 0:
            classified_data.append('green')
        else:
            classified_data.append('red')
    return classified_data
Write a Python program to find all the numbers divisible by 7 and multiple of 5 between a given range. The range is from 0 and 50. # Find all numbers divisible by 7 and multiple of 5 between 0 and 50

# Create an empty list
result = []

# Loop through the range
for i in range(0, 51):
    # Check if number is divisible by 7 and multiple of 5
    if (i % 7 == 0) and (i % 5 == 0):
        # Add the number to the list
        result.append(i)

# Print the list 
print(result)  # Output: [0, 35, 70]
Create a Python class for a "Student" with fields for "name" and "age".  class Student:
    def __init__(self, name, age):
        self.name = name
        self.age = age
Construct a Python program to calculate the body mass index (BMI) of a person, given their height and weight  def calculate_bmi(height, weight): 
    bmi = weight / (height * height) 
    return bmi
Write a Python function to remove duplicate characters from a string. InputString="tree traversal" def remove_duplicate_characters(string): 
 result = "" 
  
 for i in range(len(string)): 
  if string[i] not in result: 
   result += string[i] 
  
 return result 
  
print(remove_duplicate_characters("tree traversal"))
Create an API endpoint in Python with Flask that can take a JSON request and save the data into a database. Sample JSON request:
{
 "name": "John Doe",
 "age": 25,
 "address": "123 Main St."
} from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
import json

app = Flask(name)
app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:////tmp/test.db"
db = SQLAlchemy(app)

class User(db.Model):
 id = db.Column(db.Integer, primary_key=True)
 name = db.Column(db.String(80))
 age = db.Column(db.Integer)
 address = db.Column(db.String(120))

db.create_all()

@app.route('/users', methods=['POST'])
def create_user():
 data = request.get_json()
 user = User(name=data['name'], age=data['age'], address=data['address'])
 db.session.add(user)
 db.session.commit()
 return jsonify({'message': 'User created.'})

if __name__ == '__main__':
 app.run(debug=True)
Write a Python function that takes two strings as input and checks if they are anagrams of each other. String 1: “listen”
String 2: “silent” def is_anagram(str1, str2):
 str1 = str1.lower()
 str2 = str2.lower()

 if len(str1) != len(str2):
 return False
   
 char_count = {}
 
 for c in str1:
 if c not in char_count:
 char_count[c] = 1
 else:
 char_count[c] += 1
  
 for c in str2:
 if c not in char_count:
 return False
 else:
 char_count[c] -= 1
  
 for k in char_count:
 if char_count[k] != 0:
 return False
  
 return True

print(is_anagram("listen", "silent")) // True
Develop a Python program to compare two dictionaries by keys. dict1 = {"A":1, "B":2, "C":3}
dict2 = {"A":3, "B":2, "D":4} def compare_dictionaries(dict1, dict2):
  dict1_keys = set(dict1.keys())
  dict2_keys = set(dict2.keys())

  # Get the list of keys that are in both dictionaries
  common_keys = dict1_keys & dict2_keys

  # Iterate over the list of common keys and compare the values
  for key in common_keys:
    if dict1[key] == dict2[key]:
      print(f"{key} is common and value is same")
    else:
      print(f"{key} is common but value is not same")
Write a function in Python for calculating the sum of squares of a list of elements. [3, 5, 7] def calculateSumSquare(lst):
    sum = 0
    for element in lst:
        sum += element**2
    return sum

lst = [3, 5, 7]
print(calculateSumSquare(lst))
Create a Python script to scrape a website and extract the main content of any webpage. URL: www.example.com import requests
from bs4 import BeautifulSoup

url = "https://www.example.com"
html = requests.get(url).content
soup = BeautifulSoup(html, 'html.parser')

content = soup.find("div", {"class": "main-content"}).text

print(content)
Sort a given list of integers in Python in ascending order. list_of_integers = [5, 8, 1, 4, 0, 2, 7] list_of_integers.sort()
Write a Python code snippet that takes a list of numbers as argument and prints the average. [2, 3, 4, 5, 6] def average(numbers: list):
    if numbers:
        return sum(numbers) / len(numbers)
    else:
        return 0
    
numbers = [2, 3, 4, 5, 6]
print(f"Average of {numbers} is {average(numbers)}")
Generate a Python program to find the minimum number of operations required to convert a given number into 1. 18 def minOperations(n): 
  
    if n==0: 
        return 0
    elif n==1: 
        return 1
  
    x = n 
  
    for i in range(2, n): 
        if i>x: 
            break
  
        if n%i == 0: 
            x = minOperations(int(n/i)) +  i 
  
    return x 
  
result = minOperations(18)
print(result)
Create an efficient algorithm in Python to convert a list of integers into a single integer representing the sum of the list elements. List of integers: [1, 3, 5, 8] def list_sum(nums): 
 total = 0
 
 for num in nums:
   total += num
 
 return total

list_sum([1, 3, 5, 8]) # output: 17
Write a Python program that removes duplicates from a list. Input List: [1, 2, 3, 4, 3, 2, 1] def remove_duplicates(my_list):
 return list(dict.fromkeys(my_list))

my_list = [1, 2, 3, 4, 3, 2, 1]

print(remove_duplicates(my_list)) # output [1, 2, 3, 4]
Write a Python code which will print out the number of words in a string. Example string def wordCount(str): 
    count = len(str.split()) 
    return count 

print(wordCount("Example string")) 

# Output: 2
Write a Python code to implement a list containing at least three dictionaries.  list_of_dicts = [ 
    {
        "name": "John",
        "age": 32,
        "country": "USA"
    },
    {
        "name": "Peter",
        "age": 28,
        "country": "Australia"
    },
    {
        "name": "David",
        "age": 30,
        "country": "Canada"
    }
]
Construct a decision tree classifier in Python, to classify an animal based on body characteristics. Not applicable from sklearn import tree

# features (characteristicsof animals)
# 0 for false, 1 for true
features = [[1, 0], [1, 1], [0, 1], [0, 0]]

# labels of features (types of animals)
labels = [0, 0, 1, 1]

# decision tree classifier
clf = tree.DecisionTreeClassifier()

# train the classifier with the data
clf = clf.fit(features, labels)

# test a prediction
prediction = clf.predict([[1, 0]])

# print the result
print(prediction) # [0]
Modify an existing Python program to make it more efficient. # Program to find the sum of all elements in an array

def sum_arr(arr):
    s = 0
    for n in arr:
        s += n
    return s # Program to find the sum of all elements in an array

def sum_arr(arr):
    # faster sum using numpy
    return np.sum(arr)
Generate a Python program which will filter all prime numbers from a list of integers. [19, 32, 13, 35, 22, 17, 27] def filter_prime_numbers(l):
    result = []
    for num in l:
        if is_prime(num):
            result.append(num)
    return result

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True
Create a python function to check if a given string contains a specific substring. The function should loop through the string and find the substring, and return a boolean value indicating if the substring was found or not. myString = "Hello World!"
substring = "World" def checkIfStringContainsSubstring(myString, substring):
  for i in range(len(myString) - len(substring) + 1):
    if myString[i:i+len(substring)] == substring:
      return True
  return False
Sort a dictionary by values in Python.  dictionary = {'key1':1, 'key2': 3, 'key3': 2}
sorted_dict = {key: value for key, value in sorted(dictionary.items(), key=lambda item: item[1])}
Create a Python program to generate a report of a user's sales data. A list of dictionaries containing sales data. import csv

# A list of dictionaries containing sales data
sales_data = [
 { 'name': 'John', 'quantity': 2, 'price': 10.0 },
 { 'name': 'Jane', 'quantity': 3, 'price': 15.0 },
 { 'name': 'Mike', 'quantity': 4, 'price':
Write a Python script to print the frequency of all unique words in a given string. "Hello world, hello programmer" words = "Hello world, hello programmer".split()

word_freq = {}
for word in words:
    if word not in word_freq:
        word_freq[word] = 1 
    else:
        word_freq[word] += 1

for key, value in word_freq.items():
    print(f"{key} : {value}")
Generate a random sequence of 5 numbers in a range of 0 to 10 using Python.  import random

random_sequence = []
for _ in range(5):
    random_sequence.append(random.randrange(0, 11))

print(random_sequence)
Write a Python script for computing the average of an arbitrary list of numbers.  def avg(nums):
    return sum(nums) / len(nums)

nums = [1, 5, 8, 10]
print(avg(nums))
Implement a Machine Learning algorithm in Python for Arrhythmia detection. Not applicable import pandas as pd
from sklearn.ensemble import RandomForestClassifier

# Read data
data = pd.read_csv('arrhythmaiadata.csv')

# Select features and targets
X = data.drop('arrhythmia', axis=1)
y = data.arrhythmia

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Calculate accuracy
accuracy = accuracy_score(y_test, y_pred)
print('Accuracy: %.2f' % (accuracy))
Write a function in Python that counts the number of words in the given string. Example String:
"This is a sample string with some words" def word_count(str):
 words = str.split()
 return len(words)

print(word_count("This is a sample string with some words"))
Develop a Python code to generate the nth number in the Fibonacci series. n = 8 """
Develop a Python code to generate the nth number in the Fibonacci series.
"""

def generate_fibonacci(n):
    if n == 1 or n == 2:
        return 1
    else:
        a = 1
        b = 1
        for i in range(2, n):
            a, b = b, a + b
        return b
    
if __name__ == '__main__':
    n = 8
    print(generate_fibonacci(n))
List three popular web frameworks used in Python.  Popular Python web frameworks include Flask, Django and Pyramid.
Implement a neural network in Python to recognize handwritten digits from MNIST using Keras. Not applicable import numpy as np
import matplotlib.pyplot as plt
import keras
from keras.datasets import mnist

(x_train, y_train), (x_test, y_test) = mnist.load_data()

# Normalize our data
x_train = x_train.astype('float32') / 255
x_test = x_test.astype('float32') / 255

# Reshape image data
x_train = x_train.reshape((x_train.shape[0], 28, 28, 1))
x_test = x_test.reshape((x_test.shape[0], 28, 28, 1))

# Convert class vectors to binary class matrices
y_train = keras.utils.to_categorical(y_train, 10)
y_test = keras.utils.to_categorical(y_test, 10)

# Create our neural network
model = keras.Sequential([
 keras.layers.Conv2D(32, 
  kernel_size=(3, 3),
  activation='relu',
  input_shape=(28, 28, 1)
 ),
 keras.layers.MaxPooling2D(pool_size=(2, 2)),
 keras.layers.Conv2D(64,
  kernel_size=(3, 3),
  activation='relu'
 ),
 keras.layers.MaxPooling2D(pool_size=(2, 2)),
 keras.layers.Flatten(),
 keras.layers.Dense(128, activation='relu'),
 keras.layers.Dense(10, activation='softmax')
])
model.compile(
 optimizer='adam',
 loss=keras.losses.categorical_crossentropy,
 metrics=['accuracy']
)

# Fit our model
model.fit(x_train, y_train, batch_size=64, epochs=2, verbose=1)

# Evaluate our model
score = model.evaluate(x_test, y_test, verbose=0)

# Print our model's accuracy
print('Test loss:', score[0])
print('Test accuracy:', score[1])
Enhance the performance of this Python script to evaluate the fibonacci numbers. def fibonacci(n):
  if n==1 or n==2:
    return 1
  return fibonacci(n-1) + fibonacci(n-2) def fibonacci(n):
    if n == 0: 
        return 0
    elif n == 1: 
        return 1
    elif n == 2: 
        return 1
    elif n > 2: 
        return fibonacci(n-1) + fibonacci(n-2) 
  
# Using memoization     
fibonacci_cache = {}
def fibonacci_dynamic(n): 
    # Check if the number was already processed
    if n in fibonacci_cache: 
        return fibonacci_cache[n] 
  
    # Compute the Nth term 
    if n == 1: 
        value = 1
    elif n == 2: 
        value = 1
    elif n > 2: 
        value = fibonacci(n-1) + fibonacci(n-2) 
  
    # Store the value and return it 
    fibonacci_cache[n] = value 
    return value
Generate an array in Python with a range of numbers from 0 to 10, including 0 and 10.  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
Create a bot that can identify keywords in natural language queries and respond with appropriate answers. query: "When will the next Star Wars movie be released?" # Python code

# define keywords
keywords = {
    'star wars': ['release date', 'when released'],
    'next': ['when', 'release date', 'when released'],
    'movie': ['what', 'when', 'release date', 'when released']
}

# define answers
answers = {
    'star wars': 'The next Star Wars movie is scheduled to be released on December 16, 2022.',
    'next': 'The next Star Wars movie is scheduled to be released on December 16, 2022.',
    'movie': 'The next movie in the Star Wars franchise is scheduled to be released on December 16, 2022.'
 }

# code to identify the query
def identify_query(query):
    words = query.lower().split(' ')
    for word in words:
        if word in keywords:
            return keywords[word]
    return []

# code to respond to the query
def respond(query):
    for keyword in identify_query(query):
        if keyword in answers:
            return answers[keyword]

# Main	
query = input('Ask me anything about Star Wars movies: ')	
answer = respond(query)	

if answer:
 print(answer)	
 else:
 print('Sorry, I do not understand your query.')
Create a Python web Crawler to parse a web page and extract the textual content only. Not applicable import requests
from bs4 import BeautifulSoup

url = 'https://example.com'
response = requests.get(url)
soup = BeautifulSoup(response.text, 'html.parser')
text = soup.find_all(text=True)

def visible_text(elements):
 for element in elements:
 if element.parent.name in ['style', 'script', '[document]', 'head', 'title']:
 continue
 if isinstance(element, Comment):
 continue
 return element.strip()

text = filter(visible_text, text)
print(*text, sep="\n")
Create a web scraper in Python using Beautiful Soup to extract data from a given URL. The URL is provided below. https://www.readersdigest.com/features/fun-facts import requests
from bs4 import BeautifulSoup

URL = 'https://www.readersdigest.com/features/fun-facts'
page = requests.get(URL)

soup = BeautifulSoup(page.content, 'html.parser')
results = soup.find_all('div', class_='field-item')

for result in results:
    print(result.find('h3').text)
    print(result.find('p').text)
    print()
Write an expression in python to check if a given number is prime number = 15 def is_prime(number):
    if number>1:
        for i in range(2,number):
            if number%i==0:
                return False
    else:
        return False
    return True
print(is_prime(number))
Normalize a string in Python.  def normalize(string):
    return string.lower().strip()
Design a python program which takes a word string as an argument and returns the number of vowels in the string. "Hello" def count_vowels(string):
    count = 0
    for ch in string:
        if ch in 'aeiouAEIOU':
            count += 1
    return count
Write a Python code to find the nearest integer to a given number.  def nearest_integer(number):
 if number - int(number)>= 0.5:
 return int(number) + 1
 else:
 return int(number)
Write a Python program that prompts the user for three numbers and prints the mean of those numbers. Not applicable def get_mean(a, b, c):
    return (a + b + c)/3

a = float(input('Enter a number: '))
b = float(input('Enter a number: '))
c = float(input('Enter a number: '))

mean = get_mean(a, b, c)
print('Mean:', mean)
Generate a python program that computes the inverse of a 3 x 3 matrix. [3, 0, 2]
[2, 0, -2]
[0, 1, 1] def inverse(matrix):
    # Determinant of matrix
    det = matrix[0][0]*(matrix[1][1]*matrix[2][2] - matrix[2][1]*matrix[1][2]) - matrix[0][1]*(matrix[1][0]*matrix[2][2] - matrix[1][2]*matrix[2][0]) + matrix[0][2]*(matrix[1][0]*matrix[2][1] - matrix[1][1]*matrix[2][0])
    
    inv_matrix = [[None, None, None], [None, None, None], [None, None, None]]
    inv_matrix[0][0] = (matrix[1][1]*matrix[2][2] - matrix[2][1]*matrix[1][2])/det
    inv_matrix[0][1] = -(matrix[1][0]*matrix[2][2] - matrix[1][2]*matrix[2][0])/det
    inv_matrix[0][2] = (matrix[1][0]*matrix[2][1] - matrix[2][0]*matrix[1][1])/det
    inv_matrix[1][0] = -(matrix[0][1]*matrix[2][2] - matrix[0][2]*matrix[2][1])/det
    inv_matrix[1][1] = (matrix[0][0]*matrix[2][2] - matrix[0][2]*matrix[2][0])/det
    inv_matrix[1][2] = -(matrix[0][0]*matrix[2][1] - matrix[2][0]*matrix[0][1])/det
    inv_matrix[2][0] = (matrix[0][1]*matrix[1][2] - matrix[0][2]*matrix[1][1])/det
    inv_matrix[2][1] = -(matrix[0][0]*matrix[1][2] - matrix[1][0]*matrix[0][2])/det
    inv_matrix[2][2] = (matrix[0][0]*matrix[1][1] - matrix[1][0]*matrix[0][1])/det

    return inv_matrix
Develop a python program to predict whether a given customer is going to pay next month's bill. A dataset containing customer information such as credit score, payment history etc. # Load the data
df = pd.read_csv('data.csv')

# Create the necessary features 
X = df.drop('Payment', axis=1)
y = df['Payment']

# Train the model
model = LogisticRegression()
model.fit(X, y)

# Make predictions
predictions = model.predict(X)

# Check accuracy of predictions
accuracy = accuracy_score(y,predictions)
print(accuracy)
Write a Python code snippet to create a user account with the given name and password. Name: John
Password: J0hnP455w0rd import bcrypt

name = "John"
password = "J0hnP455w0rd"
password_hash = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())

# Create user account in the database
# with the given name and hashed password
# ----------
# Code to store username and 
# hashed password in the database 
# ----------
Write a basic calculator program that can take in two values and an operator.  #!/usr/bin/env python3

# This program is a basic calculator that can take in two values and an operator

# The corresponding operations when the operator input is given
operations = {
    "+": lambda x, y: x + y, 
    "-": lambda x, y: x - y, 
    "*": lambda x, y: x * y,
    "/": lambda x, y: x / y
}

# Take in the values and operator from the user
num1 = int(input("Enter the first number: "))
operator = input("Enter the operator: ")
num2 = int(input("Enter the second number: "))

# Assert that the operator is valid
assert operator in operations, f"The given operator {operator} is not a valid operator"

# Calculate the result
result = operations[operator](num1, num2)

print(f"Result: {num1} {operator} {num2} = {result}")
Convert the given JSON object to a Python list. {"name": "John", "age": 25, "hobby": "programming"} data = {"name": "John", "age": 25, "hobby": "programming"}

list = list(data.values())
 
print(list)
# Output: ["John", 25, "programming"]
Create a machine learning model in Python to predict housing prices given a dataset.  import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

# Read in dataset
data = pd.read_csv('housing_data.csv')

# Split data into features and targets
X = data.drop('HousingPrice', axis=1)
y = data['HousingPrice']

# Split data into training and testing datasets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize linear regression model
model = LinearRegression()

# Fit model to training data
model.fit(X_train, y_train)

# Make prediction on testing data
y_pred = model.predict(X_test)
Write a Python program to generate a random password with length x. x = 8 import string
import random

def generate_password(length):
    characters = string.ascii_letters + string.digits
    password = ""
    for i in range(length):
        password += random.choice(characters)
    return password

result = generate_password(8)
print(result)
Identify the issue with the following Python code snippet. list1 = [1, 2, 3]
list2 = [4, 5, 6]
list3 = list1 + list2 The issue with the code snippet is that the two lists are not being concatenated, but instead being added together, resulting in a list containing the sums of the corresponding elements in the two lists. The correct code snippet should be as following:

list1 = [1, 2, 3]
list2 = [4, 5, 6]
list3 = list1 + list2
Using Python and TensorFlow, optimize a convolutional neural network model so that its prediction accuracy is maximized. Not applicable. import tensorflow as tf
import numpy as np

# model definition
model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(10, activation='softmax')
])

# optimization
model.compile(optimizer='sgd',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# data
train_data = np.load('train_data.npy')
train_labels = np.load('train_labels.npy')

X_train = train_data/255.
y_train = train_labels

# fitting
model.fit(X_train, y_train, epochs=10, validation_split=0.2)
Write a Python program to filter out all the strings longer than 10 characters in a list of strings. my_list = ["Hello", "World", "Welcome to the world!", "Hi!"] def filter_long_strings(my_list):
  long_strings = []
  for i in my_list:
    if len(i) > 10:
      long_strings.append(i)
  return long_strings
Design a program using Python to scrape data from a website. The target website is https://www.amazon.com/. import requests
from bs4 import BeautifulSoup

URL = 'https://www.amazon.com/'
page = requests.get(URL)
soup = BeautifulSoup(page.content, 'html.parser')

#find all products
products = soup.find_all('span', class_ = 'a-size-medium a-color-base a-text-normal')

#  iterate through products
for product in products:
    # find product title, price, etc. 
    title = product.find('span', class_ = 'a-size-medium a-color-base a-text-normal')
    price = product.find('span', class_ = 'a-price-whole')

    print(title.text)
    print(price.text)
Design a python program to find the maximum value of an array. [2, 4, 7, 6] def maxVal(arr):
    maxVal = -float("inf")
    for num in arr:
        if num > maxVal:
            maxVal = num
    return maxVal

maxVal([2, 4, 7, 6]) #returns 7
Create a program in Python to classify the sentiment of a text using machine learning. Examples of 1000 text samples etc import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score


# Load the data
data = ...

# Process the data
# Create a list of stopwords
stop_words = stopwords.words('english')

# Vectorize the data using CountVectorizer
vectorizer = CountVectorizer(stop_words=stop_words)
data_vectorized = vectorizer.fit_transform([d['Text'] for d in data])

# Split the data
X_train, X_test, y_train, y_test = train_test_split(data_vectorized, [d['Sentiment'] for d in data], test_size=0.2)

# Train the model
nb_model = MultinomialNB()
nb_model.fit(X_train, y_train)

# Evaluate the model
predictions = nb_model.predict(X_test)
print(accuracy_score(y_test, predictions))
Design a class for representing student data in Python  class Student:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    
    def get_name(self):
        return self.name
    
    def get_age(self):
        return self.age
Write a Python class to implement the Binary Search Tree structure.  class Node:
    def __init__ (self, data):
        self.data = data
        self.left = None
        self.right = None


class BinarySearchTree:
    def __init__ (self):
        self.root = None

    def insert (self, data):
        if self.root == None:
            self.root = Node(data)
        else:
            self._insert(data, self.root)
    
    def _insert(self, data, cur_node):
        if data < cur_node.data:
            if cur_node.left == None:
                cur_node.left = Node(data)
            else:
                self._insert(data, cur_node.left)
        elif data > cur_node.data:
            if cur_node.right == None:
                cur_node.right = Node(data)
            else:
                self._insert(data, cur_node.right)
        else:
            print("Value already in tree")
Create a simple Python command line utility to calculate the factorial of a given number. Not applicable import sys

def factorial(n):
 if n == 0:
 return 1
 else:
 return n * factorial(n-1)

if __name__ == '__main__':
 number = int(sys.argv[1])
 result = factorial(number)
 print('The factorial of %d is %d' % (number, result))
Propose a solution that optimizes the following python program. for i in range(1000):
    for j in range(1000):
        arr[i][j] += 5 import numpy as np

arr = np.array(arr)  # Convert to a numpy array

arr += 5  # add 5 to the array
Create a Python function to delete all data stored in a Python dictionary  def clear_dictionary(d): 
    keys = list(d.keys()) 
    for key in keys: 
        del d[key]
Build an algorithm in Python for predicting the price of a stock given historical data and the current market conditions. Not applicable import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# load the dataset
dataset = pd.read_csv('stock_data.csv')

# Exploratory data analysis
dataset.describe()

sns.heatmap(dataset.corr(), annot=True)

# Create feature and target variables
X = dataset.iloc[:, 1:-1]
y = dataset.iloc[:, -1]

# Split the data into train and test data
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,random_state=0)

# Feature scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

# Train model
from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train, y_train)

# Test the model
y_pred = regressor.predict(X_test)

# Evaluate the model
from sklearn.metrics import r2_score
r2_score(y_test, y_pred)
Generate a set of Python functions to take inputs values from a list of objects and output a result. The output for each object should include the object's ID and the calculated results from the given inputs. [{"id": 1, "inputs": [1,2,3]}, {"id": 2, "inputs": [2,3,4]}] def calculate_result(obj_list):
 result_list = []

 for obj in obj_list:
  result = {}
  result['id'] = obj['id']
  result['result'] = sum(obj['inputs'])

 result_list.append(result)

return result_list

obj_list = [{"id": 1, "inputs": [1,2,3]}, 
{"id": 2, "inputs": [2,3,4]}]

print(calculate_result(obj_list))

# Output: [{'id': 1, 'result': 6}, {'id': 2, 'result': 9}]
Generate a function for vector addition in Python.  def vector_addition(v1, v2):
    result = [v1[i] + v2[i] for i in range(len(v1))]
    return result

result = vector_addition([1,2,3], [4,5,6])
print(result)
Generate code using a Python function to create a new dictionary object from an existing dictionary by creating a new dictionary containing only the key-value pairs whose keys start with a specific prefix. dict_data = {
    "key1": "value1",
    "key2": "value2",
    "key3": "value3",
    "prefix_key1": "value4",
    "prefix_key2": "value5"
}
prefix = "prefix_" def get_dict_with_prefix(dict_data, prefix):
  new_dict = {}
  for key, value in dict_data.items():
    if key.startswith(prefix):
      new_dict[key] = value

  return new_dict

dict_data = {
    "key1": "value1",
    "key2": "value2",
    "key3": "value3",
    "prefix_key1": "value4",
    "prefix_key2": "value5"
}
prefix = "prefix_"

new_dict = get_dict_with_prefix(dict_data, prefix)

print(new_dict)  # Output: {'prefix_key1': 'value4', 'prefix_key2': 'value5'}
Create a Python function that takes the average of the three numbers given as parameters.  def average(a, b, c):
    return (a+b+c)/3
Write a Python program to flatten a list of lists into a single list. List of lists: [[1,2], [3], [4,5,6]] import itertools

# flatten a list of lists
list_of_lists = [[1,2], [3], [4,5,6]]
flattened_list = list(itertools.chain.from_iterable(list_of_lists))

# print the flattened list
print(flattened_list)  # Output: [1, 2, 3, 4, 5, 6]
Write a Python script to retrieve a title from a given URL. https://www.nytimes.com/2020/11/19/us/denver-police-protest.html import requests

url = 'https://www.nytimes.com/2020/11/19/us/denver-police-protest.html'
response = requests.get(url)

if response.status_code == 200:
 title = response.text.split("<title>")[1].split("</title>")[0]
 print(title)
Develop an algorithm in Python to implement bubble sort. arr = [7,2,5,1,3] def bubble_sort(arr): 
    # go through each element in the list
    for elem in arr: 
        # compare one elem with each of the successive elements
        for i in range(len(arr)-1): 
            if arr[i] > arr[i+1]: 
                temp = arr[i] 
                arr[i] = arr[i+1] 
                arr[i+1] = temp 
  
    return arr 
  
arr = [7,2,5,1,3]
sorted_arr = bubble_sort(arr)
print("Sorted array:",sorted_arr)

Output: Sorted array: [1,2,3,5,7]
Convert the given code from one programming language to another. //JavaScript code
function printHello(){
    console.log("Hello World!");
} #Python code
def printHello():
    print("Hello World!")
Generate a Python program to print the Fibonacci series up to n-th term. The n value is 6. def Fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print("Incorrect input") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
        return b 
  
print(Fibonacci(6))
Create a web scraper in Python to get the price of a given product from an e-commerce website.  import requests
from bs4 import BeautifulSoup 

# Request page
 URL = 'https://example.com/product' 
 page = requests.get(URL)

# Parse page 
soup = BeautifulSoup(page.content, 'html.parser')

# Extract the price 
price = soup.find("span", class_="price").get_text()
print("Price of the product is: ",price)
Write a Python program to Create a class called Vector with two methods to add and subtract vectors. Not applicable class Vector:
 def __init__(self, x, y):
  self.x = x
  self.y = y

 def __add__(self, other):
  return Vector(self.x + other.x, self.y + other.y)

 def __sub__(self, other):
  return Vector(self.x - other.x, self.y - other.y)

v1 = Vector(2, 4)
v2 = Vector(4, 6)
v3 = v1 + v2
print(v3.x, v3.y) # 6, 10
v4 = v1 - v2
print(v4.x, v4.y) # -2, -2
Create a web scraper in Python to access the data in a given url https://www.example.com/ import requests
from bs4 import BeautifulSoup

url = 'https://www.example.com/'
resp = requests.get(url)
soup = BeautifulSoup(resp.content, 'html.parser')

# Scraping code goes here
Edit the existing code to use a python approach to convert the temperature from celsius to fahrenheit. Temperature in Celsius: 24 def celsius_to_fahrenheit(celsius):
    return (celsius * 9 / 5 + 32)

temperature_in_fahrenheit = celsius_to_fahrenheit(24)
print(temperature_in_fahrenheit)
Convert the following java program to python. public class Main {
public static void main(String[] args) {
    int number = 10;
    int square = number * number;
    System.out.println("Square of given number is: "+square);
}
} # Converting from Java to Python

number = 10
square = number * number
print("Square of given number is: "+str(square))
Create a web crawling program using Python  import requests 
from bs4 import BeautifulSoup 
  
# Function to crawl a given website 
def web_crawl(url): 
  
    # Get the content from the given URL 
    page = requests.get(url) 
  
    # Create a bs4 object with the content 
    soup = BeautifulSoup(page.content, 'html.parser') 
  
    # Find all links on the page 
    links = soup.find_all("a") 
  
    # Iterate over all links 
    for link in links: 
  
        # Get the URL from the link 
        link_url = link.get("href") 
  
        # Check if the URL is valid 
        if link_url is not None and link_url != "#": 
  
            #parse the URL to crawl further 
            web_crawl(link_url) 
  
# Driver code 
if __name__ == "__main__": 
  
    # Crawl the given website 
    web_crawl("https://www.example.com")
How can you use Python to calculate the mean value of a given list [25, 34, 42] def mean_value(numbers):
    sum = 0
    for n in numbers:
        sum += n
    return sum / len(numbers)
Implement a function f() in Python that takes an argument n and prints the multiplication table of n  def f(n):
    for i in range(1, 11):
        print("{} * {} = {}".format(n, i, n*i))
Optimize a Python script for web scraping. The original Python script is given below:

import requests
import bs4

url = 'https://example.com'
r = requests.get(url)
soup = bs4.BeautifulSoup(r.text, 'html.parser')

links = soup.find_all('a')

for link in links:
    print(link.get('href')) import requests
import bs4
from lxml import html

url = 'https://example.com'
headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'}
r = requests.get(url, headers=headers)

tree = html.fromstring(r.content)
links = tree.xpath('//a/@href')

for link in links:
    print(link)
Develop a Python program that finds the maximum value in a given array. [1, 2, 7, 4, 5] def findMax(arr):
  max = arr[0]
  for i in range(1, len(arr)):
    if max < arr[i]:
      max = arr[i]
  return max

max_num = findMax([1,2,7,4,5])
print(max_num)
Generate a Python function to calculate compound interest.  def calculate_compound_interest(principal_amount, rate, time_period): 
    total_amount = principal_amount * (pow((1 + rate / 100), time_period)) 
    compound_interest = total_amount - principal_amount 
    return compound_interest 
  
# Driver code 
principal_amount = 1000
rate = 4.4
time_period = 2
  
# Calculating compound interest 
compound_interest = calculate_compound_interest(principal_amount, rate, time_period) 
  
# Printing the values 
print("Compound interest is", compound_interest)
Write a deep learning network in Python that takes as input a two-dimensional array of floats and predicts a category for it. Example array:
[[0.9, 0.1],
[0.8, 0.2],
[0.7, 0.3]] import tensorflow as tf

# Model definition
model = tf.keras.Sequential([
 tf.keras.layers.Flatten(input_shape=(2,)),
 tf.keras.layers.Dense(16, activation='relu'),
 tf.keras.layers.Dense(1, activation='sigmoid')
])

# Compile the model
model.compile(
 optimizer='adam',
 loss='binary_crossentropy',
 metrics=['accuracy']
)

# Train the model
model.fit(data, labels, epochs=10)
Write a Python program to generate a bar chart representing the monthly sales data for a small business. month = ["Jan", "Feb", "Mar", "Apr", "May", "Jun"];
sales = [312, 443, 235, 564, 234, 431]; import matplotlib.pyplot as plt

month = ["Jan", "Feb", "Mar", "Apr", "May", "Jun"]
sales = [312, 443, 235, 564, 234, 431]

plt.bar(month, sales)

plt.xlabel("Month")
plt.ylabel("Sales")

plt.title("Monthly Sales")

plt.show()
Generate a python class which has two methods to convert a number to string and vice-versa.  class NumStringConverter:
    def int_to_str(self, number):
        return str(number)
    
    def str_to_int(self, string):
        return int(string)
Create a Python function that takes in a list of numbers and returns the first occurrence of a prime number. [2, 4, 6, 8] def findPrime(nums):
 for num in nums:
 if isPrime(num):
 return num

def isPrime(num):
 if num <= 1:
 return False
 for i in range(2, num):
 if (num % i == 0):
 return False
 return True
This code is a DNS server that listens for queries and responds based on pre-defined rules. To use it, run the "run" function with input and output file objects. The input file should contain lines representing DNS queries in the format "cmd\tqname\tqclass\tqtype\tid\tremote-ip\tlocal-ip\tedns-subnet-address". The output file will contain the server's responses in the format "DATA\tqname\tqclass\tqtype\tttl\tid\tdata". The server's behavior is controlled by defining "match" functions with specific conditions and return values. These functions should be decorated with the "match" decorator and added to the "matches" list. The server also defines several helper functions for constructing DNS responses and logging.  #!/usr/bin/env python
from sys import exit, stdin, stderr, argv, stdout
from inspect import stack
from config import *
import os
import csv

CONT=0
FINAL=1

default_ttl=60
loglevel=3

class istr(str):
    def __eq__(self, text):
        return str.__eq__(self.lower(), text.lower())

class qname(istr):
    def __new__(cls, value, *args, **kwargs):
        return istr.__new__(cls, value)
    def _domain_parts(self,request):
        return map(lambda x: istr(x), filter(lambda x: x!='', self.split('.')))
    def _domain_parts_len(self,request):
        return len(domain_parts(request))
    def _tld(self, count=2):
        return istr('.'.join(self.domain_parts[-count:]))
    def __init__(self, value, minlen=None, maxlen=None):
        self.domain_parts=self._domain_parts(value)
        self.domain_parts_count=len(self.domain_parts)
        self.tld=self._tld()
    def host_part(self, substring):
        try:
            if self.lower().index(substring+'.')==0:
                return True
        except ValueError:
            return False
        return False
    def is_subdomain(string, substring):
        try:
            return (string.lower().rindex('.'+substring)+len(substring)+1 == len(string))
        except ValueError:
            return False
        return False

def logd(level=loglevel, message=None, kwargs={}):
    if level>=loglevel:
        print("LOG\t%s(): %s" % (stack()[1][3],'; '.join([message,', '.join(map(lambda (k,v): "%s='%s'" % (k,v), kwargs.iteritems()))])))

def log(level=loglevel, message=None, **kwargs):
    if level>=loglevel:
        print(
            "LOG\t%s(): %s" % (
                stack()[1][3],
                '; '.join(
                    [
                        message,
                        ', '.join(
                            map(lambda (k,v): "%s='%s'" % (k,v), kwargs.iteritems())
                            )
                    ]
                )
            )
        )

def MX(priority=0, data=None, ttl=default_ttl):
    if data:
        return {
            'qtype': 'MX',
            'data':"%s\t%s" % (priority, data),
            'ttl': ttl
        }
    else:
        return {}

def LOG(msg):
    pass

def A(data=None, ttl=default_ttl):
    if data:
        return {
            'qtype': 'A',
            'data': data,
            'ttl': ttl
        }
    else:
        return {}

def match_domain(name, domain):
    if name[-len(domain):] == domain or name[-len(domain)-1:] == '.'+domain:
        return True
    return False

matches=[]
def match(host=None, fqdn=None, domain=None, dns_class=None, type=None, remote_ip=None, local_ip=None, cache=True):
    params=locals()
    def wrapper(f):
        matches.append([f, params])
    return wrapper

def represent(response):
    return "\t".join([
        'DATA',
        response['qname'],
        response['qclass'],
        response['qtype'],
        str(response['ttl']),
        response['id'],
        response['data']
    ])

def route(request):
    retval=[]
    if request['qname'] in skip_zones:
        retval.append("LOG\tqname '%s' is in skipped zones list, skipping" % request['qname'])
        return retval
    for f, conditions in matches:
        if (conditions['fqdn'] is None or conditions['fqdn'] == request['qname']) and \
            (conditions['domain'] is None or match_domain(request['qname'], conditions['domain'])) and \
            (conditions['type'] is None or conditions['type'] == request['qtype'] or request['qtype'] == 'ANY') and \
            (conditions['dns_class'] is None or conditions['dns_class'] == request['qclass']) and \
            (conditions['remote_ip'] is None or conditions['remote_ip'] == request['remote-ip']) and \
            (conditions['local_ip'] is None or conditions['local_ip'] == request['local-ip']):
            returned=f(request)
            if returned:
                if returned[1]:
                    if type(returned[1]) is list:
                        for item in returned[1]:
                            retval.append(
                                represent(
                                    dict(request.items() + item.items())
                                )
                            )
                    else:
                        retval.append(
                            represent(
                                dict(request.items() + returned[1].items())
                            )
                        )
                    if returned[0] == FINAL:
                        break
    return retval

def run(f_in=stdin, f_out=stdout):
    line = f_in.readline().strip()
    if not line.startswith('HELO'):
        print >>f_out, 'FAIL'
        f_out.flush()
        f_in.readline()
    else:
        print >>f_out, "OK\tapp firing up"
        f_out.flush()
    while True:
        line = f_in.readline().strip()
        if not line:
            break
        #request = line.split('\t')
        request = dict(
            zip(
                ['cmd','qname','qclass','qtype','id','remote-ip','local-ip','edns-subnet-address'],
                line.split('\t')
            )
        )
        request['qname']=qname(request['qname'])
        #request['id']=1
	#logd(3, 'Processing request', request)
        if request['cmd'] == 'Q':
            if request['qname'] != '':
                datas=route(request)
                if datas:
                    print >>f_out, "\n".join(datas)
                    #print >>f_out, "LOG\t"+"\nLOG\t".join(datas)
            print >>f_out, "END"
            f_out.flush()
        elif request['cmd'] == 'PING':
            print >>f_out, "LOG\tPONG"
            f_out.flush()
            continue
        elif request['cmd'] == 'HELO':
            print >>f_out, "OK\trunning"
            f_out.flush()
            continue
        elif request['cmd'] == 'AXFR':
            print >>f_out, "END"
            f_out.flush()
            continue
        else:
            print >>f_out, "LOG\tUnprocessed"

def acme_b64encode(acme_challenge):
    return acme_challenge.replace('_','_u').replace('-','_h')

def acme_b64decode(acme_challenge):
    return acme_challenge.replace('_h','-').replace('_u','_')


Write a Python program to remove all elements of a given list except largest and smallest element. numbers = [3, 4, 6, 2, 8, 9, 1] def get_min_max(numbers):
 max_num = max(numbers)
 min_num = min(numbers)
 new_list = []
 for i in numbers:
  if i == max_num or i == min_num:
   new_list.append(i)
 return new_list
Create an algorithm in Python for solving a Rubik's cube. Not applicable def solve_cube(cube):
 # Step 1: Position the cube
 cube_position = position_cube(cube)
 
 # Step 2: Solve the center pieces
 center_pieces = solve_center_pieces(cube_position)
 
 # Step 3: Solve the first two layers
 first_two_layers = solve_first_two_layers(center_pieces)
 
 # Step 4: Orient the final layer
 final_layer = orient_final_layer(first_two_layers)
 
 # Step 5: Permute the final layer
 cube_solved = permute_final_layer(final_layer)
 
 return cube_solved
Develop an algorithm in Python that takes an array of integers and finds two numbers whose sum is the given target. The array : [1, 3, 5, 7, 9]
The target : 12 def two_sum(arr, target):
 for num1 in arr:
 for num2 in arr:
 if num1 + num2 == target:
 return (num1, num2)

result = two_sum([1, 3, 5, 7, 9], 12)
print(result)
# Output -> (5, 7)
Create a function in Python that takes two integers as arguments and print the sum of them.  def add_numbers(a, b):
    """Returns the sum of two numbers"""
    return a + b

if __name__ == '__main__':
    print(add_numbers(2, 3))
Write a Python expression that returns the element at index 2 of a list. ["Apple", "Banana", "Cherry", "Date"] list[2] # returns "Cherry"
Create a function in Python which takes a name as an argument and returns a message “Hello, <name>”  def hello(name):
    return "Hello, "+ name
Create a Python script to format the following string with proper new lines and indentation. '{ "name":"John", "age":30, "city":"New York"}' formatted = '{\n  "name":"John",\n  "age":30,\n  "city":"New York"\n}'
Create a Python synthetic dataset including 1000 samples and 10 continuous attributes.  import numpy as np

# set seed for generating random numbers
np.random.seed(101)

# number of samples and attributes
n_samples = 1000
n_attributes = 10

# generate random samples
data = np.random.rand(n_samples, n_attributes)
Create a Python function that takes a positive integer as input and returns a list of its prime factors. The number 12. def prime_factors(number):
 prime_factors = []
 i = 2
 while number > 1:
  if number % i == 0:
   prime_factors.append(i)
   number //= i
  else:
   i += 1
 return prime_factors

print(prime_factors(12))
# [2, 2, 3]
Build an optimization problem in Python with an objective function and 2 constraints  import numpy as np
from scipy.optimize import minimize
 
def objective(x):
    return (x[0] * x[3] * (x[0] + x[1] + x[2]) + x[2])
 
def constraint1(x):
    return x[0]*x[1]*x[2]*x[3] - 25 
 
def constraint2(x):
    sum_sq = 40
    for i in range(4):
        sum_sq = sum_sq - x[i]**2 
    return sum_sq
     
# Initial Guess
x0 = np.array([1, 4, 10, 1])
 
# show initial objective
print('Initial SSE Objective: ' + str(objective(x0))) 

# Constraints
cons = ({'type': 'ineq', 'fun': constraint1}, 
    {'type': 'ineq', 'fun': constraint2})
 
# Solution
res = minimize(objective, x0, method='SLSQP', 
        constraints=cons, options={'disp': True})
     
# Show final objective
print('Final SSE Objective: ' + str(res.fun))
 
# Print final solution
print('x1 = ' + str(res.x[0]))
print('x2 = ' + str(res.x[1]))
print('x3 = ' + str(res.x[2]))
print('x4 = ' + str(res.x[3]))
Create an interactive chatbot in Python using Natural Language Processing that can answer any questions related to the world of programming. Not applicable import nltk
from nltk.stem import WordNetLemmatizer
from nltk.corpus import wordnet

#Define preprocessor
def preprocess(sentence):
 lemmatizer = WordNetLemmatizer()
 tokens = nltk.word_tokenize(sentence)
 tokens = [lemmatizer.lemmatize(token, get_wordnet_pos(token)) for token in tokens]
 return ' '.join(tokens)

#Define helper function for getting part-of-speech
def get_wordnet_pos(word):
 tag = nltk.pos_tag([word])[0][1][0].upper()
 tag_dict = {
 'J': wordnet.ADJ,
 'N': wordnet.NOUN,
 'V': wordnet.VERB,
 'R': wordnet.ADV
 }
 return tag_dict.get(tag, wordnet.NOUN)

#Define helper function for getting response
def get_response(sentence):
 return responses.get(preprocess(sentence), 'I am not sure about that. Can you Ask me a different question?')

#Define responses
responses = {
 'what programming language': 'I use Python, but there are many programming languages to choose from.',
 'what programming language should i use': 'It depends on what you are trying to achieve, so you should research what language best suits your purpose.'
}

#Get user input
query = input('Ask me about programming: ')

#Get response
response = get_response(query)

#Print response
print(response)
Can you develop a python program that uses a loop to print the numbers 10 to 1 in reverse order?  for i in range(10, 0, -1):
    print(i)
Create a Python class called Point that represents a point in 2D space.  class Point:
    """Class representing a Point in 2D space"""
    def __init__(self, x, y):
        """Initialize the point with given x and y co-ordinates"""
        self.x = x
        self.y = y
    
    def get_x(self):
        """Return the x co-ordinate of the point"""
        return self.x
    
    def get_y(self):
        """Return the y co-ordinate of the point"""
        return self.y
    
    def move_to(self, x, y):
        """Move the point to a new position x,y"""
        self.x = x
        self.y = y
        
    def distance_to(self, point):
        """Calculate the distance to the other point"""
        dx = self.x - point.get_x()
        dy = self.y - point.get_y()
        return (dx**2 + dy**2) ** 0.5
Create a Python program to edit the following string and make all characters in the string uppercase. 'This is a test string.' def to_uppercase(input):
    output = ""
    for char in input:
        output += char.upper()
    return output
Suggest the python code for detecting the position of a character in a string. String: "Hello World!"
Character: "!" def position_of_char(string, char):
    '''This function will detect the position of a character in a string.'''
    return string.index(char)
Create a Python program that can encrypt a string using the RSA asymmetric algorithm.  # Imports
from Crypto.PublicKey import RSA

# Generate an RSA key pair
key = RSA.generate(2048)

# Retrieve the public key
public_key = key.publickey()

# Encrypt the message using the public key
def encrypt_message(message):
	encrypted_message = public_key.encrypt(message, 32)
	return encrypted_message
Create a Python program that extrapolates the most frequent word from a given text. Text = "This is an example of a text with some words" from collections import Counter

def most_frequent_word(string):
    split_string = string.split(" ")
    counter = Counter(split_string)
    return counter.most_common(1)[0][0]

print(most_frequent_word("This is an example of a text with some words"))
Generate a Python program for predicting players' positions in a game of chess based on their moves. Not applicable import chess

def predict_position(moves):
 board = chess.Board()
 for move in moves:
 board.push_san(move)
 return board.fen()
 
if name == '__main__':
 moves = ['e4', 'e5', 'Nf3', 'Nc6', 'Bb5']
 position = predict_position(moves)
 print(position)

# Output: rnbqkbnr/pppp1ppp/8/4p3/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 3
Translate the following sentence into Python language using Loops: "Print all the numbers from 0 to 20".  for i in range(0, 21):
  print(i)
Design a basic class in Python called "Dog" and create a constructor method.  class Dog:
    def __init__(self, name, age, weight):
        self.name = name
        self.age = age
        self.weight = weight

# Sample call
dog = Dog("Fido", 2, 40)
Design a Python program that takes in an email address, checks if it is valid, and prints out an appropriate error message if it is not valid.  import re

def validate_email(address):
    regex = '^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$'
    if re.search(regex, address):
        return True
    else:
        return False

def main():
    address = input('Enter email address: ')
    if validate_email(address):
        print("Valid email address")
    else:
        print("Invalid email address!")

main()
Create a function in Python that will convert a given string of text into its equivalent URL-safe slug format. This is a sample string def url_slug(text):
 '''Takes text and converts it to url-safe slug format.
 
 Args:
 text (str): Text to be converted to slug
 
 Returns:
 str: slugified text
 '''
 
 text = text.lower()
 text = re.sub(r'\s+', '-', text)
 text = re.sub(r'[^\w-]', '', text)
 return text
Generate a list of the first 10 Fibonacci numbers in Python.  n=10
result=[]

# first two numbers
result.append(0)
result.append(1)

# iteration for generating Fibonacci numbers
for i in range(2, n):
    result.append(result[i-2] + result[i-1])

# print the result
print(result)
Create a python script to generate a random password consisting of a combination of 10 alphabetic characters, 9 digits and the symbols @, # and $.  import random
import string

def randomPasswordGenerator(length):
    # Generate a random password consisting of 10 alphabet characters, 9 digits and the symbols @, # and $
    generated_password = ''.join(random.choice(
        string.ascii_letters + string.digits + "@#$") for i in range(length))
    return generated_password

length = 10
print("Random Password:", randomPasswordGenerator(length))
Design a hash table in Python  # initialize size
SIZE = 256

# defining Node class
class Node:
    def __init__(self, key, data):
        self.key = key
        self.data = data
        self.next = None

# defining HashTable
class HashTable:
    def __init__(self):
        self.table = [None]*SIZE

    # hash function
    def hash_function(self, key):
        return key % SIZE

    # insert data
    def insert(self, key, data):
        index = self.hash_function(key)

        if self.table[index] is None:
            self.table[index] = Node(key, data)
        else:
            temp_node = self.table[index]

            while temp_node.next:
                temp_node = temp_node.next

            temp_node.next = Node(key, data)

    # search data
    def search(self, key):
        index = self.hash_function(key)
        if self.table[index] is None:
            return "No data found!"
        else:
            temp_node = self.table[index]
            while temp_node and temp_node.key != key:
                temp_node = temp_node.next
            if not temp_node:
                return "No data found!"
            else:
                return temp_node.data

    # get size
    def get_size(self):
        count = 0
        for item in self.table:
            if item:
               count += 1
            while item.next:
                count += 1
                item = item.next
        return count
Generate a Python function to convert a given time in 24-hour format to 12-hour AM/PM format.  def convert_time_format(time):
    """
    Converts a given time in 24-hour format to 12-hour AM/PM format.
    
    Args:
        time (str): The time in 24-hour format.
    
    Return:
        str: The converted time in 12-hour AM/PM format.
    """

    # Extract the hour and minutes
    hour, minutes = int(time.split(':')[0]), int(time.split(':')[1])
    
    # Check for Edge Cases
    if hour > 12:
        hour -= 12
        pm = True
    elif hour == 0:
        hour = 12
        pm = False
    elif hour == 12:
        pm = True
    else:
        pm = False

    # Format the time
    if minutes < 10:
        time_formatted = '{}:0{} '.format(hour, minutes)
    else:
        time_formatted = '{}:{} '.format(hour, minutes)

    # Add the PM/AM marker
    if pm:
        time_formatted += 'PM'
    else: 
        time_formatted += 'AM'
    
    return time_formatted
Develop a python program to find the maximum element in a dictionary sampleDict = {'A': 12, 'B': 17, 'C': 3} def findMax(sampleDict): 
  
    max_value = 0
    max_key = ''
  
    for key, value in sampleDict.items(): 
        if value > max_value: 
            max_value = value
            max_key = key     
  
    return max_key, max_value 
  
# Driver's code 
sampleDict = {'A': 12, 'B': 17, 'C': 3} 
max_key, max_value = findMax(sampleDict) 
print("The maximum element in the dictionary is :", 
                        max_key, max_value)
Write a Python script to find the GCD of two numbers. 1000, 500 def findGCD(a, b): 
   if (b == 0): 
       return a
   return findGCD(b, a % b)
    
a = 1000
b = 500
print("GCD of number is: ", findGCD(a, b))
Write a script in Python to retrieve data from a web API. The web API is available at http://api.example.com/v1/zipcodes and requires the parameter `zipcode` to execute. import requests

zipcode = '12345'
url = 'http://api.example.com/v1/zipcodes'

params = {'zipcode': zipcode}
response = requests.get(url, params=params)

if response.status_code == 200:
 data = response.json()
 print(data)
else:
 print('Error: ', response.status_code)
Specify a quick sort algorithm in Python to sort the given array of numbers. [9, 6, 5, 3, 4, 7, 4, 1] def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    mid = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quick_sort(left) + mid + quick_sort(right)

print(quick_sort([9, 6, 5, 3, 4, 7, 4, 1]))
Optimize the following Python code for faster runtime performance for i in range(5):
    print("Hello") for i in range(5):
    print("Hello", end="\n")
Create a Python script to scrape the HTML of a given web page and extract all of its headings and paragraphs. URL of a web page import requests
from bs4 import BeautifulSoup


url = 'url'
page = requests.get(url)
soup = BeautifulSoup(page.text, 'html.parser')

headings = soup.find_all(['h1', 'h2', 'h3', 'h4', 'h5', 'h6'])
for heading in headings:
 print(heading.text)

paragraphs = soup.find_all('p')
for paragraph in paragraphs:
 print(paragraph.text)
Generate a prediction model, in Python code, to identify whether a given sentence is positive or negative. sentences = ["I am good", "It's terrible", "What a wonderful day!"] def predict_sentiment(sentences):
    tokenizer = Tokenizer()
    tokenizer.fit_on_texts(sentences)
    x_train = tokenizer.texts_to_matrix(sentences)
    model = Sequential()
    model.add(Dense(32, input_shape=(x_train.shape[1],), activation="relu"))
    model.add(Dense(32, activation="relu"))
    model.add(Dense(1, activation="sigmoid"))
    model.compile(loss="binary_crossentropy",
                  optimizer="rmsprop",
                  metrics=["accuracy"])
    model.fit(x_train, [1, 0, 1], epochs=10, batch_size=32)
    
    predictions = model.predict([x_train[0],x_train[1],x_train[2]])
    print(predictions)
    if predictions[0] > 0.5:
        print("The sentence 'I am good' is positive") 
    else:
        print("The sentence 'I am good' is negative") 
    if predictions[1] > 0.5:
        print("The sentence 'It's terrible' is positive") 
    else:
        print("The sentence 'It's terrible' is negative") 
    if predictions[2] > 0.5:
        print("The sentence 'What a wonderful day!' is positive") 
    else:
        print("The sentence 'What a wonderful day!' is negative")
Write a Python program to multiply two numbers using recursion.  def multiply(x, y):
	if y == 0:
		return 0
	else:
		return x + multiply(x, y - 1)
Extend a Python program to calculate the area of any regular polygon. 3 sides def calculate_area(n):
    """
    Calculates the area of an n-sided regular polygon
    """
    # Calculate the area of the n-sided regular polygon
    side_length = 1
    area = (n * side_length**2) / (4 * math.tan(math.pi / n))
    return round(area, 2)

# Get the number of sides as an input
n = int(input("Enter the number of sides"))

# Calculate the area and print it
area = calculate_area(n)
print("The area of the regular polygon is", area)
Write a python program to add two matrices. X = [[1, 2, 3], 
    [3, 4, 5], 
    [6, 7, 8]]
Y = [[2, 3, 4],
    [5, 6, 7],
    [8, 9, 10]] def add_matrices(X, Y): 
  
    result = [[0, 0, 0], 
            [0, 0, 0], 
            [0, 0, 0]] 
  
    # iterate through rows 
    for i in range(len(X)): 
      
        # iterate through columns 
        for j in range(len(X[0])): 
            result[i][j] = X[i][j] + Y[i][j] 
  
    for r in result: 
        print(r)
Write a Python program to check if two given strings are anagrams or not.An anagram is a word or phrase formed by rearranging the letters of a different word or phrase.  def is_anagram(str1, str2):
 str1_dict = dict()
 str2_dict = dict()
 
 for char in str1:
 if char in str1_dict:
 str1_dict[char] += 1
 else:
 str1_dict[char] = 1
 
 for char in str2:
 if char in str2_dict:
 str2_dict[char] += 1
 else:
 str2_dict[char] = 1
 
 for key in str1_dict:
 if key not in str2_dict:
 return False
 elif str1_dict[key] != str2_dict[key]:
 return False
 
 return True
Analyze a given Python script and provide a list of key terms and concepts that appear in the code. import os

document = ''

for root, dirs, files in os.walk('data'):
    for file in files:
        if file.endswith('.txt'):
            with open(os.path.join(root, file)) as f:
                document += f.read() Key Terms and Concepts:
 - Importing: os
- Loops: for, while
- Paths: os.walk
- Opening files: open, with
- File I/O: reading/writing files
- Logical operators: endswith
- Strings: join, read, append
To use the PttWebCrawler, create an instance of the class and provide a board name and either a start and end index or an article ID. Then call the parse_articles method to crawl through the specified range of pages or parse_article method to parse a single article. The output will be stored in a JSON file with the format BOARD_NAME-START_INDEX-END_INDEX.json or BOARD_NAME-ID.json.  # -*- coding: utf-8 -*-
from __future__ import absolute_import
from __future__ import print_function

import os
import re
import sys
import json
import requests
import argparse
import time
import codecs
from bs4 import BeautifulSoup
from six import u

__version__ = '1.0'

# if python 2, disable verify flag in requests.get()
VERIFY = True
if sys.version_info[0] < 3:
    VERIFY = False
    requests.packages.urllib3.disable_warnings()


class PttWebCrawler(object):

    PTT_URL = 'https://www.ptt.cc'

    """docstring for PttWebCrawler"""
    def __init__(self, cmdline=None, as_lib=False):
        parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter, description='''
            A crawler for the web version of PTT, the largest online community in Taiwan.
            Input: board name and page indices (or articla ID)
            Output: BOARD_NAME-START_INDEX-END_INDEX.json (or BOARD_NAME-ID.json)
        ''')
        parser.add_argument('-b', metavar='BOARD_NAME', help='Board name', required=True)
        group = parser.add_mutually_exclusive_group(required=True)
        group.add_argument('-i', metavar=('START_INDEX', 'END_INDEX'), type=int, nargs=2, help="Start and end index")
        group.add_argument('-a', metavar='ARTICLE_ID', help="Article ID")
        parser.add_argument('-v', '--version', action='version', version='%(prog)s ' + __version__)

        if not as_lib:
            if cmdline:
                args = parser.parse_args(cmdline)
            else:
                args = parser.parse_args()
            board = args.b
            if args.i:
                start = args.i[0]
                if args.i[1] == -1:
                    end = self.getLastPage(board)
                else:
                    end = args.i[1]
                self.parse_articles(start, end, board)
            else:  # args.a
                article_id = args.a
                self.parse_article(article_id, board)

    def parse_articles(self, start, end, board, path='.', timeout=3):
            filename = board + '-' + str(start) + '-' + str(end) + '.json'
            filename = os.path.join(path, filename)
            self.store(filename, u'{"articles": [', 'w')
            for i in range(end-start+1):
                index = start + i
                print('Processing index:', str(index))
                resp = requests.get(
                    url = self.PTT_URL + '/bbs/' + board + '/index' + str(index) + '.html',
                    cookies={'over18': '1'}, verify=VERIFY, timeout=timeout
                )
                if resp.status_code != 200:
                    print('invalid url:', resp.url)
                    continue
                soup = BeautifulSoup(resp.text, 'html.parser')
                divs = soup.find_all("div", "r-ent")
                for div in divs:
                    try:
                        # ex. link would be <a href="/bbs/PublicServan/M.1127742013.A.240.html">Re: [問題] 職等</a>
                        href = div.find('a')['href']
                        link = self.PTT_URL + href
                        article_id = re.sub('\.html', '', href.split('/')[-1])
                        if div == divs[-1] and i == end-start:  # last div of last page
                            self.store(filename, self.parse(link, article_id, board), 'a')
                        else:
                            self.store(filename, self.parse(link, article_id, board) + ',\n', 'a')
                    except:
                        pass
                time.sleep(0.1)
            self.store(filename, u']}', 'a')
            return filename

    def parse_article(self, article_id, board, path='.'):
        link = self.PTT_URL + '/bbs/' + board + '/' + article_id + '.html'
        filename = board + '-' + article_id + '.json'
        filename = os.path.join(path, filename)
        self.store(filename, self.parse(link, article_id, board), 'w')
        return filename

    @staticmethod
    def parse(link, article_id, board, timeout=3):
        print('Processing article:', article_id)
        resp = requests.get(url=link, cookies={'over18': '1'}, verify=VERIFY, timeout=timeout)
        if resp.status_code != 200:
            print('invalid url:', resp.url)
            return json.dumps({"error": "invalid url"}, sort_keys=True, ensure_ascii=False)
        soup = BeautifulSoup(resp.text, 'html.parser')
        main_content = soup.find(id="main-content")
        metas = main_content.select('div.article-metaline')
        author = ''
        title = ''
        date = ''
        if metas:
            author = metas[0].select('span.article-meta-value')[0].string if metas[0].select('span.article-meta-value')[0] else author
            title = metas[1].select('span.article-meta-value')[0].string if metas[1].select('span.article-meta-value')[0] else title
            date = metas[2].select('span.article-meta-value')[0].string if metas[2].select('span.article-meta-value')[0] else date

            # remove meta nodes
            for meta in metas:
                meta.extract()
            for meta in main_content.select('div.article-metaline-right'):
                meta.extract()

        # remove and keep push nodes
        pushes = main_content.find_all('div', class_='push')
        for push in pushes:
            push.extract()

        try:
            ip = main_content.find(text=re.compile(u'※ 發信站:'))
            ip = re.search('[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*', ip).group()
        except:
            ip = "None"

        # 移除 '※ 發信站:' (starts with u'\u203b'), '◆ From:' (starts with u'\u25c6'), 空行及多餘空白
        # 保留英數字, 中文及中文標點, 網址, 部分特殊符號
        filtered = [ v for v in main_content.stripped_strings if v[0] not in [u'※', u'◆'] and v[:2] not in [u'--'] ]
        expr = re.compile(u(r'[^\u4e00-\u9fa5\u3002\uff1b\uff0c\uff1a\u201c\u201d\uff08\uff09\u3001\uff1f\u300a\u300b\s\w:/-_.?~%()]'))
        for i in range(len(filtered)):
            filtered[i] = re.sub(expr, '', filtered[i])

        filtered = [_f for _f in filtered if _f]  # remove empty strings
        filtered = [x for x in filtered if article_id not in x]  # remove last line containing the url of the article
        content = ' '.join(filtered)
        content = re.sub(r'(\s)+', ' ', content)
        # print 'content', content

        # push messages
        p, b, n = 0, 0, 0
        messages = []
        for push in pushes:
            if not push.find('span', 'push-tag'):
                continue
            push_tag = push.find('span', 'push-tag').string.strip(' \t\n\r')
            push_userid = push.find('span', 'push-userid').string.strip(' \t\n\r')
            # if find is None: find().strings -> list -> ' '.join; else the current way
            push_content = push.find('span', 'push-content').strings
            push_content = ' '.join(push_content)[1:].strip(' \t\n\r')  # remove ':'
            push_ipdatetime = push.find('span', 'push-ipdatetime').string.strip(' \t\n\r')
            messages.append( {'push_tag': push_tag, 'push_userid': push_userid, 'push_content': push_content, 'push_ipdatetime': push_ipdatetime} )
            if push_tag == u'推':
                p += 1
            elif push_tag == u'噓':
                b += 1
            else:
                n += 1

        # count: 推噓文相抵後的數量; all: 推文總數
        message_count = {'all': p+b+n, 'count': p-b, 'push': p, 'boo': b, "neutral": n}

        # print 'msgs', messages
        # print 'mscounts', message_count

        # json data
        data = {
            'url': link,
            'board': board,
            'article_id': article_id,
            'article_title': title,
            'author': author,
            'date': date,
            'content': content,
            'ip': ip,
            'message_conut': message_count,
            'messages': messages
        }
        # print 'original:', d
        return json.dumps(data, sort_keys=True, ensure_ascii=False)

    @staticmethod
    def getLastPage(board, timeout=3):
        content = requests.get(
            url= 'https://www.ptt.cc/bbs/' + board + '/index.html',
            cookies={'over18': '1'}, timeout=timeout
        ).content.decode('utf-8')
        first_page = re.search(r'href="/bbs/' + board + '/index(\d+).html">&lsaquo;', content)
        if first_page is None:
            return 1
        return int(first_page.group(1)) + 1

    @staticmethod
    def store(filename, data, mode):
        with codecs.open(filename, mode, encoding='utf-8') as f:
            f.write(data)

    @staticmethod
    def get(filename, mode='r'):
        with codecs.open(filename, mode, encoding='utf-8') as f:
            return json.load(f)

if __name__ == '__main__':
    c = PttWebCrawler()

Create a Python function to filter a dictionary that contains strings only. {'name': 'John', 'age': 20, 'likes': ['apple', 'banana']} def filterStringDict(input):
    result = {}
    for key, value in input.items():
        # Check if value is a string
        if isinstance(value, str):
            # Add to result
            result[key] = value
    return result
Construct a python program to check if two given strings are anagrams. String1: army
String2: mary def isAnagram(str1, str2):  
    n1 = len(str1)
    n2 = len(str2) 
    if n1 != n2: 
        return False
    str1 = ''.join(sorted(str1)) 
    str2 = ''.join(sorted(str2))  
    for i in range(n1):  
        if str1[i] != str2[i]:  
            return False
    return True
Create a GPT model that takes a Python program and outputs a C# program with the same functionality. Not applicable The GPT model could be used to convert between programming languages, such as from Python to C#. The model would be trained on pairs of programs written in two different languages with the same functionality. The model would then be used to automatically convert a Python program into the equivalent in C#.
Create a function in Python to convert a string to a list of words. "Hello, World!" def convert_to_list(string):
    return string.split()

string = "Hello, World!"
words_list = convert_to_list(string)
print(words_list)
Write a code in Python to print out every integer between 5 and 15 (inclusive).  for i in range(5, 16):
    print(i)
Create a python script to print the following output with the help of list and dictionary. {
    "Name": "Harry",
    "Age": 23,
    "Country": "India"
} name = {
    "Harry"
}
age = {
    23
}
country = {
    "India"
}

data_list = [name, age, country]

for item in data_list:
    print(item)
Given a data set of Twitter messages, write a Python code to get the most frequent words used in the messages. Data Set of Twitter Messages:

"Excited for the new year! #happynewyear"
"Christmas time is here! #christmastime"
"Wishing everyone a merry Christmas! #merrychristmas"
"Coding is so much fun!" import re
from collections import Counter

# Sample data set
data_set = ["Excited for the new year! #happynewyear",
            "Christmas time is here! #christmastime",
            "Wishing everyone a merry Christmas! #merrychristmas",
            "Coding is so much fun!"]

# Remove special characters
def remove_special_characters(messages):
    return [re.sub("[^A-z\s]", "", message) for message in messages]

# Get a list of all words
def get_words_from_list(messages):
    return [words.split(" ") for message in messages for
words in message]

# Calculate the frequency of the words
def get_frequency_from_words(words):
    return Counter(words)

words = get_words_from_list(remove_special_characters(data_set))
frequency = get_frequency_from_words(words)

# print the most frequent words
print("Most frequent words: ", frequency.most_common(3))

# Output
# Most frequent words: [('a', 2), ('for', 1), ('the', 1)]
Create a Python dictionary of 10 words and their corresponding definitions.  words = {
 'algorithm': 'a set of steps used to solve a specific problem',
 'function': 'a set of instructions that when followed produces the desired output',
 'string': 'a sequence of characters',
 'variable': 'a named value that will store data',
 'integer': 'a whole number',
 'float': 'a number with a decimal point',
 'boolean': 'true or false',
 'array': 'a data structure containing multiple values',
 'dictionary': 'a data structure containing key-value pairs',
 'loop': 'a construct used to iterate over a set of items'
}
Craft a program in Python to take in a list of integers, and return the sum of the even numbers in the list. [1, 2, 3, 4, 5] def sum_even(arr):
    '''
    Function to calculate the sum of even numbers in an array
    
    Parameters
    arr: list of integers
    
    Returns
    sum of even numbers in the array
    '''
    total = 0
    for num in arr:
        if num % 2 == 0:
            total += num
    return total
Create a program to detect a palindrome string in Python. original_string = "radar" # Function to check if a string is a palindrome
def is_palindrome(original_string):  
    reversed_string = original_string[::-1]  
    if original_string == reversed_string:
        return True 
    else:
        return False  
  
# Print result
print(is_palindrome(original_string))
Create a basic web scraper in Python that takes a URL as input and returns the text content of that URL. https://www.example.com import requests
from bs4 import BeautifulSoup

url = 'https://www.example.com'
response = requests.get(url)
soup = BeautifulSoup(response.text, 'html.parser')

text = soup.get_text()

print(text)
Write a Python program to webscrape the most popular movies from IMDB.  import requests 
from bs4 import BeautifulSoup

url = 'https://www.imdb.com/chart/moviemeter'

# Make a request to the url
r = requests.get(url)

# Parse the content of the request with BeautifulSoup
soup = BeautifulSoup(r.text, 'html.parser')

# Get all the movies listed
movies = soup.find_all('td', class_='titleColumn')

# Loop over each movie
for movie in movies:
    # Get the movie title
    title = movie.a.text
    # Get the release year
    year = movie.span.text[1:-1]
    # Print the title and year
    print(title + ' ('+year + ')')
This code downloads a file, gets host information, tests ping time latency to stash, and sends a record to a WSGI URL. To use this code, run the main function.  #!/usr/bin/env python
import urllib
import urllib2
import time
import getopt
import sys
import os
import timeit
import platform
import subprocess
import re

REFERENCE_URL = 'http://stash.osgconnect.net/+sthapa/100MB_ref'
WSGI_URL = 'http://web-dev.ci-connect.net/~sthapa/record_network_test.wsgi'

def download_file():
    """
    Download file and then remove it
    """  
    webref = urllib2.urlopen(REFERENCE_URL)
    foo = webref.read()

def get_host_info():
    """
    GET host information
    """
    host_info = {}
    if 'OSG_SITE_NAME' in os.environ:
        host_info['site'] = os.environ['OSG_SITE_NAME']
    elif 'GLIDEIN_RESOURCE_NAME' in os.env:
        host_info['site'] = os.envron['GLIDEIN_RESOURCE_NAME']
    host_info['hostname']  =  platform.node()    
    return host_info

def send_record(test_record = None):
    """
    Send record to wsgi 
    """
    if test_record is None:
        return
    try:
        temp = test_record.copy()
        if 'latency' in temp:
            del temp['latency']
        bandwidth_req = WSGI_URL + '?' + urllib.urlencode(temp)
        req = urllib2.urlopen(bandwidth_req)
        temp = test_record.copy()
        if 'bandwidth' in temp:
            del temp['bandwidth']
        latency_req = WSGI_URL + '?' + urllib.urlencode(temp)
        req = urllib2.urlopen(latency_req)
    except Exception, e:
        pass

def get_latency():
    """
    Test ping time latency to stash
    """
    try:
        ping_output = subprocess.check_output(['/bin/ping', '-c', '10', 'stash.osgconnect.net'])
    except AttributeError:
        process = subprocess.Popen(['/bin/ping', '-c', '10', 'stash.osgconnect.net'], stdout=subprocess.PIPE)
        ping_output = process.communicate()[0]
    ping_regex = re.compile(r'rtt.*=\s+[\d.]+/([\d.]+)')
    match = ping_regex.search(ping_output)
    if match:
        return float(match.group(1))
    return 0.0

def main():
    test_record = get_host_info()
    test_record['date'] = time.time()
    download_times = timeit.Timer('download_file()', "from __main__ import download_file").repeat(repeat = 5, number = 1)
    avg_time = 0.0
    records = 0
    for x in download_times:
        if x < 0.005:
            continue
        avg_time += x
        records += 1
    test_record['bandwidth']  = float(100 * 2**20) / (avg_time / float(records))
    test_record['latency'] = get_latency()
    send_record(test_record)

if __name__ == "__main__":
    main()

Create a class in Python that has a single method which takes a string as an input and returns the reversed version of the string. Not applicable class ReverseString:
 def __init__(self, string):
 self.string = string

 def reverse(self):
 return self.string[::-1]

string_object = ReverseString('hello')
reversed_string = string_object.reverse()

print(reversed_string) # olleh
Modify the existing python program to fulfill the following purpose Given a list of strings, find and print the most frequent string in the list. def most_frequent(lst):
    max = 0
    frequent = lst[0]
    for item in lst:
        freq = lst.count(item)
        if freq > max:
            max = freq
            frequent = item
    return frequent
Generate a python program to remove duplicate values in a given list. myList = [1, 2, 3, 2, 4, 5, 5] def remove_duplicates(myList):
    unique_list = []
    for item in myList:
        if item not in unique_list:
            unique_list.append(item)
    return unique_list

result = remove_duplicates(myList)
print(result)
In Python, write a program to generate the Fibonacci series up to n-th term. n = 10 def fibonacci(n): 
  
    a = 0
    b = 1
    if n < 0: 
        print("Incorrect input") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
        return b 
  
# Driver Program 
nterms = n 
  
# check if the number of terms is valid 
if nterms <= 0: 
   print("Please enter a positive integer") 
else: 
   print("Fibonacci sequence:")
   for i in range(nterms): 
       print(fibonacci(i))
Optimize a Python program for performing matrix multiplication.  def MatrixMultiplication(A, B): 
    # Dimensions of A 
    m = len(A) 
    p = len(A[0]) 
    # Dimensions of B 
    q = len(B) 
    r = len(B[0]) 
    # Generating the result matrix 
    # C with dimensions m x r 
    C = [[0 for row in range(0, r)] for col in range(0, m)] 
    for i in range(0, m): 
        for j in range(0, r): 
            for k in range(0, p): 
                # Performing the multiplication operation 
                C[i][j] += A[i][k] * B[k][j] 
    # Printing the result matrix 
    return C
Generate an appropriate Python program to calculate the future value of an investment with the given principal, rate of interest and years. Principal: 10000
Rate of interest: 10
Years: 5 # Calculate the Future Value of an Investment 
def future_value(principal, rate, years): 

# Calculate the total amount  
total_amount = principal * (1+(rate/100))**years

# return the future value
return round(total_amount,2)

# Testing 
print(future_value(10000,10,5))
Write a Python program to remove all the duplicates from a given list of numbers.  def remove_duplicates(numbers):
    return list(set(numbers))
Create a Python script to log the current date and time in the console.  import datetime

now = datetime.datetime.now()

print ('Current date and time: ', now)
Create a web scraper using Python to extract the title and price from an e-commerce website. An example page from an e-commerce website. import requests
from bs4 import BeautifulSoup

url = 'example.com'

# Send GET request
r = requests.get(url)

# Parse HTML
soup = BeautifulSoup(r.content, 'html.parser')

# Get item title
title = soup.find('h1', {'class': 'title'}).text.strip()

# Get item price
price = soup.find('span', {'class': 'price'}).get_text().strip()

print(title)
print(price)
Create a TicTacToe game in Python.  class TicTacToe:

def __init__(self):
    self.board = [['_' for _ in range(3)] 
                   for _ in range(3)]
    self.turn = 'x'
    
def display(self):
    for row in self.board:
        print(' '.join(row))

def check_win(self):
    board = self.board

    # check if the player with the current turn has a row of three
    for row in self.board:
        if row.count(self.turn) == 3:
            return True
        
    # check if the player with the current turn has a column of three
    for col in range(3):
        if board[0][col] == board[1][col] and board[1][col] == board[2][col] and board[2][col] == self.turn:
            return True
        
    # check for the two diagonals
    if board[0][0] == board[1][1] and board[1][1] == board[2][2] and board[2][2] == self.turn:
        return True
    if board[0][2] == board[1][1] and board[1][1] == board[2][0] and board[2][0] == self.turn:
        return True
    return False
Create an AI algorithm in Python to play the game of tic-tac-toe with limited depth.  import random

def get_available_positions(Board):
    available_positions = []
    for i in range(3):
        for j in range(3):
            if Board[i][j] == ' ':
                available_positions.append((i, j))
    return available_positions

def is_game_over(Board, depth):
    if depth == 0:
        return True

    for i in range(3):
        if (Board[i][0] == Board[i][1] == Board[i][2] and Board[i][0] != ' '):
            return True
        elif (Board[0][i] == Board[1][i] == Board[2][i] and Board[0][i] != ' '):
            return True
    if (Board[0][0] == Board[1][1] == Board[2][2] and Board[0][0] != ' ') or (Board[2][0] == Board[1][1] == Board[0][2] and Board[2][0] != ' '):
        return True

    available_positions = get_available_positions(Board)
    if len(available_positions) == 0:
        return True

    return False

def get_next_move(Board, player, depth):
    best_position = None
    best_score = float('-inf')
    if player == 'X':
        player2 = 'O'
    else:
        player2 = 'X'

    available_positions = get_available_positions(Board)

    for position in available_positions:
        Board[position[0]][position[1]] = player
        score = minimax(Board, player2, depth-1)
        Board[position[0]][position[1]] = ' '
        if score > best_score:
            best_score = score
            best_position = position
    return best_position

def minimax(Board, player, depth):
    if is_game_over(Board, depth):
        if player == 'X':
            return -1
        elif player == 'O':
            return 1
        else:
            return 0

    best_score = float('-inf')
    if player == 'X':
        player2 = 'O'
    else:
        player2 = 'X'
    available_positions = get_available_positions(Board)
    for position in available_positions:
        Board[position[0]][position[1]] = player
        score = minimax(Board, player2, depth-1)
        Board[position[0]][position[1]] = ' '
        best_score = max(score, best_score)
    return best_score

board = [[' ', ' ', ' '],
 [' ', ' ', ' '],
 [' ', ' ', ' ']]
player = 'X'
depth = 5

next_move = get_next_move(board, player, depth)
print(next_move)
Write a Python program that takes a list of strings as input and returns a string containing all the strings joined together in alphabetical order. ['apple', 'banana', 'orange'] def alphabetize_list(arr):
  arr.sort()
  return ' '.join(arr)

data = ['apple', 'banana', 'orange']
result = alphabetize_list(data)
print(result)
Refactor a Python function with a long code block, so that it has descriptive function names, is object-oriented, and more efficient. def long_code_block(input_a, input_b):
    result = 0
    for i in range(len(input_a)):
        for j in range(len(input_b)):
            if input_b[j] == input_a[i]:
                result = result + 1
    return result def count_matches(list_a, list_b):
    count = 0
    for item_a in list_a:
        for item_b in list_b:
            if item_b == item_a:
                count += 1
    return count
This code runs a series of tests on a device connected to a serial port. To use it, you need to provide the device name and baud rate as arguments. The code will then run a series of tests, printing the output of each test to the console. If a test fails, the code will print an error message and move on to the next test. To use this code, simply call the main() function.  #! /usr/bin/python

import serial, time
import subprocess
from subprocess import call, Popen
from argparse import ArgumentParser
import re

def do_test(port, baudrate, test_name):
    databits = serial.EIGHTBITS
    stopbits = serial.STOPBITS_ONE
    parity = serial.PARITY_NONE
    ser = serial.Serial(port, baudrate, databits, parity, stopbits, timeout=10)

    ser.write('\n\n')

    finished = 0
    success = False

    timeout = 10  # 10 seconds
    timeout_start = time.time()

    while finished == 0:
        serial_line = ser.readline()
        print(serial_line.replace('\n',''))

        if "nsh>" in serial_line:
            finished = 1

        if time.time() > timeout_start + timeout:
            print("Error, timeout")
            finished = 1
            break


    # run test
    ser.write('tests ' + test_name + '\n')
    time.sleep(0.05)

    finished = 0
    timeout = 300  # 5 minutes
    timeout_start = time.time()
    timeout_newline = time.time()

    while finished == 0:
        serial_line = ser.readline()
        print(serial_line.replace('\n',''))

        if test_name + " PASSED" in serial_line:
            finished = 1
            success = True
        elif test_name + " FAILED" in serial_line:
            finished = 1
            success = False

        if time.time() > timeout_start + timeout:
            print("Error, timeout")
            print(test_name + " FAILED")
            finished = 1
            success = False
            break

        # newline every 30 seconds if still running
        if time.time() - timeout_newline > 30:
            ser.write('\n')
            timeout_newline = time.time()

    ser.close()

    return success

def main():
    parser = ArgumentParser(description=__doc__)
    parser.add_argument('--device', "-d", nargs='?', default = None, help='')
    parser.add_argument("--baudrate", "-b", dest="baudrate", type=int, help="Mavlink port baud rate (default=57600)", default=57600)
    args = parser.parse_args()


    do_test(args.device, args.baudrate, "autodeclination")
    do_test(args.device, args.baudrate, "bezier")
    do_test(args.device, args.baudrate, "bson")
    do_test(args.device, args.baudrate, "commander")
    do_test(args.device, args.baudrate, "controllib")
    do_test(args.device, args.baudrate, "conv")
    do_test(args.device, args.baudrate, "ctlmath")
    #do_test(args.device, args.baudrate, "dataman")
    do_test(args.device, args.baudrate, "float")
    do_test(args.device, args.baudrate, "hrt")
    do_test(args.device, args.baudrate, "int")
    do_test(args.device, args.baudrate, "IntrusiveQueue")
    do_test(args.device, args.baudrate, "List")
    do_test(args.device, args.baudrate, "mathlib")
    do_test(args.device, args.baudrate, "matrix")
    do_test(args.device, args.baudrate, "microbench_hrt")
    do_test(args.device, args.baudrate, "microbench_math")
    do_test(args.device, args.baudrate, "microbench_matrix")
    do_test(args.device, args.baudrate, "microbench_uorb")
    #do_test(args.device, args.baudrate, "mixer")
    do_test(args.device, args.baudrate, "param")
    do_test(args.device, args.baudrate, "parameters")
    do_test(args.device, args.baudrate, "perf")
    do_test(args.device, args.baudrate, "search_min")
    do_test(args.device, args.baudrate, "sleep")
    do_test(args.device, args.baudrate, "smoothz")
    do_test(args.device, args.baudrate, "time")
    do_test(args.device, args.baudrate, "uorb")
    do_test(args.device, args.baudrate, "versioning")

if __name__ == "__main__":
   main()

Generate a Python function to sort a given integer array in ascending order. [7, 3, 5, 0, 2, 1] def sort_ascending(arr):
    # Iterate through list
    for i in range(len(arr)):
        # Iterate through remaining values
        for j in range(i + 1, len(arr)):
            # Swap two values if first is greater
            if arr[i] > arr[j]:
                arr[i], arr[j] = arr[j], arr[i]
    return arr
  
# example
arr = [7, 3, 5, 0, 2, 1]
arr = sort_ascending(arr)
print(arr)  # Output is [0, 1, 2, 3, 5, 7]
Generate a machine learning model in Python with Scikit-Learn to classify data into 3 categories.  #import necessary libraries
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, accuracy_score
from sklearn.svm import SVC

#load the dataset
dataset = datasets.load_iris()

#split the data into train and test datasets
x_train, x_test, y_train, y_test = train_test_split(dataset.data, dataset.target, 
                                                    test_size=0.2, random_state=42)

#build the model
svc = SVC()
svc.fit(x_train, y_train)

#predict for test data
y_pred = svc.predict(x_test)

#evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print('accuracy: ', accuracy)

print(classification_report(y_test, y_pred))
In Jupyter notebook, create a customized menu for quick access to all necessary resources, such as loading data, processing text, or visualizing data. Not applicable from IPython.utils.traitlets import 

class CustomMenu(IPython.config.configurable.Configurable):
    """A customizable menu container
    """
    def __init__(self):
        super(CustomMenu, self).__init__(config=None)
        self._buttons = []
 
    def add_button(self, label, action):
        """Add a new button to the menu
        """
        self._buttons.append((label,action))
 
    def _render_menu(self):
        """Renders the button
        """
        html = []
        for label, action in self._buttons:
            html.append('<a href="javascript:{}">{}</a>'.format(action,label))
        return '&nbsp;'.join(html)
 
    def _ipython_display_(self):
        """Renders the menubar
        """
        display(IPython.core.display.HTML(self._render_menu()))
Create a Python function to parse an HTML to extract all links from the content. Not applicable from BeautifulSoup import BeautifulSoup

def parseHtml(html):
    soup = BeautifulSoup(html)
    links = []
    for link in soup.findAll('a'):
        links.append(link.get('href'))
    return links
Create a function in Python to count the number of each letter in the sentence "Hello world, this is GPT!"  def countLetters(sentence): 
    counts = dict() 
    for c in sentence: 
        if c in counts: 
            counts[c] += 1
        else: 
            counts[c] = 1
  
    return counts
Develop a program which reverts a string without using reverse() Python def reverseString(str): 
  
    i = len(str) 
    rev_str = "" 
    while i > 0: 
        rev_str += str[i-1] 
        i = i-1
    return rev_str

str = "Python"
print("Original string: " + str)
print("Reversed string: " + reverseString(str))
Develop a Python class that stores the details of 10 students of a college and renders them in a tabular format.  class StudentDetails:
 def __init__(self):
  self.students=[]
 
 def add_student(self,name,age,roll):
  self.students.append({"name":name,"age":age,"roll":roll})
 
 def print_table(self):
  print("Name\tAge\tRoll")
  for s in self.students:
   print("{}\t{}\t{}".format(s['name'],s['age'],s['roll']))
Create a Python program to find the maximum and minimum of a given list of numbers using the divide-and-conquer approach. [5, 3, 8, 2, 10, 1] def find_max_min(lst):
    if len(lst) == 1:
        return lst[0], lst[0]
    
    elif len(lst) == 2:
        return max(lst), min(lst)
    
    mid = len(lst)//2
    left_max, left_min = find_max_min(lst[:mid])
    right_max, right_min = find_max_min(lst[mid:])

    return max(left_max, right_max), min(left_min, right_min)

max_num, min_num = find_max_min([5, 3, 8, 2, 10, 1])

print("The maximum number is", max_num)
print("The minimum number is", min_num)
Imagine a customer service application that is required to send customer feedback emails 5 days after customer services are opened. Which language / framework would you use to develop this application?  I would use a framework such as Python with the Django web framework as it is a powerful and easy to use web framework that has an excellent ecosystem of tools, libraries and functionalities. I would also use a library such as Celery which is a Python library for scheduling tasks and background jobs. This library allows you to schedule the emails to be sent at a specific point in time and this is the perfect use case.
Create an algorithm in Python to optimize the order of parallel computations so that the total time required to finish all computations is minimized. operations = { A: 10, B: 5, C: 15, D: 20 } # Compute the optimal order
def compute_optimal_order(operations):

    # Create a list to store the order.
    order = []

    # Sort the operations in ascending order by time.
    sorted_operations = sorted(operations.items(), key=lambda x: x[1])
 
    # Total time for the operations in the order.
    total_time = 0
 
    # Iterate through the operations.
    for operation in sorted_operations:
        operation_name = operation[0]
        operation_time = operation[1]
 
        order.append((operation_name, total_time))
 
        # Update the total time for the order.
        total_time += operation_time
 
    return order
 
operations = { A: 10, B: 5, C: 15, D: 20 }
 
optimal_order = compute_optimal_order(operations)

print(optimal_order)
# Output: [('B', 0), ('A', 5), ('C', 15), ('D', 30)]
Create a program in Python to determine the frequency of each letter in a given sentence.  sentence = "hello world"

freq = {} 
for i in sentence: 
	if i in freq: 
		freq[i] += 1
	else: 
		freq[i] = 1

# Print frequencies 
for key in freq.keys(): 
	print (key, ':', freq[key])
Write a Python function to convert an array of strings to a dictionary. ["John", "James", "Bubby", "Mary"] def string_to_dict(strings):
    return {string: len(string) for string in strings}
Generate an HTML table using Python. It should have 5 columns (name, age, country, profession and favourite food) and 10 rows with random data. Not applicable <html>
<head>
<title>
HTML Table
</title>
<style type="text/css">
    table, th, td {
    border: 1px solid black;
    }
</style>
</head>
<body>

<table>
    <tr>
        <th>Name</th>
        <th>Age</th>
        <th>Country</th>
        <th>Profession</th>
        <th>Favorite Food</th>
    </tr>
    <tr>
        <td>John</td>
        <td>30</td>
        <td>USA</td>
        <td>Software Engineer</td>
        <td>Pizza</td>
    </tr>
    <tr>
        <td>James</td>
        <td>25</td>
        <td>Australia</td>
        <td>Data Scientist</td>
        <td>Pancakes</td>
    </tr>
    <tr>
        <td>Jessica</td>
        <td>28</td>
        <td>Canada</td>
        <td>Software Developer</td>
        <td>Sushi</td>
    </tr>
    <tr>
        <td>Tina</td>
        <td>32</td>
        <td>France</td>
        <td>Web Developer</td>
        <td>Tacos</td>
    </tr>
    <tr>
        <td>David</td>
        <td>20</td>
        <td>Brazil</td>
        <td>App Developer</td>
        <td>Spaghetti</td>
    </tr>
    <tr>
        <td>Bob</td>
        <td>27</td>
        <td>Japan</td>
        <td>Full Stack Developer</td>
        <td>Ramen</td>
    </tr>
    <tr>
        <td>Caroline</td>
        <td>29</td>
        <td>Germany</td>
        <td>Game Developer</td>
        <td>Ice Cream</td>
    </tr>
     <tr>
        <td>Karen</td>
        <td>22</td>
        <td>India</td>
        <td>User Interface/Experience Designer</td>
        <td>Chocolate</td>
    </tr>
    <tr>
        <td>Edward</td>
        <td>33</td>
        <td>Singapore</td>
        <td>Software Architect</td>
        <td>Burgers</td>
    </tr>
    <tr>
        <td>Steven</td>
        <td>26</td>
        <td>China</td>
        <td>Software Tester</td>
        <td>Sandwiches</td>
    </tr> 
</table>

</body>
</html>
Create a loop in Python that prints numbers 1 to 10.  for i in range(1, 11):
    print(i)
Write a Python program to sum all the items in a list. list = [1,2,3,4,5] def sum_list_items(list):
    sum = 0
    for item in list:
        sum += item
    return sum

print(sum_list_items(list))
Write a Python program to add two numbers in base-10. num1 = 6, num2 = 8 def add_base10(num1, num2): 
    return num1 + num2
Write a Python 3 script that reads input from stdin line by line and prints the number of occurrences of each word. The quick brown fox jumps over the lazy dog import sys

dictionary={}

for line in sys.stdin:
 words_in_line = line.split()
 for word in words_in_line:
 word=word.lower()
 if word in dictionary:
 dictionary[word]+=1
 else:
 dictionary[word]=1

for word in dictionary:
 print(word +":"+ str(dictionary[word]))
Write a function in Python that takes two parameters, an integer and a list of strings, and returns a modified list of strings. int: 2 
list: ["Hello", "World"] def modified_list(num, lst):
    modified_list = []
    for item in lst:
        modified_list.append(str(num) + item)
    return modified_list
    
print(modified_list(2, ["Hello", "World"]))
# Output: ["2Hello", "2World"]
Convert this function from Python 2 to Python 3. def fib(n):
    """Print a Fibonacci series up to n"""
    result = []
    a, b = 0, 1
    while b < n:
        result.append(b)
        a, b = b, a+b
    return result def fib(n):
    """Print a Fibonacci series up to n"""
    result = []
    a = 0
    b = 1
    while b < n:
        result.append(b)
        tmp_a = a
        a = b
        b = tmp_a + b
    return result
Using the comment as guide, construct a python program that checks whether a given value is in a list Input List: [1, 2, 3, 4, 5]
Input Value: 3 def search_list(input_list, input_value):
    """Checks whether a given value is in a list"""
    for num in input_list:
        if num == input_value:
            return True
    return False
Create a Python program to generate 10 random numbers between 0 and 100, then print out the average. Not applicable import random

numbers = []
total = 0

#Generate 10 random numbers
for i in range(10):
    n = random.randint(0, 100)
    numbers.append(n)
    total += n

#Print the generated numbers
print("Generated numbers :")
for i in numbers:
    print(i)

#Calculate and print the average
average = total / len(numbers)
print("The average is:", average)
Write a Python program to convert all the lower case letters in a string to upper case. "hello World" print(''.join([i.upper() for i in "hello World"])) # HELLO WORLD
Write a Python script to generate a report in JSON format that summarizes the user data in a database. User table 
id: int 
name: varchar(50) 
gender: enum('male', 'female') 
age: int import json
import mysql.connector

# Connect to the database
mydb = mysql.connector.connect(
    host="localhost",
    user="user",
    passwd="password",
    database="db_name"
)

# Get data from the user table
mycursor = mydb.cursor()
mycursor.execute("SELECT * FROM user")
results = mycursor.fetchall()

# Generate a summary report
report = {}
report['report_name'] = 'User data summary'
report['summary'] = [{'Total': len(results), 'Male': 0, 'Female': 0, 'Average Age': 0}]
total_ages = 0

for result in results:
	if result[2] == 'male':
		report['summary'][0]['Male'] += 1
	else:
		report['summary'][0]['Female'] += 1

	total_ages += result[3]

if len(results) > 0:
	report['summary'][0]['Average Age'] = round(total_ages/len(results), 2)

# Output the report
print(json.dumps(report, indent=2))
Create a python script to find the last element of a given list. list = [1, 2, 3, 4, 5] def last_element(list):
    """Find the last element of a given list."""
    return list[-1]

# Usage Example 
list = [1, 2, 3, 4, 5]
last_element = last_element(list)
print(last_element)  # 5
Improve the efficiency of a Python program by using functions. arr = [1, 2, 3, 4, 5]

def calculate(arr):
    sum = 0
    for i in arr:
        sum += i
    print(sum)

calculate(arr) arr = [1, 2, 3, 4, 5]

def calculate(arr):
    return sum(arr)

def main():
    print(calculate(arr))

if __name__ == '__main__':
    main()
Write a Python script that takes a given string and finds the longest palindromic substring in it.  def longest_palindromic_substring(s): 
	n = len(s) 
	L = [[0 for x in range(n)] 
			for y in range(n)] 
	# All substrings of length 1 are palindromes 
	for i in range(n): 
		L[i][i] = 1

	# check all substring of length 2
	for cl in range(2, n + 1): 
		for i in range(n - cl + 1): 
			j = i + cl - 1
			if s[i] == s[j] and cl == 2: 
				L[i][j] = 2
			elif s[i] == s[j]: 
				L[i][j] = L[i + 1][j - 1] + 2
			else: 
				L[i][j] = max(L[i][j - 1],L[i + 1][j]); 

	# start position of the longest palindromic substring 
	start = 0
	length = 1
	for i in range(n): 
		if (length < L[i][n - 1]): 
			length = L[i][n - 1] 
			start = i 
	return s[start - length + 1:start + length] 

print(longest_palindromic_substring("abracadabra"))
Design a Python program to determine if a number is odd or even.  def is_even(num):
 if num % 2 == 0:
 return True
 else:
 return False

number = int(input("Enter a number: "))

if is_even(number):
 print("The number is even")
else:
 print("The number is odd")
Create a Python program that implements a bubble sort algorithm. A given list of numbers, for example, [4,7,2,9,1]. def bubble_sort(list):
 for x in range(len(list)-1, 0, -1):
  for y in range(x):
   if list[y] > list[y+1]:
    list[y], list[y+1] = list[y+1], list[y]
 
 return list

list = [4,7,2,9,1]
print(bubble_sort(list))
##
12. Instruction: Generate a Rust program to calculate the mean of relevant values in a list. 
12. Input:
A given list of integers, for example, [2,4,6,8,10].
12. Output:
fn main() {
 let nums = vec![2, 4, 6, 8, 10]; // given list
    
 let mut sum = 0;
 for num in &nums {
  sum += num;
 }
 let mean = sum / nums.len() as f32;
 
 println!("The mean of the list is {}", mean);
}
Write a function in Python that receives two numbers as parameters and returns the larger one  def larger_num(a, b):
    if a > b:
        return a
    else:
        return b
Design an object-oriented class in Python to represent a person's contact information Not applicable class Contact: 
    def __init__(self, name, phone, email):
        self.name = name 
        self.phone = phone
        self.email = email
    
    def get_name(self):
        return self.name
    
    def set_name(self, name):
        self.name = name
    
    def get_phone_number(self):
        return self.phone
    
    def set_phone_number(self, phone):
        self.phone = phone
    
    def get_email(self):
        return self.email
    
    def set_email(self, email):
        self.email = email
Generate a batch of X random numbers in Python using a for loop. X = 10 import random
numbers = []

for i in range(10):
 number = random.randint(1, 100)
 numbers.append(number)
 
print(numbers)
Write a function in Python to identify all the keywords present in a given sentence. Sentence: I like to eat apples def find_keywords(sentence):
 keywords = set()
 words = sentence.split(' ')
 for word in words:
  if word.iskeyword():
   keywords.add(word)
 return list(keywords)
Create a Python function to convert a list of strings into a dictionary of the form {string: count}. myList = [‘a’, ‘a’, ‘b’, ‘c’] def list_to_dict(myList):
 dict = {}
 for val in myList:
  if val in dict:
   dict[val] += 1
  else:
   dict[val] = 1
 return dict

myList = ['a', 'a', 'b', 'c']
print(list_to_dict(myList))

# Output: 
# {'a': 2, 'b': 1, 'c': 1}
Generate a Python program to print a square matrix of size n containing the numbers from 11 to n*n. 3 n = 3

output_matrix = [[0 for x in range(n)] for y in range(n)] 
  
num = 1
  
for i in range (0, n):    
 for j in range(0, n):     
 output_matrix[i][j] = num    
 num = num + 1    
  
for i in range(0, n):
 for j in range(0, n):
 print(output_matrix[i][j], end = " ")
 print("")
Create a regular expression in Python to match the following words: "apple", "banana", "strawberry", "orange".  import re

words_regex = re.compile(r"apple|banana|strawberry|orange")
Implement an algorithm in Python to reverse a given string.  def reverse_string(string): 
    return string[::-1]
Create an algorithm in python that calculates the sum of squares of all the numbers from 1 to N. N = 10 def sum_of_squares(n):
    result = 0
    for i in range(n+1):
        result += i**2
    return result
How can you generate a random number between 1 to 10 using Python?  import random

random.seed()

print(random.randint(1, 10))
Write an algorithm to sort an array of integers in Python. [2,1,3,4,6,5] def bubble_sort(nums):
    size = len(nums)
    for i in range(size):
        for j in range(size-1):
            if nums[j] > nums[j+1]:
                temp = nums[j]
                nums[j] = nums[j+1]
                nums[j+1] = temp
    return nums

print(bubble_sort([2,1,3,4,6,5]))
Convert a string into a valid python program that prints the string on the terminal. Hello World! print('Hello World!')
Generate a Python function to validate a credit card billing address. Credit card billing address example

Ann Smith
1234 Main St.
Anytown, CA 99999 def validate_billing_address(address):
    # Split address into individual elements
    street, city_state_zip = address.split("\n")

    # Check street element
    if not street:
        return False
    
    # Check city_state_zip element
    elements = city_state_zip.split(",")
    if len(elements) != 2:
        return False
    city, state_zip = elements
    state, zip = state_zip.split(" ")
    if len(zip) != 5 or not zip.isdigit():
        return False
    
    return True
Create a Python function to optimize a given function towards a minimum  def optimize_function(function):
    # Perform optimization
    return min_value
Create a class in Python to represent a car and its properties such as make, model, color, number of wheels etc. Not applicable class Car():
    #initialize car
    def __init__(self, make, model, color, wheels):
        self.make = make
        self.model = model
        self.color = color
        self.wheels = wheels
    
    #string representation
    def __str__(self):
        return '{}, {}, {}, {}'.format(self.make, self.model, self.color, self.wheels)
Create a model in Python using Linear Regression that can predict the housing prices given the living area and number of rooms. data = [[2000, 3], [1600, 2.5], [2400, 3.5], [1400, 2], [3000, 4]] import numpy as np
from sklearn import linear_model

X = np.array([[2000, 3], [1600, 2.5], [2400, 3.5], [1400, 2], [3000, 4]])
y = np.array([75000, 43000, 59000, 32000, 85000])

model = linear_model.LinearRegression()
model.fit(X, y)

prediction = model.predict([[2200, 3]])
Create a web scraper using Python and Beautiful Soup to extract Twitter data. Not applicable import requests
from bs4 import BeautifulSoup

# load the Twitter page
url = 'https://twitter.com/'
response = requests.get(url)
soup = BeautifulSoup(response.text, 'html.parser')

# extract the tweets
tweets = [tweet.text for tweet in soup.find_all('p', {'class': 'TweetTextSize TweetTextSize--normal js-tweet-text tweet-text'})]

# print the tweets
for tweet in tweets:
 print(tweet)
Generate a Python program that calculates standard deviation of a set of numbers. [20, 25, 30, 35, 40] def std_dev(data_set):
    mean = sum(data_set) / len(data_set)
    total_sum = 0
    for i in data_set:
        total_sum += (i - mean) ** 2
    variance = total_sum / len(data_set)
    std_dev = variance ** (1/2)
    return std_dev

data_set = [20, 25, 30, 35, 40]
print("Standard Deviation: " + str(std_dev(data_set)))
Create a Python script to make an HTTP request and parse the JSON response. The API URL is https://www.example.com/api/v1/data import requests 
  
# api-endpoint 
URL = "https://www.example.com/api/v1/data"
  
# location given here 
  
# sending get request and saving the response as response object 
r = requests.get(url = URL) 
  
# extracting data in json format 
data = r.json() 
  
# extracting latitude, longitude and formatted address  
# of the first matching location 
# latitude = data['results'][0]['geometry']['location']['lat'] 
# longitude = data['results'][0]['geometry']['location']['lng'] 
# formatted_address = data['results'][0]['formatted_address'] 
  
# printing the output 
# print("Latitude:%s\nLongitude:%s\nFormatted Address:%s"
#       %(latitude, longitude,formatted_address))
Write a code in Python to check whether an input string ends with "ing" or not.  def endswith_ing(input_string):
    return input_string.endswith('ing')

if __name__ == '__main__':
    my_string = "Greeting"
    is_ending_with_ing = endswith_ing(my_string)
    print("Does the string end with 'ing'? -> " + str(is_ending_with_ing))
Can you make the following string lowercase using Python? "This is a TEST string!" """
Make the given string lowercase using Python
"""

test_string = "This is a TEST string!"

lowercase_string = test_string.lower()

print(lowercase_string) # prints "this is a test string!"
Create a algorithm in Python to convert any given number to binary form.  def toBinary(n): 
    if (n > 1): 
        toBinary(n//2) 
    print(n%2,end = '') 
 
# Driver Code 
num = 8
toBinary(num)
Create a set of Python functions to manipulate strings: one to reverse a string and one to capitalize a string.  def reverseString(s): 
    return s[::-1] 
  
def capitalizeString(s):
    return s.capitalize()
Generate a Python algorithm to convert an integer to a given base.  def conv_to_base(number, base):
 # Base case
 if number == 0:
 return ""
 
 # Convert the given number
 remainder = number % base
 
 return conv_to_base(number // base, base) + str(remainder)
Identify the type of object a Python expression will evaluate to. expression = 8 + 5 Integer.
Create a Python program to generate all the possible permutations of a given array. [1, 2, 3] def permutations(arr):
    if len(arr) == 0:
        return [] 
  
    if len(arr) == 1:
        return [arr]

    l = [] 
    
    for i in range(len(arr)):
       m = arr[i]
       remLst = arr[:i] + arr[i+1:]
       for p in permutations(remLst):
           l.append([m] + p)
    return l
Develop a Python program that encrypts a given string using 'Caeser Cipher' string = 'Hello World' def caesarCipherEncryptor(string, key):
  newLetters = []
  newKey = key % 26
  for letter in string:
   newLetters.append(getNewLetter(letter, newKey))
  return ''.join(newLetters)
 
def getNewLetter(letter, key):
   newLetterCode = ord(letter) + key
   return chr(newLetterCode) if newLetterCode <= 122 else chr(96 + newLetterCode % 122)
Generate a Python program which converts a given number of hours into minutes 20 def hours_to_minutes(hours):
    minutes = hours * 60
    return minutes

minutes = hours_to_minutes(20)
print(minutes)
Write a code snippet for a search algorithm in Python with linear time complexity. Not applicable def linear_search(arr, x): 
    
    for i in range(len(arr)): 
  
        if arr[i] == x: 
            return i 
  
    return -1
Write a Python program to generate a JSON string of five popular dog breeds.  import json

dog_breeds = {
  "Labrador Retriever": {
    "Origin": "United Kingdom",
    "Temperament": "Friendly",
    "Life Expectancy": "12-13 years"
  },
  "French Bulldog": {
    "Origin": "France",
    "Temperament": "Adaptable",
    "Life Expectancy": "10-12 years"
  },
  "Siberian Husky": {
    "Origin": "Russia",
    "Temperament": "Outgoing, Cheerful",
    "Life Expectancy": "12-14 years"
  },
  "Pug": {
    "Origin": "China",
    "Temperament": "Playful, Charming",
    "Life Expectancy": "12-15 years"
  },
  "Bulldog": {
    "Origin": "England",
    "Temperament": "Friendly",
    "Life Expectancy": "10-12 years"
  }
}

print(json.dumps(dog_breeds, indent=4))
Generate a Python program to generate an HTML table from a list of dictionaries.  def html_from_dict(data):
    '''
    This function creates an HTML table from list of dictionaries.
    Each dictionary represents one row in the table.
    '''

    html = '<table>'
    html += '<tr>'
    
    # table headings
    data_keys = list(data[0].keys())
    for key in data_keys:
        html += '<th>' + str(key) + '</th>'
    html += '</tr>'

    # table content
    for row in data:
        html += '<tr>'
        for key in data_keys:
            html += '<td>' + str(row[key]) + '</td>'
        html += '</tr>'
    
    html += '</table>'
    
    return html
Write a Python program that takes a single integer as input and prints out the table of its multiplication.  def print_table(n):
    for i in range(1, 11):
        print('{0} x {1} = {2}'.format(n ,i , n*i))

print_table(4)
Create a Python program to compute the sum of all integers from 1 to n. Provide n: 10 # compute sum of all numbers from 1 to n
def compute_sum(n):
 sum = 0
 
 for i in range(1, n+1):
 sum += i
 
 return sum
 
print(compute_sum(10))
Write a Python program to select rows with score greater than 8 from the given Pandas DataFrame. data = { 'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],
'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],
'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes'] } import pandas as pd

# Create a DataFrame from given data
data = { 'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],
'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],
'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}

df = pd.DataFrame(data)

# Select rows with score greater than 8
df_selected = df[df['score'] > 8]

# Print dataframe
print(df_selected)
Implement a basic machine learning model in Python that performs binary classification on the given data. [
 [0.3, 0.2, 0.6],
 [0.3, 0.1, 0.4],
 [0.2, 0.3, 0.4],
 [0.7, 0.4, 0.2],
 [0.5, 0.2, 0.1]
] from sklearn import linear_model
from sklearn.metrics import accuracy_score

X = [[0.3, 0.2, 0.6], [0.3, 0.1, 0.4], [0.2, 0.3, 0.4], [0.7, 0.4, 0.2], [0.5, 0.2, 0.1]]
y = [1, 0, 0, 1, 0]

model = linear_model.LogisticRegression()
model.fit(X, y)

y_pred = model.predict(X)
accuracy = accuracy_score(y, y_pred)

print('Model accuracy:', accuracy)
Create a program to generate unique 5-digit IDs in Python. Not applicable import random

def generate_id():
 # Generate a list of 5 random integers between 0-9
 digits = [random.randint(0, 9) for i in range(5)]
 
 # Convert the list of numbers to a string
 unique_id = "".join(str(digit) for digit in digits)
 
 # Return the unique ID
 return unique_id

# Generate a unique ID
unique_id = generate_id()
print(unique_id)
Create a function to calculate the midpoint between two 3-dimensional points using Python. point1 = [35.0, 43.0, 81.0]
point2 = [82.0, 54.0, 19.0] def midpoint3D(point1, point2): 
    x_mid = (point1[0] + point2[0]) / 2
    y_mid = (point1[1] + point2[1]) / 2
    z_mid = (point1[2] + point2[2]) / 2
    return [x_mid, y_mid, z_mid]

point1 = [35.0, 43.0, 81.0]
point2 = [82.0, 54.0, 19.0]
midpoint = midpoint3D(point1, point2)
print(midpoint) # [58.5, 48.5, 50.0]
Construct a Python program to print all the numbers between 0 and a given number n that are divisible by 3.  def print_divisible_by_three(n):
  for num in range(n+1):
    if num % 3 == 0:
      print(num, end=" ")

print_divisible_by_three(10)
Write a code to perform Principal Component Analysis (PCA) in Python. Data set: <noinput> from sklearn.decomposition import PCA

# create PCA object
pca = PCA(n_components=None)

# fit the object with the data
pca.fit(data)

# transform the data into lower dimension
pca_data = pca.transform(data)

# variance of each PC
pca.explained_variance_ratio_
Write a function to return the first n prime numbers in Python. Number of Prime Numbers needed: 5 def firstPrimeNumbers(number): 
    primeNumbers = [] 
  
    for num in range(1, number + 1): 
 
        if (num > 1): 
            for i in range(2, num): 
                if (num % i == 0): 
                    break
            else: 
                primeNumbers.append(num)
    return primeNumbers
  
# Test code 
prime = firstPrimeNumbers(5) 
print(prime)
Generate a code to print the stack trace in Python when an exception occurs.  import traceback

try:
    # some code that might generate exceptions
    pass
except Exception as e:
    print(traceback.format_exc())
Create a Python program to determine whether a given number is prime or not. Number: 47 def is_prime(num):
    if num > 1:
        for i in range(2,int(num**0.5)+1):
            if (num % i) == 0:
                return False
    else:
        return False
    return True

num = 47
if (is_prime(num)):
    print(num,"is a prime number")
else:
    print(num,"is not a prime number")
Create a machine learning program using Python to predict values from a linear regression model.  import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Generate some random data
x = np.random.randint(0,100,20)
y = np.random.randint(0,100,20)

# Plotting the points
plt.plot(x, y, "ro")

# Generating the linear regression model
#X = X1.reshape(-1, 1)
X = np.array(x).reshape(-1, 1)

# Create linear regression object
from sklearn.linear_model import LinearRegression
reg = LinearRegression()

#Train the model using the data
reg = reg.fit(X, y)

#Calculate the coefficient
print("Coefficient: ", reg.coef_[0])

#Prediction
predicted = reg.predict(np.array(x).reshape(-1, 1))
print("Predicted Values: ", predicted)
Optimize a Python script that prints the nth Fibonacci number n = 10 # Function to calculate nth Fibonacci number 
def Fibonacci(n): 
	# Declare and initiate first two numbers 
	f1 = 0
	f2 = 1
	if n < 0: 
		print("Incorrect input")
		return
	elif n == 0: 
		return f1
	elif n == 1: 
		return f2
	else: 
		# Use for loop iterate till nth number 
		for i in range(2, n): 
			next = f1 + f2 
			f1 = f2 
			f2 = next 
		return f2 

# Driver program to test above function 
print(Fibonacci(10))
Create a web application in Python using Flask that prints out the number of unique visitors for the site. Not applicable from flask import Flask, session, render_template

app = Flask(name)
app.secret_key = 'secret_key'

@app.route('/')
def index():
 if 'visits' not in session:
  session['visits'] = 0
 session['visits'] += 1
 return render_template('index.html', visits=session['visits'])

if name == 'main':
 app.run(debug=True)
Create a function that takes in a string and evaluates it according to Python's syntax rules. String: "2+3*4" def evaluate_string(str):
 try:
 result = eval(str)
 return result
 except SyntaxError:
 return "Syntax Error"
Write a Python program to classify the type of an angle based on the measure of the angle. angle = 180 def classify_angle(angle):
  if angle == 0:
    return "Zero angle"
  elif angle > 0 and angle < 90:
    return "Acute angle"
  elif angle == 90:
    return "Right angle"
  elif angle > 90 and angle < 180:
    return "Obtuse angle"
  elif angle == 180:
    return "Straight angle"

result = classify_angle(angle)
Create a natural language processing understanding system in Python to interpret user input in the form of natural language. Not applicable import numpy as np
import re

# tokenize user input
def tokenize(sentence):
    return re.findall('[\d\w]+', sentence.lower())

# create a dictionary to hold the words and their respective vectors
word2vec = {}

# add words and vectors to the dictionary
word2vec['hello'] = np.array([1,2,3,4])
word2vec['world'] = np.array([2,3,4,5])

# create a function to get the word vector corresponding to the user input
def word_vector(sentence):
    words = tokenize(sentence)
    
    # if the word is in our dictionary, return the corresponding vector
    if words in word2vec:
        return word2vec[words]
    
    # otherwise, return a vector of zeroes
    else:
        return np.zeros((1, len(word2vec[words])))

# create a function to parse a user's input
def parse_user_input(sentence):
    words = tokenize(sentence)
    
    # get the corresponding vector for each word in the sentence
    vectors = [word_vector(word) for word in words]
    
    # return an average of all the vectors 
    return np.mean(vectors, axis=0)
Write a python code to find all numbers in a given string, and print them out. "There are 45.8 apples and 12.3 oranges." import re

string = "There are 45.8 apples and 12.3 oranges."
numbers = re.findall(r"[-+]?\d*\.\d+|\d+", string)
print(numbers)

# Output: ['45.8', '12.3']
This code is a controller for a differential drive. To use it, you need to create an instance of the DiffController class, passing in the device and name as arguments. Then, call the startup() method to initialize the controller. Finally, call the update() method in a loop to update the controller and handle movement requests. The cmdVelCb() method can be used to handle movement requests. The shutdown() method can be called to stop the controller. The getDiagnostics() method can be used to get a diagnostics status.  #!/usr/bin/env python

"""
  diff_controller.py - controller for a differential drive
  Copyright (c) 2010-2011 Vanadium Labs LLC.  All right reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:
      * Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.
      * Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.
      * Neither the name of Vanadium Labs LLC nor the names of its 
        contributors may be used to endorse or promote products derived 
        from this software without specific prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL VANADIUM LABS BE LIABLE FOR ANY DIRECT, INDIRECT,
  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

import rospy

from math import sin,cos,pi

from geometry_msgs.msg import Quaternion
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
from diagnostic_msgs.msg import *
from tf.broadcaster import TransformBroadcaster

from ax12 import *
from controllers import *
from struct import unpack

class DiffController(Controller):
    """ Controller to handle movement & odometry feedback for a differential 
            drive mobile base. """
    def __init__(self, device, name):
        Controller.__init__(self, device, name)
        self.pause = True
        self.last_cmd = rospy.Time.now()

        # parameters: rates and geometry
        self.rate = rospy.get_param('~controllers/'+name+'/rate',10.0)
        self.timeout = rospy.get_param('~controllers/'+name+'/timeout',1.0)
        self.t_delta = rospy.Duration(1.0/self.rate)
        self.t_next = rospy.Time.now() + self.t_delta
        self.ticks_meter = float(rospy.get_param('~controllers/'+name+'/ticks_meter'))
        self.base_width = float(rospy.get_param('~controllers/'+name+'/base_width'))

        self.base_frame_id = rospy.get_param('~controllers/'+name+'/base_frame_id', 'base_link')
        self.odom_frame_id = rospy.get_param('~controllers/'+name+'/odom_frame_id', 'odom')

        # parameters: PID
        self.Kp = rospy.get_param('~controllers/'+name+'/Kp', 5)
        self.Kd = rospy.get_param('~controllers/'+name+'/Kd', 1)
        self.Ki = rospy.get_param('~controllers/'+name+'/Ki', 0)
        self.Ko = rospy.get_param('~controllers/'+name+'/Ko', 50)

        # parameters: acceleration
        self.accel_limit = rospy.get_param('~controllers/'+name+'/accel_limit', 0.1)
        self.max_accel = int(self.accel_limit*self.ticks_meter/self.rate)

        # output for joint states publisher
        self.joint_names = ["base_l_wheel_joint","base_r_wheel_joint"]
        self.joint_positions = [0,0]
        self.joint_velocities = [0,0]

        # internal data            
        self.v_left = 0                 # current setpoint velocity
        self.v_right = 0
        self.v_des_left = 0             # cmd_vel setpoint
        self.v_des_right = 0
        self.enc_left = None            # encoder readings
        self.enc_right = None
        self.x = 0                      # position in xy plane
        self.y = 0
        self.th = 0
        self.dx = 0                     # speeds in x/rotation
        self.dr = 0
        self.then = rospy.Time.now()    # time for determining dx/dy

        # subscriptions
        rospy.Subscriber("cmd_vel", Twist, self.cmdVelCb)
        self.odomPub = rospy.Publisher("odom", Odometry, queue_size=5)
        self.odomBroadcaster = TransformBroadcaster()
		
        rospy.loginfo("Started DiffController ("+name+"). Geometry: " + str(self.base_width) + "m wide, " + str(self.ticks_meter) + " ticks/m.")

    def startup(self):
        if not self.fake:
            self.setup(self.Kp,self.Kd,self.Ki,self.Ko) 
    
    def update(self):
        now = rospy.Time.now()
        if now > self.t_next:
            elapsed = now - self.then
            self.then = now
            elapsed = elapsed.to_sec()

            if self.fake:
                x = cos(self.th)*self.dx*elapsed
                y = -sin(self.th)*self.dx*elapsed
                self.x += cos(self.th)*self.dx*elapsed
                self.y += sin(self.th)*self.dx*elapsed
                self.th += self.dr*elapsed
            else:
                # read encoders
                try:
                    left, right = self.status()
                except Exception as e:
                    rospy.logerr("Could not update encoders: " + str(e))
                    return
                rospy.logdebug("Encoders: " + str(left) +","+ str(right))

                # calculate odometry
                if self.enc_left == None:
                    d_left = 0
                    d_right = 0
                else:
                    d_left = (left - self.enc_left)/self.ticks_meter
                    d_right = (right - self.enc_right)/self.ticks_meter
                self.enc_left = left
                self.enc_right = right

                d = (d_left+d_right)/2
                th = (d_right-d_left)/self.base_width
                self.dx = d / elapsed
                self.dr = th / elapsed

                if (d != 0):
                    x = cos(th)*d
                    y = -sin(th)*d
                    self.x = self.x + (cos(self.th)*x - sin(self.th)*y)
                    self.y = self.y + (sin(self.th)*x + cos(self.th)*y)
                if (th != 0):
                    self.th = self.th + th

            # publish or perish
            quaternion = Quaternion()
            quaternion.x = 0.0 
            quaternion.y = 0.0
            quaternion.z = sin(self.th/2)
            quaternion.w = cos(self.th/2)
            self.odomBroadcaster.sendTransform(
                (self.x, self.y, 0), 
                (quaternion.x, quaternion.y, quaternion.z, quaternion.w),
                rospy.Time.now(),
                self.base_frame_id,
                self.odom_frame_id
                )

            odom = Odometry()
            odom.header.stamp = now
            odom.header.frame_id = self.odom_frame_id
            odom.pose.pose.position.x = self.x
            odom.pose.pose.position.y = self.y
            odom.pose.pose.position.z = 0
            odom.pose.pose.orientation = quaternion
            odom.child_frame_id = self.base_frame_id
            odom.twist.twist.linear.x = self.dx
            odom.twist.twist.linear.y = 0
            odom.twist.twist.angular.z = self.dr
            self.odomPub.publish(odom)

            if now > (self.last_cmd + rospy.Duration(self.timeout)):
                self.v_des_left = 0
                self.v_des_right = 0

            # update motors
            if not self.fake:
                if self.v_left < self.v_des_left:
                    self.v_left += self.max_accel
                    if self.v_left > self.v_des_left:
                        self.v_left = self.v_des_left
                else:
                    self.v_left -= self.max_accel
                    if self.v_left < self.v_des_left:
                        self.v_left = self.v_des_left
                
                if self.v_right < self.v_des_right:
                    self.v_right += self.max_accel
                    if self.v_right > self.v_des_right:
                        self.v_right = self.v_des_right
                else:
                    self.v_right -= self.max_accel
                    if self.v_right < self.v_des_right:
                        self.v_right = self.v_des_right
                self.write(self.v_left, self.v_right)

            self.t_next = now + self.t_delta
 
    def shutdown(self):
        if not self.fake:
            self.write(0,0)

    def cmdVelCb(self,req):
        """ Handle movement requests. """
        self.last_cmd = rospy.Time.now()
        if self.fake:
            self.dx = req.linear.x        # m/s
            self.dr = req.angular.z       # rad/s
        else:
            # set motor speeds in ticks per 1/30s
            self.v_des_left = int( ((req.linear.x - (req.angular.z * self.base_width/2.0)) * self.ticks_meter) / 30.0)
            self.v_des_right = int( ((req.linear.x + (req.angular.z * self.base_width/2.0)) * self.ticks_meter) / 30.0)

    def getDiagnostics(self):
        """ Get a diagnostics status. """
        msg = DiagnosticStatus()
        msg.name = self.name
        msg.level = DiagnosticStatus.OK
        msg.message = "OK"
        if not self.fake:
            msg.values.append(KeyValue("Left", str(self.enc_left)))
            msg.values.append(KeyValue("Right", str(self.enc_right)))
        msg.values.append(KeyValue("dX", str(self.dx)))
        msg.values.append(KeyValue("dR", str(self.dr)))
        return msg

    ###
    ### Controller Specification: 
    ###
    ###  setup: Kp, Kd, Ki, Ko (all unsigned char)
    ###
    ###  write: left_speed, right_speed (2-byte signed, ticks per frame)
    ###
    ###  status: left_enc, right_enc (4-byte signed)
    ### 
    
    def setup(self, kp, kd, ki, ko):
        success = self.device.execute(253, AX_CONTROL_SETUP, [10, kp, kd, ki, ko])

    def write(self, left, right):
        """ Send a closed-loop speed. Base PID loop runs at 30Hz, these values
                are therefore in ticks per 1/30 second. """
        left = left&0xffff
        right = right&0xffff
        success = self.device.execute(253, AX_CONTROL_WRITE, [10, left%256, left>>8, right%256, right>>8])

    def status(self):
        """ read 32-bit (signed) encoder values. """
        values = self.device.execute(253, AX_CONTROL_STAT, [10])
        left_values = "".join([chr(k) for k in values[0:4] ])        
        right_values = "".join([chr(k) for k in values[4:] ])
        try:
            left = unpack('=l',left_values)[0]
            right = unpack('=l',right_values)[0]
            return [left, right]
        except:
            return None


Create a Python function to check whether a number is divisible by another number or not. number1 = 15 
number2 = 3 def is_divisible(number1, number2):
   return number1 % number2 == 0
Write a Python function to identify the longest word in a given list of strings.  def longest_word(word_list):
 longest_word = word_list[0]
 for word in word_list:
 if len(word) > len(longest_word):
 longest_word = word
 return longest_word
Create an algorithm in Python to classify 2-dimensional data points as either "positive" or "negative". Example data points: (1, 5), (2, 3), (3, 4) import numpy as np

# Define the data points
points = np.array([[1, 5], [2, 3], [3, 4]])

# Define the labels
labels = np.array([1, -1, -1])

# Define the parameters of the algorithm
b = 0
w0 = 0
w1 = 0
learning_rate = 0.001

# Define the training loop
for i in range(100):
 pred = w0 + w1 * points[:, 0] > b
 loss = np.mean((labels - pred) ** 2)
 dloss_dw0 = 2 * np.mean(points[:, 0] * (labels - pred))
 dloss_dw1 = 2 * np.mean(points[:, 1] * (labels - pred))
 dloss_db = 2 * np.mean(labels - pred)
 
 # update parameters
 w0 = w0 + learning_rate * dloss_dw0
 w1 = w1 + learning_rate * dloss_dw1
 b = b + learning_rate * dloss_db

# Define the prediction function
def predict(x):
 pred = w0 + w1 * x > b
 
 if pred:
 return "Positive"
 else:
 return "Negative"
Create a python — django application that allows user to register and login.  #!/usr/bin/env python3

import os

from django.contrib.auth.hashers import make_password
from django.http import HttpResponse
from django.shortcuts import render

# Create your views here.
def register(request):
    if request.method == 'POST':
        user_name = request.POST['username']
        password = request.POST['password']
        confirm_password = request.POST['confirm_password']

        if password != confirm_password:
            return HttpResponse('Passwords do not match')

        users = User.objects.all()
        if user_name in users:
            return HttpResponse('Username already taken')

        # Store hashed password
        password = make_password(password)
        user = User.objects.create(username=user_name, password=password)
        user.save()
        return render(request, 'user_login.html')

    else:
        return render(request, 'user_registration.html')
Implement a Python function to generate the Fibonacci sequence of a given length. 6 def generate_fibonacci(length):
    # Initialize
    n1, n2 = 0, 1

    # Check if length is valid
    if length <= 0:
        print('Invalid length. Positive numbers only.')
    elif length == 1:
        print(n1)
    else:
        print(n1, n2, end=' ')
    
    # Generate sequence
    for i in range(2, length):
        n3 = n1 + n2
        print(n3, end=' ')
        n1 = n2
        n2 = n3

# Show output
generate_fibonacci(6)
# Output: 0 1 1 2 3 5
Generate code that will use the AWS SDK for Python to create an S3 bucket. bucket-name: mybucket import boto3

# Create an S3 client
s3 = boto3.client('s3')

# Create an S3 bucket
response = s3.create_bucket(
    Bucket='mybucket',
    CreateBucketConfiguration={
    'LocationConstraint': 'us-east-1'
    }
)

print(response)
Create a Python program that takes two strings as input and finds if they are anagrams. "listen", "silent" def is_anagram(str1, str2):
    if(len(str1) != len(str2)): 
        return False

    str1 = sorted(str1) 
    str2 = sorted(str2) 
  
    for i in range(0, len(str1)):
        if(str1[i] != str2[i]): 
            return False
    return True


str1 = "listen"
str2 = "silent" 

if(is_anagram(str1, str2)): 
    print("The strings are anagrams of each other")
else: 
    print("The strings are not anagrams of each other")
Generate a Python program to print out the even numbers from a given list. [1, 2, 3, 4, 5, 6, 7, 8, 9] list = [1,2,3,4,5,6,7,8,9] 

for num in list: 
    if num % 2 == 0: 
       print(num, end = " ")
This task is to write an AI-based chatbot in Python to answer customer queries. Query: Can I get a refund if my product is defective? import nltk
from nltk.stem import WordNetLemmatizer 
lemmatizer = WordNetLemmatizer()

# Define a function for processing the user query
def process_message(message):
    # Split the query into separate words 
    tokens = nltk.word_tokenize(message)
    
    # Lemmatize each word 
    tokens = [lemmatizer.lemmatize(token) for token in tokens]
    
    # Return the list of lemmatized tokens 
    return tokens

# Define the answer function
def answer_query(query):
    # Process the message
    tokens = process_message(query)
    
    # Check if the query includes the word "refund"
    if 'refund' in tokens:
        # Return the message 
        return 'Yes, you can get a refund if your product is defective.'
    
    # Return the message 
    return 'Sorry, I can\'t answer that question.'
Write a Python program to identify if the number provided is an Armstrong number or not. Number: 1634 def isArmstrongNumber(num):
 
    order = len(str(num))
    result = 0
 
    # calculate the sum of nth power of every digit
    temp = num
    while(temp > 0):
        digit = temp % 10
        result += digit ** order
        temp //= 10
 
    # check if sum is equal to the given num
    if (result == num):
        return True
    else:
        return False
 
num = int(input("Enter a number: "))
if (isArmstrongNumber(num)):
    print(num, "is an Armstrong number")
else:
    print(num, "is not an Armstrong number")
Create a Python program to compare two lists and return their intersection list1 = [1,2,3,4,5]
list2 = [4,5,6,7,8] def intersection(list1, list2):
    intersection = [value for value in list1 if value in list2]
    return intersection

list1 = [1,2,3,4,5]
list2 = [4,5,6,7,8]
result = intersection(list1, list2)
print(result) # prints [4,5]
Produce an actionable item for the following task. Create a web application Create a web application using HTML, CSS, and JavaScript. Design the interface and develop the functionality of the application. Implement backend features using a server-side language such as Python or Node.js.
Write a Python script to process the string "This is a sample string". The script should remove all the duplicate consecutive words, without changing the order of words.  new_string = []
prev_word = ''
for word in "This is a sample string".split():
    if word != prev_word:
        new_string.append(word)
    prev_word = word
print(' '.join(new_string))
Write a Python method that takes a list of strings as an argument and returns a list of the words which are the same length as the longest word in the list. my_list = ["apple", "kiwi", "banana", "mango"] def same_length(words):
 longest = max([len(word) for word in words])
 longest_words = [word for word in words if len(word) == longest]
 return longest_words

print(same_length(my_list))
# Output: ["apple", "banana", "mango"]
Generate a python program to find the shortest path between two given nodes  def find_path(start, end, graph):
    # Initialize an empty list to store path
    path = []
    # Initialize a queue with start node
    q = [start]
    # Initialize a visited list
    visited = set()

    # Iterate until we get to the end node
    while q:
        node = q.pop(0)
        if node == end:
            path.append(node)
            return path
        elif node not in visited:
            visited.add(node)
            for neighbour in graph[node]:
                q.append(neighbour)
                path.append(node)
    return path
Design a Python program to remove all the elements from a list that are not a prime number. [1, 2, 3, 4, 5, 6, 7, 8] def remove_non_primes(my_list):
    result = []
    for num in my_list:
        prime = True
        for i in range(2, num):
            if num % i == 0:
                prime = False
                break
        if prime:
            result.append(num)
    return result

result = remove_non_primes([1, 2, 3, 4, 5, 6, 7, 8])
print(result)
Write a Python program to sort a list of dictionaries using a custom key. lst = [{'name': 'Tim', 'age': 20}, {'name': 'Bob', 'age': 10}, {'name': 'Chris', 'age': 30}] sorted_list = sorted(lst, key = lambda x: x['name'])
print(sorted_list)
Create a basic web scraper in Python to parse HTML. <p>This is some text</p><a href='www.example.com/'>Click Here</a> #import library
import bs4

#store HTML data
html_data = '<p>This is some text</p><a href='www.example.com/'>Click Here</a>'

#parse HTML data
soup = bs4.BeautifulSoup(html_data, 'html.parser')

#get all tags
all_tags = soup.find_all()

#print result
for tag in all_tags:
 print(tag)
Create a function in Python to find all elements in a list that are negative, and print them. list = [-3, 0, 5, -9, 8] def find_negatives(l):
  negative_numbers = []
  for num in l:
    if num < 0:
      negative_numbers.append(num)
  print(negative_numbers)

find_negatives(list) # prints [-3, -9]
Suppose you have a dictionary of books with each containing a title and a list of page numbers that refer to the page numbers of the book. Write a Python program to create a new dictionary with only the page numbers as the keys, and their corresponding titles as the values. book_dict = {
    "The Lord of the Rings": [1, 32, 54, 75], 
    "Harry Potter and the Sorcerer's Stone": [1, 26, 92, 132], 
    "To Kill a Mockingbird": [1, 15, 52, 101] 
} page_dict = {
    1: ["The Lord of the Rings", "Harry Potter and the Sorcerer's Stone", "To Kill a Mockingbird"],
    32: ["The Lord of the Rings"],
    54: ["The Lord of the Rings"],
    75: ["The Lord of the Rings"],
    26: ["Harry Potter and the Sorcerer's Stone"],
    92: ["Harry Potter and the Sorcerer's Stone"],
    132: ["Harry Potter and the Sorcerer's Stone"],
    15: ["To Kill a Mockingbird"],
    52: ["To Kill a Mockingbird"],
    101: ["To Kill a Mockingbird"]
}
Implement a function in Python to round a number up to 0 decimal places. 19.876 def roundUp(x):
    return int(round(x))

print(roundUp(19.876))
Train a machine learning model in Python using the scikit-learn library to predict animal classification. Not applicable # import libraries
from sklearn import datasets
from sklearn.ensemble import RandomForestClassifier

# load the dataset
dataset = datasets.load_iris()

# create the model
model = RandomForestClassifier()

# train the model
model.fit(dataset.data, dataset.target)

# make predictions
predictions = model.predict(dataset.data)

# check accuracy
accuracy = model.score(dataset.data, dataset.target)

print('Accuracy: {}%'.format(accuracy * 100))
Create a Python program to calculate the customer's total purchase amount from a list of items and amounts. The list of items and amounts:

item1: 10
item2: 20
item3: 30 items = [
 {'name': 'item1', 'amount': 10},
 {'name': 'item2', 'amount': 20},
 {'name': 'item3', 'amount': 30},
]

total = 0

for item in items:
 total += item['amount']

print(f"Total: {total}") # Output: Total: 60
Generate a Python program that can verify if a given sentence is correct or misspelled. The sentence: "This is my new computer" import re

def spell_check(sentence):
  words = re.findall(r'\w+', sentence)
  for word in words:
    if not word.lower() in dict:
        return False
  return True

sentence = "This is my new computer"
result = spell_check(sentence)
if result:
    print('Correct spelling')
else:
    print('Incorrect spelling')
Write a Python program that takes two numbers and prints their multiplication table.  def multiplicationTable(a, b):
    for i in range(1, b+1):
        print("{} x {} = {}".format(a, i, a * i))


multiplicationTable(9, 10) #prints a multiplication table for 9 and 10
Generate Python code to add 1 to every element of an array. [5, 6, 8, 9, 10] def add_one(arr): 
    for i in range(len(arr)): 
        arr[i] += 1 
    return arr
Construct a for loop in Python to generate the sequence [0, 1, 2, 3, 4, 5, 6, 7, 8].  for i in range(9):
    print(i)
Modify the given code such that a python list of strings is created based on the input. lst = [1, 2, 3] lst_strs = []
for i in lst:
    lst_strs.append(str(i))
Write a function in Python to convert a base 10 number to a base 2 number. 72 def base10_to_base2(n):
    
    # Create an empty list to hold the binary representation of the number
    base2 = []
    
    # Divide the number by 2 and keep track of the remainder
    while n > 0:
        remainder = n % 2
        n = n // 2
        base2.insert(0, remainder)
    
    return ''.join([str(x) for x in base2])

num = 72

base2_num = base10_to_base2(num)

print("Base 2 Representation: ", base2_num)
Convert this code from Java to Python. public static void main(String[] args) {
    int i;
    for (i = 0; i < 5; i++) {
        System.out.println("Hello world!");
    }
} for i in range(5):
    print("Hello world!")
Create a Python program to capture the data from a web page. https://www.example.com/ import requests
import lxml.html as lh

url = 'https://www.example.com/'
page = requests.get(url)
doc = lh.fromstring(page.content)

# parse and extract data from webpage
data = doc.xpath('//p/text()')
Write a Python program to calculate the value of the expression 2x^2 + 5x + 3 for x = 3. Not applicable x = 3
result = 2*(x**2) + 5*x + 3

print(result)

# Outputs: 34
Edit the following code to improve its readability given the Python coding standards. def fact(num):
     if num==0: return 1
     else:
       p=1
       for i in range(1,num+1):
        p*=i
       return p def factorial(num):
    # Check for special cases
    if num == 0:
        return 1
    else:
        # Initialize the value of product
        product = 1
        # Multiply each number from 1 to num
        for i in range(1, num + 1):
            product *= i
        # Return the product
        return product
Write a Python program that takes a dataset as input and calculates the sum, mean and median of the data. DataSet = [1, 5, 8, 9, 12, 17, 20] s=73
mean=10.428571
median=9
 
# Program to calculate the sum,mean,median of the data
 
dataset = [1,5,8,9,12,17,20]
 
# calculate the sum
s = 0
for items in dataset:
    s = s + items
 
# calculate mean
mean = s/len(dataset)
 
# calculate median
dataset_sorted = sorted(dataset)
m_m = len(dataset_sorted)
 
if m_m%2 == 0:
    # n is even
    m1 = dataset_sorted[int(m_m/2) - 1]
    m2 = dataset_sorted[int((m_m/2))]
    median = (m1 + m2)/2
else:
    # n is odd
    median = dataset_sorted[int((m_m+1)/2 - 1)]
 
# display the results
print("sum:", s)
print("mean:", mean)
print("median:", median)
Create a for-loop in Python to print out all the characters in the string “Hello World!” Not applicable myString = "Hello World!"
for x in myString:
  print(x)
Create a Python program to edit a string and remove the vowels from it. Hello world def remove_vowels(string):
    vowels = "aeiouAEIOU"
    result = ""
    for character in string: 
        if character not in vowels: 
            result += character
    return result
  
print (remove_vowels("Hello world"))
Analyze the time complexity of an algorithm written in Python. def bubble_sort(arr):
    n = len(arr)
 
    # Traverse through all array elements
    for i in range(n):
 
        # Last i elements are already in place
        for j in range(0, n-i-1):
 
            # traverse the array from 0 to n-i-1
            # Swap if the element found is greater
            # than the next element
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j] This algorithm has a time complexity of O(n2). This is due to the nested for loop which means that the runtime of the algorithm is proportional to the square of the size of the input. Consequently, the time complexity increases exponentially with the input size.
What is the Python code to display the top five random numbers in the range [1, 15] N/A import random

for _ in range(5):
    print(random.randint(1, 15))
Generate a Python script to convert a given address into its equivalent latitude and longitude coordinates. Tokyo Tower, Tokyo import requests
import json

def get_lat_long_from_address(address):
    """
    Converting a given address into its equivalent latitude and longitude coordinates.
    """
    try:
        url = 'https://maps.googleapis.com/maps/api/geocode/json?address=%s' % address
        response = requests.get(url).json()

        geography = response['results'][0]['geometry']
        latitude = geography['location']['lat']
        longitude = geography['location']['lng']
        return latitude, longitude
    except:
        return None

lat, lng = get_lat_long_from_address("Tokyo Tower, Tokyo")
print("Latitude: %.06f \t Longitude: %.06f" % (lat, lng))
Modify a Python function to safely divide a number by another number.  def safe_divide(x, y):
    # Check for valid arguments
    if y == 0:
        raise ValueError('Cannot divide by zero')
    # Perform the division
    return x/y
Write a Python program to generate a random password. The program should include at least two types of characters (numbers and symbols) and the length of the password should be between 8 and 16. Not applicable import random
import string

def generate_password():
    chars = string.ascii_lowercase + string.digits + string.punctuation
    size = random.randint(8, 16)
    return ''.join(random.choice(chars) for _ in range(size))

print(generate_password())
Create a Python script to categorize the following list of words. carpet, chair, table, floor words = ["carpet", "chair", "table", "floor"]

categories = {}
for word in words:
    if word in ["carpet"]:
        categories["furnishing"] = categories.get("furnishing", []) + [word]
    elif word in ["chair", "table"]:
        categories["furniture"] = categories.get("furniture", []) + [word]
    elif word in ["floor"]:
        categories["flooring"] = categories.get("flooring", []) + [word]
    else:
        categories["other"] = categories.get("other", []) + [word]

print(categories)
Using OOP paradigm, create a Python class for a character in a role-playing game.  class Character:
    def __init__(self,name,hp,mp,strength,intelligence,dexterity):
        self.name = name
        self.hp = hp
        self.mp = mp
        self.strength = strength
        self.intelligence = intelligence
        self.dexterity = dexterity
        
    def print_stats(self):
        print(f"Name: {self.name} \nHP: {self.hp} \nMP: {self.mp} \nStrength: {self.strength} \nIntelligence: {self.intelligence} \nDexterity: {self.dexterity}")
Write a Python program to determine the median of three numbers. 6, 8, 4 def median(num1, num2, num3): 
  
    if (num1 > num2): 
        if (num3 > num1): 
            median = num1 
        elif (num3 > num2): 
            median = num3
        else: 
            median = num2
    else: 
        if (num3 > num2): 
            median = num2
        elif (num3 > num1): 
            median = num3
        else: 
            median = num1
    return median

print("Median is: " + str(median(6, 8, 4)))
Construct a function in Python to determine if a tree is a BST or not.  def isBST(root): 
  
    # An empty tree is BST 
    if root is None: 
        return True
  
    # Check recursively that  
    # all the nodes follow BST property 
    inOrder = isBSTUtil(root, float("-inf"),  
                                float("inf")) 
                  
    # Return result 
    return inOrder 
  
# Retusn True if the given tree is BST. Else return False 
def isBSTUtil(root, mini, maxi): 
      
    # Base case 
    if root is None: 
        return True
  
    # False if this node violates the min/max constraint 
    if root.data < mini or root.data > maxi: 
        return False
  
    # Otherwise check the subtrees recursively  
    # tightening the min or max constraint 
    return (isBSTUtil(root.left, mini, root.data-1) and
          isBSTUtil(root.right, root.data+1, maxi))
Implement a bubble sort in Python.  def bubble_sort(lst):
    for i in range(len(lst)-1,0,-1):
        for j in range(i):
            if lst[j] > lst[j+1]:
                lst[j], lst[j+1] = lst[j+1], lst[j]
    return lst
Generate code for a Python class that contains functions to add and remove elements from a list.  class MyList:
    def __init__(self):
        self.elements = []

    def add_element(self, element):
        self.elements.append(element)

    def remove_element(self, index):
        del self.elements[index]
Create a Python function to find the maximum number from a list of non-negative integers. list = [1, 3, 12, 5, 8, 10] def find_max(list): 
  max_num = 0
  for i in list: 
    if i > max_num: 
      max_num = i
  
  return max_num

list = [1, 3, 12, 5, 8, 10]
max_num = find_max(list)
print("Maximum number is:", max_num)
Create a program in Python to print all numbers divisible by 7 and not multiple of 5 between 2000 and 3200 (both included).  for num in range(2000, 3201):
    if (num % 7 == 0) and (num % 5 != 0):
        print(num)
Create and display a multiplication table of 7 using a Python program.  #Create and display a multiplication table of 7
 
#print table header
print(' 7 x Table')
  
#print table column header
print('  7  |  14  |  21  |  28  |  35  |  42  |  49  |  56  |')
  
#print table row
for num in range(1,10):
    row_num = 7 * num
    print(f'{row_num:4}  |', end=' ')
    
print()
Write a Python program that calculates the total amount of a particular item in a list. list = [{ "item": "apple", "quantity": 5, "price": 2 }, 
        { "item": "bread", "quantity": 2, "price": 3 }] def total_amount(lst): 
 
    # Initializing total 
    total = 0
 
    # Iterate through each dictionary 
    # and calculate total  
    for dic in lst: 
        total += (dic['quantity'] * dic['price']) 
 
    # Returning total 
    return total 
 
# Driver Code 
lst = [{ "item": "apple", "quantity": 5, "price": 2 }, 
        { "item": "bread", "quantity": 2, "price": 3 }] 
print("Total Amount :", total_amount(lst))
Generate an optimized machine learning model in Python that predicts the price of a house given a set of features. Features: square_feet, bedrooms, bathrooms, location (zipcode) import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error 

#Loading the dataset
data = pd.read_csv('house_pricing.csv')
X = data[['square_feet', 'bedrooms', 'bathrooms', 'location']]
y = data['price']

#Splitting the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=2020)

#Training the model
model = LinearRegression()
model.fit(X_train, y_train)

#Evaluating the model
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)

#Optimizing the model
optimized_model = LinearRegression(normalize = True)
optimized_model.fit(X_train, y_train)

#Evaluating the optimized model
y_pred_opt = optimized_model.predict(X_test)
mse_opt = mean_squared_error(y_test, y_pred_opt)

#Printing results
print('Mean Squared Error (Unoptimized) : {:.4f}'.format(mse))
print('Mean Squared Error (Optimized) : {:.4f}'.format(mse_opt))
Write a Python program to design a game of tic-tac-toe. N/A # Create Tic-Tac-Toe game

# Initialize board
board = ['-' for x in range(9)]

# Function to choose marker
def chose_marker():
    marker = ''

    while marker != 'X' and marker != 'O':
        marker = input('Player 1 - Do you want to be X or O? ').upper()

    if marker == 'X':
        return ('X', 'O')
    else:
        return ('O', 'X')

# Function to display board
def display_board():
    print('   |   |')
    print(' ' + board[0] + ' | ' + board[1] + ' | ' + board[2])
    print('   |   |')
    print('-----------')
    print('   |   |')
    print(' ' + board[3] + ' | ' + board[4] + ' | ' + board[5])
    print('   |   |')
    print('-----------')
    print('   |   |')
    print(' ' + board[6] + ' | ' + board[7] + ' | ' + board[8])
    print('   |   |')

# Function to check if the game is won
def win_check(mark):
    return ((board[0] == mark and board[1] == mark and board[2] == mark) or
    (board[3] == mark and board[4] == mark and board[5] == mark) or 
    (board[6] == mark and board[7] == mark and board[8] == mark) or
    (board[0] == mark and board[3] == mark and board[6] == mark) or 
    (board[1] == mark and board[4] == mark and board[7] == mark) or 
    (board[2] == mark and board[5] == mark and board[8] == mark) or
    (board[0] == mark and board[4] == mark and board[8] == mark) or 
    (board[2] == mark and board[4] == mark and board[6] == mark))

# Function to check if board is full
def is_board_full():
    if '-' in board:
        return False
    else:
        return True

# Function to take player inputs
def take_input(mark):
    position = 0

    while position not in range(1,10) or board[position-1] != '-':
        position = int(input('Choose your position (1-9): '))
    
    board[position-1] = mark

# Main function
def play_game():
    print('Welcome to tic-tac-toe!')

    # initialize the board and player markers
    board_init()

    player_marker, bot_marker = choose_marker()
    turn = 'Player 1'
    over = False

    while not over:
        if turn == 'Player 1':

            # Display board
            display_board()

            # Take player 1 input
            take_input(player_marker)

            # Check if player won
            if win_check(player_marker):
                display_board()
                print('Congratulations! You won!')
                over = True
            else:
                if is_board_full():
                    display_board()
                    print('The game is a draw!')
                    break
                else:
                    turn = 'Player 2'

        else:
            # Take player 2 input
            take_input(bot_marker)

            # Check if bot won
            if win_check(bot_marker):
                display_board()
                print('Player 2 has won!')
                over = True
            else:
                if is_board_full():
                    display_board()
                    print('The game is a draw!')
                    break
                else:
                    turn = 'Player 1'

#Main function
play_game()
Write a Python program to print a frequency table for the given data. data = [2, 4, 7, 1, 6, 4, 7, 2, 6, 3] from collections import Counter

data = [2, 4, 7, 1, 6, 4, 7, 2, 6, 3]

counts = Counter(data)

for item, count in counts.items():
    print(f'{item} : {count}')

# Output
# 2 : 2
# 4 : 2
# 7 : 2
# 1 : 1
# 6 : 2
# 3 : 1
Write a Python algorithm for determining if a string has all unique characters. "abcde" # Algorithm for determining if a string has all unique characters

# 1. Initialize an empty set
s = set()

# 2. Iterate through characters of the string
for character in string:
  # 3. Check if character is in the set
  if character in set:
    # 4. Return False if character is in the set
    return False
  else:
    # 5. Add character to set if it is not in the set
    s.add(character)

# 6. Return True
return True
Create a function in python to generate a multiplication table for a given number n.  def generate_multiplication_table(n):
    table = []
    for i in range(1, n+1):
        row = []
        for j in range(1, n+1):
            row.append(i * j)
        table.append(row)
    return table
Create a program that returns the number of the occurrences of an element in the given list nums = [1, 2, 3, 2, 3, 2, 4] # Python 3 program to count the number of occurrences 
# of an element in the given list

# function to count the number of occurrences 
def countOccurrences(nums, query):
    count = 0
    for num in nums:
        if query == num:
            count = count + 1
    return count

# Driver code 
nums = [1, 2, 3, 2, 3, 2, 4]

# Function Call
query = 2
print("{0} occurs {1} times".format(query, countOccurrences(nums, query)))
Write a Python script to write another program that performs the given task. Write a program that calculates the factorial of a number. def create_factorial_program():
    program = 'def factorial(n):\n'
    program += '    if n < 0:\n'
    program += '        return None\n'
    program += '    elif n == 0:\n'
    program += '        return 1\n'
    program += '    else:\n'
    program += '        return n * factorial(n - 1)'
    return program
Model sentiment analysis task as a machine learning problem.  Create a Python program that can classify movie reviews or other texts as either positive or negative sentiment. The program should utilize a machine learning model, such as a recurrent neural network with a word-embedding layer, or a logistic regression with a bag-of-words vectorizer to classify the text. The model should be trained on a labeled dataset and be tested for accuracy on a held-out test set.
Design and write a Python code for finding out the longest common substring in two given strings. String1: "apple pie"
String2: "maple syrup" def LongestCommonSubstring(str1, str2): 
    m = len(str1)
    n = len(str2)
    table = [[0 for x in range(n+1)] for x in range(m+1)] 
    length = 0
    row = 0
    col = 0   
    for i in range(1, m + 1): 
        for j in range(1, n + 1): 
            if (str1[i-1] == str2[j-1]): 
                table[i][j] = table[i-1][j-1]+1 
                if (table[i][j] > length): 
                    length = table[i][j] 
                    row = i 
                    col = j 
            else: 
                table[i][j] = 0
    result = ""
    for k in range(row - length + 1, row + 1): 
        result = result + str1[k-1] 
    print(result) 

# Executing the function
String1 = "apple pie"
String2 = "maple syrup"  
LongestCommonSubstring(String1, String2)
Develop a program that alters and returns a given string. string: "Python is fun!" """
Develop a program that alters and returns a given string
"""

def alter_string(string):

    # alter the original string 
    string_altered = string.replace("!", "?")

    return string_altered

if __name__ == '__main__':
    string = "Python is fun!"
    print(alter_string(string))
Create a Flask API in Python that takes in text as input and prints out the lemmas of each word. Not applicable from flask import Flask, request
from nltk.stem import WordNetLemmatizer

app = Flask(__name__)

@app.route("/lemmas", methods=['POST'])
def lemmas():
    text = request.form["text"]
    lemmatizer = WordNetLemmatizer()
    words = text.split(" ")
    lemmas = [lemmatizer.lemmatize(word) for word in words]
    return " ".join(lemmas)
    
app.run(debug=True)
Can you create a Python program that compares two lists and finds common elements? list1 = [3, 4, 5, 6, 7]
list2 = [2, 3, 4, 5, 6] list1 = [3, 4, 5, 6, 7]
list2 = [2, 3, 4, 5, 6]

common_elements = set(list1) & set(list2)
print(list(common_elements)) 
# Output: [3, 4, 5, 6]
Create a Selenium test automation script in Python for verifying a user login. Not applicable from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

driver = webdriver.Chrome()
driver.get('https://www.example.com/login')

username_field = driver.find_element_by_name('username')
password_field = driver.find_element_by_name('password')

username_field.send_keys('example_username')
password_field.send_keys('example_password')

driver.find_element_by_xpath("//button[text()='Log in']").click()

WebDriverWait(driver, 10).until_not(EC.url_changes('https://www.example.com/login'))

assert driver.current_url == 'https://www.example.com/home'
Create a Python program to join two strings together. string1 = "Hello,"
string2 = "World!" def join_strings(string1, string2):
    return string1 + string2
Write a Python function to find all possible n-letter words from a given list of letters. ["a","b","c"], n = 2 def find_words_length_n(letters, n):
    words = set()
    for combo in itertools.combinations_with_replacement(letters, n):
        for perm in itertools.permutations(combo):
            words.add("".join(perm))
    return words

words = find_words_length_n(["a","b","c"], 2)
print(words)
Create a python program to check the following string for palindrome "madam" def check_palindrome(string):
  rev_str = string[::-1]
  if rev_str == string:
    return "The string is a palindrome"
  return "The string is not a palindrome"

print(check_palindrome("madam"))
Develop an algorithm to identify palindromes using regular expression in Python.  import re

def is_palindrome(s):
    pattern = r'^[a-zA-Z0-9]*$'
    if re.match(pattern, s):
        return s == s[::-1]
    else:
        return False
Create a k-means clustering algorithm in Python that can group a set of data into k clusters. Not applicable import numpy as np

def k_means(data, k):
 centroids = np.random.uniform(low=np.min(data), high=np.max(data), size=(k, data.shape[1]))
 distances = np.zeros(shape=(data.shape[0], k))
 cluster_labels = np.zeros(shape=data.shape[0])

 while True:
  # Calculate distances between data points and centroids
  for i in range(k):
   distances[:, i] = np.linalg.norm(data - centroids[i], axis=1)

  # Assign clusters
  cluster_labels = np.argmin(distances, axis=1)

  # Compute new centroids
  new_centroids = np.zeros(shape=centroids.shape)
  for i in range(k):
   new_centroids[i] = np.mean(data[cluster_labels == i], axis=0)

  # Check for convergence
  if np.allclose(centroids, new_centroids):
   break

  # Update centroids for next iteration
  centroids = new_centroids

 return centroids, cluster_labels
Write a python program that takes a list of numbers and converts them to strings. [1, 2, 3, 4] new_list = []
for i in range(0, len(list)):
    new_list.append(str(list[i]))
Implement a logistic regression algorithm in Python to solve a classification task. Not applicable import numpy as np

class LogisticRegression:
    def __init__(self, learning_rate=0.001, max_iter=1000):
        self.learning_rate = learning_rate
        self.max_iter = max_iter
        self.weights = None

    def sigmoid(self, z):
        return 1 / (1 + np.exp(-z))


    def fit(self, X, y):
        # add bias term to X
        X = np.hstack([np.ones([X.shape[0], 1]), X])
        num_features = X.shape[1]
        self.weights = np.zeros(num_features)

        for _ in range(self.max_iter):
            # compute the linear combination of the input and weights (z)
            z = np.dot(X, self.weights)
            # compute the model output (a)
            a = self.sigmoid(z)
            # compute the cost of the model output
            cost = (-y * np.log(a) - (1 - y) * np.log(1 - a)).mean()
            # compute the derivatives of the cost for each weights
            dCost_dw = np.dot(X.T, (a - y)) / len(y)
            # update weights
            self.weights -= self.learning_rate * dCost_dw

    def predict(self, X):
        # add bias term to X
        X = np.hstack([np.ones([X.shape[0], 1]), X])
        z = np.dot(X, self.weights)
        a = self.sigmoid(z) 
        return np.round(a)
Generate a random 5x5 matrix consisting of numerical entries in Python. Not applicable import numpy as np

random_matrix = np.random.randint(1, 100, size=(5, 5))
print(random_matrix)
Can you design an algorithm in Python to optimize the given array order? [10, 40, 70,30, 20] def optimize_array(array):
    # Create an empty list
    new_arr = []

    # Initialize subtracted sum and maximum element
    max_element = array[0]
    sums = 0

    # Iterate through given array
    for i in range(len(array)):
        # Calculate sums and find new maximum element
        sums += array[i]
        if max_element < array[i]:
            max_element = array[i]

        # Append subtracted sum and maximum element to new array
        new_arr.append(max_element - sums)

    return new_arr

array1 = [10, 40, 70,30, 20]

optimized_array = optimize_array(array1)

print(optimized_array)
Can you generate a python program to print out the nth Fibonacci number?  def fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print("Incorrect input") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2, n): 
            c = a + b 
            a = b 
            b = c 
        return b 

print(fibonacci(n))
Create a python class that generates a multiplication quiz.  class MultiplicationQuiz:
    def __init__(self, num_questions):
        self.num_questions = num_questions
    
    def generate_quiz(self):
        # Generate num_questions random questions 
        for _ in range(self.num_questions):
            num1 = random.randint(1, 12)
            num2 = random.randint(1, 12)
            print(f'What is {num1} x {num2}?')

# Test
quiz = MultiplicationQuiz(10)
quiz.generate_quiz()
Generate a program in Python to extract all numbers from a given string string = "The 3 monkeys had 2 apples" import re

def extract_numbers(string): 
    numbers = re.findall('\d+', string)
    return numbers

string = "The 3 monkeys had 2 apples"
print(extract_numbers(string))
Generate a Python script to classify a dataset of features into two classes [height, weight, shoe_size, age, gender] # Import necessary libraries
import numpy as np
from sklearn import tree

# Create the two classes
class_1 = [1, 0]
class_2 = [0, 1]

# Initialize the dataset of features
data_set = np.array([ 
    [172, 80, 10, 28, 0],
    [188, 78, 11, 33, 0],
    [150, 55, 8, 21, 1],
    [170, 68, 9, 22, 1],    
])

# Initialize the labels
labels = np.array([class_1, class_2, class_2, class_1])

# Create the decision tree classifier
clf = tree.DecisionTreeClassifier()
clf = clf.fit(data_set, labels)

# Create a prediction
prediction = clf.predict([[187,77,11,34,0]])

# Output the prediction
if prediction == class_1: 
    print("Prediction: Class 1")
elif prediction == class_2:
    print("Prediction: Class 2")
Generate a Python program to check whether a given string is a palindrome or not.  def is_palindrome(text):
    return text == text[::-1]
Create a function in Python that prints out all prime numbers between 1 and a given number.  def print_primes(n):
  for num in range(2, n + 1):
      isPrime = True
      for i in range(2, num):
          if (num % i == 0):
              isPrime = False
      if isPrime:
          print(num)
Generate a Python class to store employee details. Employee Name: John Doe
Employee Number: 001
Designation: Manager
Salary: $5000 class Employee:
 
 def __init__(self, name, number, designation, salary):
  self.name = name
  self.number = number
  self.designation = designation
  self.salary = salary
 
 def get_name(self):
  return self.name
 
 def get_number(self):
  return self.number
 
 def get_designation(self):
  return self.designation
 
 def get_salary(self):
  return self.salary
Rewrite the following python program using list comprehension list = ['apple', 'banana', 'cat', 'dog', 'elephant']
new_list = []
for x in list:
    new_list.append(x.upper()) list = ['apple', 'banana', 'cat', 'dog', 'elephant']
new_list = [x.upper() for x in list]
Create a web scraper in Python to scrape the homepage of a website.  import requests
from bs4 import BeautifulSoup

url = 'https://example.com/'
page = requests.get(url)
soup = BeautifulSoup(page.content, 'html.parser')

# Scraping code goes here
# e.g. page_title = soup.find('h1').contents
Write a Python program to enter two integers as arguments and calculate the sum of them. Two integers def calculate_sum(num1, num2):
    sum = num1 + num2
    return sum

num1 = int(input('Enter first number: '))
num2 = int(input('Enter second number: '))

result = calculate_sum(num1, num2)
print('The sum of the two numbers is:', result)
Develop a model in Python to predict the price of a house given its size, age, and number of bedrooms.  """Develop a model in Python to predict the price of a house given its size, age, and number of bedrooms."""

import numpy as np
import pandas as pd
from sklearn.metrics import mean_squared_error
from sklearn.linear_model import LinearRegression

# Load the data
data = pd.read_csv('houses_data.csv')

# Split the data into features and labels 
features = data[['size','age','num_bedrooms']]
labels = data['price']

# Build the model and train it
model = LinearRegression()
model.fit(features,labels)

# Make predictions
predictions = model.predict(features)

# Calculate the mean squared error
print(mean_squared_error(labels, predictions))
Write a Python program to access a value from a nested dictionary given its keys.  def nested_dict_value(dictionary, keys): 
 for key in keys: 
 if key in dictionary.keys(): 
 dictionary = dictionary[key] 
 else: 
 return None
 
 return dictionary

data = {
"first" : {
"second" : {
"third" : 10
}
}
}

result = nested_dict_value(data, ["first", "second", "third"])
print(result)
Create a Python program to find the first five positive numbers which are divisible by 7, but not a multiple of 5.  result = []
num = 1
while len(result) < 5:
    if (num % 7 == 0) and (num % 5 != 0):
        result.append(num)
    num += 1
    
print(result)
Construct a program in Python which reverses each word of a given sentence.  # Function to reverse each word
def word_reverse(s) : 
    # Splitting each word
    words = s.split() 
    rev_str = "" 
    for word in words: 
        # Reversing each word
        rev_str += word[::-1] + " "
    return rev_str
Create a Python class that can be used to represent a user profile.  class UserProfile:
    def __init__(self, username, password):
        self.username = username
        self.password = password

    def get_username(self):
        return self.username

    def get_password(self):
        return self.password

user = UserProfile('username', 'password')
print(user.get_username())
Generate a function in Python to take a list of numbers as input and count the number of elements that are greater than a given number. list = [1, 5, 8, 10, 4], threshold = 7 def count_greater_than_threshold(list, threshold):
    count = 0
    for num in list:
        if num > threshold:
            count += 1
    return count
print(count_greater_than_threshold(list, threshold)) # Prints 2
Create a graphical user interface in Python using Tkinter that allows users to enter name and age information and save the data. Not applicable import tkinter

# Create main window.
main_window = tkinter.Tk()
main_window.title("User Data Entry")
main_window.geometry("200x100")

# Create entry boxes
name_label = tkinter.Label(main_window, text="Name")
name_label.grid(row=0, column=0, sticky="w")
name_entry = tkinter.Entry(main_window)
name_entry.grid(row=0, column=1, sticky="w")

age_label = tkinter.Label(main_window, text="Age")
age_label.grid(row=1, column=0, sticky="w")
age_entry = tkinter.Entry(main_window)
age_entry.grid(row=1, column=1, sticky="w")

# Create button
save_button = tkinter.Button(main_window, text="Save")
save_button.grid(row=2, column=0, sticky="w")

main_window.mainloop()
Clean a set of text data using Python. Text data: Attached # Import necessary libraries
import re
import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords

# Read input data
with open('input.txt', 'r') as f:
 data = f.read()

# Lowercase
data = data.lower()

# Clean up punctuation
data = re.sub(r'[^\w\s]', ' ', data)

# Tokenize words
data = nltk.word_tokenize(data)

# Remove stopwords
data = [w for w in data if w not in stopwords.words('english')]

# Write cleaned data to file
with open('output.txt', 'w') as f:
 f.write(' '.join(data))
Create a Python code to convert a given integer to binary  def to_binary(n):
    return bin(n).replace("0b", "")
Suggest a Python library to monitor the performance of this system A distributed system that processes large amounts of data on multiple nodes The Python library 'celery' can be used to monitor the performance of a distributed system. It provides scalability and concurrency capabilities to handle large amounts of data by distributing tasks across multiple nodes. It also offers task monitoring and management through custom metrics and performance logs.
Create a Python program to classify emails as 'spam' or 'not spam' using a machine learning model.  import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB, MultinomialNB

# Load data
data = pd.read_csv('email.csv')

# Separate features and labels
X = data.drop('spam', axis=1).values
y = data['spam'].values

# Split data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and fit the model
model = MultinomialNB()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate accuracy
accuracy = metrics.accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy*100:.2f}%')
Answer a question using Python. Question: What is the sum of all numbers divisible by 25 between 500 and 1000? int sum = 0
 
for i in range(500, 1000):
  if(i % 25 == 0):
    sum += i
 
print(sum)
Establish a Python program to replace all the words in a given sentence by the first letter of the respective words. Sentence: Hello World def replace_with_first_letter(sentence):
    words = sentence.split()
    result = [word[0] for word in words]
    return ''.join(result)

print(replace_with_first_letter("Hello World")) # Output: HW
Suggest a way to convert a given string to an integer in Python.  def to_int(string):
    '''This function takes a string and converts it to an integer.'''
    return int(string)
Create a Python function to shuffle a list of numbers. [1, 2, 3, 4, 5] import random

def shuffle_list(nums):
 random.shuffle(nums)
 return nums

shuffled_list = shuffle_list([1, 2, 3, 4, 5])
print(shuffled_list) #[3, 5, 2, 4, 1]
Write a Python program to iterate through a list and return the index of the maximum of all the even numbers in the list. [1, 5, 8, 10, 3, 13, 21, 24] def find_max_even_index(lst):
  max_even = None
  index = -1
  
  for i, num in enumerate(lst):
    if num % 2 == 0 and (max_even is None or num > max_even):
      max_even = num
      index = i
  
  return index
Write a Python program which prints out the Fibonacci series up to the N-th term. 15 def print_fibonacci_series(n): 
    a = 0
    b = 1
    c = 0

    while c < n:
        print(a,end=" ")
        c = c+1
        temp = a+b
        a = b 
        b = temp 
		
print_fibonacci_series(15)
Given a set of python classes, generate code that creates an instance of each class and prints the attributes and methods associated with each instance. class Car: 
    def __init__(self, make, model, year):
        self.make = make
        self.model = model
        self.year = year

class Dog:
    def __init__(self, breed, name):
        self.breed = breed
        self.name = name # Create instances of each class
car1 = Car('Toyota', 'Camry', '2018')
dog1 = Dog('Labrador', 'Max')

# Print attributes and methods
print("The car is a {} {} manufactured in {}".format(car1.make, car1.model, car1.year))
print("The dog is a {} named {}".format(dog1.breed, dog1.name))

# Print the instance methods of each class
print("The car class has these methods: ", dir(car1))
print("The dog class has these methods: ", dir(dog1))
Write a Python program that creates a new dictionary from two existing dictionaries. dict1 = {'a':1, 'b':2, 'c':3} 
dict2 = {'d':4, 'e':5, 'f':6} dict3 = {key:dict1[key] if key in dict1 else dict2[key] for key in (dict1.keys() | dict2.keys())}
Develop a Python program that calculates the median of an array of numbers.  def median(numbers):
    numbers.sort()
    if len(numbers) % 2 == 0:
        return (numbers[len(numbers)//2] + numbers[(len(numbers)//2)-1]) / 2.0
    else:
        return numbers[len(numbers)//2]
Generate a program in Python that takes two strings and returns a list containing the combined string. ("Hello ", "World!") def combine_strings(str1, str2):
 return [str1 + str2]

combined_string = combine_strings("Hello ", "World!")
print(combined_string) # ["Hello World!"]
Create a Python program to sum the elements of two lists. list1 = [1,2,3,4]
list2 = [5,6,7,8] def sum_list(list1, list2):
    result = []
 
    for i in range(len(list1)):
        result.append(list1[i] + list2[i])
 
    return result
 
list1 = [1,2,3,4]
list2 = [5,6,7,8]
 
print(sum_list(list1, list2))
Generate a class in Python to represent a deck of cards.  import random

class Deck():
 CARDS = [
 'Ace of Spades',
 'Two of Spades',
 'Three of Spades',
 'Four of Spades',
 'Five of Spades',
 'Six of Spades',
 'Seven of Spades',
 'Eight of Spades',
 'Nine of Spades',
 'Ten of Spades',
 'Jack of Spades',
 'Queen of Spades',
 'King of Spades',
 'Ace of Hearts',
 'Two of Hearts',
 'Three of Hearts',
 'Four of Hearts',
 'Five of Hearts',
 'Six of Hearts',
 'Seven of Hearts',
 'Eight of Hearts',
 'Nine of Hearts',
 'Ten of Hearts',
 'Jack of Hearts',
 'Queen of Hearts',
 'King of Hearts',
 'Ace of Clubs',
 'Two of Clubs',
 'Three of Clubs',
 'Four of Clubs',
 'Five of Clubs',
 'Six of Clubs',
 'Seven of Clubs',
 'Eight of Clubs',
 'Nine of Clubs',
 'Ten of Clubs',
 'Jack of Clubs',
 'Queen of Clubs',
 'King of Clubs',
 'Ace of Diamonds',
 'Two of Diamonds',
 'Three of Diamonds',
 'Four of Diamonds',
 'Five of Diamonds',
 'Six of Diamonds',
 'Seven of Diamonds',
 'Eight of Diamonds',
 'Nine of Diamonds',
 'Ten of Diamonds',
 'Jack of Diamonds',
 'Queen of Diamonds',
 'King of Diamonds'
]

 def __init__(self):
 self._cards = Deck.CARDS.copy()

 def draw_card(self):
 return random.choice(self._cards)

 def remove_card(self, card):
 self._cards.remove(card)
Write a Python program to optimize a given set of equations using gradient descent. Equations:[(x**2) + 2x + 5, (2x**2) + 4x + 1]
Function:
Minimize f(x)=  x**2 + 2x + 5 + 2x**2 + 4x + 1 import numpy as np
 
# define the function
def f(x):
    return x**2 + 2*x + 5 + 2*x**2 + 4*x + 1
 
# define the gradient
def grad_f(x):
    return 2*x + 2 + 4*x + 4
 
# define the learning rate (eta)
eta = 0.01
 
# define the number of times we need to loop
n_iterations = 15
 
# define the initial value for x
x = 0
 
# loop and print
for i in range(n_iterations):
    x_next = x - eta * grad_f(x)
    x = x_next
    print(x, f(x))
Create a Python program for predicting prices of apartments. The program should include a way to input several parameters (number of bedrooms, area, location etc.) and an algorithm for a prediction. Number of bedrooms: 2
Area: 50
Location: New York import pandas as pd

df = pd.read_csv('data.csv')

# Features
X=df.iloc[:,:-1]

# Labels
y=df.iloc[:,-1]

# Split dataset
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1, test_size=0.2)

# Fit the model
from sklearn.linear_model import LinearRegression

model = LinearRegression()
model.fit(X_train, y_train)

# Get input values
input_data = [2, 50, 'New York']

# Prediction
prediction = model.predict([input_data])

print('Predicted price for a apartment with 2 bedrooms, 50sqm located in New York:', prediction[0])
Write a Python function to convert USD to Euro and print the new value to the console. Input amount: 12.5 USD def usd_to_euro(amount):
  euro = amount * 0.9
  print(amount, "USD is equal to", euro, "Euros.")
  
usd_to_euro(12.5)
Create a Python program that takes an array of numbers and returns the index of the first number that is the duplicate of an earlier encountered number. [5, 7, 9, 3, 1, 3] def find_first_duplicate(arr):
    seen = dict()

    for i, n in enumerate(arr):
        if n in seen:
            return i
        else:
            seen[n] = True

    return -1

arr = [5, 7, 9, 3, 1, 3]
print(find_first_duplicate(arr))
# Output: 4
Implement a function in Python that takes as input an integer and prints out the Fibonacci sequence up to the entered value. 10 def fibonacci(n):
    arr = [0, 1]
    for i in range(2, n+1):
        arr.append(arr[i-2] + arr[i-1])
    return arr[:n+1]

print(fibonacci(10))
Develop a python program to convert the given text into a list Text: Apples, oranges, and bananas text = "Apples, oranges, and bananas"

list_from_text = text.split(", ")

print("List:", list_from_text)
Create a Python program to check if a given sentence is a pangram or not. A pangram is a sentence that contains all the letters of the alphabet at least once.  import string

def is_pangram(sentence):
    sentence = sentence.lower()
    alphabet = string.ascii_lowercase
    for letter in alphabet:
        if letter not in sentence:
            return False
    return True
Write a Python program to implement a given sorting algorithm Array: [9, 8, 7, 6, 5, 4, 3, 2, 1]
Sorting Algorithm: Insertion Sort def insertion_sort(arr):
    for i in range(1, len(arr)): 
        key = arr[i] 
        j = i-1
        while j >=0 and key < arr[j] : 
                arr[j+1] = arr[j] 
                j -= 1
        arr[j+1] = key 

arr = [9, 8, 7, 6, 5, 4, 3, 2, 1]
insertion_sort(arr)
Create a basic Python program to split a given string in words and save them in an array. String = "This is a sentence." string = "This is a sentence."
words = string.split(" ")
print(words)
# Output: ['This', 'is', 'a', 'sentence.']
Construct a web scraper in Python using the Scrapy library which fetches information from a web page. Not applicable import scrapy

class MySpider(scrapy.Spider):  
 name = 'myspider'
 start_urls = [
 'https://example.com/page1',
 'https://example.com/page2',
 ]

def parse(self, response):
 for item in response.css('item'):
 yield {
 'title': item.css('item-title::text').get(),
 'description': item.css('item-description::text').get(),
 }
Create a program in Python to compress a given string using Run-length Encoding algorithm. Input string: “wwwwaaadexxxxxx” def compress(string): 
    # Initialize dictionary 
    dict_rle = {} 
   
    # Traverse input string 
    # and keep count of each 
    # character 
    for ch in string : 
        dict_rle[ch] = dict_rle.get(ch, 0) + 1
        
    # Store encoded string 
    encoded_string = "" 
   
    # Encode each character and its count 
    for key,value in dict_rle.items(): 
        # print "%s%s" % (key,value) 
        encoded_string += key + str(value) 
   
    return encoded_string 

len_encoded_string = compress(string) 
print "Encoded String: ", encoded_string
Write a Python program to take a list of numbers and remove all duplicates. [5,5,5,2,1,2,3,5] OldList = [5,5,5,2,1,2,3,5]
NewList = []

for Num in OldList:
    if Num not in NewList:
        NewList.append(Num)

print(NewList)
Generate a Python function that takes two strings as arguments and returns a sorted version of the strings.  def sort_strings(str1, str2): 
    str1 = sorted(str1)
    str2 = sorted(str2)
    return str1, str2
Design a program in Python that takes a text input and identifies and displays the most used words. User input string: "This is a test string to use for testing our program. This is the second test with different words." import collections 

def most_used_words(input_string): 
    # split the string into words 
    words = input_string.split() 
  
    # counts the occurrence of each word 
    counter = collections.Counter(words) 
  
    # most_common() produces k frequently encountered 
    # input values and their respective counts.  
    most_occur = counter.most_common(5)  
  
    print("The most used words are:")
    for word, count in most_occur : 
        print(word, ":", count)  

input_string = "This is a test string to use for testing our program. This is the second test with different words."
most_used_words(input_string)

Output:
The most used words are:
This : 2
is : 2
a : 1
test : 2
string : 1
Create a program using Python to make a request to an API and predict the probability of a type of tree occurring in a given area. Sample geojson features in the area, specific tree type import requests 
import json 
import pandas as pd

def predict_tree(geojson, tree_type):
    # Make a request to the API 
    url = "http://api.example.com"
    response = requests.post(url, data=geojson)
    
    # Parse the json of the response
    data = json.loads(response.text)
    
    # Check for errors
    if data["error"]:
        print(data["error"])
        return
    
    # Create a pandas DataFrame from the response
    df = pd.DataFrame(data["tree_data"])
    
    # Calculate the probability of the tree_type
    risk = df[tree_type].sum() / df["total_trees"].sum()
    
    return risk
Create a Python program to detect cycles in a given array. array = [2, 4, 5, -1, 7, -1, 5] def is_cycle_detected(array):
    # create a set to store visited indices
    visited = set()
    for i, num in enumerate(array):
        # check if num has been visited
        if i in visited or num not in visited:
            return False
        # mark the index as visited
        visited.add(i)
    return True
Construct a python script to display the frequency of each words appearing in a document The text document contains the following content:

The quick brown fox jumps over the lazy dog. from collections import Counter
 
with open('text.txt', 'r') as f:
    data = f.read().lower().split()
    
word_counter = Counter(data)
 
# Print the sorted most common 10 words
for word, count in word_counter.most_common(10):
    print('{}: {}'.format(word, count))
Generate 3 random numbers within the specified range using Python. [0, 10] import random

random_numbers = random.sample(range(0, 10), 3) 
print(random_numbers)
Create a function in Python that takes a list and sorts its elements in ascending order. numbers = [5, 2, 8, 7, 1] def sortAsc(numbers):
    numbers.sort()
    return numbers
develop a python code to calculate the area of a circle.  def area_of_circle(radius):
    return 3.14 * (radius ** 2)

if __name__ == '__main__':
    radius = 5
    print(area_of_circle(radius)) # 78.5
Upgrade the following code so that it runs on Python 3 #This code runs on python 2
print "Hello World!" print("Hello World!")
Write a Python program to find the shortest path between two points A (1,2), B (5,6) # Initialize the two points
A = (1,2) 
B = (5,6)

# Create a function
def short_path(p1, p2):
    # Compute the x-distance
    x_dist = abs(p2[0] - p1[0])
    # Compute the y-distance
    y_dist = abs(p2[1] - p1[1])
    # Compute the manhattan distance
    manh_dist = x_dist + y_dist
    return manh_dist

# Test the function
print(short_path(A, B))

# Output
6
Generate a Python code that can parse a JSON string and convert it to a Python dictionary. json_string = "{'name': 'John', 'age': 25, 'hobbies': ['soccer', 'running']}" import json

def parse_json_string(json_string):
    """
    Parses a JSON string and converts it to a Python dictionary.
    :param json_string: The JSON string to parse
    :type json_string: str
    :return: A Python dictionary parsed from the JSON string
    :rtype: dict
    """
    return json.loads(json_string)
Write a Python class which implements the Quick-Sort algorithm.  class QuickSort(object):
    
    def __init__(self, array):
        self.array = array
    
    def partition(self, low, high):
        i = low - 1
        pivot = self.array[high]
        for j in range(low, high):
            if self.array[j] <= pivot:
                i = i + 1
                self.array[i], self.array[j] = self.array[j], self.array[i]
        self.array[i + 1], self.array[high] = self.array[high], self.array[i + 1]
        return i + 1
    
    def quick_sort(self, low, high):
        if low < high:
            partition_index = self.partition(low, high)
            self.quick_sort(low, partition_index - 1)
            self.quick_sort(partition_index + 1, high)
Create a basic HTML/CSS page that displays a list of computer programming languages. Not applicable <html>
<head>
<title>List of Programming Languages</title>
<style>
h1 {
 font-family: sans-serif; 
 color: #444444;
 }

ul {
 padding: 0;
 margin: 0;
 list-style-type: none;
 line-height: 1.5;
 font-family: sans-serif;
 font-size: 16px; 
 color: #444444; 
 }
</style>
</head>
<body>
 <h1>List of Programming Languages</h1> 
 <ul>
  <li>Java</li>
  <li>Python</li>
  <li>C++</li>
  <li>JavaScript</li>
  <li>C#</li>
  <li>PHP</li>
  <li>Perl</li>
  <li>Ruby</li>
  <li>Objective-C</li>
  <li>Swift</li>
</ul>
</body>
</html>
Given a list of integers, write a Python program to find the largest and second largest numbers in the list. [10, 20, 5, 45, 25] def find_largest_and_second_largest(nums):
    max1 = float('-inf')
    max2 = float('-inf')
    for n in nums:
        if n > max1:
            max2 = max1
            max1 = n
        elif n > max2 and n != max1:
            max2 = n
    return max1, max2
Create a Python program that takes a string as input and returns all palindromic substrings of the string. String = “abc” def palindromic_substring(s):
  all_palindromes = []

  #  check for substrings of length 3
  for i in range(len(s) - 2):
    if s[i] == s[i + 2]:
      all_palindromes.append(s[i:i + 3])

  #  check for substrings of length 4
  for i in range(len(s) - 3):
    if s[i] == s[i + 3]:
      all_palindromes.append(s[i:i + 4])

  return all_palindromes

result = palindromic_substring("abc")
print(result)
You need to write a Python program which converts a given Fahrenheit temperature to its corresponding Celsius temperature. temperature_fahrenheit = 68 def fahrenheit_to_celsius(temperature_fahrenheit):
    temperature_celsius = (temperature_fahrenheit - 32) * 5.0 / 9.0
    return temperature_celsius

result = fahrenheit_to_celsius(temperature_fahrenheit)
print(f"{temperature_fahrenheit}°F = {result}°C")
# Output: 68°F =
Create a Python program to group words of the same length together words = ['hello', 'world', 'word', 'whale', 'panda'] def group_words(words):
    # Function to group words of the same length together
    groups = {}
    
    for word in words:
        length = len(word)
        if length not in groups:
            groups[length] = []
        groups[length].append(word)
    return groups
Develop a program in Python that generates random passwords with characters, numbers, and special characters.  import random
import string

def generate_password():
  password_length = 12
  char_list = list(string.ascii_letters) + list(string.digits) + list(string.punctuation)
  random.shuffle(char_list)
  return ''.join(char_list[:password_length])

print(generate_password())
Write a python program to sort an array with n elements in ascending order. arr = [7, 5, 2, 9, 6, 4, 1, 3, 8] def sort(arr): 
  
    n = len(arr) 
  
    # Traverse through all array elements 
    for i in range(n): 
  
        # The last element has already been sorted 
        for j in range(0, n-i-1): 
  
            # traverse the array from 0 to n-i-1 
            # Swap if the element found is greater 
            # than the next element 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j] 
  
    # Driver code to test above 
arr = [7, 5, 2, 9, 6, 4, 1, 3, 8] 
sort(arr) 
  
print ("Sorted array is:") 
for i in range(len(arr)): 
    print (arr[i]),
Can you create a Python script to find the maximum element in the given array using divide and conquer algorithm? arr = [3, 5, 7, 9, 1, 20] def findMaxElement(arr, low, high):
    if (high == low): 
        return arr[low] 
    else: 
        mid = (low + high) // 2
        max_left = findMaxElement(arr, low, mid) 
        max_right = findMaxElement(arr, mid + 1, high) 
        return max(max_left, max_right) 

print(findMaxElement(arr, 0, len(arr)-1)) # 20
Generate a Python program to generate an encrypted hash of a given string using SHA-256. Not applicable import hashlib
 
original_string = '<insert string here>'

# Generate the encrypted hash
encrypted_string = hashlib.sha256(original_string.encode()).hexdigest()

print('Encrypted hash: ' + encrypted_string)
Develop an algorithm using Python that determines if a number is a prime number or not. 12 def is_prime(n):
    if n <= 1: 
        return False
    for i in range(2, n): 
        if n % i == 0: 
            return False
    return True
Write a generator function in Python to generate unique integer numbers in a given range. min value = 10, max value = 20 def unique_integers_generator(start, end):
    i = start
    used = set()
    while i <= end:
        if i not in used:
            used.add(i)
            yield i
        i += 1

for i in unique_integers_generator(10, 20):
    print(i)
Create a bash script that runs an application on startup. Application Command: python3 my_app.py #!/bin/bash
sudo echo "@python3 my_app.py" >> /etc/rc.local
sudo chmod +x /etc/rc.local
Create an Optimizer function in Python to optimize a given function f(x) for x in [-4, 4]. Function f(x): f(x) = x^2 - 3x + 2 import numpy as np
from scipy.optimize import minimize

# Function to optimize
def f(x):
 return x**2 - 3*x + 2

# Optimize
optimized = minimize(f, [-4, 4], method="L-BFGS-B")

# Print result
print("Optimized value of the function: ", optimized.fun)  # prints -3.999999999999997
print("Optimized value of x: ", optimized.x) # prints [-4.]
Optimize the given Python function to reduce its run time and memory usage. def func1(n): 
    if n==0: 
        return 0 
    if n==1: 
        return 1 
    else: 
        return func1(n-1)+func1(n-2) def func1(n, lookup): 
    if n == 0 or n == 1 : 
        lookup[n] = n 
    if lookup[n] is None:  
        lookup[n] = func1(n-1, lookup) + func1(n-2, lookup)  
    return lookup[n] 
  
def optimizedFibo(n): 
    lookup = [None]*(n+1)  
    return func1(n, lookup)
Write a function in Python that takes a list of numbers as an input, and returns the largest of them. [1, 2, 3, 4, 5] def largest(list):
 largest = 0
 for number in list:
 if number > largest:
 largest = number
 return largest

print(largest([1, 2, 3, 4, 5]))
# Outputs 5
Generate a Python program to scrape the headlines from a given news article. https://www.bbc.com/news/uk-england-london-53741405 import requests
from bs4 import BeautifulSoup

url = "https://www.bbc.com/news/uk-england-london-53741405"

page = requests.get(url)
soup = BeautifulSoup(page.content, 'html.parser')

headlines = soup.find_all('h1', class_='story-body__h1')
for headline in headlines:
 print(headline.text)
Write a Python program that takes a string and a number as input, and returns the string repeated the given number of times. String: xyz
Number: 3 def repeatString(string, num):
    return string * num

result = repeatString("xyz", 3)
print(result)
Come up with a correct approach to optimize the following python program. numbers = [1, 2, 3, 4, 5, 6]

for x in numbers:
    print(x) numbers = [1, 2, 3, 4, 5, 6]

print(*numbers, sep='\n')
Create a function to replace all instances of a string in another string. Input string "I love Python programming language" and replace all the 'Python' with 'JavaScript' def replace_string(old, new, s): 
    return s.replace(old, new) 


input_string = "I love Python programming language"
new_string = replace_string("Python", "JavaScript", input_string)
print(new_string)

# Output: I love JavaScript programming language
Create a Python program to encrypt a string using the Caesar’s Cipher. The caesar cipher involves shifting each letter of a plain text message by a fixed number of letters. Not applicable def encrypt(plainText, shift):
 cipherText = ""
 
 for ch in plainText:  
     if ch.isalpha():
         stayInAlphabet = ord(ch) + shift 
         if stayInAlphabet > ord('z'):
             stayInAlphabet -= 26
         finalLetter = chr(stayInAlphabet)
         cipherText += finalLetter
     else:
         cipherText += ch
 
 return cipherText

text = 'this is a plain text message.'
shifted  = encrypt(text, 3)   

print('Plain Text: ', text) 
print('Cipher Text:', shifted )
Create a function in Python that multiplies two numbers without using the ‘*’ operator. x = 4
y = 5 def multiply_without_operator(x, y):
 # Handle cases when either of the numbers is 0
 if x == 0 or y == 0:
 return 0
 
 # Initialize a result variable to 0 
 res = 0
 
 # Loop through y number of times and add x to res
 for i in range(abs(y)):
 res += abs(x)
 
 # Handle negative inputs
 if x < 0 and y < 0:
 return res
 elif x < 0 or y < 0:
 return -res
 
 # Case when both inputs are positive
 else:
 return res
Write a python script to flatten a given nested list. [[1,2,3], [4,[5,6]]] def flatten_list(input_list):
    flattened_list = []
    for i in input_list:
        if isinstance(i, list):
            flattened_list.extend(flatten_list(i))
        else:
            flattened_list.append(i)
    return flattened_list

input_list = [[1,2,3], [4,[5,6]]]
flattened_list = flatten_list(input_list)
print(flattened_list)
Write a Python program to validate a US phone number.  def is_valid_phone_number(phone):
 
  if len(phone) != 12:
    return False
 
  if phone[3] != '-' or phone[7] != '-':
    return False
 
  for i in range(0, 12):
    if i != 3 and i != 7:
      if not phone[i].isdecimal():
        return False
 
  return True

result = is_valid_phone_number("123-456-7890")
print(result)
Develop a web-scraper in Python to retrieve information from a given website. URL = https://en.wikipedia.org/wiki/Python_(programming_language) import requests
from bs4 import BeautifulSoup

# Make a GET request to fetch the raw HTML content
html_content = requests.get(URL).text

# Parse the html content
soup = BeautifulSoup(html_content, "lxml")

# Print all the articles on the page
print("All articles")
print("-----------")
articles = soup.find_all('p')
for article in articles:
    print(article.text)

# Print all the headlines
print("Headlines")
print("--------")
headlines = soup.find_all('h1')
for headline in headlines:
    print(headline.text)

# Print all the hyperlinks
print("Hyperlinks")
print("---------")
links = soup.find_all('a')
for link in links:
    print(link.get('href'))
Write a python script which reformats the json string below data = '{"name":"Jason","age":42,"favorite_food":"Lasagna"}' import json

def reformat_json(data):
    data = json.loads(data)
    return json.dumps(data, indent=4)

data = '{"name":"Jason","age":42,"favorite_food":"Lasagna"}'
updated_data = reformat_json(data)

print(updated_data)
# {"name": "Jason",
#  "age": 42,
#  "favorite_food": "Lasagna"}
Create a Python program to compute the average of all the numbers in a list. [1, 5, 9.7, 8, 5.6] def avg(list):
    if len(list) == 0:
        return 0
    else:
        sum = 0
        for num in list:
            sum += num
        return sum / len(list)
Write a Python script to scrape a website and store the results in a MySQL database. The website to scrape is www.example.com import mysql.connector
import requests
from bs4 import BeautifulSoup

# Connect to MySQL database
mydb = mysql.connector.connect(
  host="localhost",
  user="root",
  passwd="",
  database="scrape"
)
mycursor = mydb.cursor()

# Get the website content
r = requests.get('https://www.example.com')

# Parse the website content 
soup = BeautifulSoup(r.text, 'html.parser')

# Scrape the data
for tag in soup.find_all('p'):
    data = tag.get_text()

    # Insert the data to the database
    mycursor.execute('INSERT INTO data VALUES (%s)', (data,))
    
mydb.commit()
Optimize the following function in Python to make it run faster def gcd(x, y): 
    while(y): 
        x, y = y, x % y 
    return x def gcd(x, y): 
    if x == 0: 
        return y 
    if y == 0: 
        return x 
    if x == y: 
        return x 
    if x > y: 
        small = y 
    else: 
        small = x 
    for i in range(1, small+1): 
        if((x % i == 0) and (y % i == 0)): 
            gcd = i 
    return gcd
Rewrite the javascript code with python code. // This program prints the values 1 to 10
for (var i = 1; i <= 10; i++) {
  console.log("The number is " + i);
} # This function prints the values 1 to 10
def print_numbers(): 
    for i in range(1,11): 
        print("The number is " + str(i)) 
          
print_numbers()
Embed a mathematical expression in Python and print the expression. x**3 + 2*x**2 + 3 expression = 'x**3 + 2*x**2 + 3'

print(eval(expression))
Create a Python script to find the most common letter in a given string. string = "This is a test string" def find_most_common_letter(string):
 # Create a dictionary to count the frequency of characters
 char_frequency = {}

for char in string:
 if char in char_frequency:
 char_frequency[char] += 1
 else:
 char_frequency[char] = 1

# Find the most common letter
 most_common_char = ''
 max_count = 0
 for key, val in char_frequency.items():
 if val > max_count:
 max_count = val
 most_common_char = key

return most_common_char

string = "This is a test string"
print(find_most_common_letter(string)) # Output: 's'
Program a function in Python 3 that takes a list of integers and returns a list with only the non-duplicate values. [1, 2, 4, 1, 5, 7, 8, 2] def uniqueVals(arr):
  uniqueValsArr = []
  for x in arr:
    if x not in uniqueValsArr:
      uniqueValsArr.append(x)
  return uniqueValsArr

mylist = [1, 2, 4, 1, 5, 7, 8, 2]
print(uniqueVals(mylist))

# Output: [1,2,4,5,7,8]
Write a Python program that takes a sequence of strings, sorts them alphabetically, and prints them to the console. sequence = ["Hello", "world", "Welcome", "to", "the", "Coding", "Revolution"] sequence = ["Hello", "world", "Welcome", "to", "the", "Coding", "Revolution"]

sorted_sequence = sorted(sequence)

for word in sorted_sequence:
    print(word)
Write a Python program that takes in a string and converts it to an integer.  def convert_string_to_int(string):
    x = 0
    for i in string:
        x = x*10 + ord(i) - ord('0')
    return x
Develop a Python script to get the length of a given string. How are you? def get_string_length(str):
    return len(str)

get_string_length("How are you?")
Write a Python function to detect if a given string contains any vowels.  def contains_vowels(string):
    vowels = ["a", "e", "i", "o", "u"]
    for char in string:
        if char in vowels:
            return True
    return False

print(contains_vowels(" hello, how are you"))
Create a program in Python that reads in a tic-tac-toe board of size n x n as an input and does intelligent moves to win the game. [['X', 'O', 'X'],
 ['X', ' ', 'O'],
 ['O', 'O', 'X']] def play_game(board):
    board_size = len(board)
    winning_indices = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]]

    for indices in winning_indices:
        a = indices[0]
        b = indices[1]
        c = indices[2]

        x_count = 0
        o_count = 0
        for i in range(3):
            if board[a//board_size][a%board_size] == 'X':
                x_count += 1
            elif board[a//board_size][a%board_size] == 'O':
                o_count += 1

            if board[b//board_size][b%board_size] == 'X':
                x_count += 1
            elif board[b//board_size][b%board_size] == 'O':
                o_count += 1

            if board[c//board_size][c%board_size] == 'X':
                x_count += 1
            elif board[c//board_size][c%board_size] == 'O':
                o_count += 1
            
        if o_count == 2 and board[a//board_size][a%board_size] == '':
            board[a//board_size][a%board_size] = 'O'
            return board
        elif x_count == 2 and board[a//board_size][a%board_size] == '':
            board[a//board_size][a%board_size] = 'X'
            return board

    for x in range(board_size):
        for y in range(board_size):
            if board[x][y] == ' ':
                board[x][y] = 'O'
                return board
    return board
Develop an AI-based recommendation system in Python for a movies website. Not applicable # import the necessary libraries
import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import TfidfVectorizer

# Read in the movie data
movies = pd.read_csv('movies.csv')

# Vectorize the movie title
vectorizer = TfidfVectorizer(tokenizer=lambda x: x.split(' '))
tfidf_matrix = vectorizer.fit_transform(movies['title']).toarray()

# Calculate the cosine similarity matrix
cosine_similarity_matrix = cosine_similarity(tfidf_matrix)

# Generate a list of recommended movies
def recommend(movie_title):
 recommended_movies = []
 
 # Find the index of the movie by title
 movie_index = movies[movies['title'] == movie_title].index[0]
 
 # Generate a list of movies with cosine similarities > 0
 for i in range(len(cosine_similarity_matrix[movie_index])):
  if cosine_similarity_matrix[movie_index][i] > 0:
   recommended_movies.append(i)
   
 # Return the titles of the recommended movies
 return movies.iloc[recommended_movies]['title']

# Testing 
print(recommend('The Godfather'))
# Output: The Shawshank Redemption, The Godfather Part II, Apocalypse Now
Write a Python function to check if a given number is an Armstrong number or not. An Armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits.  def is_armstrong_number(num):
  n = len(str(num))
  sum = 0
  temp = num
  while temp > 0:
    digit = temp % 10
    sum += digit**n
    temp //= 10
  return sum == num
Create a Python program to determine if a list is monotonically increasing. list = [1, 3, 4, 5, 9, 10] def check_monotonic(list):
 is_monotonic = True
 for i in range(len(list)-1):
  if(list[i] > list[i+1]):
   is_monotonic = False
 return is_monotonic

list = [1, 3, 4, 5, 9, 10]
print(check_monotonic(list)) # Output: True
Compute the output of this Python program. def countdown(n):
    if n <= 0:
        print("Blast off!")
    else:
        print(n)
        countdown(n-1)

countdown(3) 3
2
1
Blast off!
Develop a Raspberry Pi program in Python to continuously measure humidity and temperature and displays it on an LCD display.  import Adafruit_DHT
import RPi.GPIO as GPIO
from Adafruit_CharLCD import Adafruit_CharLCD

# set up GPIO
GPIO.setmode(GPIO.BOARD)

#connect the sensor
sensor = Adafruit_DHT.DHT11

#temporarily use this pin for the sensor
pin = 27

#set up the LCD
lcd = Adafruit_CharLCD(rs=26, en=19,
    d4=13, d5=6, d6=5, d7=11,
    cols=16, lines=2)

#function to measure the humidity and temp
def measure_humidity_and_temp():
    humidity, temperature = Adafruit_DHT.read_retry(sensor, pin)

    if humidity is not None and temperature is not None:
        lcd.clear()
        lcd.message('Temp={0:0.1f} Humidity={1:0.1f}'.format(temperature, humidity))
    else:
        lcd.message('Failed to get reading.')

#run the program continuously
while True:
    measure_humidity_and_temp()
Generate a python program to assign each row of a 2D array to a variable. <No input> def assign_variables(matrix):
    # Create an empty list to contain all the row variables
    variables = []
    
    # Iterate over the matrix
    for row in matrix:
        # Assign each row to a variable
        rowVar = row
        # Add the row variable to the list
        variables.append(rowVar)
        
    # Return the list of row variables
    return variables
Write an algorithm in Python to count the number of occurrences of a given element in a given array.  def count_occurrences(array, element): 
    count = 0
    for i in range(len(array)): 
        if array[i] == element: 
            count += 1
    return count
Generate a code in Python that sorts the given list of numbers lst = [3, 4, 15, 1, 0] def sort_list(lst): 
    lst.sort() 
    return lst 
  
# Driver code 
lst = [3, 4, 15, 1, 0] 
sorted_list = sort_list(lst) 
  
print("Sorted list:", sorted_list)
Develop a Python program to generate all the even numbers between two given numbers.  def generateEvenNumber(start, end):
  for num in range(start, end+ 1):
    if num % 2 == 0:
      yield num
 
evens = []
start = 1
end = 10
for even in generateEvenNumber(start, end):
  evens.append(even)
 
print(evens)
How do you create a function in Python to find the highest common factor of the two given numbers?  def highestCommonFactor(num1, num2): 
    if num1 > num2: 
        small = num2 
    else: 
        small = num1 
    for i in range(1, small+1): 
        if((num1 % i == 0) and (num2 % i == 0)): 
            hcf = i 
    return hcf
Create a script in Python to modify a given spreadsheet, changing the format of the dates to a more human readable format ( DD/MM/YYYY ). The following spreadsheet in csv format (only for demonstration purposes): name,date
John,5/4/2019
Tim,20/3/2020 import csv
from datetime import datetime

#open CSV file for reading
with open('source.csv', 'r') as file_in:
 #open other CSV file for writing
 with open('destination.csv', 'w', newline='') as file_out:
  reader = csv.reader(file_in)
  writer = csv.writer(file_out)

  for row in reader:
   if row[0] == "name": #skip the first row
    #write old header
    writer.writerow(row)
   else:
    #convert date format
    dt = datetime.strptime(row[1], '%m/%d/%Y').strftime('%d/%m/%Y')
    #write data with new format
    writer.writerow([row[0], dt])
Convert plain text to HTML with color coding and hyperlinking of URLs.  #!/usr/bin/env python
from __future__ import with_statement

import re
import cgi

colorcodes =   {'bold':{True:'\033[1m',False:'\033[22m'},
                'cyan':{True:'\033[1;36m',False:'\033[0;0m'},
                #'#8E4429':{True:'\033[1;33m',False:'\033[0;0m'},
		'#8E4429':{True:'\033[0;33m',False:'\033[0;0m'},
		#'#8E4429':{True:'\033[33m',False:'\033[0;0m'},
                '#0000B0':{True:'\033[1;34m',False:'\033[0;0m'},
                '#B63A11':{True:'\033[1;31m',False:'\033[0;0m'},
                'magenta':{True:'\033[1;35m',False:'\033[0;0m'},
                #'green':{True:'\033[1;32m',False:'\033[0;0m'},
		'green':{True:'\033[0;32m',False:'\033[0;0m'},
		#'green':{True:'\033[32m',False:'\033[0;0m'},
                'underline':{True:'\033[1;4m',False:'\033[0;0m'}}

def recolor(color, text):
    regexp = "(?:%s)(.*?)(?:%s)" % (colorcodes[color][True], colorcodes[color][False])
    regexp = regexp.replace('[', r'\[')
    return re.sub(regexp, r'''<span style="color: %s">\1</span>''' % color, text)

def resinglecolor(color, text, intxt):
    regexp = "(?:\033\[1;32m%s)(.*?)" % intxt
    return re.sub(regexp, r'<span style="color: green">%s\1</span>'% intxt, text)

def removestdcolor(text):
    regexp = "(?:\033\[0;0m)(.*?)"
    return re.sub(regexp, r'', text)

def bold(text):
    regexp = "(?:%s)(.*?)(?:%s)" % (colorcodes['bold'][True], colorcodes['bold'][False])
    regexp = regexp.replace('[', r'\[')
    return re.sub(regexp, r'<span style="font-weight:bold">\1</span>', text)

def underline(text):
    regexp = "(?:%s)(.*?)(?:%s)" % (colorcodes['underline'][True], colorcodes['underline'][False])
    regexp = regexp.replace('[', r'\[')
    return re.sub(regexp, r'<span style="text-decoration: underline">\1</span>', text)

def removebells(text):
    return text.replace('\07', '')

def removebackspaces(text):
    backspace_or_eol = r'(.\010)|(\033\[K)'
    n = 1
    while n > 0:
        text, n = re.subn(backspace_or_eol, '', text, 1)
    return text

template = '''\
<html>
<head>

</head>
<body>
%s
</body>
</html>
'''

re_string = re.compile(r'(?P<htmlchars>[<&>])|(?P<space>^[ \t]+)|(?P<lineend>\r\n|\r|\n)|(?P<protocal>(^|\s|\[)((http|ftp)://.*?))(\s|$|\])', re.S|re.M|re.I)
def plaintext2html(text, tabstop=4):
    def do_sub(m):
        c = m.groupdict()
        if c['htmlchars']:
            return cgi.escape(c['htmlchars'])
        if c['lineend']:
            return '<br>'
        elif c['space']:
            t = m.group().replace('\t', '&nbsp;'*tabstop)
            t = t.replace(' ', '&nbsp;')
            return t
        elif c['space'] == '\t':
            return ' '*tabstop;
        else:
            url = m.group('protocal')
            #print url
            if url.startswith('['):
                prefix = '['
                suffix = ']'
                url = url[1:]
            else:
                prefix = ''
                suffix = ''
            last = m.groups()[-1]
            if last in ['\n', '\r', '\r\n']:
                last = '<br>'
            return '%s<a href=%s>%s</a>%s' % (prefix, url, url, suffix)
    result = re.sub(re_string, do_sub, text)
    result = result.replace(' ', '&nbsp;')
    result = result.replace('\t', '&nbsp;'*tabstop)

    result = recolor('cyan', result)
    result = recolor('#8E4429', result)
    result = recolor('#0000B0', result)
    result = recolor('#B63A11', result)
    result = recolor('magenta', result)
    result = recolor('green', result)

    result = resinglecolor('green', result, 'Source')
    result = resinglecolor('green', result, 'Output')

    result = bold(result)
    result = underline(result)
    result = removebells(result)
    result = removebackspaces(result)

    result = removestdcolor(result)

    return template % result


if __name__ == '__main__':
    import sys
    with open(sys.argv[-1]) as f:
        text = f.read()
    print plaintext2html(text)

Generate a Python program to fetch the data from a provided JSON input and store the data into a SQLite database. { 
 "items": [
  { "name": "item1", "value": 1 },
  { "name": "item2", "value": 2 },
  { "name": "item3", "value": 3 },
  { "name": "item4", "value": 4 },
  { "name": "item5", "value": 5 }
 ]
} import json
import sqlite3
 
# parse the JSON data
jsonStr = '''{ 
 "items": [
  { "name": "item1", "value": 1 },
  { "name": "item2", "value": 2 },
  { "name": "item3", "value": 3 },
  { "name": "item4", "value": 4 },
  { "name": "item5", "value": 5 }
 ]
}'''
decodedData = json.loads(jsonStr)
 
# connect to the SQLite database
con = sqlite3.connect('data.db')
cur = con.cursor()
 
# create the necessary tables
cur.execute('CREATE TABLE IF NOT EXISTS items(name TEXT, value INTEGER)')
 
# now iterate through the items in the data and store them in the database
for item in decodedData['items']:
 cur.execute('INSERT INTO items(name, value) VALUES (?, ?)', (item['name'], item['value']))
 
con.commit()
 
# close the connection
con.close()
Create a Python program that can convert temperatures between celsius and fahrenheit.  def celsius_to_fahrenheit(temp):
    fahrenheit = temp * 9/5 + 32
    return fahrenheit

def fahrenheit_to_celsius(temp):
    celsius = (temp - 32) * 5/9
    return celsius

print("Fahrenheit to Celsius:", fahrenheit_to_celsius(59))
print("Celsius to Fahrenheit:", celsius_to_fahrenheit(15))
Write a Python program to generate a random password, using a given list of characters and a minimum character length. character_list = ['a', 'b', 'c', 'd', 'e','1','2','3','4','5']
min_length = 8 import random

def generate_password(character_list, min_length):
  password = ''

  for i in range(min_length):
    password += random.choice(character_list)
  
  return password

if __name__ == '__main__':
  character_list = ['a', 'b', 'c', 'd', 'e','1','2','3','4','5']
  min_length = 8
  password = generate_password(character_list, min_length)
  print(password)
Write a Python program to generate a list of all possible words formed from a given string. "Hello" def permute_word(word):
    # Base case 
    if len(word) == 0: 
        return [''] 
    
    prev_list = permute_word(word[1:]) 
    next_list = [] 
    
    # Insert the first character at different positions in the word 
    for each_string in prev_list: 
        for index in range(len(each_string)+1): 
            new_string = each_string[:index] + word[0] + each_string[index:] 
            next_list.append(new_string)
    return next_list
Create a Python code to solve the given optimization problem:

Minimize: f(x,y) = (x - 1)2 + (2y - 3)2

Subject to: x + 2y = 6  """
Solve an optimization problem with one constraint
"""

import scipy.optimize as opt

def minimize_func(x):
    return (x[0]-1)**2 + (2*x[1]-3)**2

def constraint_func(x, sign=1):
    return sign * (x[0] + (2*x[1])-6)

def solve_optimization():
    # define constraints 
    constraints = (
        {'type': 'eq', 'fun': constraint_func},
    )
    # set initial values to (0,0) 
    x0 = (0,0)
    # use BFGS algorithm for optimization 
    solution = opt.minimize(minimize_func, x0, method='SLSQP', constraints=constraints)
    return solution

if __name__ == "__main__":
    solution = solve_optimization()
    print(solution.x) # => [3. 2.]
Demonstrate how to use classes and objects in Python by creating an Account class  class Account:
    def __init__(self, name, balance):
        # instance attributes
        self.name = name
        self.balance = balance
    
    # method to withdraw money from account
    def withdraw(self, amount):
        # check if amount is a valid number
        if not isinstance(amount, (int, float)):
            raise ValueError('Invalid amount')
        
        # check if amount is greater than balance
        if amount > self.balance:
            raise ValueError('Insufficient funds')
        
        # subtract the amount from the balance
        self.balance -= amount
    
    # method to deposit money to account
    def deposit(self, amount):
        # check if amount is a valid number
        if not isinstance(amount, (int, float)):
            raise ValueError('Invalid amount')
        
        # add the amount to the balance
        self.balance +=amount

# create an instance of the Account class
my_account = Account('John Doe', 100)

# withdraw money from account
my_account.withdraw(50)

# deposit money to account
my_account.deposit(20)

# print the updated balance
print('Account balance:', my_account.balance)
Create a Python code to switch the positions of two items in a given list.  def switch_position(list, pos1, pos2):
    list[pos1], list[pos2] = list[pos2], list[pos1]
    return list
Create a Python application using Tkinter and the sqlite3 library which allows users to view and add to an existing database of movies. The application should display a list of movies in the database in a table, and allow users to filter the list by genre. Not applicable import sqlite3
import tkinter

# create the Tkinter window
root = tkinter.Tk()

# set up the sqlite connection
conn = sqlite3.connect('movies.db')
cursor = conn.cursor()

# create the table
cursor.execute("""CREATE TABLE IF NOT EXISTS movies (
 title TEXT,
 genre TEXT
)""")

# create labels for the search boxes
search_title = tkinter.Label(root, text="Title:")
search_genre = tkinter.Label(root, text="Genre:")

# create search boxes
title_box = tkinter.Entry(root)
genre_box = tkinter.Entry(root)

# create a button to submit the search
submit_button = tkinter.Button(root,
                       text="Submit",
                       command=search_movies)

#function that handles the whole search
def search_movies():
    title = title_box.get()
    genre = genre_box.get()

    # build the sql query
    query = """SELECT * FROM movies WHERE"""
    if title != '':
        query+=f""" title="{title}" AND"""
    if genre != '':
        query+=f""" genre="{genre}"""
    query = f"""{query} ORDER BY title asc;"""

    # execute the query
    cursor.execute(query)
 §§ 1131
    rows = cursor.fetchall()

    #render the data in the table
    for row in rows:
        row_text = f""" Title: {row[0]}, Genre: {row[1]}"""
        row_label = tkinter.Label(root, text=row_text)
        row_label.pack()

#pack the widgets
search_title.pack()
title_box.pack()

search_genre.pack()
genre_box.pack()

submit_button.pack()

root.mainloop()
Write a Python script to generate a random password with a given length. The password should contain letters, digits and special characters. Length: 10 import random
import string

#function to generate a random password
def generate_password(length):
 #generate a random string
 chars = string.ascii_letters + string.digits + string.punctuation
 #combine random letters, digits and special characters
 passwd = ''.join(random.choice(chars) for i in range(length))
 return passwd

#example
length = 10
password = generate_password(length)

#output
print(password)

# Output: O;3Rm,@$3H
Write a Python function to implement Quicksort.  def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    else:
        pivot = arr[len(arr) // 2]
        left = [x for x in arr if x < pivot]
        middle = [x for x in arr if x == pivot]
        right = [x for x in arr if x > pivot]
        return quick_sort(left) + middle + quick_sort(right)

print(quick_sort([3,6,8,10,1,2,1]))
Generate a python function that checks if the number is a valid decimal or not.  def is_valid_decimal(n):
    try:
        float(n)
        return True
    except ValueError:
        return False
Implement a GPU optimization technique in Python that improves the speed of a program.  import pycuda.autoinit
import pycuda.driver as driver
from pycuda.compiler import SourceModule
import numpy

mod = SourceModule("""
__global__ void gpu_accelerate(float *a)
{
    int idx = threadIdx.x + blockIdx.x * blockDim.x;
    a[idx] = a[idx] + 5;
}
""")

gpu_accelerate = mod.get_function("gpu_accelerate")

data = numpy.arange(128).astype(numpy.float32)

gpu_accelerate(driver.In(data), block=(4,4,1), grid=(2,2))
Write a Python program that outputs the length of the longest substring of a given string which contains only unique characters. ABCBCDDEE def longest_unique_substring(s):
  # Set the initial longest length to 0
  longest_length = 0
  # Traverse the string
  for i in range(len(s)):
    seen = set()
    # Traverse from i and outwards
    for j in range(i, len(s)):
      # Check if the character has been seen, if so, break
      if s[j] in seen:
        break
      # Otherwise, add the character to seen and increment the longest_length
      else:
        seen.add(s[j])
        longest_length = max(longest_length, j - i + 1)
  
  return longest_length

s = "ABCBCDDEE"
print(longest_unique_substring(s)) # Output: 4
Create a Python program that accepts an integer and displays its factorial. num=5 def factorial(num):
    result = 1
    for i in range(1, num+1):
        result *= i
    return result

n = int(input("Enter an Integer: "))
print(factorial(n))
Create a program that can generate anagrams from a set of words. ['python', 'coding', 'programming'] """
Create a program to generate anagrams from a set of words.

# Importing libraries
import itertools
 
def anagrams(words):
    # Generate all permutations of the given words
    anagram_list = [''.join(permutation) for permutation in itertools.permutations(words)]
 
    # Return the list of anagrams
    return anagram_list
 
# Sample input
words = ['python', 'coding', 'programming']
 
# Function call
anagram_list = anagrams(words)
 
# Printing output
print(anagram_list)
"""
Edit the following Python program to make it more efficient and concise. def calculate_sum(lst):
 total = 0
 for num in lst:
  total = total + num
 return total def calculate_sum(lst): 
 return sum(lst)
Write a function in Python to convert a Celsius temperature to Fahrenheit degree. Temperature in Celsius: 20 def celsius_to_fahrenheit(cel):
  return cel * 1.8 + 32

temp_in_fahrenheit = celsius_to_fahrenheit(20)
print("Temperature in Fahrenheit:", temp_in_fahrenheit)
Generate Python code to print a formatted table from a given list of dictionaries. list_of_dicts = [{'name': 'John', 'Occupation': 'Software Engineer', 'Age': 34},
                 {'name': 'Jane', 'Occupation': 'Professor', 'Age': 44},
                 {'name': 'Jacob', 'Occupation': 'Data Scientist', 'Age': 28},
                 {'name': 'Justin', 'Occupation': 'Accountant', 'Age': 24}] keys = list_of_dicts[0].keys()
for dicts in list_of_dicts:
    print('-'*20)
    for k in keys:
        print(f"{k}: {dicts[k]}")
    print('-'*20)
Write a python program to print the Fibonacci series upto n terms. 6 def fibonacci_series(n):
    if n==0:
        return 0
    elif n==1:
        return 1
    else: 
        return fibonacci_series(n-1) + fibonacci_series(n-2)

for i in range(6):
    print(fibonacci_series(i), end=', ')
Optimize a function with three inputs using a particle swarm optimization (PSO) algorithm written in Python.  # import necessary libraries
from pyswarms.single.global_best import GlobalBestPSO
from sklearn.base import BaseEstimator

class PSOOptimizer(BaseEstimator):
    def __init__(self, n_particles=10, dimensions=3, options=None):
        self.n_particles = n_particles
        self.dimensions = dimensions
        self.options = options
        
    def optimize(self, obj_func, iters, lb, ub):
        # Set-up optimizer
        optimizer = GlobalBestPSO(n_particles=self.n_particles, dimensions=self.dimensions, 
                                    options=self.options)
                
        # Perform optimization
        cost, pos = optimizer.optimize(obj_func, iters, lb, ub)
        
        # Return optimized parameters
        return cost, pos
Design an algorithm in Python to solve the Tower of Hanoi problem.  def tower_of_hanoi(num_disks, start_rod, end_rod, aux_rod):
    if num_disks == 1:
        print("Move disk 1 from rod", start_rod, "to rod", end_rod)
        return

    tower_of_hanoi(num_disks - 1, start_rod, aux_rod, end_rod) 
    print("Move disk", num_disks, "from rod", start_rod, "to rod", end_rod)
    tower_of_hanoi(num_disks - 1, aux_rod, end_rod, start_rod) 

n = 3
tower_of_hanoi(n, 'A', 'C', 'B')
Optimize a Python algorithm that computes the maximum value in a given array. list = [23, 45, 67, 89, 13, 99, 19, 20] def max_value(list):
    max_val = list[0]
    for val in list[1:]:
        if val > max_val:
            max_val = val
    return max_val

list = [23, 45, 67, 89, 13, 99, 19, 20]
print(max_value(list)) # 99
Write a python script that extracts data from a JSON object and stores it in a new array. {
    "name": "John Doe", 
    "age": 30,
    "occupation": "programmer"
} data = [{
    "name": "John Doe",
    "age": 30,
    "occupation": "programmer"
}]

arr = []

for item in data:
    arr.append(item)
    
print(arr)
Implement the QuickSort algorithm for sorting a given array of numbers in Python. arr = [10, 7, 8, 9, 1, 5] def partition(arr,low,high): 
    i = ( low-1 )         
    pivot = arr[high]    
  
    for j in range(low , high): 
        if   arr[j] <= pivot: 
            i = i+1 
            arr[i],arr[j] = arr[j],arr[i] 
  
    arr[i+1],arr[high] = arr[high],arr[i+1] 
    return ( i+1 ) 
  
def quickSort(arr,low,high): 
    if low < high: 
        pi = partition(arr,low,high) 
  
        quickSort(arr, low, pi-1) 
        quickSort(arr, pi+1, high) 
  
arr = [10, 7, 8, 9, 1, 5] 
n = len(arr) 
quickSort(arr,0,n-1) 
print ("Sorted array is:") 
for i in range(n): 
    print ("%d" %arr[i]),
Automate the task of checking if an array of numbers is in sorted order using a Python program. [2, 3, 6, 4, 8] def is_sorted(nums):
    for i, num in enumerate(nums[:-1]):
        if num > nums[i + 1]:
            return False
    return True
Write a Python program that takes a text string as input and returns the number of words in it. text = 'This is a sample string.' def count_words(text):
    words = text.split()
    return len(words)
Edit the following Python program to optimize its speed. # This program to calculate sum of first n numbers
def sumN(n): 
    sum=0
    for i in range(1,n+1): 
        sum=sum+i

    return sum

print(sumN(100)) # This program to calculate sum of first n numbers
def sumN(n): 
    sum = n * (n + 1) // 2
    return sum

print(sumN(100))
Generate a Python program that displays all prime numbers between two numbers. 50, 75 def display_prime_numbers(min, max):
    for n in range(min, max):
        if is_prime(n):
            print(n)

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

display_prime_numbers(50, 75)
Write a Python program to convert an infix expression to a postfix expression. "A * B + C" # Python program to convert 
# infix expression to postfix 

# Class to convert the expression 
class Conversion: 
	
	# Constructor to initialize the class variables 
	def __init__(self, capacity): 
		self.top = -1
		self.capacity = capacity
		# This array is used a stack 
		self.array = [] 
		# Precedence setting 
		self.output = [] 
		self.precedence = {'+':1, '-':1, '*':2, '/':2, '^':3} 
	
	# check if the stack is empty 
	def isEmpty(self): 
		return True if self.top == -1 else False
	
	# Return the value of the top of the stack 
	def peek(self): 
		return self.array[-1] 
	
	# Pop the element from the stack 
	def pop(self): 
		if not self.isEmpty(): 
			self.top -= 1
			return self.array.pop() 
		else: 
			return "$"
	
	# Push the element to the stack 
	def push(self, op): 
		self.top += 1
		self.array.append(op) 

	# A utility function to check is the given character 
	# is operand 
	def isOperand(self, ch): 
		return ch.isalpha() 

	# Check if the precedence of operator is strictly 
	# less than top of stack or not 
	def notGreater(self, i): 
		try: 
			a = self.precedence[i] 
			b = self.precedence[self.peek()] 
			return True if a <= b else False
		except KeyError: 
			return False
			
	# The main function that converts given infix expression 
	# to postfix expression 
	def infixToPostfix(self, exp): 
		
		# Iterate over the expression for conversion 
		for i in exp: 
			# If the character is an operand, 
			# add it to output 
			if self.isOperand(i): 
				self.output.append(i) 
			
			# If the character is an '(', push it to stack 
			elif i == '(': 
				self.push(i) 

			# If the scanned character is an ')', pop and 
			# output from the stack until and '(' is found 
			elif i == ')': 
				while( (not self.isEmpty()) and self.peek() != '('): 
					a = self.pop() 
					self.output.append(a) 
				if (not self.isEmpty() and self.peek() != '('): 
					return -1
				else: 
					self.pop() 

			# An operator is encountered 
			else: 
				while(not self.isEmpty() and self.notGreater(i)): 
					self.output.append(self.pop()) 
				self.push(i) 

		# pop all the operator from the stack 
		while not self.isEmpty(): 
			self.output.append(self.pop()) 

		print("".join(self.output) ) 

exp = "A * B + C"
obj = Conversion(len(exp)) 
obj.infixToPostfix(exp) 

# Output: AB*C+
Design a program using the Python language to calculate the average cost of a given list of items. [2.15, 3.35, 6.25, 8.25] def calculate_average(items):
 sum = 0
 for item in items:
  sum += item
 
 return sum / len(items)

items = [2.15, 3.35, 6.25, 8.25]

average = calculate_average(items)

print("Average cost: $" + str(round(average, 2)))
Convert a Python threading program to JavaScript. import threading

def show_message(message):
   print(message)

thread = threading.Thread(target=show_message, args=('Hello World!',))
thread.start() const showMessage = (message) => console.log(message);

const thread = new Worker('./thread.js');
thread.postMessage({message: 'Hello World!'});

// thread.js
onmessage = (msg) => postMessage(showMessage(msg.data.message));
Design a function in Python to sort a list of numbers in increasing order using a recursive insertion sort algorithm. [3, 7, 4, 9, 5, 2, 6, 1] def recursiveInsertionSort(arr):
    for i in range(1, len(arr)):
        currElem = arr[i]
        j = i - 1
        while j >= 0 and arr[j] > currElem:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = currElem
    return arr
Implement a function in Python to generate a password of size n 6 import string
import random

def generate_password(n):
    password = ''
    for i in range(n):
        password += random.choice(string.ascii_letters + 
        string.digits + string.punctuation)
    return password
Write a Python program to optimize a given set of rules specified by the user.  def optimize_rules(rules):
    optimized_rules = []

    # Add your code here

    return optimized_rules
Write a Python program to evaluate a mathematical expression given as string. "2 + 3 * 5" expression = "2 + 3 * 5"
result = eval(expression)
print(result)
Given a list of tuples, write a Python program to calculate the Euclidean distance between two items in the list.  def euclidean_distance(lst):
    distance = 0
    for i in range(len(lst[0])):
        distance += (lst[0][i]-lst[1][i])**2
    return (distance**0.5)
Create a basic optimization program in Python to find the maximum profit generated by a portfolio. Number of stocks: 3
Initial investment: 1000
Daily stock prices:
day 1: [200, 150, 250]
day 2: [300, 250, 250]
day 3: [250, 200, 220] #importing libraries
import pulp

#creating array
stocks = ["a", "b", "c"]

#creating problem
prob = pulp.LpProblem("Maximise Profit", pulp.LpMaximize)

#creating variables
x = pulp.LpVariable.dicts("number of stocks", stocks, lowBound=0)

#creating objective function
prob += pulp.lpSum([200*x["a"], 150*x["b"], 250*x["c"]]), "Maximizing Profit"

#constraints
prob += x["a"] + x["b"] + x["c"] <= 4, "Total Cost"
prob += x["a"] * 300 + x["b"] * 250 + x["c"] * 250 <= 1000, "Investment Cost"

#solving problem
prob.solve()

#printing results
for stock in stocks:
 print("Number of", stock, "stocks bought:", pulp.value(x[stock]))

#printing total profit
print("Total Profit:", pulp.value(prob.objective))
Create a program in Python that can extract data from an HTML page. Not applicable import requests
from bs4 import BeautifulSoup

# Get the specified URL
url = 'https://example.com/'
response = requests.get(url)

# Parse the response
soup = BeautifulSoup(response.text, 'html.parser')

# Extract the desired data
title = soup.find('title').text
body = soup.find('body').text

# Print the extracted data
print(title)
print(body)
Write a code in Python to print the following string: "Welcome to the amazing world of programming!" print("Welcome to the amazing world of programming!")
Create a program in Python to solve the following optimization problem.

Maximize: 6x+7y+5z+2w 

Subject to the following constraints: 
• x+y+z+w <= 20 
• x+2y+3z+4w >= 40 
• x,y,z,w >= 0 Not applicable # Import PuLP modeler functions
from pulp import *

# Create the 'prob' variable to contain the problem data
prob = LpProblem("Problem", LpMaximize)

# Create problem Variables
x = LpVariable("x", lowBound=0) 
y = LpVariable("y", lowBound=0) 
z = LpVariable("z", lowBound=0) 
w = LpVariable("w", lowBound=0)

# Objective Function
prob += 6 * x + 7 * y + 5 * z + 2 * w

# Constraints
prob += x + y + z + w <= 20 
prob += x + 2 * y + 3 * z + 4 * w >= 40 

# Solve the problem
status = prob.solve()

# Print the status of the solution
print("Status:", LpStatus[status])

# Print the value of the variables at the optimum
for variable in prob.variables():
    print(variable.name, "=", variable.varValue)

# Print the value of the objective
print("Total Cost of Ingredients per can = ", value(prob.objective))
Create an algorithm in Python to calculate the Fibonacci sequence up to a given number. Not applicable def fibonacci(n):
  a, b = 0, 1
  while a < n:
    print(a, end=' ')
    a, b = b, a+b

fibonacci(100)
Write a Python program to collect data from an API and store the data in a SQL database. import requests

url = 'http://some_api.com/resource1/?format=json' import sqlite3
import requests

# Connect to the database
db = sqlite3.connect('api_data.db')

# Create the statement
stmt = 'INSERT INTO api_data (data) VALUES (?)'

# Collect and save the data
data = requests.get(url).json()
db.execute(stmt, (data,))
db.commit()
db.close()
Develop a Python program to calculate the largest sum of a consecutive sequence of n numbers given in an array. array = [1, 2, -5, 4, 5, 7, -8] def max_consecutive_sum(array):
    max_val = 0
    cur_man = 0
    for x in array:
        cur_man = max(cur_man + x, 0)
        max_val = max(cur_man, max_val)
    return max_val
Create a Python program that will take a list of numbers and identify if any of the numbers are multiples of three. numbers = [2, 7, 8, 15, 24] for number in numbers:
 if number % 3 == 0:
  print(f'{number} is a multiple of 3')
 else:
  print(f'{number} is not a multiple of 3')

# Output:
# 2 is not a multiple of 3
# 7 is not a multiple of 3
# 8 is not a multiple of 3
# 15 is a multiple of 3
# 24 is a multiple of 3
This code performs "simple" differential analysis on gene expression data. To use it, run the script with the following arguments: exprfile slice1 slice2. exprfile should be a file containing gene expression values with genes on the rows and samples in the columns. slice1 and slice2 should be expressions of the form P-Q indicating which columns contain the data for the two conditions being compared (e.g., if the first condition is represented by three columns starting at column 5, use 5-7). The script also accepts optional arguments: -a A to set the alpha parameter to A, -o O to write output to file O, -c1 C to set label for average of condition 1 values to C, and -c2 C to set label for average of condition 2 values to C.  #!/usr/bin/env python

import sys
import csv
import math

def parseSlice(s):
    if "-" in s:
        parts = s.split("-")
        return slice(int(parts[0]) - 1, int(parts[1]))
    else:
        p = int(s)
        return slice(p-1, p)

class SimpleDiff():
    filename = None
    outfile = "/dev/stdout"
    labels = None
    colname1 = "avg1"
    colname2 = "avg2"
    alpha = 1.0
    slice1 = None
    slice2 = None

    def process(self, f, out, header=True):
        nin = 0
        nout = 0
        na = self.slice1.stop - self.slice1.start
        nb = self.slice2.stop - self.slice2.start
        if header:
            f.readline()
        c = csv.reader(f, delimiter='\t')
        for line in c:
            nin += 1
            data1 = line[self.slice1]
            data2 = line[self.slice2]
            data1 = [ float(v) for v in data1 ]
            data2 = [ float(v) for v in data2 ]
            amin = min(data1)
            amax = max(data1)
            bmin = min(data2)
            bmax = max(data2)
            if amin > bmax:
                # A over B
                r1 = amax - amin
                r2 = bmax - bmin
                d = self.alpha * max(r1, r2)
                if (amin - bmax) > d:
                    avg1 = sum(data1) / na
                    avg2 = sum(data2) / nb
                    if avg1 > 0 and avg2 > 0:
                        out.write("{}\t{}\t{}\t{}\n".format(line[0], avg1, avg2, math.log(avg1/avg2, 2.0)))
                        nout += 1
            elif bmin > amax:
                # B over A
                r1 = amax - amin
                r2 = bmax - bmin
                d = self.alpha * max(r1, r2)
                if (bmin - amax) > d:
                    avg1 = sum(data1) / na
                    avg2 = sum(data2) / nb
                    if avg1 > 0 and avg2 > 0:
                        out.write("{}\t{}\t{}\t{}\n".format(line[0], avg1, avg2, math.log(avg1/avg2, 2.0)))
                        nout += 1
        return (nin, nout)

    def parseArgs(self, args):
        prev = ""
        if "-h" in args or "--help" in args:
            return self.usage()
        for a in args:
            if prev == "-a":
                self.alpha = float(a)
                prev = ""
            elif prev == "-o":
                self.outfile = a
                prev = ""
            elif prev == "-l":
                self.labels = parseSlice(a)
                prev = ""
            elif prev == "-c1":
                self.colname1 = a
                prev = ""
            elif prev == "-c2":
                self.colname2 = a
                prev = ""
            elif a in ["-a", "-o", "-l", "-c1", "-c2"]:
                prev = a
            elif self.filename is None:
                self.filename = a
            elif self.slice1 is None:
                self.slice1 = parseSlice(a)
            elif self.slice2 is None:
                self.slice2 = parseSlice(a)

        if (self.filename and self.slice1 and self.slice2):
            return True
        else:
            return self.usage()

    def usage(self):
        sys.stdout.write("""Usage: simplediff.py [options] exprfile slice1 slice2

This program performs "simple" differential analysis on gene expression data. `exprfile'
should be a file containing gene expression values with genes on the rows and samples
in the columns. `slice1' and `slice2' should be expressions of the form P-Q indicating
which columns contain the data for the two conditions being compared (e.g., if the first
condition is represented by three columns starting at column 5, use 5-7).

Options:

  -a A  | Set the alpha parameter to A (see below). Default: {}.
  -o O  | Write output to file O.
  -c1 C | Set label for average of condition 1 values to C. Default: {}.
  -c1 C | Set label for average of condition 2 values to C. Default: {}.

A gene is considered to be differentially expressed between two groups of samples (A and B)
if the two following conditions hold:

  * The two sets of expression values are totally separated, ie:
  
      the minimum expression values for the samples in A is larger than the maximum in B
      -OR-
      the minimum expression values for the samples in B is larger than the maximum in A

  * The distance between the two sets of values (the difference between the maximum of 
    the "lower" one and the minimum of the "upper" one) is larger than the largest of the
    two ranges of values in A and B, multiplied by the alpha parameter.

Example: A = {{10, 12, 16}}
         B = {{20, 21, 22}}

The two sets are separated, because min(B) > max(A). The distance between the two sets is
4 (20-16), range(A) = 6, range(B) = 2. If alpha is set to 1.0 (the default) then this
gene would NOT be considered significantly different, because the largest range is 6, 
and 6 * alpha > 4. If alpha was set to 0.5, the gene would be called as different.

""".format(self.alpha, self.colname1, self.colname2))


    def run(self):
        with open(self.outfile, "w") as out:
            with open(self.filename, "r") as f:
                (nin, nout) = self.process(f, out)
                sys.stderr.write("{} in, {} out\n".format(nin, nout))

if __name__ == "__main__":
    SD = SimpleDiff()
    if SD.parseArgs(sys.argv[1:]):
        SD.run()

Create a python loop to reduce a list of data points to their averages. [1, 2, 3, 4] def averageList(arr):
    '''This function takes in an array and returns the average of all elements'''
    # initialize sum
    s = 0
    # traverse the array
    for i in arr:
        s += i
    # calculate average
    avg = s / len(arr)
    # return the average
    return avg

# Test
arr = [1, 2, 3, 4]
print(averageList(arr))
# Output 2.5
Generate a Python program that determines the largest number in the given array. [7, 12, 5, 9] arr = [7, 12, 5, 9]

def find_max(arr):
    max_num = arr[0]
    for num in arr:
        if num > max_num:
            max_num = num
    return max_num

print("The largest number is:", find_max(arr))
Write a Python program for a given list of numbers to generate a new sorted list containing only the even numbers in the list.  def get_even_list(list):
    """
    Generate a new sorted list containing only the even numbers in a given list.
    list: the list to be checked
    """
    even_list = [number for number in list if number % 2 == 0]
    even_list.sort()
    return even_list
Develop a mini-game in Python where the user can play rock, paper and scissors against the computer.  import random

def check_winner(user_choice, computer_choice):
  if user_choice == computer_choice:
    return 'Draw'
  elif (user_choice == 'rock' and computer_choice == 'paper') or (user_choice == 'paper' and computer_choice == 'scissors') or (user_choice == 'scissors' and computer_choice == 'rock'):
    return 'Computer won!'
  else:
    return 'You won!'

def play_rock_paper_scissors():
  items = ['rock', 'paper', 'scissors']
  user_choice = input("Choose rock, paper, or scissors:")
  computer_choice = random.choice(items)
  result = check_winner(user_choice, computer_choice)
  print("Computer chose {}.".format(computer_choice))
  print("{}".format(result))

play_rock_paper_scissors()
Generate a class with objects and methods in Python to store customer data. No Input """
Generate a class with objects and methods in Python to store customer data
"""

class Customer():
    '''
    This class stores customer information
    '''
    def __init__(self, name, address, phone):
        self.name = name
        self.address = address
        self.phone = phone
 
    def get_name(self):
        '''
        This method returns customer name
        '''
        return self.name
 
    def get_address(self):
        '''
        This method returns customer address
        '''
        return self.address
 
    def get_phone(self):
        '''
        This method returns customer phone number
        '''
        return self.phone
  
    def set_name(self, name):
        '''
        This method sets customer name
        '''
        self.name = name
 
    def set_address(self, address):
        '''
        This method sets customer address
        '''
        self.address = address
 
    def set_phone(self, phone):
        '''
        This method sets customer phone number
        '''
        self.phone = phone
Design a web application using python and Flask to save user data submitted via a form.  from flask import Flask
from flask import render_template
from flask import request

@app.route('/')
def form():
    return render_template('form.html')

@app.route('/', methods=['POST']
def save_data():
   name = request.form['name']
   age = request.form['age']
   # Save user data to database 
   return render_template('success.html')
Write an app in any language that takes two integers as input and returns the greatest common divisor of the two numbers. 24, 18 JavaScript:

function gcd(a, b) {
 if (b === 0) return a;
 return gcd(b, a % b);
}

console.log(gcd(24,18)) // 6

Python:

def gcd(a, b): 
 if(b == 0): 
 return a
 else: 
 return gcd(b, a%b) 

print(gcd(24,18)) # 6
Write a Python program to combine two given strings by alternating its characters string1 = "ab"
string2 = "xy" def combine_strings(string1, string2):
    combined_string = ""
    length = max(len(string1), len(string2))
    for i in range(length):
        combined_string += string1[i] if i < len(string1) else ""
        combined_string += string2[i] if i < len(string2) else ""
    return combined_string

result = combine_strings("ab", "xy")
print(result)
Given a list of integers as input, write a Python code snippet to find the largest number. [9, 2, 6, 3, -5, 5, 7] max_num = -float('inf')
for num in [9, 2, 6, 3, -5, 5, 7]:
    if num > max_num:
        max_num = num
print(max_num)
Design a program in Python to encrypt data using AES algorithm  from Crypto.Cipher import AES

# the block size for the cipher object; must be 16, 24, or 32 for AES
BLOCK_SIZE = 16

# the character used for padding--with a block cipher such as AES, the value
# you encrypt must be a multiple of BLOCK_SIZE in length.  This character is
# used to ensure that your value is always a multiple of BLOCK_SIZE
PADDING = '{'

# one-liner to sufficiently pad the text to be encrypted
pad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * PADDING

# one-liners to encrypt/encode and decrypt/decode a string
# encrypt with AES, encode with base64
EncodeAES = lambda c, s: base64.b64encode(c.encrypt(pad(s)))
DecodeAES = lambda c, e: c.decrypt(base64.b64decode(e)).rstrip(PADDING)

# generate a random secret key
secret = os.urandom(BLOCK_SIZE)

# create a cipher object using the random secret
cipher = AES.new(secret)
Create an algorithm in Python to find the GCD of two numbers. Number 1: 28
Number 2: 56 # function to calculate GCD 
def gcd(x, y): 
  
    # This function implements the Euclidian 
    # algorithm to find GCD 
    while(y): 
        x, y = y, x % y 
  
    return x 

# Driver program to test above function 
n1 = 28
n2 = 56
print("GCD of", n1, "and", n2, "is", gcd(n1, n2))
Create a Python script that prints an inverted pyramid pattern. Number = 5; # Create an empty list 
pattern = [] 
# Add the elements to the list for the desired pattern 
rows = 5
for i in range(1, rows+1): 
    rows = rows - i 
    pattern.append("*"*i +  " "*rows) 
   
# print the pattern 
for i in pattern[::-1]: 
    print(i)
Write a Python program to classify the iris dataset. The program should have an input field for the train and test data and output a confusion matrix. Train data: 

SepalLengthCm	SepalWidthCm	PetalLengthCm	PetalWidthCm	Species
6.0					3.2					4.7					1.4					Iris-versicolor
5.4					3.7					1.5					0.2					Iris-setosa
Test data: 

SepalLengthCm	SepalWidthCm	PetalLengthCm	PetalWidthCm	Species
5.7					2.8					4.5					1.3					
6.1					2.9					4.7					1.4 from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier

# Load and split the dataset
iris_data = load_iris()
x_train, x_test, y_train, y_test = train_test_split(iris_data.data, iris_data.target, test_size=0.2)

# Train the classifier
clf = RandomForestClassifier(n_estimators=100)
clf.fit(x_train, y_train)

# Make predictions
preds = clf.predict(x_test)

from sklearn.metrics import confusion_matrix

# Output confusion matrix
confusion_matrix(y_test, preds)
Create a Python program that uses recursive functions to search through a list of integers and find pairs whose sum equals a given number. List of integers: [2, 4, 3, 5, 7, 8]
Given number: 7 def search(nums, target):
  foundPairs = set()
  def helper(i, j):
    if i >= j:
      return
    s = nums[i] + nums[j]
    if s == target:
      foundPairs.add((nums[i], nums[j]))
    if s >= target:
      helper(i, j-1)
    else:
      helper(i+1, j)
  helper(0, len(nums)-1)
  return foundPairs

lst = [2, 4, 3, 5, 7, 8]
target = 7
print(search(lst, target)) 
# Output: {(3,4), (2,5)}
Create a Python program to implement linear search to find a specified item in an array. Array = [1, 2, 3, 4, 5], search_number = 4 def linear_search(arr, x): 
    for i in range(len(arr)): 
        if arr[i] == x: 
            return i 
    return -1

arr = [1, 2, 3, 4, 5]
search_number = 4
result = linear_search(arr, search_number)
if result == -1:
    print("Number not found in the array")
else:
    print("Number found at index:", result)
Write a python script that reads a sentence from console and returns the number of vowels in the sentence. Sentence: Hi! My name is John """
Read a sentence from console and return the number of vowels
"""

def count_vowels(sentence):
    vowels = set('aeiouAEIOU')
    count = 0
    for letter in sentence:
        if letter in vowels:
            count += 1
    return count

if __name__ == "__main__":
    sentence = input('Sentence: ')
    print(count_vowels(sentence)) # => 5
Develop a python code to print a dictionary’s key-value pairs in sorted order of keys. {'a': 5, 'c': 10, 'b': 4} my_dict = {'a': 5, 'c': 10, 'b': 4}

for key in sorted(my_dict):
    print(key, my_dict[key])

# Output:
# a 5
# b 4
# c 10
Develop a Python script to generate a Fibonacci series  def fibonacci(n):
    a = 0
    b = 1
    if n < 0:
        print("Incorrect input")
    elif n == 0:
        return a
    elif n == 1:
        return b
    else:
        for i in range(2,n):
            c = a + b
            a = b
            b = c
        return b
Add a loop structure to create a Python program that prints out the numbers 0 to 10.  for x in range(0, 11):
 print(x)
Identify the complexity of the following python sorting algorithms. numbers = [10, 5, 8, 7, 2, 9, 1] [Selection Sort]: O(n^2)
[Insertion Sort] : O(n^2)
[Merge Sort]: O(nlogn)
[Quick Sort]: O(nlogn)
[Heap Sort]: O(nlogn)
Create a python program to check if a list is palindromic. list1 = [1,2,3,2,1] def is_palindrome(lst):
  if len(lst) < 2:
    return True
  if lst[0] != lst[-1]:
    return False
  return is_palindrome(lst[1:-1])
Create a Python script to generate random passwords. The passwords should have at least 5 characters and should be able to contain uppercase, lowercase, numbers, and special characters. Not applicable import random
import string

def generate_password():
    length = 5
    chars = string.ascii_letters + string.digits + '!@#$%^&*()'
    random.seed = (random.SystemRandom().random() * 1000000000)

    return ''.join(random.choice(chars) for i in range(length))
Create a RESTful API endpoint in python that will accept an input string and return a list of palindrome words.  @app.route('/find_palindromes', methods=["GET"])
def find_palindromes():
    text = request.args.get('text', '')
    words = text.split(' ')
    result = []
    for word in words:
        if word == word[::-1]:
            result.append(word)
    return jsonify(result)
Develop a Python script to print out the prime numbers up to a given limit. An integer limit of 100. def is_prime(n):
 if n == 1:
 return False
 for i in range(2, n):
 if n % i == 0:
 return False
 return True

# Print out prime numbers from 1 to 100
limit = 100

for i in range(1, limit+1):
 if is_prime(i):
 print(i)
Analyze a given list of numbers and print out the mean and variance using Python. numbers = [2, 4, 6, 9, 12, 13] def analyze_list(numbers):
 mean = 0
 for num in numbers:
 mean += num
 mean /= len(numbers)
 
 variance = 0
 for num in numbers:
 variance += (num - mean)**2
 variance /= len(numbers)
 
 print("Mean:", mean)
 print("Variance:", variance)
Generate a method in Python that determines if a given string contains a URL.  import re

def isUrl(string): 
    urlPattern = re.compile(r'https?://(www\.)?(\w+)(\.\w+)') 
    match = urlPattern.search(string) 
    return bool(match)
Create an algorithm in Python that finds a 'magic number' in an array. A magic number is an integer in the array that is strictly greater than the number of elements before it in the array. [1, 2, 5, 7, 9, 10] def find_magic_number(a):
 m = -1
 for i in range(len(a)):
 if a[i] > i:
 m = a[i]
 break

return m

print(find_magic_number([1, 2, 5, 7, 9, 10]))
# 7
Optimize the following Python code to make it more concise and easier to understand. def concat_items(items):
    result = ""
    for item in items:
        result = result + item
    return result def concat_items(items):
    # Use join() to join the elements in the given list with an empty string
    return "".join(items)
Come up with a function in Python that takes two integers as arguments and returns the sum.  def add_two_int(a, b):
    return a + b
Create a Python script to find the Fibonacci series which is a sequence of numbers where every number is the addition of the previous two numbers. n = 10 def fibonacci(n): 
    if n == 0: return 0
    if n == 1 or n == 2: return 1

    fib_n_2 = 1
    fib_n_1 = 1
    fib_n = 0

    for i in range(3, n + 1): 
        fib_n = fib_n_1 + fib_n_2
        fib_n_2 = fib_n_1  
        fib_n_1 = fib_n 
    return fib_n 

print(fibonacci(n))
Write a Python function that takes a rectangular array and prints it in rotated form (90° degree anticlockwise rotation) [
  [1,2,3],
  [4,5,6],
  [7,8,9]
] def rotate_rectangle(rectangle):
    n = len(rectangle)
    for i in range(n):
        for j in range(i + 1, n):
           rectangle[i][j], rectangle[j][i] = rectangle[j][i], rectangle[i][j]

    for row in rectangle:
        row.reverse()

    return rectangle

rectangle = [
    [1,2,3],
    [4,5,6],
    [7,8,9]
] 
result = rotate_rectangle(rectangle)
print(result)
Create a class in Python to store the details of a movie including title, actor, and release date.  class Movie:
    def __init__(self, title, actor, release_date):
        self.title = title
        self.actor = actor
        self.release_date = release_date
You are given a list of data that you need to analyze and come up with visual output. Create a python code that clean the data and generate a visual representation. data = [10, 20, 30, 40, 50] import pandas as pd
import matplotlib.pyplot as plt

# Clean data
data_df = pd.DataFrame(data)

# Visual representation
plt.figure(figsize=(5,5))
plt.bar(data_df.index, data_df[0])
plt.xticks(data_df.index)
plt.xlabel('Index')
plt.ylabel('Value')
plt.title('Visual Representation of Data')
plt.show()
Create an natural language processing application in Python that extracts the top 10 most frequent words from a given text. Lorem ipsum dolor sit amet, consectetur adipiscing elit, 
sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. from collections import Counter

text = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."

# Split the text into individual words
words = text.split()

# Create a counter object
counter = Counter(words)

# Get the top 10 most frequent words
top_words = counter.most_common(10)

print(top_words)

# Output: [('dolor', 1), ('Lorem', 1), ('ipsum', 1), ('amet', 1), ('consectetur', 1), ('adipiscing', 1), ('elit,', 1), ('sed', 1), ('do', 1), ('eiusmod', 1)]
Edit the following Python code to implement case-insensitivity and replace "word" with a user-defined variable. word = 'SUPER'

if word == 'super' or word == 'SUPER':
 print('Object found') word = input('Enter word: ')

if word.lower() == 'super':
 print('Object found')
Create a Python program to read a string and return the character with the highest frequency. Sample string import collections

str = "Sample string"
count = collections.Counter(str)
highest_freq = 0
highest_freq_char = ''

for char, value in count.items():
    if value > highest_freq:
        highest_freq = value
        highest_freq_char = char

print("The character {} has the highest frequency of {} in this string".format(highest_freq_char, highest_freq))
Create issue tickets on ServiceNow and Redmine systems for tracking purposes using an XML report extracted from an OpenVAS VA scanner. Configure your environment through the preferences file 'ov_prefs.txt' and specify the OpenVAS XML report file on the command line. The script will create a Redmine issue and a ServiceNow incident for each vulnerability in the report file that meets the specified severity level. The script will check for currently active tickets for the same issue and update them if they exist. The script will log the created tickets in 'ticketlog.csv' and 'opentix.csv'.  #!/usr/bin/python3

# This takes an XML report extracted from an OpenVAS VA scanner and
# creates issue tickets on ServiceNow and Redmine systems for tracking
# purposes.
#
# Most parameters are specified in the 'ov_prefs.txt' file, however,
# the XML report file may be specified on the command line.  If
# specified this way, the script will ignore that line in the
# preferences file, however, the line must still exist!

# version 0.5

#modules
import os
import sys
import csv
import json
import socket
import requests
from redmine import Redmine
import xml.etree.ElementTree as ET

## Configure your environment through preferences file
# load prefs from ~/.incmgmt/prefs.txt
# The parameters should be in the following format
# DO NOT use comments or blank lines.
# Redmine Project
# Redmine URL
# Redmine API key
# ServiceNow URL
# ServiceNow username
# Servicenow password
# severity level
# OpenVAS XML report file  
# Preamble: general info you want included in every ticket created

os.chdir(os.path.expanduser("~") + "/.incmgmt/")
prefs = []
for line in open('ov_prefs.txt'):
    prefs.append(line)
redmine_project = prefs[0].rstrip() 
redmine_server = prefs[1].rstrip() 
redmine_key = prefs[2].rstrip()
sn_server = prefs[3].rstrip() 
user = prefs[4].rstrip()
pwd = prefs[5].rstrip() 
severity_filter = prefs[6].rstrip()
if len(sys.argv) == 1:   # test for command line arguments
    ov_report = prefs[7].rstrip()
else:
    ov_report = sys.argv[1]
preamble =  prefs[8].rstrip() 
    
# Define service now headers
headers = {"Content-Type":"application/json","Accept":"application/json"}


# Input the vulnerability report and parse the XML
root = ET.parse(ov_report)

## determine criticality factors
# impact and urgency are used for Service Now
# priority is used for Redmine
def criticality(cvss):
    global impact
    global urgency
    global priority
    if float(cvss) > 7:
        impact = 2
        urgency = 1
        priority = 5
    elif float(cvss) < 4:
        impact = 3
        urgency = 3
        priority = 3
    else:
        impact = 2
        urgency = 2
        priority = 4
    return impact, urgency, priority

def reverse_lookup(ip):
    try:
        hostname = socket.gethostbyaddr(ip)[0]
    except socket.herror:
        hostname = " "
    return hostname
        

## determine category
""" Redmine reference
0 nothing
53 Database
54 Networking
56 Server - Unix
55 Server - Windows
57 Web Application  """

## Function to categorize the issue for all ticketing systems
# categoy is used for redmine, and subcategory is used for
# ServiceNow because it has a default high-level category for vulns
def categorize(family):
    if family == "Web application abuses" or "Web Servers":
        category = 57
        subcategory = "Internal Application"
    elif family == "Databases":
        category = 53
        subcategory = "Internal Application"
    elif family == "General":
        category = 56
        subcategory = "UNIX"
    elif "CentOS" in family:
        category = 56
        subcategory = "UNIX"
    elif "Windows" in family:
        category = 55
        subcategory = "Windows"
    else:
        category = 0
        subcategory = " "
    return category, subcategory

#Specify Redmine server params
redmine = Redmine(redmine_server, requests={'verify': False}, key=redmine_key, version='2.5.1')

def redmine_issue(priority, subject, body, category):
    ## Create an issue in Redmine to track the vulnerability
    # and return information regarding the created ticket
    new_issue = redmine.issue.create(project_id = redmine_project, \
        priority_id = priority, subject = subject, description = body,\
        tracker_id=19, category_id = category)
    redmine_issue_id = str(new_issue.id)
    redmine_url = redmine_server + "/issues/" + redmine_issue_id
    print("redmine ticket created")
    return redmine_url, redmine_issue_id

def sn_issue(subject, redmine_url, subcategory, impact, urgency):
    ## Create the incident in ServiceNow
    # Construct the incident JSON object
    incident_data = '{'  + \
        '"short_description":' + '"' + subject + '",' + \
        '"description":' + '"For more information, see: ' + redmine_url + '",' + \
        '"u_category":' + '"Vulnerability Management",' + \
        '"u_subcategory":' + '"' + subcategory  + '",' + \
        '"impact":' + '"' + str(impact)  + '",' + \
        '"urgency":' + '"' + str(urgency)  + '",' + \
        '"contact_type":"Alert"' + '}' 
    # Create the incident on the Service Now system
    response = requests.post(sn_server, auth=(user, pwd), \
        headers=headers, data=incident_data)
    # Capture the ticket number and unique identifier
    sn_ticket = response.json()['result']['number']
    sys_id = response.json()['result']['sys_id']
    print("service now ticket created")
    return sn_ticket, sys_id

# Update the Service Now ticket with a comment
def sn_update(sys_id, comment):
    sn_url = sn_server + '/' + sys_id  # REST URL for the ticket
    update = requests.patch(sn_url, auth=(user, pwd), headers=headers,\
            data='{"comments":"' + comment +'"}')
    if update.status_code != 200: 
        print('Status:', response.status_code, 'Headers:',\
               response.headers, 'Error Response:',response.json())
        exit()
    print("Updated Service Now ticket" + " " + sys_id)  # user output


# checks for a ticket with the exact same "subject" or "short
# description" on the Redmine system.
def CheckTickets(subject):
    i = 0
    project = redmine.project.get(redmine_project)
    while i < len(project.issues):
#        print("Checking: " + str(project.issues[i]))
        if str(project.issues[i]) == subject:
            incident_id = project.issues[i].id
            opentix_log = csv.reader(open('opentix.csv'))
            # Generate a dictionary of the known open tickets.  This
            # should really be performed at the beginning so it
            # doesn't run everytime, but meh!
            tix_dict = {}
            for row in opentix_log:
                tix_dict[row[0]]=row[2]
            sn_sysid = tix_dict[str(incident_id)]
            print("Found match: " + tix_dict[str(incident_id)] + " " + str(project.issues[i]))  # debug
            return sn_sysid # return a value for test
        i += 1
    return None  # if the test fails, return nothing
            
 
def log(redmine_issue_id, sn_ticket, sys_id, redmine_url):
    # Write log file of tickets created
    ticket_log = open('ticketlog.csv','a')
    opentix_log = open('opentix.csv','a')
    ticket_log.write(redmine_issue_id + ',' + sn_ticket + ',' + \
        sys_id + ',' + redmine_url + ',' + '\n')
    opentix_log.write(redmine_issue_id + ',' + sn_ticket + ',' + \
        sys_id + '\n')
    ticket_log.close()
    opentix_log.close()

## Main program.  Extract the data, then call functions
# Extract elements from the XML for use in creating the ticket
for result in root.findall("./report/results/result"):
    # only process vulnerabilities of a certain severity or higher
    if result.find('overrides/override/new_severity') is not None:
        cvss = result.find('overrides/override/new_severity').text
    else:
        cvss = result.find('severity').text
    if float(cvss) >= float(severity_filter):
        # Extract the elements from the XML
        host_ip = result.find('host').text
        severity = result.find('severity').text
        if result.find('description').text is not None:
            description = result.find('description').text
        else:
            description = "no extended description available"
        short_desc = result.find('nvt/name').text
        cvss = result.find('nvt/cvss_base').text
        cve = result.find('nvt/cve').text
        system_type = result.find('nvt/family')
        # get some additional info based on extracted values
        hostname = reverse_lookup(host_ip)  # perform name lookup
        impact, urgency, priority = criticality(severity)
        category, subcategory = categorize(system_type)
        full_desc = result.find('nvt/tags').text
        criticality(cvss)    # calc criticality levels
        subject = short_desc + " detected on " + hostname + " " + host_ip
        # Create the body of the ticket by combining multiple elements from 
        # the report file.
        body = preamble + "\n \n" + full_desc + "\n \n CVEs:" + cve +\
            "\n \n Description: \n" + description 
        # Check for currently active ticket for same issue.  This
        previous = CheckTickets(subject)
        # Create a new ticket if one does not exist.
        if previous is not None:
            sn_update(previous, "Please provide an update for this ticket")
        else:
            # create the issues in redmine and return info        
            redmine_url, redmine_issue_id = redmine_issue(priority, \
                subject, body, category)
            # create the issues in ServiceNow and return info
            sn_ticket, sys_id = sn_issue(subject, redmine_url, \
                subcategory, impact, urgency)
            log (redmine_issue_id, sn_ticket, sys_id, redmine_url)


Write a function to calculate the median value of given list of numbers in Python. Random Integer List : [3, 5, 2, 8, 6, 5] def calculate_median(input_list): 
   
    # Sort the list
    sorted_list = sorted(input_list)
    length = len(sorted_list)
  
    # Check if number of elements are even 
    if (length % 2 == 0) :  
        # If true, get the 2 middle elements 
        first = length//2 -1
        second = length//2
  
        # Get the median value
        median = (sorted_list[first] + sorted_list[second]) / 2
    else : 
        # If odd, get the middle element 
        median = sorted_list[length//2]

    return median

# Call the function
input_list = [3, 5, 2, 8, 6, 5]
print(calculate_median(input_list))

# Output: 5
Create a python program to visualize the temperature forecast over a 7-day period. Temperature data for the next 7 days.
Day 1 – 15°C
Day 2 – 12°C
Day 3 – 16°C
Day 4 – 8°C
Day 5 – 13°C
Day 6 – 20°C
Day 7 – 18°C import matplotlib.pyplot as plt 

# Input data 
x = [1, 2, 3, 4, 5, 6, 7] 
y = [15, 12, 16, 8, 13, 20, 18] 

# Plotting a graph 
plt.plot(x, y) 

# Labeling x and y axes
plt.xlabel('Day') 
plt.ylabel('Temperature') 

# Title of the graph
plt.title('Temperature Forecast') 

# Function to show the plot
plt.show()
Write a function in Python to render a table in ASCII with 4 columns and 3 rows.  def render_ascii_table(columns, rows):
    col_width = 10

    # Create array of column labels
    header_row = [('{:^' + str(col_width) + '}').format(label) for label in columns]

    # Create divider row
    divider_row = ['-' * col_width] * len(columns)

    # Create row of data
    data_rows = [[('{:^' + str(col_width) + '}').format(data) for data in row] for row in rows]

    # Create table
    table = [header_row] + [divider_row] + data_rows

    # Render table
    for row in table:
        print('|'.join(row))

render_ascii_table(['col1', 'col2', 'col3', 'col4'], [
    ['data1', 'data2', 'data3', 'data4'],
    ['data5', 'data6', 'data7', 'data8'],
    ['data9', 'data10', 'data11', 'data12']
])
Design a function in Python for filtering out unique elements in a list. list = [1, 2, 2, 3, 3, 4] def filter_list(list): 
  filtered_list = [] 

  for i in list: 
    if i not in filtered_list: 
      filtered_list.append(i) 
  
  return filtered_list
Write a Python program to find the sum of the given series 1 + 1/2 + 1/3 +...... + 1/100.  sum = 0
for i in range(1,101):
    sum += 1/i

print(sum)
Create a Python script to reverse each word in a sentence. Sentence = "This is a test" # Create a empty list to store the reversed sentences
 reversed_sentences = []

# Get the list of words from the given sentence
words = sentence.split(' ')

# Reverse each word
for word in words:
  reversed_word = word[::-1]
  reversed_sentences.append(reversed_word)

# Print the reversed sentence
reversed_sentence = ' '.join(reversed_sentences)
print(reversed_sentence) 
# Output: sihT si a tset
Design a Python program to stop a loop after some specific iterations  for i in range(100):
    if (i > 10):
        break
    print(i)
Given the following data, generate a Python program that sorts the data in ascending order. [5, 3, 10, 4, 1] def sort_list(list_input):
    sorted_list = sorted(list_input)
    return sorted_list
Create an end-to-end machine learning system in Python by using a deep neural network to solve a multi-class classification problem. Not applicable # Importing Libraries
import numpy as np
from keras.models import Sequential
from keras.layers import Dense

# Defining Input and Output
x = np.array([[1, 3], [1, 4], [2, 4], [3, 1], [4, 1], [4, 2]])
y = np.array([[1], [1], [2], [3], [3], [2]])

# Defining and Compiling the Model
model = Sequential()
model.add(Dense(4, input_dim=2, activation='relu'))
model.add(Dense(1, activation='sigmoid'))
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Training the Model
model.fit(x, y, epochs=100, batch_size=5)

# Testing the Model
test_x = np.array([[5, 2], [4, 3]])
results = model.predict(test_x)
print("Classes predicted: ", np.round(results))
Create a program in Python that takes a word as an argument and print it in reverse. 'Hello World' def reverse(word):
    return word[::-1]

print(reverse('Hello World'))
Create a Python class for a stack and its basic functions such as push, pop and peek.  class Stack:
  
    # empty list to store stack elements
    def __init__(self):
        self.stack = []
  
    # push element to the stack
    def push(self, data):
        self.stack.append(data)
  
    # pop element from the stack
    def pop(self):
        self.stack.pop() 
  
    # peek element from the stack
    def peek(self):
        return self.stack[-1]
Utilize an existing ML algorithm in Python to classify a given dataset.  #Import necessary packages
from sklearn.svm import SVC 
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

#Split data into X and y
X = dataset[:,:-1] 
y = dataset[:,-1]

#Split data into test and train
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

#Initiate and fit the algorithm
clf = SVC(kernel="linear")
clf.fit(X_train, y_train)

#Make predictions with the trained model
y_pred = clf.predict(X_test)

#Calculate accuracy of the algorithm
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy: {}".format(accuracy))
Write a Python function that takes a string, checks if it is a palindrome and returns true or false. "level" def is_palindrome(string):
    rev_string = string[::-1]
    if string == rev_string:
        return True
    else:
        return False 

print(is_palindrome("level"))
Implement a function in Python that checks for palindrome strings. Not applicable def isPalindrome(text):
 text = text.lower()
 return text == text[::-1]

# Testing

print(isPalindrome("Mom")) # Should return True
print(isPalindrome("Apple")) # Should return False
Build a program to convert a given text into its equivalent Morse code in Python. Text: hello MORSE_CODE_DICT = { 'A':'.-', 'B':'-...',
                   'C':'-.-.', 'D':'-..', 'E':'.',
                   'F':'..-.', 'G':'--.', 'H':'....',
                   'I':'..', 'J':'.---', 'K':'-.-',
                   'L':'.-..', 'M':'--', 'N':'-.',
                   'O':'---', 'P':'.--.', 'Q':'--.-',
                   'R':'.-.', 'S':'...', 'T':'-',
                   'U':'..-', 'V':'...-', 'W':'.--',
                   'X':'-..-', 'Y':'-.--', 'Z':'--..',
                   '1':'.----', '2':'..---', '3':'...--',
                   '4':'....-', '5':'.....', '6':'-....',
                   '7':'--...', '8':'---..', '9':'----.',
                   '0':'-----', ', ':'--..--', '.':'.-.-.-',
                   '?':'..--..', '/':'-..-.', '-':'-....-',
                   '(':'-.--.', ')':'-.--.-'}

def text_to_morse(text):
    morse_code = ""
    for ch in text:
        if ch.upper() in MORSE_CODE_DICT:
            morse_code += MORSE_CODE_DICT[ch.upper()] + " "
    return morse_code

text = "hello"
morse_code = text_to_morse(text)

print(morse_code)
Generate a Python program that searches for a given key in a dictionary. key: 'name' my_dict = {
 'name': 'John',
 'age': 26,
 'salary': 5000
}

find_key = 'name'

if find_key in my_dict:
 print(my_dict[find_key])
Write a function in Python that will take in a string and return the most commonly occurring character. Sample string: "abrakadabra" def max_char(s):
    chars = {}
    for c in s:
        chars[c] = chars.get(c, 0) + 1
    max_val = -1
    max_char = None
    for c, v in chars.items():
        if v > max_val:
            max_val = v
            max_char = c
    return max_char

print(max_char('abrakadabra'))

# Output: a (occurs 5 times)
Generate a Python program to find the missing element in a given integer array of 1 to 100. [1, 2, 4, 6, 7, 10] def find_missing_element(nums):
  # Sum of the numbers from 1 to 100
  sum_of_nums = (100*(101))//2

  # Compute the sum of the given numbers
  sum_of_given_nums = 0
  for num in nums:
    sum_of_given_nums += num

  # Compute the missing element
  missing_element = sum_of_nums - sum_of_given_nums
  
  return missing_element

nums = [1, 2, 4, 6, 7, 10]
missing_element = find_missing_element(nums)
print("The missing element is:", missing_element)
Write a Python Program to create a triangle of asterisks of a given height as shown below.  def drawTriangle(n):
    for i in range(n):
        for j in range(i+1):
            print("*", end="")
        print("\r")

drawTriangle(5)
Create a Python program that checks if two numbers are equal or not.  def is_equal(num1, num2):
 return num1 == num2
Write a Python program that inputs two numbers and prints out their GCD (greatest common divisor). Two numbers: 90, 28 a = 90
b = 28

while(b > 0):
  temp = b 
  b = a % b
  a = temp 

print ("The GCD is",a)
Create a Python function to replace all the vowels in a string with 'x'.  def replace_vowels(s):
  vowels = ['a', 'e', 'i', 'o', 'u']
  for char in s:
    if char in vowels:
      s = s.replace(char, 'x')
  return s
Given a list of squares in a 2D array, generate a Python program to find the number of squares with a side greater than 5. [[2, 6, 1], [4, 3, 9], [4, 6, 7]] count = 0
for row in arr:
    for col in row:
        if col > 5:
            count += 1
print(count)
Optimize the following Python program to increase its performance by three times. def slow_operation(n):
    result = 0
    for i in range(n):
        result += i
    return result def fast_operation(n):
    result = (n * (n + 1)) // 2
    return result
Evaluate the accuracy of a machine learning model. A classification model trained on a dataset of 10000 images. Create a python script to evaluate the performance of the classification model. The script should measure the accuracy of the model by measuring the accuracy score on a held-out test set. The test should compare the model's predictions to the true labels for the image samples.
Create a Python function to detect a specific sequence Given a list of integers, list_a = [1, 6, 3, 7, 4], find the index of the sequence [3, 7] def find_sequence(list_a, pattern):
    result = []
    for i in range(len(list_a)-len(pattern)+1):
        if list_a[i:i+len(pattern)] == pattern:
            result.append(i)
    return result
Use the following data to create a graphical representation in Python. x = [1,2,3,4,5]
y = [2,4,6,8,10] import matplotlib.pyplot as plt

x = [1,2,3,4,5]
y = [2,4,6,8,10]

plt.plot(x,y)
plt.title('Graph title')
plt.xlabel('X-axis Label')
plt.ylabel('Y-axis Label')

plt.show()
Create a class in Python to store details of books in a library  class Book:
    def __init__(self, title, author, publisher, year):
        self.title = title
        self.author = author
        self.publisher = publisher
        self.year = year

    def getDetails(self):
        print("Title: ", self.title)
        print("Author: ", self.author)
        print("Publisher: ", self.publisher)
        print("Year: ", self.year)
Develop a Python program that calculates the average of a set of numbers based on user input Not applicable numlist = []
while True:
    user_input = input("Enter a number: ")
    if user_input == 'done':
        break
    elif user_input == '': 
        continue
    else:
        numlist.append(int(user_input))
print("Average is: ", sum(numlist) / len(numlist))
Create an AI chatbot using the Rasa NLU library in Python for helping customers with their queries. A dataset of 2000 customer queries about product information. import rasa
from rasa.nlu.training_data import load_data
from rasa.nlu.model import Trainer

# Load data
data = load_data('queries_data.json')

# Create a trainer and train the model
trainer = Trainer(rasa.nlu.config.load("config.yml"))
interpreter = trainer.train(data)

# Use the model to predict customer queries
predictions = interpreter.parse('I need a product with high durability')

# Print the prediction results
print(predictions)
Generate a Python list comprehension that creates a new list containing all the odd numbers between 0 and 10. Not applicable odd_numbers = [x for x in range(0, 11) if x % 2 != 0]
Write a Python script to find the sum of all prime numbers in a given interval. 100 200 # Python program to find the sum of 
# all prime numbers in a given interval 
  
# Fucntion to calculate the sum of all prime numbers in a given range 
def prime_sum_in_range(start, end): 
  
    # Initialize sum of primes 
    prime_sum = 0
  
    # loop through each number from start to end 
    for num in range(start, end + 1): 
  
        # check if the number is prime 
        if is_prime(num): 
            # Add the prime numbers to the sum 
            prime_sum += num 
  
    return prime_sum 
  
# Function to check if a number is prime or not 
def is_prime(n): 
  
    # Check if the number is less than or equal to 1 
    if n <= 1: 
        return False
  
    # Check if the number is a perfect square 
    sqr = int(math.sqrt(n)) + 1
  
    # Iterate through each value from 2 to the square root of the number 
    for divisor in range(2, sqr): 
        if n % divisor == 0: 
            return False
  
    # Return True for a prime number 
    return True

start =  100
end = 200
  
print("Sum of prime numbers in given range is", prime_sum_in_range(start, end))
Using a Python dictionary, create a function that counts the occurrence of each word in a given string. string = "This is a sample sentence to count the occurrence of each word." def count_words(string):
    
    #split the string into individual words
    words = string.split()
    
    #create an empty dictionary to store the word counts
    word_counts = {}
    
    #loop through each word in the list
    for word in words:
        #if the word is not in the dictionary, add it with a count of 1
        if word not in word_counts:
            word_counts[word] = 1
        #otherwise increment the count for that word
        else:
            word_counts[word] += 1
            
    #return the dictionary of word counts
    return word_counts
Convert the following JSON string into a Python dictionary. {"a":1, "b": "Hello", "c": {"d": [34, 56]}} import json

json_string = '{"a":1, "b": "Hello", "c": {"d": [34, 56]}}'
parsed_json = json.loads(json_string)

print(parsed_json)  # Output: {'a': 1, 'b': 'Hello', 'c': {'d': [34, 56]}}
Write a Python program to optimize an existing array using Bubble sort. arr = [2,3,1,4,5] def bubble_sort(arr):
    for i in range(len(arr)):
        for j in range(len(arr) - 1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr

if __name__ == '__main__':
    arr = [2,3,1,4,5]
    print("Optimized array:", bubble_sort(arr))
Design a Python program for converting a given string of characters into its corresponding ASCII code. String: "Hello" def getAscii(string):
    result = []
    for char in string:
        result.append(ord(char))
    return result

print(getAscii('Hello'))
# Output: [72, 101, 108, 108, 111]
Create an API endpoint in Python to delete a record from a MongoDB database.  @app.route('/delete-record', methods=['DELETE'])
def delete_record():
    db = client.your_database  # specify the correct database
    collection = db.your_collection  # specify the correct collection

    # get the required ID from the request
    id = request.args.get('id')

    # perform the deletion
    result = collection.delete_one({'_id': ObjectId(id)})

    if result.deleted_count == 0:
        # return an error if the record was not found
        return {'message': 'Record not found'}, 404
    else:
        return {'message': 'Record deleted'}, 200
Develop a program in Python to detect whether an input string is a palindrome. input_string = "level" def check_palindrome(input_string):
    '''This function will check if the given string is palindrome or not.'''
    temp_string = input_string.lower()
    return temp_string == temp_string[::-1]

input_string = "level"

# check if the string is palindrome
if check_palindrome(input_string):
    print("The string is palindrome.")
else:
    print("The string is not palindrome.")
Create Python code to edit a given piece of code and make it more efficient. def sum_of_squares(arr):
    total = 0
    for i in range(len(arr)):
        for j in range(len(arr)):
            total += arr[i] * arr[j]
    return total def sum_of_squares(arr):
    total = 0
    for num in arr:
        total += num * num
    return total
Generate a Python script to create a list of numbers in the range 0-n (inclusive) and print it. n = 10 n = 10

list_numbers = []
for i in range(0,n+1):
    list_numbers.append(i)

print(list_numbers)
Implement a linked list in Python.  class Node:
    def __init__(self, data):
        self.data = data 
        self.next = None 
  
# Linked List class 
class LinkedList: 
    def __init__(self): 
        self.head = None
  
    # Inserts a new node at the beginning 
    def push(self, new_data): 
        new_node = Node(new_data) 
        new_node.next = self.head 
        self.head = new_node 
  
    # Prints the linked list. 
    def print_list(self): 
        temp = self.head 
        while temp: 
            print(temp.data) 
            temp = temp.next

llist = LinkedList() 
llist.push(1) 
llist.push(2) 
llist.push(3) 
llist.push(4) 

llist.print_list()  # 4 3 2 1
Create a Python program to calculate the sum of all odd numbers between 1 and a given number.  def calculate_sum_of_odd_numbers(max_number):
    
    sum_of_odd_numbers = 0
    for num in range(1, max_number + 1):
        if num % 2 != 0:
            sum_of_odd_numbers += num
    return sum_of_odd_numbers

print(calculate_sum_of_odd_numbers(15))
Implement a sorting algorithm in Python that sorts a given array of numbers in descending order. [2, 5, 7, 3, 1, 8] def sort_descending(list):
    sorted_list = sorted(list, reverse=True)
    return sorted_list
Create a basic genetic algorithm program in Python to identify the optimal parameters for a linear regression model such that it minimizes the mean squarred error. A dataset of two features - feature_1 and feature_2. import numpy as np
from sklearn.linear_model import LinearRegression

# Parameters for the genetic algorithm
num_generations = 50   # Number of generations
population_size = 20  # Population size

# Training data
X = np.array([[feature_1], [feature_2]]).T
y = np.array([[label]]).T

# Function to evaluate the fitness of a given individual
def get_fitness(individual):
 lin_ model = LinearRegression()
 model.fit(X, y)
 y_pred = model.predict(X)
 error = mean_squared_error(y_true, y_pred)
 return error

# Function to generate a single member of the population
def generate_individual():
 individual = [random.uniform(-1, 1) for x in range(2)]
 return individual

# Function to generate a whole population
def generate_population():
 population = [generate_individual() for x in range(population_size)]
 return population 

# Main loop of the genetic algorithm
population = generate_population()
for generation in range(num_generations):
 new_population = []
 for individual in population:
  # Evaluate the fitness of the individual
  fitness = get_fitness(individual)
  # Select the two best individuals based on their fitness
  mates = selection(population, fitness)
  # Crossover
  new_individual = crossover(mates)
  # Mutation
  new_individual = mutation(new_individual)
  # Add this individual to the new population
  new_population.append(new_individual)
 # Set the population to the new one
 population = new_population

# Print the optimal solution
optimal_solution = population[0] # Best individual is the first one
print("Optimal solution: ", optimal_solution)
Compose a regular expression in Python to find words beginning with a certain letter.  import re

pattern = r"\b[aA]\w+"

# call the function
print(re.findall(pattern))
Write a Python program to process an array of strings. The program should print out the characters in each string in reverse order. [ "Hello", "World" ] # Input array
arr = ["Hello", "World"]

# Loop through each string
for s in arr:
 # Print the string in reverse order
 print(s[::-1])

# Output
olleH
dlroW
Write a Python program to sort a given list of numbers in ascending order. [3, 4, 7, 1, 6, 9, 2] list = [3, 4, 7, 1, 6, 9, 2] 
list.sort() 
print("Ascending :",list)
Write a code to compare two strings in Python and display their similarity score. str1 = 'The quick brown fox jumps over the lazy dog'
str2 = 'The fast yellow rabbit jumps on top of the tired lion' def get_similarity_score(str1, str2):
    tokens1 = str1.split()
    tokens2 = str2.split()

    common_words = set(tokens1) & set(tokens2)
    all_words = set(tokens1) | set(tokens2)

    return len(common_words) / len(all_words)

str1 = "The quick brown fox jumps over the lazy dog"
str2 = "The fast yellow rabbit jumps on top of the tired lion"
similarity_score = get_similarity_score(str1, str2)
print("Similarity score:", similarity_score)
Create a Python script to break the given sentence into words. sentence = "This is an example sentence." def break_sentence(sentence):  
    return sentence.split(" ")
Write a Python script to refresh a given table of data in a PostgreSQL database every 5 minutes. Not applicable import psycopg2
from datetime import datetime, timedelta
import schedule
import time

conn = psycopg2.connect(
 host="localhost", 
 database="db", 
 user="user", 
 password="password"
)

def refresh_data():
 cur = conn.cursor()
 query = 'REFRESH TABLE "TableName";'
 cur.execute(query)
 conn.commit()

# run the refresh_data job every 5 minutes
schedule.every(5).minutes.do(refresh_data)

while True:
 schedule.run_pending()
 time.sleep(1)
Generate a python function that takes a list of strings and returns the longest one. words = ['hello', 'world', 'this', 'is', 'a', 'test'] def longest_string(words):
    longest = 0
    result = ''
    for w in words:
        if len(w) > longest:
            longest = len(w)
            result = w
    return result
Create a post request in Python using the requests library to roll a die on a website. Not applicable import requests

url = 'http://roll-dice-game.com/roll'

payload = {
 'number-of-dice': 1
}

r = requests.post(url, data=payload)

print(r.text)

# Output: The dice rolled a 3!
Develop a linear regression model in Python which takes an array of numbers as input and returns the slope and intercept of the best fit line. x = [2, 3, 5, 6, 9, 11]
y = [3, 4, 8, 10, 14, 16] import numpy as np

x_mean = np.mean(x)
y_mean = np.mean(y)

n = len(x)

#Using the formula to calculate the slope
slope = (sum([xi*yi for xi,yi in zip(x,y)]) - n*x_mean*y_mean)/(sum([xi**2 for xi in x]) - n * x_mean * x_mean)

#using the formula to calculate the intercept
intercept = y_mean - slope * x_mean

print("slope: ",slope,"  intercept:",intercept)
Come up with a Python program to merge two sorted lists.  def merge(list1, list2): 
    merged_list = [] 
    i = 0
    j = 0
  
    while i < len(list1) and j < len(list2): 
        if list1[i] < list2[j]: 
            merged_list.append(list1[i]) 
            i+= 1
        else: 
            merged_list.append(list2[j]) 
            j+= 1
   
    merged_list += list1[i:]
    merged_list += list2[j:]
  
    return merged_list
Create a Python script that finds the longest word in a given sentence. "This is a sample sentence" def find_longest_word(sentence):
    words = sentence.split(" ")
    longest_word = ""
    for word in words:
        if len(word) > len(longest_word):
            longest_word = word
    return longest_word

result = find_longest_word("This is a sample sentence")
print(result)
Create a Python program to find the sum of the first n numbers. n = 5 def calculate_sum(n):
    """Function to calculate the sum of the first n numbers."""
    sum = 0
    while n > 0:
        sum = sum + n
        n = n - 1
    return sum

if __name__ == "__main__":
    n = 5 
    result = calculate_sum(n)
    print("The sum is", result)
Modify the Python program below to make it more efficient. def foo(lst):
    minimum = lst[0]
    for n in lst:
        if minimum > n:
            minimum = n
    return minimum def foo(lst):
    minimum = min(lst)
    return minimum
Create a web scraper using Python and BeautifulSoup that extracts all the article titles on a Wikipedia page. https://en.wikipedia.org/wiki/Python_(programming_language) import requests
from bs4 import BeautifulSoup
 
# Make a GET request to fetch the raw HTML content
html_content = requests.get('https://en.wikipedia.org/wiki/Python_(programming_language)').text
 
# Parse the html content
soup = BeautifulSoup(html_content, "lxml")
 
# Find all the h2 tags and iterate through them
for h2_tag in soup.find_all("h2"):
    # Check if h2 tag has a 'tocsection' class
    if "tocsection" in h2_tag.attrs['class']:
        # Extract the article title from the h2 tag
        article_title = h2_tag.text.strip()
        # Print the article title
        print("Article Title:", article_title)
        print("-"*50)
Create a neural network in Python from scratch that takes a 2D array of numbers as its input and predicts the sum of the numbers in each row. [[4, 1, 3], [2, 5, 6], [7, 8, 9]] import numpy as np

# define sigmoid function
def sigmoid(x):
 return 1 / (1 + np.exp(-x))
 
# define model
def neural_network(x):
 # hidden layer
 h1 = sigmoid(np.dot(x, weights[0]))
 # output layer
 output = np.dot(h1, weights[1])
 return output

# set up weights
weights = [np.random.rand(3, 5), np.random.rand(5, 1)]

# make predictions
input_data = np.array([4, 1, 3], [2, 5, 6], [7, 8, 9])
predictions = neural_network(input_data)
print(predictions)
Create a Python function to compute the nth Fibonacci number of a provided number n. n = 5 def fibonacci(n): 
	if n<0: 
		print("Incorrect input") 
		
	# First Fibonacci number is 0 
	elif n==1: 
		return 0
	# Second Fibonacci number is 1 
	elif n==2: 
		return 1
	else: 
		return fibonacci(n-1)+fibonacci(n-2) 

print(fibonacci(5)) # Outputs 3
Create a command line utility in Python that takes two arguments. The utility should compare the two arguments and output the result as either “equal” or “not equal”. Arg1: hello
Arg2: world import sys

arg1 = sys.argv[1]
arg2 = sys.argv[2]

if arg1 == arg2:
 print('equal')
else:
 print('not equal')
Rewrite a Python program to support multiple versions of Python 3. # Example Python 3 program for finding the area of a circle 
PI = 3.14
def calculateArea(radius): 
    return PI * radius * radius; 

print("Area is %.6f" % calculateArea(5)); # Example Python program for finding the area of a circle 
# Adjust for compatibility with Python3 and above 
import sys 

PI = 3.14

if sys.version_info.major >= 3:
  long = int 

def calculateArea(radius): 
    return PI * radius * radius; 
  
print("Area is %.6f" % calculateArea(long(5)));
Create a class in Python which calculates the average of two numbers passed to it as parameters.  class AverageCalculator:
  def __init__(self, num1, num2):
    self.num1 = num1
    self.num2 = num2
  
  def get_average(self):
    return (self.num1 + self.num2) / 2

ac = AverageCalculator(4, 8)
print("The average of 4 and 8 is: " + str(ac.get_average()))
Create an AI model in Python for predicting the sentiment of a review given its text. Not applicable import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split 
from sklearn.naive_bayes import MultinomialNB

data = pd.read_csv("reviews.csv")

texts = data['Text']
labels = data['Label']

# Create a vectorizer and expand the review text
vectorizer = CountVectorizer()
vectors = vectorizer.fit_transform(texts)

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(vectors, labels, test_size=0.20, random_state=42)

# Build a Naive Bayes model
model = MultinomialNB()
model.fit(X_train, y_train)

# Test the model and print the accuracy
accuracy = model.score(X_test, y_test)
print("Model Accuracy:", accuracy)

# Use the model to predict the sentiment for a new review
review = "This movie is amazing!"
prediction = model.predict(vectorizer.transform([review]))
print("Predicted sentiment:", prediction[0])
Generate a Python program to calculate the absolute difference between two given numbers.  def absolute_difference(num1, num2):
 return abs(num1 - num2)
Write a Python program to convert a given list of strings to integers. If a string is not a number, then that string should be dropped from the list. ['1', '2', '3', 'four', '5'] def convert_to_ints(lst):
    result = []
    for i in lst:
        try:
            result.append(int(i))
        except:
            pass
    
    return result

result = convert_to_ints(['1', '2', '3', 'four', '5'])
print(result)
Improve the following code in Python to find the product of two given numbers without using the multiply operator. def multiply(x, y):
    result = 0
    for i in range(x):
        result += y
    return result def multiply(x, y):
    result = 0
    for i in range(y):
        result += x
    return result

def power(x, y):
    result = 1
    for i in range(y):
        result *= x
    return result
Suggest a solution in Python to convert a sentence into a list of individual words. "This is a test sentence." def sentence_to_words(sentence):
    words = sentence.split()
    return words 

result = sentence_to_words("This is a test sentence.")
print(result)
Write an enable or disable function in Python that toggles an LED depending on the input given.  def LED_toggle(state):
    if state == "on":
        GPIO.output(4,1)
    else:
        GPIO.output(4,0)
Build a Python class to represent a math vector in 3D space.  class Vector3D: 
    def __init__(self, x, y, z): 
        self.x = x 
        self.y = y 
        self.z = z 

    def magnitude(self): 
        return (self.x**2 + self.y**2 + self.z**2)**0.5 
  
    def normalize(self): 
        magnitude = self.magnitude() 
        self.x /= magnitude 
        self.y /= magnitude 
        self.z /= magnitude
Generate a Python program to print each letter in a word on a separate line.  def print_letters(word):
    for letter in word:
        print(letter)
Write a Python function to check for a prime number.  def is_prime(num):
    if num > 1: 
        for i in range(2,num):
            if (num % i) == 0: 
                return False
        return True 
    else: 
        return False
Write a Python script that prints all the prime numbers between 0 and the given number. 10 def prime_numbers(num):
    primes = []
    for n in range(2, num + 1):
        is_prime = True
        for i in range(2, n):
            if n % i == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(n)
    return primes

print(prime_numbers(10)) # Outputs: [2, 3, 5, 7]
Generate an artificial dataset containing 10 random numbers in Python.  import numpy as np 
np.random.seed(0)

data = np.random.randint(1,101,10)
print(data)
Create a python library to generate a bar chart from a given set of data points. Data points: [5, 8, 9, 10, 12] import matplotlib.pyplot as plt
 
# Data points
data = [5, 8, 9, 10, 12]
 
# Create bar chart
plt.bar(range(len(data)), data)
 
# Show bar chart
plt.show()
Write a Python program that can recognize handwritten letters.  import numpy as np
from tensorflow.keras.callbacks import TensorBoard

# Load the MNIST dataset
(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()

# Reshape and normalize the data
x_train = x_train.reshape((x_train.shape[0], 28, 28, 1))
x_test = x_test.reshape((x_test.shape[0], 28, 28, 1))
x_train, x_test = x_train / 255.0, x_test / 255.0

# Build the model
model = tf.keras.Sequential([
 tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
 tf.keras.layers.MaxPooling2D(),
 tf.keras.layers.Flatten(),
 tf.keras.layers.Dense(128, activation='relu'),
 tf.keras.layers.Dense(10, activation='softmax')
])

# Compile and train the model
model.compile(
 optimizer='adam', 
 loss='sparse_categorical_crossentropy',
 metrics=['accuracy']
)

model.fit(x_train, y_train, epochs=5, callbacks=[TensorBoard('logs')])

# Evaluate the model
model.evaluate(x_test, y_test)
Write a function in Python that takes in a size n and returns the n-th prime number. n = 5 def nth_prime_number(n):
    prime_numbers = [2]
    i = 3
    while len(prime_numbers) < n:
        for number in prime_numbers:
            if i % number == 0:
                break
        else:
            prime_numbers.append(i)
        i+= 2
    return prime_numbers[-1]


# test 
prime_number = nth_prime_number(5)
print(prime_number) # Output: 11
Design an efficient algorithm in Python for calculating the Fibonacci sequence.  """
Design an efficient algorithm in Python for calculating the Fibonacci sequence 
"""


def fib(n):
    if (n == 0):
        return 0
    elif (n == 1):
        return 1
    else:
        f1 = 0
        f2 = 1
        for x in range(2, n+1):
            f = f1+f2
            f1 = f2
            f2 = f
        return f

if __name__ == "__main__":
    n = int(input("Enter number of terms:"))
    print("Fibonacci sequence:")
    for i in range(n):
        print(fib(i))
Create a Python program to calculate the square root of a number without using the square root function. 36 def my_sqrt(x): 
    guess = x
    i = 0
    while guess * guess != x and i < 20:
        guess = (guess + x/guess) / 2.0
        i += 1
    return guess 

result = my_sqrt(36) 
print("Square root of 36 is = ", result)
Given a list of dictionarys, create a python command to add "hello" in front of every value in the list. [{'string' : 'world'}, {'number' : 5}] [{'string' : 'hello world'}, {'number' : 'hello 5'}]
Develop a python program that detects and corrects spelling mistakes in a given string. String: "The quik brown foox jumped oevr the lasy dog." import re

def spell_check(s):
 corrected = re.sub(r'\bfoox\b', 'fox', s)
 corrected = re.sub(r'\boevr\b', 'over', corrected)
 corrected = re.sub(r'\blasy\b', 'lazy', corrected)
 return corrected

print spell_check("The quik brown foox jumped oevr the lasy dog.")
Make a program in Python that takes a list of integers as input and prints the average, maximum, and minimum. [1, 7, 4, 6] def calculate_avg_max_min(list_of_int):
    avg = sum(list_of_int) / len(list_of_int)
    maximum = max(list_of_int)
    minimum = min(list_of_int)
    return avg, maximum, minimum

list_of_int = [1, 7, 4, 6]
avg, max_int, min_int = calculate_avg_max_min(list_of_int)
print("Average =", avg)
print("Maximum =", max_int)
print("Minimum =", min_int)
Write a function in Python that calculates the average of two numeric values. Not applicable def avg(x, y):
"""
Calculates the average of two numbers

Args:
 x (float): The first number
 y (float): The second number

Returns:
 avg (float): The average of the two numbers
"""
 return (x + y) / 2
Generate a unique identifier in Python Not applicable import uuid

def generateUniqueId():
 return str(uuid.uuid4())

uniqueId = generateUniqueId()
print(uniqueId)
Generate a random Rubik's cube configuration in Python. Not applicable import random

# Create a 3x3x3 cube
cube = [[[0] * 3 for _ in range(3)] for _ in range(3)]

# Fill the cube with random colors
colors = [1, 2, 3, 4, 5, 6]
for plane in cube:
 for row in plane:
 for i in range(3):
 row[i] = random.choice(colors)

# Print out the cube configuation
for plane in cube:
 print(plane)
Write a Python program to find the longest common substring between two strings. s1 = "abcdabxabcdabcdabt",
s2 = "abcdabyabcdabcdabz" def longest_common_substring(s1, s2):
 m = len(s1)
 n = len(s2)
 lengths = [[0 for x in range(n+1)] for y in range(m+1)]
 longest = ""
 for i in range(1, m+1):
 for j in range(1, n+1):
 if s1[i-1] == s2[j-1]:
 lengths[i][j] = lengths[i-1][j-1] + 1
 if lengths[i][j] > len(longest):
 longest = s1[i-1-lengths[i][j]+1:i]
 return longest
Write a Python program to check if a given data point is inside a given rectangle shaped area. data point (x,y)=(21,3.3)
area with bottom left corner at (2.8, -7.1) and top right corner at (16.2, 13.7). def is_in_rectangle(x,y,bottom_left,top_right):
    """
    Check if a given data point is inside a given 
    rectangle shaped area.
    """
    # Unpack bottom left and top right coordinates
    bx, by = bottom_left
    tx, ty = top_right
    
    # Check if (x,y) is inside the rectangle
    if bx <= x <= tx and by <= y <= ty:
        return True
    else:
        return False

# Data point (x,y)
x, y = (21,3.3)

# Area with bottom left corner at (2.8, -7.1) 
# and top right corner at (16.2, 13.7)
bottom_left = (2.8,-7.1) 
top_right = (16.2,13.7)

print(is_in_rectangle(x,y,bottom_left,top_right))
Write a Python student management system to allow teachers to  add, update and delete students.  class Student:
    def __init__(self, name, age, gender, course, contact_details):
        self.name = name
        self.age = age
        self.gender = gender
        self.course = course
        self.contact_details = contact_details
        self.email, self.phone = self.contact_details.split("-")

    def add_student(self):
        # add the student details to database
        pass
    
    def update_student(self):
        # update the student details in database
        pass
    
    def delete_student(self):
        # delete the student entry from database
        pass
Convert GenBank flat files to GFF3 format using the provided Python script. Run the script with the following arguments: 
- '-i' or '--input_file' followed by the path to the input GBK file 
- '-o' or '--output_file' followed by the path to the output GFF file to be created (optional)
- '--with_fasta' to include the FASTA section with genomic sequence at the end of the file (default)
- '--no_fasta' to exclude the FASTA section 
The script supports the following features: gene, CDS, mRNA, tRNA, rRNA and primary identifiers, gene product name annotations. The script links parent/child features using the expected format convention of shared /locus_tag entries for each feature of the gene graph (gene, mRNA, CDS). The script has only been tested with prokaryotic (non-spliced) genes.  #!/usr/bin/env python3

"""
This is a script to convert GenBank flat files to GFF3 format with a specific focus on
initially maintaining as much structural annotation as possible, then expanding into
functional annotation support.

This is not guaranteed to convert all features, but warnings will be printed wherever possible
for features which aren't included.

Currently supported:
  Structural features:  gene, CDS, mRNA, tRNA, rRNA
  Annotations: primary identifiers, gene product name

This is written to handle multi-entry GBK files

Caveats:
- Because the GBK flatfile format doesn't explicitly model parent/child features, this script
  links them using the expected format convention of shared /locus_tag entries for each feature
  of the gene graph (gene, mRNA, CDS)
- It has only been tested with prokaryotic (non-spliced) genes

Author: Joshua Orvis (jorvis AT gmail)
"""

import argparse
import sys
from collections import defaultdict

from Bio import SeqIO
from biocode import annotation, things, utils


def main():
    parser = argparse.ArgumentParser( description='Convert GenBank flat files to GFF3 format')

    ## output file to be written
    parser.add_argument('-i', '--input_file', type=str, required=True, help='Path to an input GBK file' )
    parser.add_argument('-o', '--output_file', type=str, required=False, help='Path to an output GFF file to be created' )
    parser.add_argument('--with_fasta', dest='fasta', action='store_true', help='Include the FASTA section with genomic sequence at end of file.  (default)' )
    parser.add_argument('--no_fasta', dest='fasta', action='store_false' )
    parser.set_defaults(fasta=True)
    args = parser.parse_args()

    ## output will either be a file or STDOUT
    ofh = sys.stdout
    if args.output_file is not None:
        ofh = open(args.output_file, 'wt')

    ofh.write("##gff-version 3\n")

    assemblies = dict()
    current_assembly = None
    current_gene = None
    current_RNA = None

    rna_count_by_gene = defaultdict(int)
    exon_count_by_RNA = defaultdict(int)

    seqs_pending_writes = False

    features_skipped_count = 0

    # each gb_record is a SeqRecord object
    for gb_record in SeqIO.parse(open(args.input_file, "r"), "genbank"):
        mol_id = gb_record.name

        if mol_id not in assemblies:
            assemblies[mol_id] = things.Assembly(id=mol_id)

        if len(str(gb_record.seq)) > 0:
            seqs_pending_writes = True
            assemblies[mol_id].residues = str(gb_record.seq)
            assemblies[mol_id].length = len(str(gb_record.seq))

        current_assembly = assemblies[mol_id]
            
        # each feat is a SeqFeature object
        for feat in gb_record.features:
            #print(feat)
            fmin = int(feat.location.start)
            fmax = int(feat.location.end)

            if feat.location.strand == 1:
                strand = '+'
            elif feat.location.strand == -1:
                strand = '-'
            else:
                raise Exception("ERROR: unstranded feature encountered: {0}".format(feat))

            #print("{0} located at {1}-{2} strand:{3}".format( locus_tag, fmin, fmax, strand ) )
            if feat.type == 'source':
                continue
            
            if feat.type == 'gene':
                # print the previous gene (if there is one)
                if current_gene is not None:
                    gene.print_as(fh=ofh, source='GenBank', format='gff3')
                
                locus_tag = feat.qualifiers['locus_tag'][0]
                gene = things.Gene(id=locus_tag, locus_tag=locus_tag)
                gene.locate_on( target=current_assembly, fmin=fmin, fmax=fmax, strand=strand )
                current_gene = gene
                current_RNA = None

            elif feat.type == 'mRNA':
                locus_tag = feat.qualifiers['locus_tag'][0]
                rna_count_by_gene[locus_tag] += 1
                feat_id = "{0}.mRNA.{1}".format( locus_tag, rna_count_by_gene[locus_tag] )
                
                mRNA = things.mRNA(id=feat_id, parent=current_gene, locus_tag=locus_tag)
                mRNA.locate_on( target=current_assembly, fmin=fmin, fmax=fmax, strand=strand )
                gene.add_mRNA(mRNA)
                current_RNA = mRNA

                if feat_id in exon_count_by_RNA:
                    raise Exception( "ERROR: two different RNAs found with same ID: {0}".format(feat_id) )
                else:
                    exon_count_by_RNA[feat_id] = 0

            elif feat.type == 'tRNA':
                locus_tag = feat.qualifiers['locus_tag'][0]
                rna_count_by_gene[locus_tag] += 1
                feat_id = "{0}.tRNA.{1}".format(locus_tag, rna_count_by_gene[locus_tag])

                if 'product' in feat.qualifiers:
                    anticodon = feat.qualifiers['product'][0]
                else:
                    anticodon = None
                
                tRNA = things.tRNA(id=feat_id, parent=current_gene, anticodon=anticodon)
                tRNA.locate_on(target=current_assembly, fmin=fmin, fmax=fmax, strand=strand)
                gene.add_tRNA(tRNA)
                current_RNA = tRNA

                if feat_id in exon_count_by_RNA:
                    raise Exception( "ERROR: two different RNAs found with same ID: {0}".format(feat_id) )
                else:
                    exon_count_by_RNA[feat_id] = 0

            elif feat.type == 'rRNA':
                locus_tag = feat.qualifiers['locus_tag'][0]
                rna_count_by_gene[locus_tag] += 1
                feat_id = "{0}.rRNA.{1}".format(locus_tag, rna_count_by_gene[locus_tag])

                if 'product' in feat.qualifiers:
                    product = feat.qualifiers['product'][0]
                else:
                    product = None

                annot = annotation.FunctionalAnnotation(product_name=product)
                
                rRNA = things.rRNA(id=feat_id, parent=current_gene, annotation=annot)
                rRNA.locate_on( target=current_assembly, fmin=fmin, fmax=fmax, strand=strand )
                gene.add_rRNA(rRNA)
                current_RNA = rRNA

                if feat_id in exon_count_by_RNA:
                    raise Exception( "ERROR: two different RNAs found with same ID: {0}".format(feat_id) )
                else:
                    exon_count_by_RNA[feat_id] = 0

            elif feat.type == 'CDS':
                locus_tag = feat.qualifiers['locus_tag'][0]
                # If processing a prokaryotic GBK, we'll encounter CDS before mRNA, so we have to
                #  manually make one
                if current_RNA is None:
                    feat_id = "{0}.mRNA.{1}".format( locus_tag, rna_count_by_gene[locus_tag] )
                    mRNA = things.mRNA(id=feat_id, parent=current_gene)
                    mRNA.locate_on( target=current_assembly, fmin=fmin, fmax=fmax, strand=strand )
                    gene.add_mRNA(mRNA)
                    current_RNA = mRNA

                    if 'product' in feat.qualifiers:
                        product = feat.qualifiers['product'][0]
                    else:
                        product = None

                    if 'gene' in feat.qualifiers:
                        gene_symbol = feat.qualifiers['gene'][0]
                    else:
                        gene_symbol = None
                        
                    annot = annotation.FunctionalAnnotation(product_name=product, gene_symbol=gene_symbol)

                    if 'db_xref' in feat.qualifiers:
                        for dbxref in feat.qualifiers['db_xref']:
                            annot.add_dbxref(dbxref)
                    
                    polypeptide_id = "{0}.polypeptide.{1}".format( locus_tag, rna_count_by_gene[locus_tag] )
                    polypeptide = things.Polypeptide(id=polypeptide_id, parent=mRNA, annotation=annot)
                    mRNA.add_polypeptide(polypeptide)
                
                exon_count_by_RNA[current_RNA.id] += 1
                cds_id = "{0}.CDS.{1}".format( current_RNA.id, exon_count_by_RNA[current_RNA.id] )
                current_CDS_phase = 0
                
                for loc in feat.location.parts:
                    subfmin = int(loc.start)
                    subfmax = int(loc.end)
                    
                    CDS = things.CDS(id=cds_id, parent=current_RNA)
                    CDS.locate_on( target=current_assembly, fmin=subfmin, fmax=subfmax, strand=strand, phase=current_CDS_phase )
                    current_RNA.add_CDS(CDS)

                    # calculate the starting phase for the next CDS feature (in case there is one)
                    # 0 + 6 = 0     TTGCAT
                    # 0 + 7 = 2     TTGCATG
                    # 1 + 6 = 1     TTGCAT
                    # 2 + 7 = 1     TTGCATG
                    # general: 3 - ((length - previous phase) % 3)
                    current_CDS_phase = 3 - (((subfmax - subfmin) - current_CDS_phase) % 3)
                    if current_CDS_phase == 3:
                        current_CDS_phase = 0

                    exon_id = "{0}.exon.{1}".format( current_RNA.id, exon_count_by_RNA[current_RNA.id] )
                    exon = things.Exon(id=exon_id, parent=current_RNA)
                    exon.locate_on( target=current_assembly, fmin=subfmin, fmax=subfmax, strand=strand )
                    current_RNA.add_exon(exon)
                    exon_count_by_RNA[current_RNA.id] += 1
                
            else:
                print("WARNING: The following feature was skipped:\n{0}".format(feat))
                features_skipped_count += 1

    # don't forget to do the last gene, if there were any
    if current_gene is not None:
        gene.print_as(fh=ofh, source='GenBank', format='gff3')

    if args.fasta is True:
        if seqs_pending_writes is True:
            ofh.write("##FASTA\n")
            for assembly_id in assemblies:
                ofh.write(">{0}\n".format(assembly_id))
                ofh.write("{0}\n".format(utils.wrapped_fasta(assemblies[assembly_id].residues)))

    if features_skipped_count > 0:
        print("Warning: {0} unsupported feature types were skipped".format(features_skipped_count))

if __name__ == '__main__':
    main()








Create a k-nearest-neighbour algorithm in Python to classify data points in two classes.  import numpy as np
import pandas as pd

def knn(features, target, neighbors):
    target = np.array(target)
    num_samples = target.shape[0]

    # Calculate Euclidean distances from each sample point
    distances = np.sqrt(((features - features[:,np.newaxis])**2).sum(axis=2))

    # Get indices of the k nearest neighbors
    indices = np.argsort(distances, axis=1)[:, :neighbors]

    # Count frequencies of each class among k nearest neighbors
    nbors_classes = target[indices]
    nbors_freq = np.apply_along_axis(lambda x: np.bincount(x, minlength=2), 1, nbors_classes)

    # Make predictions
    pred = np.argmax(nbors_freq, axis=1)
    return pred
Write a Python program for a program that extracts only characters from a string. Input string: “Hello world!” def extract_characters(str):
 # Create an empty string
 extracted = ""

 # Iterate over each character
 for char in str:
 # Check if the character is a letter
 if char.isalpha():
 # Append character to the result
 extracted += char

 # Return the extracted characters
 return extracted

# Sample input
str = "Hello world!"

# Output
print(extract_characters(str)) # Output: Helloworld
Create a Python class for representing complex numbers and a method for performing complex number addition.  class Complex:
    def __init__(self, real, imag):
        self.real = real
        self.imag = imag
        
    def add(self, other):
        real = self.real + other.real
        imag = self.imag + other.imag
        return Complex(real, imag)
Optimize the performance of a Python function to calculate the sum of an array of numbers. Not applicable def optimize_sum(arr):
    result = 0
    for num in arr:
        result += num
    return result

# Using numpy:
import numpy as np

def optimize_sum_np(arr):
    return np.sum(arr)

# Using reduce function:
from functools import reduce

def optimize_sum_reduce(arr):
    return reduce((lambda x, y: x + y), arr)
Develop a program in Python to calculate the sum of the following series: 1 + 1/2 + 1/3 + ... + 1/n def SumOfSeries(n): 
    seriesSum = 0
    for num in range(1, n+1): 
        seriesSum += 1/num  
    return round(seriesSum, 2) 

# Driver code 
n = 5
print("Sum of the series up to number:", n, 
                    "is", SumOfSeries(n))
Generate a Python script to calculate the sum of elements in the following input array. Input Array: [1, 4, 8, 10, 12] def SumArray(arr):
  result = 0
  for num in arr: 
    result += num
  return result 
 
print(SumArray([1, 4, 8, 10, 12]))
    # Outputs: 35
Write a python program to parse a given XML document.  import xml.etree.ElementTree as ET

def parse_xml(xml_doc):
  # Parse the XML document
  tree = ET.parse(xml_doc)
  # Get the root element
  root = tree.getroot()
  # Iterate through children
  for child in root:
    print(child.tag, child.attrib)

# Function call 
parse_xml("sample.xml")
Generate an XOR function in Python that takes two integers as parameters and returns a boolean.  def xor(a, b):
return (a or b) and not (a and b)
Create a python class that simulates an invoice with information about the item and the cost. Example of an Invoice:

Item: Pen
Price: $3 class Invoice:
    def __init__(self, item, price):
        self.item = item
        self.price = price
    
    def get_item(self):
        return self.item
    
    def get_price(self):
        return self.price

invoice = Invoice("Pen", 3)
Use object-oriented programming principles in Python to create a class to represent a User profile.  class UserProfile():
    def __init__(self, name, email, address, phone_number):
        self.name = name
        self.email = email
        self.address = address
        self.phone_number = phone_number

    def get_name(self):
        return self.name

    def get_email(self):
        return self.email

    def get_address(self):
        return self.address

    def get_phone_number(self):
        return self.phone_number
Develop a Python program for solving a quadratic equation. Not applicable import cmath

def quadratic_equation(a, b, c):
 # calculate the discriminant
 d = (b**2) - (4*a*c)
 
 # find two solutions
 sol1 = (-b-cmath.sqrt(d))/(2*a)
 sol2 = (-b+cmath.sqrt(d))/(2*a)
 
 return sol1, sol2
 
if __name__ == "__main__":
 a = 1
 b = 5
 c = 6
 
 solutions = quadratic_equation(a, b, c)
 
 print('The solution are {0} and {1}'.format(solutions[0],solutions[1]))
Write a Python program to find the length of the longest consecutive elements sequence in an array. [1, 9, 3, 10, 4, 20, 2] def findLengthOfLCIS(A):
    n = len(A)
    if n == 0:
        return 0
    ans = 1
    prev = A[0]
    curr_len = 1
    for i in range(1, n):
        if A[i] > prev:
            curr_len += 1
        else:
            ans = max(ans, curr_len)
            curr_len = 1
        prev = A[i]
    return max(ans, curr_len)

if __name__ == '__main__':
    A = [1, 9, 3, 10, 4, 20, 2]
    print("Length of LCIS is", findLengthOfLCIS(A))
Generate a python program to filter a given array of numbers and remove all numbers greater than 5. [3, 4, 6, 1, 8, 9] def filter_greater_than_5(arr):
    new_arr = []
    for x in arr:
        if x <= 5:
            new_arr.append(x)
    return new_arr

arr = [3, 4, 6, 1, 8, 9]
print(filter_greater_than_5(arr))
Develop a python program that prints out all the prime numbers until a given number n.  def is_prime(n): 
        for i in range(2,int(n ** 0.5)+1):
            if (n % i) == 0:
                return False
        return True

def print_prime_numbers_up_to_n(n):
    for num in range(2, n + 1): 
        if is_prime(num):
            print(num) 

print_prime_numbers_up_to_n(n)
Suggest a Python version of the following JavaScript code. function double(x) {
  return x * 2;
} def double(x):
  return x * 2
Create a password validator program in Python to check if a given password is valid or not.  def is_valid_password(pwd):
    if len(pwd) < 6:
        print("Password must be at least 6 characters long.")
        return False

    if not any(char.isdigit() for char in pwd):
        print("Password must have at least one number.")
        return False

    if not any(char.isupper() for char in pwd):
        print("Password must have at least one uppercase letter.")
        return False

    if not any(char.islower() for char in pwd):
        print("Password must have at least one lowercase letter.")
        return False

    return True
Generate a Python function to convert a given sentence into a list of words. Convert "This is a sentence" def split_sentence(sentence):
    return sentence.split(" ")

sentence = "This is a sentence"

words = split_sentence(sentence)
print(words)
This code is a Python script that connects to a server and sends a command. To use it, you need to provide the script with the server address and the command to execute as command-line arguments. The script will read the server configuration from a configuration file, and if it fails to do so, it will use default values. To run the script, use the following command: "python agente-servidor.py <direccion> <comando>". Make sure to replace "<direccion>" with the server address and "<comando>" with the command to execute.  #!/usr/bin/env python

# ------------------------------
# importacion
# ------------------------------
import socket, sys, time, ConfigParser

def poner_mensaje( tipo , mensaje ):
	# -----------------------------
	# Colocar mensajes con formato
	# y marca de tiempo
	# -----------------------------
	print time.strftime('%Y-%m-%d-%X') + " " + tipo + ": " + mensaje

def activar_configuracion():
	# ------------------------------
	# Variables del servidor desde
	# un archivo de configuracion
	# ------------------------------
	configuracion = "./configuracion/agente-servidor.cfg"
	global direccion
	global puerto
	global clave
	try:
		cfg = ConfigParser.ConfigParser()
		cfg.read([configuracion])
		puerto = int(cfg.get('servidor','puerto'))
		clave = cfg.get('servidor','clave')
		clientes = cfg.get('servidor','clientes')
	except:
		poner_mensaje( 'ERROR' , "No se pudo leer el archivo de configuracion " + configuracion )
		poner_mensaje( 'AVISO' , "Se tomaran los valores por omision: 6470 root" )
		puerto = 6470
		clave = 'root'

if __name__ == "__main__":
	activar_configuracion()
	# ------------------------------
	# parametros a utilizar
	# ------------------------------
	if( len(sys.argv) == 3 ):
		continuar = True
		direccion =  sys.argv[1]
		comando =  sys.argv[2]
		agente = socket.socket( socket.AF_INET, socket.SOCK_STREAM )
		try:
			agente.connect( ( direccion, puerto ) )
		except:
			poner_mensaje ( 'ERROR' , "No se pudo establecer la conexion en la direccion: "+ direccion +" con el puerto: " + str(puerto) )
			continuar = False
		if ( continuar == True ):
			data, server = agente.recvfrom( 100 )
			poner_mensaje ( 'MENSAJE' , data )
			agente.send( clave )
			data, server = agente.recvfrom( 100 )
			poner_mensaje ( 'MENSAJE' , data )
			agente.send( comando )
			data, server = agente.recvfrom( 100 )
			poner_mensaje ( 'MENSAJE' , data )
			agente.close()
	else:
		print "--------------------------------------------------------------"
		print " Tiene que mandar cuatro parametros"
		print "     agente-servidor.py <direccion> <comando>"
		print "--------------------------------------------------------------"

Write a Python program to create a class that represents a stack, and code that uses the class to implement an operation that prints the contents of a string using a stack. A string: 'Hello World!' # A class to represent a stack 
class Stack:
	def __init__(self):	
		self.stack = []
		
	def push(self, data):
		self.stack.append(data)
		
	def pop(self):
		return self.stack.pop()
		
	def peek(self):
		return self.stack[-1]	

# Create a stack of characters
string = 'Hello World!'
char_stack = Stack()

# Push every character in the string to the stack
for i in string:
	char_stack.push(i)

# Pop and print each character from the stack
while len(char_stack.stack) > 0:
	print(char_stack.pop())
Create a Python script that outputs a random integer between 1 and 10.  import random

random_int = random.randint(1, 10)
print(random_int)
Create a program in Python that takes a list as input and returns a new list with every element doubled. [1, 2, 3, 4] def double_list(numbers):
    doubled_list = []
    for num in numbers:
        doubled_list.append(num*2)
    return doubled_list
Create a Python script to detect if a certain item is in a given list of items. The script should work for any type of item. items = [1,2,3,4,5] def detect_item(items, item):
  if item in items:
    return True
  else:
    return False
Optimize a linear programming problem in Python using the scipy.optimize library. Objective Function: 
max 3x + 4y 

Constraints: 
2x + y ≤ 10 
x + 2y ≤ 10 
x, y ≥ 0 import numpy as np
from scipy.optimize import linprog

# Define objective function
c = np.array([3,4])

# Define constraints
A = np.array([[2,1], [1,2]])
b = np.array([10,10])

# Define bounds
x0_bnds = (0, None)
x1_bnds = (0, None)

# Apply constraint
res = linprog(c, A_ub=A, b_ub=b, bounds=(x0_bnds, x1_bnds), options={"disp": True})

# Print result
print("Optimal value:", res.fun, "\nX =", res.x)
# Output: Optimal value: 13.333333333333334 
#         X = [3.33333333 2.33333333]
Given a Python dictionary, write a function that prints out the key-value pairs in alphabetical order. {
 'Mark': '68',
 'Carol': '35',
 'John': '42'
} def print_dict_alphabetically(dictionary):
    sorted_keys = sorted(dictionary.keys())
    for key in sorted_keys:
        print(f"{key}: {dictionary[key]}")

print_dict_alphabetically({
 'Mark': '68',
 'Carol': '35',
 'John': '42'
})
Write a Python function to print the times tables from 1 to 10.  def print_times_tables():
    for i in range(1, 11):
        print(f'{i:>2} times table:')
        for j in range(1, 11):
            res = i*j
            print(f'{i} * {j} = {res}')
        print('\n')

print_times_tables()
Generate a four-line Python program that uses a loop to add all the integers from 1 to 10 and print the result.  n = 0
for i in range(1,11):
 n = n + i
print("The sum of all the numbers between 1 and 10 is:", n)
Write a Python program to calculate the sum of all multiples of 3 and 5 up to a given number.  def sum_of_multiples_of_3_and_5(num):
    sum = 0 
    for i in range(num):
        if i % 3 == 0 or i % 5 == 0:
            sum += i
    return sum

result = sum_of_multiples_of_3_and_5(20)
print(result)
Create a Python program for sorting a list of numbers in increasing order. [3, 1, 8, 5, 7] def sort_list(list):
 for _ in range(len(list)):
 for j in range(len(list)-1):
 if list[j] > list[j+1]:
 list[j], list[j+1] = list[j+1], list[j]
 return list

# Testing the function
example_list = [3, 1, 8, 5, 7]
sorted_list = sort_list(example_list)

print(sorted_list)
# Output: [1, 3, 5, 7, 8]
Generate a function in Python that finds the longest continuous increasing sequence in a given array. Input array: [7, 8, 5, 4, 9, 10, 11, 12, 1, 6] def find_longest_increasing_sequence(arr): 
    # Initialize variable max_seq to 1 
    max_seq = 1
  
    # Initialize variable curr_seq to 1 
    curr_seq = 1
  
    # Traverse through the array 
    for i in range(1, len(arr)): 
  
        # If next element is greater 
        # than previous element 
        if (arr[i] > arr[i - 1]): 
            curr_seq = curr_seq + 1
  
        # Update max_seq 
        else: 
            if (curr_seq > max_seq): 
                max_seq = curr_seq 
            curr_seq = 1
  
    # Update max_seq 
    if (curr_seq > max_seq): 
        max_seq = curr_seq 
  
    return max_seq
Generate a program to implement a depth first search (DFS) algorithm on a given tree.  # A Python program to perform a Depth
# First Traversal of graph 

# Here an example of a graph structure 
graph = {
  'A': ['B', 'C'],
  'B': ['D', 'E'],
  'C': ['F'],
  'D': [],
  'E': ['F'],
  'F': []
}

# This method performs a DFS 
def dfs(graph, node, visited):
    if node not in visited:
        visited.append(node)
        for n in graph[node]:
            dfs(graph, n, visited)
    return visited

# Driver Code 
visited = dfs(graph, 'A', [])
print(visited)
# Output: ['A', 'B', 'D', 'E', 'F', 'C']
Optimize your code in Python so that it runs faster.  import time

def slow_function():
    # some code that takes a long time to run
    time.sleep(5)

start_time = time.time()
slow_function()
elapsed_time = time.time() - start_time
print(f"Function took {elapsed_time} seconds.")

# Rewritten with optimisation
import time
from functools import lru_cache

@lru_cache()
def fast_function():
    # some code that takes a long time to run
    time.sleep(5)

start_time = time.time()
fast_function()
elapsed_time = time.time() - start_time
print(f"Function took {elapsed_time} seconds.")
Create a Python program for predicting the stock prices using a linear regression model. stock_prices = [
  100, 101, 98, 107, 103, 97, 111, 104, 95
] import numpy as np 
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt 

# define training data
x = np.array([i for i in range(len(stock_prices))]).reshape(-1,1)
y = np.array(stock_prices)

# create and train model 
model = LinearRegression()
model.fit(x, y)

# make predictions 
y_pred = model.predict(x)

# plot results
plt.plot(x, y, 'o-')
plt.plot(x, y_pred, 'x-')
plt.title('Stock Prices with Linear Regression Model')
plt.xlabel('Day')
plt.ylabel('Price')
plt.show()
Rewrite the following code snippet to use the generator in Python. def squares_up_to_n(n):
    results = []
    for i in range(n):
        results.append(i**2)
    return results def squares_up_to_n(n):
  for i in range(n):
    yield i**2
Write a code in Python to show a histogram distribution of data. [2, 3, 5, 6, 7, 8, 9, 10] import matplotlib.pyplot as plt

# example data
data = [2, 3, 5, 6, 7, 8, 9, 10]

# create histogram
plt.hist(data)

# show plot
plt.show()
Implement a web scraper in Python to retrieve and save all basketball scores from the NBA website.  import requests
from bs4 import BeautifulSoup

URL = "https://www.nba.com/scores"
page = requests.get(URL)

soup = BeautifulSoup(page.content, 'html.parser')

results = soup.find_all('li', class_="score")

scores = []
for result in results:
    data=result.find_all("span", {'class': 'scoreboardScore'})
    scores.append([d.text for d in data])

with open("scores.txt", "w") as f:
    for score in scores:
        f.write(" ".join(score) + "\n")
Create a Python program to detect and print the number of vowels in a given string. Hi everyone def number_of_vowels(s):
    count = 0
    for char in s:
        if char in 'aeiouAEIOU':
            count += 1
    return count

s = 'Hi everyone'
print('The number of vowels in the given string is :', number_of_vowels(s))
Write a Python program to calculate the average of three integers. num1 = 10
num2 = 15
num3 = 20 def avg_three_nums(num1, num2, num3):
 return (num1 + num2 + num3) / 3
Create a function in Python to generate a multiplication table with numbers in a range given start and end parameters. start = 5
end = 10 def multiplication_table(start, end):
	for x in range(start, end + 1):
		for y in range(start, end + 1):
			print(x * y, end = "  ")
		print("\n")
		
multiplication_table(start, end)
Create a Python 3 function that takes a list of integers as an input and output the maximum sum of an increasing subsequence of the list. [10, 12, 4, 6, 5, 3] def max_inc_subseq_sum(arr):
  n = len(arr)
 
  max_sum = [0]*n
 
  for i in range(n):
    max_sum[i] = arr[i]
 
  for i in range(1, n):
    for j in range(i):
      if arr[i] > arr[j] and max_sum[i] < max_sum[j] + arr[i]:
        max_sum[i] = max_sum[j] + arr[i]
 
  return max(max_sum)

print(max_inc_subseq_sum([10, 12, 4, 6, 5, 3]))
# Output: 22 (4 + 6 + 12)
Create a Python class that receives two strings and has methods for comparing the strings and returning whether they are equal, different, or similar up to a provided threshold. Not applicable class StringComparator:

def __init__(self, string1, string2):
 self.string1 = string1
 self.string2 = string2

def is_equal(self):
 return self.string1 == self.string2

def is_different(self):
 return self.string1 != self.string2

def is_similar(self, threshold=0.5):
 distance = edit_distance(self.string1, self.string2)
 max_length = max(len(self.string1), len(self.string2))

 return distance / max_length < threshold
Develop an algorithm in Python to determine the greatest common divisor (GCD) of two numbers. 8, 12 def gcd(a, b): 
    # base case 
    if (a == 0):  
        return b 
    if (b == 0):  
        return a 
  
    # a is greater 
    if (a > b): 
        return gcd(a%b, b) 
          
    return gcd(a, b%a) 

print(gcd(8, 12)) # 4
Generate a response for an HTTP request using Python.  import http.server

class RequestHandler(http.server.BaseHTTPRequestHandler):

    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type','text/html')
        self.end_headers()
        self.wfile.write(b'<html><body><h1>Hello World!</h1></body></html>')

if __name__ == '__main__':
    server = http.server.HTTPServer(('localhost', 8080), RequestHandler)
    print('Starting server, use <Ctrl-C> to stop')
    server.serve_forever()
Write a Python code snippet to obtain the average of the elements in a given list. list = [2, 3, 5, 4] def average(list):
 total = 0
 for num in list:
 total += num
 return total / len(list)

print(average([2, 3, 5, 4]))
Identify the output of the following Python expression: (4+1)*20 100
Generate a Python code snippet to combine two dictionaries.  dict3 = {**dict1, **dict2}
Write a Python function to split a given string into equal parts in a loop. string = "Hello World" def split_string(string):
    result = []
    for i in range(0, len(string), int(len(string) / 2)):
        result.append(string[i: i + int(len(string) / 2)])
    return result
Create a Python program to accept two values from the user and calculate the greatest common divisor. val1 = 4
val2 = 12 # Function for calculating the 
# greatest common divisor
def gcd(a, b): 
    if (a == 0): 
        return b 
    return gcd(b%a, a) 

# Take input from the user 
val1 = int(input("Enter the first value: ")) 
val2 = int(input("Enter the second value: ")) 
  
# Calculate the gcd 
result = gcd(val1, val2) 
print("The GCD of",val1,"and",val2,"is",result)
Create a python program to identify all the duplicate elements in the given list. list = [1, 2, 3, 2, 1] def find_duplicates(list):
    """Identify all the duplicate elements in the given list."""
    seen = set()
    duplicates = set()
    for i in list:
        if i not in seen:
            seen.add(i)
        else:
            duplicates.add(i)
    return list(duplicates)

# Usage Example
list = [1, 2, 3, 2, 1]
duplicates = find_duplicates(list)
print(duplicates)  # [1, 2]
Write a Python program that extracts the domain name from a given URL. https://www.google.com def get_domain(url):
  from urllib.parse import urlparse
  parsed_uri = urlparse(url)
  domain = '{uri.netloc}'.format(uri=parsed_uri)
  return domain

domain = get_domain("https://www.google.com")
print(domain)
Design a web scraper using python to extract information from wikipedia.  import requests
from bs4 import BeautifulSoup

web_url = "https://en.wikipedia.org/wiki/Wikipedia"

web_data = requests.get(web_url).text
soup = BeautifulSoup(web_data,"html.parser")

for title in soup.find_all("h1"):
    print(title.string)

for para in soup.find_all("p"):
    print(para.string)
Write a Python script that takes a given number and returns a string representation of the number in words. 123 def num_to_word(num):
    switcher = {
        1: 'one',
        2: 'two',
        3: 'three',
        4: 'four',
        5: 'five',
        6: 'six',
        7: 'seven',
        8: 'eight',
        9: 'nine',
        10: 'ten',
        11: 'eleven',
        12: 'twelve',
        13: 'thirteen',
        14: 'fourteen',
        15: 'fifteen',
        16: 'sixteen',
        17: 'seventeen',
        18: 'eighteen',
        19: 'nineteen',
        20: 'twenty'
    }
    if num < 20:
        return switcher.get(num, 'under twenty')
    elif num < 100:
        tens = num // 10
        remainder = num % 10
        return switcher.get(tens, 'under one hundred') + ' ' + switcher.get(remainder, '')
    else:
        hundreds = num // 100
        remainder = num % 100
        return switcher.get(hundreds, 'over one hundred') + ' hundred ' + num_to_word(remainder)

print(num_to_word(123))  # Output: one hundred twenty three
Create a Python program to sort a dictionary in order of the values.  # using lambda function to sort the dictionary  
sorted_by_value = sorted(dictionary.items(), key = lambda kv: kv[1]) 
  
# printing the dictionary sorted by value 
print(sorted_by_value)
Create a Python function to remove all non-alphanumeric characters from a string. "Hello, $World!" def clean_string(string):
    cleanedString = ""
    for c in string:
        if c.isalnum():   
            cleanedString += c 
  
    return cleanedString
Create a Python program that takes a string of words and returns the reverse order of words. "Hello World" def reverse_words(words):
    words_list = words.split(' ')
    reversed_list = words_list[::-1] 
    reversed_words = ' '.join(reversed_list) 
    return reversed_words

input_string = 'Hello World' 
result = reverse_words(input_string) 
  
print(result)
Write a code in Python to create a list of the first n Fibonacci numbers. n = 10 # Define a function to compute the nth Fibonacci number
def fibonacci(n): 
	a = 0
	b = 1
	if n == 0: 
		return a 
	elif n == 1: 
		return b 
	else: 
		for i in range(2,n): 
			c = a + b 
			a = b 
			b = c 
		return b 

def generate_fibonacci_list(n):
    # Create an empty list
    fib_list = []

    # Iterate over n and fill the list with Fibonacci numbers
    for i in range(n):
        fib_list.append(fibonacci(i))

    return fib_list

n = 10
fib_list = generate_fibonacci_list(n)
print(fib_list) # Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
Design a python program to delete a specified index element from a given list. [2, 3, 5, 8] # Defining a function to delete an element from the list 
def delete_element(List, index): 
     
    # List is passed by reference and it won't work without passing reference 
    del List[index] 
     
    # Printing the list aftter the deletion 
    print("The new list: ", List) 
     
# Driver code 
List = [2, 3, 5, 8] 
index = int(input("Enter the index of the element to be deleted: ")) 
     
# Function calling 
delete_element(List, index)
Optimize an existing Python sorting algorithm to minimize its runtime. def sort(arr):
 for i in range(len(arr)):
 for j in range(i + 1, len(arr)):
 if arr[i] > arr[j]:
 arr[i], arr[j] = arr[j], arr[i] def sort(arr):
 swapped = True
 while swapped:
 swapped = False
 for i in range(len(arr) - 1):
 if arr[i] > arr[i + 1]:
 arr[i], arr[i + 1] = arr[i + 1], arr[i]
 swapped = True
Create a search algorithm using Python to find an item in a list of tuples. arr = [('a', 2), ('b', 4), ('c', 6), ('d', 7)]
key = 'd' def search(arr, key): 
    for item in arr: 
        if item[0] == key: 
            return item[1] 
    return "Not found"
  
# Driver code 
arr = [('a', 2), ('b', 4), ('c', 6), ('d', 7)] 
key = 'd'
  
print(search(arr, key))
Create a Python program that takes a two dimensional array of integers and calculates the sum of each row and each column of the array. [[2, 3, 5], 
 [5, 7, 1], 
 [4, 6, 9]] def calculateSum(arr):
 sums = [0] * len(arr[0])
 for r in arr:
  for i in range(len(r)):
   sums[i] += r[i]
 return sums

def getRowsSum(arr):
 rowSums = []
 for r in arr:
  rowSums.append(sum(r))
 return rowSums

arr = [[2, 3, 5], 
 [5, 7, 1], 
 [4, 6, 9]]

columnSums = calculateSum(arr)
rowSums = getRowsSum(arr)

print("Row sums:", rowSums)
print("Column sums:", columnSums)

# Output: Row sums: [10, 13, 15] Column sums: [11, 16, 15]
Assume you have a dataset of movie reviews (positive/negative). Generate Python code for applying a decision tree classifier to predict the sentiment of a given review. Not applicable # Import libraries
from sklearn import tree
import pandas as pd

# Read data into a pandas DataFrame
data = pd.read_csv("movie_reviews.csv")
text = data['text']
y = data['sentiment']

# Split data into training and testing sets
from sklearn.model_selection import train_test_split
text_train, text_test, y_train, y_test = train_test_split(text, y, random_state=1)

# Create a decision tree classifier
clf = tree.DecisionTreeClassifier()
clf.fit(text_train, y_train)

# Predict sentiment for the test set
y_pred = clf.predict(text_test)

# Measure accuracy
from sklearn.metrics import accuracy_score
accuracy = accuracy_score(y_pred, y_test)
print("Accuracy:", accuracy)
Create a function in Python that takes a list of numbers and finds the largest even number. [2, 5, 7, 6] def largest_even(arr):
    even_nums = []
    for num in arr:
        if num % 2 == 0:
            even_nums.append(num)
    
    if len(even_nums) == 0:
        return None
    
    largest = even_nums[0]
    for num in even_nums:
        if num > largest:
            largest = num
    
    return largest

result = largest_even([2, 5, 7, 6])
print(result)
Develop a Python program to optimize the given linear equation using the simplex method. Maximise: 2x + 4y
Subject to:
x + 2y ≤ 14
3x – 4y ≤ 18
x ≥ 0, y ≥ 0 def simplex(resultMatrix):
  n = len(resultMatrix[0]) - 1
  c = []
  for i in range(n):
    c.append(resultMatrix[0][i])
  
  a = []
  for i in range(1, len(resultMatrix)):
    a.append(resultMatrix[i][:n])
  
  b = []
  for i in range(1, len(resultMatrix)):
    b.append(resultMatrix[i][n])

  # Initialize the basic and non-basic variables
  basic_variables = [n + i for i in range(len(b))]
  non_basic_variables = [i for i in range(n)]

  iteration_count = 0
  optimal = True

  while optimal is True:
    iteration_count += 1

    # Compute the coefficient of the objective function
    coef = [-c[i] for i in non_basic_variables]

    # Compute the column index of the entering variable
    entering_var = non_basic_variables[coef.index(max(coef))]

    # Compute the vector of reduced costs
    red_cost = [b[i]/a[i][entering_var] for i in range(len(b))] 

    # Compute the leaving variable
    # If any reduced cost is negative, then the current solution is unbounded
    min_red_cost = min(red_cost)
    if min_red_cost <= 0:
      return "unbounded"

    # Compute the leaving variable
    # If all reduced costs are positive, the solution is optimal and iteration stops
    leaving_var = basic_variables[red_cost.index(min_red_cost)]
    if min_red_cost > 0:
      optimal = False
      break

    # Compute the new table
    for i in range(len(b)):
      row = [] 
      for j in range(len(c) + 1):
        if j == entering_var:
          row.append(a[i][j])
        elif j == leaving_var:
          row.append(0)
        else:
          row.append(a[i][j] - (a[i][entering_var] * a[i][j])/a[i][entering_var])
      a[i] = row

    # Compute the objective function
    obj_func = 0
    for i in range(len(c)):
      obj_func += c[i] * resultMatrix[0][i]
    for i in range(len(b)):
      obj_func += b[i] * resultMatrix[i + 1][-1]
    resultMatrix[0][-1] = obj_func

    # Compute the basic and non-basic variables
    basic_variables[red_cost.index(min_red_cost)] = entering_var
    non_basic_variables[coef.index(max(coef))] = leaving_var

  print("Objective function on the optimal solution: ", resultMatrix[0][-1])
  print("Optimal solution: ")
  for i in range(len(b)):
    print("x{0} = {1}".format(basic_variables[i], a[i][-1]))

simplex([[2, 4], [1, 2, 14], [3, -4, 18]])
Create a Python function that returns the longest string from a given list. ["my", "cat", "is", "lazy"] def longest_string(strings):
  max_length = 0
  longest_string = ""
  
  for s in strings:
    if len(s) > max_length:
      max_length = len(s)
      longest_string = s
  
  return longest_string

result = longest_string(["my", "cat", "is", "lazy"])
print(result)
Generate a Python program to calculate the maximum, minimum, and average values from a given sequence of numbers.  # Function to calculate the maximum, minimum, and average values
def calculate_metrics(list):
    # Calculate the maximum value
    maximum = max(list)
    
    # Calculate the minimum value
    minimum = min(list)
   
    # Calculate the average
    n = len(list)
    total = 0
    for num in list:
        total += num
    average = total/n
    
    return maximum, minimum, average

# Main Program 
list = [3, 4, 5, 6, 21, 8]

maximum, minimum, average = calculate_metrics(list)

print("Maximum value:", maximum)
print("Minimum value:", minimum)
print("Average value:", average)
You are provided an English sentence, please write the corresponding code in Python. Sentence: Print a hello world statement print("Hello world!")
Create an algorithm to detect duplicate objects in an array.  # Python program to detect duplicate objects in an array

def detectDuplicates(arr):
  seen = set()
  for item in arr:
    if item in seen:
      return True
    else:
      seen.add(item)
  return False
Create a Python program to generate a random string of length 5, containing only lowercase letters.  import random 
  
def generateString(string_length): 
    letters = string.ascii_lowercase
    return ''.join(random.choice(letters) for i in range(string_length))

print(generateString(5))
Given a string and a pattern, write a Python program to find the position of the pattern in the string and return the index of first occurrence. String: "abcdabcd"
Pattern: "abc" def find_pattern(string, pattern): 
    n = len(string) 
    m = len(pattern) 
  
    # A loop to slide pat[]  
    # one by one 
    for i in range(n - m + 1): 
        j = 0
  
        # For current index i, 
        # check for pattern match 
        while(j < m): 
            if (string[i + j] != pattern[j]): 
                break
            j += 1
  
        if (j == m): 
            return i 
    return -1
Create Python code to group all emails with the same subject into one single email. Not applicable import email
from collections import defaultdict

# function to group emails by their subject
def group_emails(emails):
    # dictionary to store emails with same subject
    grouped_emails = defaultdict(list)

    # loop through emails
    for email in emails:
        # get subject
        subject = email.get('Subject', '')
        # add to dict
        grouped_emails[subject].append(email)

    # return grouped emails
    return grouped_emails

# function to merge emails with the same subject into one single email
def merge_emails(grouped_emails):
    merged_emails = []

    # loop through grouped emails
    for subject, emails in grouped_emails.items():
        # list to store all email bodies
        email_bodies = []

        # loop through emails in the group
        for email in emails:
            # get email body
            body = email.get_body()
            # add it to the list
            email_bodies.append(body)

        # combine the email bodies
        combined_body = "\n\n".join(email_bodies)

        # create new email
        merged_email = email.Address.new_message(subject, combined_body)

        # add the merged eail to the list
        merged_emails.append(merged_email)

    # return the merged emails
    return merged_emails
Create an alternate version of a given program that produces the same output. import math
myString = "Python Rocks!"
numRounds = math.ceil(len(myString) / 2)
for i in range(1, numRounds+1):
    print(myString[0:i]) import math
myString = "Python Rocks!"
numRounds = math.floor(len(myString) / 2)
for i in reversed(range(1, numRounds+1)):
    print(myString[i-1::-1] + myString[i::])
Write a python program for binary search [2, 5, 7, 9, 11, 15] def binarySearch(arr, target):
    left = 0
    right = len(arr) - 1

    while left <= right:
        mid = (left + right) // 2

        if arr[mid] == target:
            return mid
        elif arr[mid] > target:
            right = mid - 1
        else:
            left = mid + 1
    return -1
Create a function in Python that takes two parameters: a list and a number. The function should return the list sorted in ascending order, based on the result of each element in the list multiplied by the input number. [3, 1, 5, 4, 2],  5 def sortList(arr, num): 
    arr.sort(key = lambda x: x*num) 
    return arr 
  
arr = [3, 1, 5, 4, 2] 
num = 5
print(sortList(arr, num))
Given a list of directions, create a Python program to find the maximum cumulative sum of the list. [3, 8, -2, 10, -6] def max_sum(arr):
 max_sum = 0
 sum = 0
 for num in arr:
 sum += num
 max_sum = max(max_sum, sum)
 return max_sum

max_sum([3, 8, -2, 10, -6])  # 17
Create a Python class for a Stack data structure. This class should include methods for pushing, popping, and peeking elements from the stack. Not applicable class Stack:
 def __init__(self):
  self.items = []
 
 def push(self, item):
  self.items.append(item)
 
 def pop(self):
  return self.items.pop()
 
 def peek(self):
  return self.items[len(self.items)-1]
 
 def size(self):
  return len(self.items)
 
 def isEmpty(self):
  return self.items == []
Create a custom function in Python to change the values of a list. [2, 3, 1, 4] def custom_function(input_list): 
  transformed_list = [] 

  for value in input_list: 
    transformed_value = value + 1 
    transformed_list.append(transformed_value) 
  
  return transformed_list 

input_list = [2, 3, 1, 4]
print(custom_function(input_list))
Write a python function to sort a list of elements using quick sort algorithm.  def quick_sort(arr):
    if len(arr) < 2:
        return arr
    else:
        pivot = arr[0]
        less = [i for i in arr[1:] if i <= pivot]
        greater = [i for i in arr[1:] if i > pivot]
        return quick_sort(less) + [pivot] + quick_sort(greater)
Maxminizing a Black-Box function (Python) A Black box function:

def black_box (x):
  return x ** 2 + 40 import scipy.optimize

# define the black box function
def black_box(x):
    return x ** 2 + 40

# set the initial parameters 
start = (0, 0)

# minimize the black box function
res = scipy.optimize.minimize(black_box, start, method="L-BFGS-B")

# print the result
print(res.x) # prints [0.]
This code is a Django management command for renaming a book. To use it, run the command with the name of the book as an argument, and specify any of the following options: 
- --owner: set the new owner of the book
- --new-book-title: set the new title of the book
- --new-book-url: set the new URL of the book

For example, to rename a book called "old_name" with a new title of "new_title" and a new URL of "new_url" and a new owner of "new_owner", run the command:
python manage.py rename_book old_name --new-book-title=new_title --new-book-url=new_url --owner=new_owner  # This file is part of Booktype.
# Copyright (c) 2012 Aleksandar Erkalovic <aleksandar.erkalovic@sourcefabric.org>
#
# Booktype is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Booktype is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Booktype.  If not, see <http://www.gnu.org/licenses/>.

from django.core.management.base import BaseCommand, CommandError
from optparse import make_option
from django.contrib.auth.models import User

from booki.editor import common
from booki.editor import models
from django.conf import settings

class Command(BaseCommand):
    args = "<book name>"
    help = "Rename book."

    option_list = BaseCommand.option_list + (
        make_option('--owner',
                    action='store',
                    dest='owner',
                    default=None,
                    help='Set new owner of the book.'),
        
        make_option('--new-book-title',
                    action='store',
                    dest='new_book_title',
                    default=None,
                    help='Set new book title.'),

        make_option('--new-book-url',
                    action='store',
                    dest='new_book_url',
                    default=None,
                    help='Set new book url name.'),

        )

    requires_model_validation = False

    def handle(self, *args, **options):
        if len(args) != 1:
            raise CommandError("You must specify book name.")

        try:
            book = models.Book.objects.get(url_title__iexact=args[0])
        except models.Book.DoesNotExist:
            raise CommandError('Book "%s" does not exist.' % args[0])

        if options['new_book_title']:
            book.title = options['new_book_title']

        if options['new_book_url']:
            import os
            os.rename('%s/books/%s' % (settings.DATA_ROOT, book.url_title), '%s/books/%s' % (settings.DATA_ROOT, options['new_book_url']))

            book.url_title = options['new_book_url']

            # TODO: test this
            n = len(settings.DATA_ROOT)+len('books/')+1

            for attachment in models.Attachment.objects.filter(version__book=book):
                name = attachment.attachment.name
                j = name[n:].find('/')
                newName = '%s/books/%s%s' % (settings.DATA_ROOT, book.url_title, name[n:][j:])

                attachment.attachment.name = newName
                attachment.save()

        if options['owner']:
            try:
                user = User.objects.get(username=options['owner'])
            except User.DoesNotExist:
                raise CommandError('User "%s" does not exist. Can not finish import.' % options['owner'])

            book.owner = user

        book.save()
            

Write a code snippet in Python to print a table of the perfect squares ranging from 1 to 100.  for i in range(1,101):
    square = i * i
    print(f"{i}:{square}")
Create a Python program that takes as input a binary tree and returns an array with the in-order traversal of the binary tree. Not applicable # Definition for a binary tree node.
class TreeNode:
 def __init__(self, val=0, left=None, right=None):
  self.val = val
  self.left = left
  self.right = right

def inOrderTraversal(root):
 result = []
 stack = []

current = root
while True:

if current is not None:
 # If there is a left node, add it to the stack
 if current.left is not None:
  stack.append(current)
  current = current.left

else:
 # If at a leaf node, get the value
 result.append(current.val)

 # Check if there is a right node, if so go to it
 if current.right is not None:
  current = current.right

else:
 # Check if stack is empty, if it is then the tree has been
 # fully visited
 if len(stack) == 0:
  break

# Get node from the stack and go to it's right node
current = stack.pop()
current = current.right

return result
Write a python function to generate the power set for a given set. A = {1, 2, 3} def powerset(A):
    result = []
    for i in range(len(A)+1):
        for subset in itertools.combinations(A,i):
            result.append(subset)
    return result

A = {1, 2, 3}
print(powerset(A))

#Output:
#[(), (1, ), (2, ), (3, ), (1, 2), (1, 3), (2, 3), (1, 2, 3)]
Write a Python program to generate a random password with a minimum length of 8 characters, containing at least one lowercase letter, one uppercase letter and one numeric character.  import random
import string

def generate_password():
    lowercase = string.ascii_lowercase
    uppercase = string.ascii_uppercase
    digits = string.digits
    
    # Generate a random 8 character string
    password = list(random.sample(lowercase + uppercase + digits, 8))
    
    # Shuffle the characters of the string
    random.shuffle(password)
    
    # Check if the password contains at least one of each
    if not any(letter in password for letter in lowercase):
        password[0] = random.choice(lowercase)
    if not any(letter in password for letter in uppercase):
        password[1] = random.choice(uppercase)
    if not any(letter in password for letter in digits):
        password[2] = random.choice(digits)
    
    # Return the password
    return ''.join(password)

# Generate random password
password = generate_password()

print(password) # Output dZk5EGe1
Generate a shell script that can start a web server. The script should take a single argument, the name of the directory where the web server should be started. app_dir: path/to/application/dir #!/bin/bash

if [ -z "$1" ]; then
 echo "Usage: $0 [dir]"
 exit 1
fi

DIR=""$1""

if [ ! -d "$DIR" ]; then
 echo "Error: Directory \"$DIR\" does not exist"
 exit 1
fi

cd "$DIR"
python -m SimpleHTTPServer 8080
Create a function in Python to count the occurrence of each word in a sentence. sentence = "This is a sample sentence." def word_count(sentence):
    words = sentence.split() 
    word_freq = {}
    for word in words:
        if word in word_freq:
            word_freq[word] += 1
        else:
            word_freq[word] = 1
    return word_freq

word_counts = word_count(sentence)
print(word_counts)
Design an application in Python to perform sentiment analysis on the tweets of a given Twitter account. Twitter account name: example_account import tweepy
from textblob import TextBlob

consumer_key = '<enter_your_consumer_key>'
consumer_secret = '<enter_your_consumer_secret>'

access_token = '<enter_your_access_token>'
access_token_secret = '<enter_your_access_token_secret>'

auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
auth.set_access_token(access_token, access_token_secret)

api = tweepy.API(auth)

public_tweets = api.user_timeline(screen_name = 'example_account')

for tweet in public_tweets:
 analysis = TextBlob(tweet.text)
 print(analysis.sentiment)
Create a Python code to classify text into two classes A and B. dataset = [["This is class A text", "A"], 
			["This is class B text", "B"]] # Import the necessary libraries 
from sklearn.model_selection import train_test_split 
from sklearn.feature_extraction.text import CountVectorizer 
from sklearn.feature_extraction.text import TfidfTransformer 
from sklearn.naive_bayes import MultinomialNB 

# Extract the data into X (text) and y (labels) 
X, y = zip(*dataset)

# Create the training and test sets 
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0) 

# Create the count vectorizer 
count_vectorizer = CountVectorizer() 

# Transform the training and test data using count vectorizer 
X_train_counts = count_vectorizer.fit_transform(X_train) 
X_test_counts = count_vectorizer.transform(X_test) 

# Create the tf-idf transformer 
tfidf_transformer = TfidfTransformer() 

# Transform the training and test data using tf-idf 
X_train_tfidf = tfidf_transformer.fit_transform(X_train_counts) 
X_test_tfidf = tfidf_transformer.transform(X_test_counts) 

# Create the Multinomial Naive Bayes classifier and fit the data 
clf = MultinomialNB().fit(X_train_tfidf, y_train) 

# Make predictions 
predicted = clf.predict(X_test_tfidf) 

# Calculate the accuracy 
accuracy = accuracy_score(y_test, predicted) 
print("Accuracy: {0:.2f}%".format(accuracy*100))
Implement a given design pattern in Python.  # factory pattern example 
  
class Shape:
    sides = 0
    
    def type(self):
        print("This is an abstract class")

class Triangle(Shape):
    sides = 3
    def type(self):
        print("This is a triangle")

class Rectangle(Shape):
    sides = 4
    def type(self):
        print("This is a rectangle")

class Factory:
    def get_obj(self, shape):
        if shape == "triangle":
            return Triangle()
        if shape == "rectangle":
            return Rectangle()
  
f = Factory()
  
shape1 = f.get_obj("triangle")
shape1.type() 
  
shape2 = f.get_obj("rectangle")
shape2.type()
Analyze a Python program to remove all global variables and replace them with local variables. a = 1
def foo():
 print(a)

def bar():
 global a
 a = 2

foo()
bar() def foo():
 a = 1
 print(a)

def bar():
 a = 2

foo()
bar()
Write a short python script to get the average of numbers stored in the list. [1, 2, 3, 4, 5] # Compute the average of the numbers
numbers = [1, 2, 3, 4, 5]
total = 0
for number in numbers:
    total += number

# Divide the total by the number of elements in the list
average = total / len(numbers)

# Print the average
print(average)
Generate a Python program to convert a given binary string into its equivalent decimal number. Binary String: "1101" # Convert the given binary string to an integer number
binary_string = "1101"
decimal_number = int(binary_string, 2)

# Print the result
print(decimal_number) # 13
Generate a program in Python to classify 3-dimensional data points according to their classes  def classify_points(points):
    classes = []
    for point in points:
        if point[0] < 0 and point[1] < 0 and point[2] < 0:
            classes.append(1)
        elif point[0] > 0 and point[1] > 0 and point[2] > 0:
            classes.append(2)
        else:
            classes.append(3)
    return classes
Code a Python program that can take an array of integers as input and sort them in ascending order. [5, 3, 7, 2, 9] def sort_ascending(array): 
    for i in range(len(array)):   
        min_idx = i 
        for j in range(i+1, len(array)):
            if array[min_idx] > array[j]: 
                min_idx = j             
        array[i], array[min_idx] = array[min_idx], array[i] 
    return array
  
arr = [5,3,7,2,9] 
result = sort_ascending(arr) 
print("Array sorted in ascending order is:") 
for i in result: 
    print(i, end=" ")
Construct a Python program that reverses an array. [1, 5, 3, 10, 4, 8] def reverse_array(arr): 
    low = 0
    high = len(arr) - 1
    
    while low < high: 
        arr[low], arr[high] = arr[high], arr[low] 
        low += 1
        high -= 1
  
    return arr
Create a function in Python that takes two parameters 'a' and 'b' and returns the remainder when 'a' is divided by 'b'.  def get_remainder(a, b):
    return a % b
Create a Python program to filter a list of names by the length of their name. The output should be a new list containing only names with lengths equal to 10 characters. names = ['Johanna', 'George', 'John', 'Bobby', 'Steven'] def filter_names(names):
 filtered = []
 for name in names:
  if len(name) == 10:
   filtered.append(name)

 return filtered

names = ['Johanna', 'George', 'John', 'Bobby', 'Steven']
filtered = filter_names(names)

print(filtered) # ['Johanna', 'Steven']
Create a python function that can receive a list of integers and return a list of tuples with consecutive numbers. [1, 2, 3, 7, 8, 9, 10] def get_consecutive(arr):
    result = []
    i = 0
    while i < len(arr):
        s = i
        while (i + 1 < len(arr)) and (arr[i + 1] == arr[i] + 1):
            i += 1
        result.append((arr[s], arr[i]))
        i += 1
    return result

# Test 
arr = [1, 2, 3, 7, 8, 9, 10]
print(get_consecutive(arr))
# Output [(1, 3), (7, 10)]
Create a program in Python to find the total number of words in a text This is a sample text def word_total(text):
    words = text.split(" ")
    word_count = len(words)
    return word_count
Design a program in Python to add the numbers from 0 to 10 using recursion.  def sum_recursive(n):
    if(n == 0):
        return 0
    else:
        return n + sum_recursive(n-1)

print(sum_recursive(10))
Generate a code that implements a quicksort algorithm on an array array = [3, 4, 7, 1, 8, 5] # Python code for Quick Sort
def quickSort(arr):
    less = []
    pivots = []
    more = []
    if len(arr) <= 1:
        return arr
    else:
        pivot = arr[0]
        for i in arr:
            if i < pivot:
                less.append(i)
            elif i > pivot:
                more.append(i)
            else:
                pivots.append(i)
        less = quickSort(less)
        more = quickSort(more)
        return less + pivots + more
 
# Driver Code to test above
arr = [3, 4, 7, 1, 8, 5]  
  
# Function call 
sorted_array = quickSort(arr)  
  
# Print the sorted array  
print(sorted_array)
Create a module in Python for validating a phone number. phone number = "+1-800-867-5309" import re

phone_number = "+1-800-867-5309"

phone_pattern = re.compile(r'^\+[1-9]\d{1,2}\-\d{3}\-\d{3}\-\d{4}$')

def validate_phone_number(phone_number):
    return phone_pattern.search(phone_number)

valid = validate_phone_number(phone_number)
if valid:
    print("Valid Phone number")
else:
    print("Invalid Phone number")
Write a Python script to display the result of a mathematical expression. (3 + 4) * 5 # code to display the result of a mathematical expression

expr = '(3 + 4) * 5'

# Evaluate the expression
result = eval(expr)

# Print the result
print("Result of the expression: " + str(result))
Write a Python program to calculate the harmonic mean of three numbers.  def harmonic_mean(x, y, z):
 return 3/((1/x + 1/y + 1/z))
Create a neural network with two hidden layers in Python.  import numpy as np #importing the libraries 
from sklearn.neural_network import MLPClassifier #importing the neural network classifier

#defining the input values
X = np.array([[0,0],[0,1],[1,0],[1,1]])
y = np.array([[0],[1],[1],[0]])

#Creating the model
model = MLPClassifier(hidden_layer_sizes = (2,2)) #creating the neural network with two hidden layers.
model.fit(X,y)

#Testing the model with a new input
test_data = np.array([[1,1]])
prediction = model.predict(test_data) 
print("The model predicts the output as:",prediction[0])
Write a function in Python to check whether a given string is in lower case or not. String: ThisIsAnExample def is_lowercase(string):
    for character in string:
        if character != character.lower():
            return False
    return True
Write a python program to classify the given text into one of the given labels. Text: "The cat is sleeping in the sofa."
Labels: [“Animal”, “Furniture”] import nltk

# Create a tokenizer
tokenizer = nltk.tokenize.RegexpTokenizer(r'\w+')

# Tokenize the text
tokens = tokenizer.tokenize(text)

# Create a list of potential labels
labels = ["Animal", "Furniture"]

# Create a list of words used to assign labels
# This can be customized depending on the task
assignment_words = {
    "Animal": ["cat"], 
    "Furniture": ["sofa"]
}

# Use the assignment words to assign a label
label = None
for word in tokens:
    for key, value in assignment_words.items():
        if word in value:
            label = key
            break

# Print the label
if label is not None:
    print("Label:", label)
else:
    print("Could not assign label.")
Create a python script that extracts the first ten words from a given text. The quick brown fox jumps over the lazy dog import re

text = "The quick brown fox jumps over the lazy dog"

# Extract words using a regular expression
words_list = re.findall(r"[\w']+", text)

# Print the first ten words
print(words_list[:10])
Train a machine learning model in Python to predict whether a website will convert given a set of features. Features: Cookie size, Browser, Device, Country # import necessary libraries
import pandas as pd
import numpy as np

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

# read data into pandas dataframe
data = pd.read_csv("data.csv")

# separate the features and labels
X = data.drop("label", axis=1)
y = data["label"]

# split the data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)

# create the model
model = LogisticRegression()

# fit the model
model.fit(X_train, y_train)

# predict using the model
y_pred = model.predict(X_test)

# score the model
score = model.score(X_test, y_test)
Suggest a way to optimize the following Python code snippet. def find_max(arr):
    '''This function returns the maximum element in the given array.'''
    maxval = arr[0]
    for i in range(len(arr)):
        if arr[i] > maxval:
            maxval = arr[i]
    return maxval def find_max(arr):
    '''This function returns the maximum element in the given array.'''
    maxval = arr[0]
    for num in arr:
        if num > maxval:
            maxval = num
    return maxval
Design a program in Python to delete an element from the give list. List: [1,2,3,4,5]
Element to delete: 3 def delete_element(arr, element): 
    new_arr = [i for i in arr if i!=element]
    return new_arr
Create an algorithm in Python to reverse an array in place.  def reverse_in_place(arr): 
  
    # Initializing start and end 
    start = 0
    end = len(arr) - 1
  
    while start < end: 
        # swapping the elements 
        arr[start], arr[end] = arr[end], arr[start] 
        start += 1
        end -= 1
    return arr 
  
arr = [1, 2, 3, 4, 5, 6] 
print(reverse_in_place(arr))
Write a Python program to create multiple directories from the given list. ["dir1", "dir2", "dir3"] import os

dirs_list = ["dir1", "dir2", "dir3"]

for d in dirs_list:
    os.makedirs(d)
Write a Python program to generate a dictionary that contains numbers (between 1 and n) in the form (x, x*x). n = 8 nums = {x: x*x for x in range(1, n+1)}
print(nums)
Create a machine learning model in Python to predict the age of a person from their height and weight. Sample input: 
Height: 59
Weight: 140 import numpy as np
from sklearn.linear_model import LinearRegression

# Creating the X and Y datasets 
x = []
y = []

# Adding the data
x.append([59, 140])
y.append(30)

x = np.array(x)
y = np.array(y)

# Creating and fitting the model 
model = LinearRegression().fit(x, y)
Edit the following Python program to return true if the following string contains the word "Hello". def check_hello(s): def check_hello(s):
    return 'Hello' in s
Build a machine learning model in Python to classify animals.  #import libraries 
from sklearn.ensemble import RandomForestClassifier 
from sklearn.datasets import load_iris 
from sklearn.model_selection import train_test_split 
  
#import dataset 
data = load_iris() 
  
#divide the data into independent and dependent variables 
X = data.data 
y = data.target 
  
# Split the data into training and test set 
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2) 
  
#Define the model 
model = RandomForestClassifier(n_estimators=100) 
  
#Train the model 
model.fit(X_train, y_train) 
  
# Test the model 
model.score(X_test, y_test)
Create a program in Python to generate a list of prime numbers up to N  def prime_list(N):
    isPrime = [True for i in range(N + 1)]
    p = 2
    while p * p <= N:
        if isPrime[p]:
            for i in range(p * p, N + 1, p):
                isPrime[i] = False
        p += 1
    prime_nums = []
    for p in range(2, N):
        if isPrime[p]:
            prime_nums.append(p)
    return prime_nums
Implement an algorithm in Python to check if a linked list is palindrome or not. nodelist: 3, 5, 6, 6, 5, 3 class Node: 
    def __init__(self, data): 
        self.data = data
        self.next = None
  
class LinkedList: 
    def __init__(self): 
        self.head = None
  
    def push(self, new_data): 
        new_node = Node(new_data) 
        new_node.next = self.head 
        self.head = new_node 
  
    def reverseList(self): 
        prev = None
        current = self.head 
        while(current is not None): 
            next = current.next
            current.next = prev 
            prev = current 
            current = next
        self.head = prev 
  
    def compareLists(self, head1, head2): 
        while(head1 and head2): 
            if head1.data != head2.data: 
                return 0
            head1 = head1.next
            head2 = head2.next
        if (head1 and not head2) or (head2 and not head1): 
            return 0
        return 1
  
    def checkPalindrome(self): 
        slow_ptr = self.head 
        fast_ptr = self.head 
        count = 0
        while(fast_ptr is not None and fast_ptr.next is not None): 
            fast_ptr = fast_ptr.next.next
            slow_ptr = slow_ptr.next
            count+=1
        second_half = self.reverseList() 
        isPalindrome = self.compareLists(self.head, second_half) 
        
        self.reverseList() 
        if isPalindrome: 
            return True
        else: 
            return False
  
llist = LinkedList() 
llist.push(3)
llist.push(5)
llist.push(6)
llist.push(6)
llist.push(5)
llist.push(3)
llist.checkPalindrome()  # Output: True
Create a Python function to find the probability of an event using the binomial distribution. n = 10
p = 0.5
x = 6 from math import factorial

def binomial_probability(n, p, x):
    """Find the probability of an event using the binomial distribution.

    Args:
        n (int): The number of trials.
        p (float): The probability of success of the event.
        x (int): The number of successes.

    Returns:
        float: The probability of x successes in n trials.
    """
    return factorial(n)/(factorial(x)*factorial(n-x)) * p**x * (1-p)**(n-x)

if __name__ == '__main__':
    n = 10
    p = 0.5
    x = 6
    result = binomial_probability(n, p, x)
    print(result)
Create a Python program to scrape a search engine for the top 10 results on a given query. Search query: "best movies of 2019" import requests
from bs4 import BeautifulSoup

url = 'https://www.google.com/search?q=best+movies+of+2019&num=10'

response = requests.get(url)
soup = BeautifulSoup(response.text, 'html.parser')

results = soup.find_all('div', class_='rc')

for result in results:
 title = result.find('h3').text
 print(title)
Can you create a function in Python that prints all permutations of a given word?  def print_permutations(string):
    if len(string) == 1:
        print(string)
    else:
        for i, char in enumerate(string):
            for perm in print_permutations(string[:i] + string[i+1:]):
                print(char + perm)
The given code is a Python script that characterizes the Reactome pathways and their associated genes. To use this code, you need to have Python 3 installed on your system along with the required dependencies. Once you have the necessary setup, run the script by executing the main() function. The script will connect to a MySQL database and retrieve the Reactome pathways and their associated genes. It will then characterize the pathways based on the number of genes they have and group them accordingly. Finally, it will output the results to the console.  #! /usr/bin/python3
#
# This source code is part of icgc, an ICGC processing pipeline.
#
# Icgc is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Icgc is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see<http://www.gnu.org/licenses/>.
#
# Contact: ivana.mihalek@gmail.com
#

# some pathways do not have the associated genes listed, probably by mistake
# examples:
# R-HSA-1483171       | Synthesis of BMP
# R-HSA-2408499       | Formation of selenosugars for excretion

from icgc_utils.common_queries import quotify
from icgc_utils.reactome import *
from config import Config
############
def print_genes(cursor, gene_ids, depth):
	if len(gene_ids)<1:
		print("\t"*depth, "no genes listed")
		return
	#print("\t"*depth, "print genes here")
	gene_id_string = ",".join([quotify(z) for z in gene_ids])
	qry = "select ensembl_gene_id, approved_name from hgnc  where ensembl_gene_id in (%s)" % gene_id_string
	gene_names = dict(hard_landing_search(cursor, qry))
	qry = "select ensembl_gene_id, approved_symbol from hgnc  where ensembl_gene_id in (%s)" % gene_id_string
	gene_symbols = dict(hard_landing_search(cursor, qry))

	for gene in gene_ids:
		print("\t"*depth, gene_symbols.get(gene,""), gene_names.get(gene,""))
	return


##############
def characterize_subtree(cursor, graph, pthwy_id, gene_groups, depth,  verbose=True):
	# this is the whole subtree
	# children = [node for node in nx.dfs_preorder_nodes(graph, pthwy_id)]
	# A successor of n is a node m such that there exists a directed edge from n to m.
	children = [node for node in graph.successors(pthwy_id)]
	if len(children)==0: return False
	node_id_string = ",".join([quotify(z) for z in children])
	qry_template = "select * from reactome_pathways where reactome_pathway_id in (%s)"
	children_names = hard_landing_search(cursor, qry_template % node_id_string)
	for child_id, child_name in children_names:
		# number_of_genes = genes related to nodes without descendants
		genes = genes_in_subgraph(cursor, graph, child_id)
		if verbose: print("\t"*depth, child_id, child_name, len(genes))
		if len(genes)<100:
			if verbose: print_genes(cursor, genes, depth+1)
			gene_groups[child_name] = genes
			continue
		if not characterize_subtree(cursor, graph, child_id, gene_groups, depth+1, verbose=verbose): # no further subdivisions
			if verbose: print_genes(cursor, genes, depth+1)
			gene_groups[child_name] = genes
			continue
	return True

#########################################
import numpy as np
from matplotlib import pyplot as plt

def hist_plot(gene_groups):
	data = [len(gene_list) for gene_list in list(gene_groups.values())]
	# fixed bin size
	bins = np.arange(0, 505, 5) # fixed bin size
	plt.xlim(0,500)
	plt.hist(data, bins=bins, alpha=0.5)
	# plt.title('')
	plt.xlabel('number of genes in group (bin size = 5)')
	plt.ylabel('number of groups')
	#
	plt.show()

####################################################
def main():

	verbose = False

	db     = connect_to_mysql(Config.mysql_conf_file)
	cursor = db.cursor()

	switch_to_db(cursor, 'icgc')

	# are there children with multiple parents? Yes. So I need some kind of
	# directed graph, rather tha a tree.
	qry = "select child, count(distinct parent) as ct from reactome_hierarchy "
	qry += "group by child having ct>1"
	ret = search_db(cursor, qry)
	print("number of children with multiple parents:", len(ret))

	# feed the parent/child pairs as edges into graph
	graph = build_reactome_graph(cursor, verbose=True)
	# candidate roots
	zero_in_degee_nodes = get_roots(graph)

	node_id_string = ",".join([quotify(z) for z in zero_in_degee_nodes])
	qry_template = "select * from reactome_pathways where reactome_pathway_id in (%s)"
	root_names  = hard_landing_search(cursor, qry_template% node_id_string)
	gene_groups = {}
	for pthwy_id, name in root_names:
		if "disease" in name.lower(): continue
		if verbose: print(pthwy_id, name)
		characterize_subtree(cursor, graph, pthwy_id,  gene_groups,  1, verbose=verbose)

	print("\n===========================")
	max_group=0
	for group, genes in gene_groups.items():
		groupsize = len(genes)
		if max_group< groupsize: max_group=groupsize
		print (group, len(genes))
	print("\n===========================")
	print("number of groups", len(gene_groups))
	print("largest group", max_group)
	print("\n===========================")
	for pthwy_name, genes in gene_groups.items():
		if len(genes)<=150: continue
		print("\n",pthwy_name, len(genes))
		#print_genes(cursor, genes, 1)


	#hist_plot(gene_groups)
	cursor.close()
	db.close()


#########################################
if __name__ == '__main__':
	main()

Create a python program to calculate the sum of odd numbers within a given range. range(1, 10) total = 0
for i in range(1, 10):
    if i % 2 != 0:
        total += i
print(total)
Create a web application using Python Flask for managing a library database, including models for Book, Author, and Publisher. Not applicable from flask import Flask
from flask_sqlalchemy import SQLAlchemy

app = Flask(name)
app.config['SQLALCHEMY_DATABASE_URI']  = 'sqlite:////tmp/test.db'
db = SQLAlchemy(app)

class Book(db.Model):
 id = db.Column(db.Integer, primary_key=True)
 title = db.Column(db.String(80), unique=True)
 author_id = db.Column(db.Integer, db.ForeignKey('author.id'))
 publisher_id = db.Column(db.Integer, db.ForeignKey('publisher.id'))

class Author(db.Model):
 id = db.Column(db.Integer, primary_key=True)
 name = db.Column(db.String(80), unique=True)

class Publisher(db.Model):
 id = db.Column(db.Integer, primary_key=True)
 name = db.Column(db.String(80), unique=True)

db.create_all()

if __name__ == '__main__':
 app.run(debug=True)
Write a Python program to generate a table of random numbers. The program should accept the number of rows and columns as user input and should generate a table of random numbers and display it. Number of Rows: 5
Number of Columns: 10 import random

num_rows = 5
num_cols = 10

# Initialize the matrix
matrix = [[0 for col in range(num_cols)] for row in range(num_rows)]

# Generate random values
for row in range(num_rows):
 for col in range(num_cols):
 matrix[row][col] = random.randint(0, 100)

# Display the matrix
for row in matrix:
 print(row)
Create a predictive analysis machine learning model in Python using a dataset provided that can predict the sale price of a home. Dataset containing 10 columns and 40000 records. import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

# Load the dataset
data = pd.read_csv('data.csv')

# Create feature and target array
X = data.drop('sale_price', axis=1).values
y = data['sale_price'].values

# Split the data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Build and train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Evaluate the model
score = model.score(X_test, y_test)
print("Model Score:", score)
Write a Python script that displays a message in the console when a certain web page changes its content. https://example.com/ # import the required libraries
import requests
import time

# enter the website url
url = "https://example.com/"

# make the initial request to get the initial html content
initial_content = requests.get(url).text

# loop for ever
while True: 
    
    # every 5 seconds, make a new request
    time.sleep(5)

    # make the new request
    current_content = requests.get(url).text
    
    # compare the new content with the initial content
    if current_content != initial_content:
        # update the initial content
        initial_content = current_content
        # print the message
        print("The content of the page has changed")
Using a Greedy algorithm, write a program in Python that takes in a list of tasks with varying completion times and returns the order in which the tasks should be completed to achieve the overall minimum completion time. Tasks - T1 (5 minutes), T2 (8 minutes), T3 (2 minutes), T4 (9 minutes) # Greedy Algorithm to find minimum completion time
def find_min_completion_time(tasks):
 completed_tasks = []
 total_time = 0
 
 while len(tasks) > 0:
 # Find the task with the minimum completion time 
 min_time = min(tasks, key=lambda x:x[1])
 completed_tasks.append(min_time[0])
 total_time += min_time[1]
 
 # remove the task from the list of tasks
 tasks.remove(min_time)
 
 return (completed_tasks, total_time)
 
tasks = [('T1', 5), ('T2', 8), ('T3', 2), ('T4', 9)]
result = find_min_completion_time(tasks)
print('Order of tasks: ', result[0])
print('Minimum Completion time: ', result[1])

# Output
# Order of tasks: ['T3', 'T1', 'T2', 'T4']
# Minimum Completion time: 24
Create a machine learning model in Python to classify different types of flowers. Data set:
- Iris setosa
- Iris versicolor
- Iris virginica

Features
- Sepal Length
- Sepal Width
- Petal Length
- Petal Width import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import confusion_matrix, accuracy_score

# Load the Data
df = pd.read_csv('iris_data.csv')
X = df.drop('target', axis=1)
y = df['target']

# Split Data into Train and Test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Build the Model
model = SVC()
model.fit(X_train, y_train)

# Evaluate the Model
y_pred = model.predict(X_test)
matrix = confusion_matrix(y_test, y_pred)
score = accuracy_score(y_test, y_pred)

# Print Results
print("Confusion Matrix:")
print(matrix)
print("Accuracy Score:", score)
Write a Python program that can identify a palindrome in any given string. String: "A man, a plan, a canal, Panama!" def is_palindrome(string):
    '''Checks if the given string is a palindrome by removing non-alphanumeric characters and comparing the reversed version of the string'''
    string = ''.join(c.lower() for c in string if c.isalnum())
    reversed_str = string[::-1]
    return string == reversed_str

string = "A man, a plan, a canal, Panama!" 
print(is_palindrome(string)) # True
Write a Python function that takes a string as input and counts the number of occurrences of each character in that string. String: 'python' def count_characters(string):
    counts = {}
    for s in string:
        counts[s] = counts.get(s, 0) + 1
    return counts

result = count_characters('python')
print(result)
Write a Python program to search a list of strings for the longest common substring. strings = ["abcdmno", "abcdxyz", "bcdefmno", "abccyz"] def longest_common_substring(strings):
 longest_string = ""
 for s in strings:
 longest_string = longest_string if longest_string else s
 for i in range(len(s)):
 for j in range(i, len(s)):
 if all(s[i:j+1] in s2 for s2 in strings) and len(s[i:j+1]) > len(longest_string):
 longest_string = s[i:j+1]
 return longest_string

print(longest_common_substring(strings))
Write a Python program to remove all duplicates from a given list. [2, 3, 4, 5, 2, 3, 6] def remove_duplicates(lst):
    seen = set()
    result = []
    for item in lst:
        if item not in seen:
            seen.add(item)
            result.append(item)
    return result
Develop a program in Python to remove all the vowels from a given sentence. Sentence: This is a test sentence. def removeVowels(sentence):
 vowels = "aeiouAEIOU"
 result = ""

 for char in sentence:
 if char not in vowels:
 result = result + char

 return result

print(removeVowels("This is a test sentence."))  # Output: "Ths s  tst sntnc."
Create a program for counting the number of elements present in a user-provided array using Python. user_array = [1, 5, 15, 20] def count_elements(array):
    count = 0
    for item in array:
        count += 1
    return count

user_array = [1, 5, 15, 20]
result = count_elements(user_array)
print(result) # 4
Is it possible to create a Python program that converts a given string to a different case?  def convert_string_case(string):
    new_string = string.swapcase()
    return new_string

string = "this Is A TeST"
new_string = convert_string_case(string)
print(new_string)
Create an algorithm using Python to detect plagiarism between two given text documents.  def detect_plagiarism(text1, text2):
    # your code goes here
    
    return is_plagiarized
Build a web service in Python that performs sentiment analysis on a passed string using the TextBlob library. The web service should return a JSON object containing the sentiment score between -1 and 1. Not applicable from flask import Flask, request, jsonify
from textblob import TextBlob

app = Flask(__name__)

@app.route('/sentiment/analyze', methods=['POST'])
def sentiment():
    request_data = request.get_json()
    sentence = request_data['sentence']
    blob = TextBlob(sentence)
    sentiment = blob.sentiment.polarity
    response_object = {
        'sentiment': sentiment
    }
    return jsonify(response_object)
if __name__ == '__main__':
    app.run()
Write a Python program to implement a process scheduler. Process 1 - cpuburst: 10, priority: 1
Process 2 - cpuburst: 6, priority: 4
Process 3 - cpuburst: 4, priority: 5 from queue import PriorityQueue 

class Process: 
    def __init__(self, id, cpuburst, priority): 
        self.id = id 
        self.cpuburst = cpuburst 
        self.priority = priority 
        return
  
    def __lt__(self, other):
        return self.priority < other.priority

def Scheduler(processes): 
    
    ready_queue = PriorityQueue() 
    result = [] 
    
    for process in processes: 
        ready_queue.put(process) 
    
    while (not ready_queue.empty()): 
        process = ready_queue.get() 
        result.append([process.id, process.cpuburst]) 
    
    return result 
  
if __name__ =="__main__": 
    processes = [Process(1, 10, 1), Process(2, 6, 4), Process(3, 4, 5)] 
    print(Scheduler(processes)) 

Output:
[[1, 10],[2, 6],[3, 4]]
Write a Python code to count the number of matching elements between two lists list1 = [1,2,3,4,5]
list2 = [1,3,4,7,9] def count_matches(list1, list2):
    count = 0
    for elem in list1:
        if elem in list2:
            count += 1 
    return count
Write a function to print the following pattern in Python. n = 3 def print_pattern(n): 
  
    # outer loop to handle number of rows 
    for i in range(1,n+1): 
      
        # inner loop to handle number of columns 
        for j in range(1,i+1): 
          
            # printing stars 
            print('* ', end="") 
       
        # ending line after each row 
        print("\r") 
  
# Driver Code 
n = 3
print_pattern(n)

Output:
* 
* * 
* * *
Optimize the following Python code by using list comprehensions: string_list = ["Hello", "world", "how", "are", "you"] string_list = ["Hello", "world", "how", "are", "you"] 

# Optimized version 
string_list = [s.upper() for s in string_list]
Write a Python script to parse a JSON object.  import json

json_data = '{"name":"John", "age":30, "city":"New York"}'

obj = json.loads(json_data)

print("Name:", obj["name"])
print("Age:", obj["age"])
print("City:", obj["city"])
Generate a Fibonacci sequence from 0 to 10 using Python.  def fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print("Incorrect input") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
        return b 
  

# Driver Code 
print(fibonacci(10))
How would you define a function in Python to find the longest palindromic substring in a given string?  def longestPalindrome(s):
    answer = ''
    max_length = 0
    for i in range(len(s)):
        for j in range(i+1, len(s)+1):
            curr_str = s[i:j]
            curr_str_rev = curr_str[::-1]
            
            if curr_str == curr_str_rev and max_length < len(curr_str):
                max_length = len(curr_str)
                answer = curr_str
    
    return answer
Generate a python code to find the longest non-repeating substring in the given string. banana def longest_non_repeating_substring(string):
    
    longest_substring = ""
    substring = ""

    for char in string:
        if char not in substring:
            substring += char
        else:
            if len(substring) > len(longest_substring):
                longest_substring = substring
            substring = char

    # check if the last substring is the longest one
    if len(substring) > len(longest_substring):
        longest_substring = substring
    return longest_substring
Design a sorting algorithm in Python that can sort this specific array.  def sortArray(list): 
    for i in range(len(list)-1):
        minIndex = i 
        for j in range(i+1, len(list)):
            if list[minIndex] > list[j]:
                minIndex = j 
        list[i], list[minIndex] = list[minIndex], list[i]
    return list
Create a Python program that helps to sort the elements of an array of length n. arr = [3, 5, 1, 2, 7, 4] def sortArray(arr):
    n = len(arr) 
	  
    # Traverse through all array elements 
    for i in range(n): 

        # Find the minimum element in remaining 
        # unsorted array 
        min_idx = i 
        for j in range(i+1, n): 
            if arr[min_idx] > arr[j]: 
                min_idx = j 

        # Swap the found minimum element with 
        # the first element         
        arr[i], arr[min_idx] = arr[min_idx], arr[i] 
  
    return arr
Create a function in Python to convert a given number into its Roman form. number = 15 def int_to_Roman(number): 
  
    val = [ 
        1000, 900, 500, 400, 
        100, 90, 50, 40,
        10, 9, 5, 4,
        1
        ] 
    syb = [ 
        "M", "CM", "D", "CD", 
        "C", "XC", "L", "XL", 
        "X", "IX", "V", "IV",
        "I"
        ] 
    roman_num = '' 
    i = 0
    while  number > 0:
        for_val = number // val[i]
        roman_num += syb[i] * for_val
        number -= val[i] * for_val
        i += 1
    return roman_num
Fix the syntax error in the provided Python function. def add_numbers(x, y)
    return x + y def add_numbers(x, y):
    return x + y
Create a function in Python to improve the readability of a text by converting it into title case. "This is My Sample Text for Testing" def to_title_case(text):
    words = text.split()
    title_case_words = [word.capitalize() for word in words]

    return " ".join(title_case_words)
Develop a python function which replaces all whitespaces in a given string with a different character.  def replace_whitespaces(string, character):
    return string.replace(" ", character)
Write a Python program to randomly split a list into two parts. [1, 2, 3, 4, 5, 6, 7, 8] import random

def split_list(input_list):
    index = random.randint(0, len(input_list)-1)
    part1 = input_list[:index]
    part2 = input_list[index:]
    return part1, part2

input_list = [1, 2, 3, 4, 5, 6, 7, 8]
print("Original list :", input_list)
result1, result2 = split_list(input_list)
print("\nPart 1 :", result1)
print("Part 2 :", result2)
Can you create a Python program to generate a random string of 16 alphabets?  import random
import string

def random_string():
    chars = string.ascii_lowercase
    size = 16
    return ''.join(random.choice(chars) for _ in range(size))

print(random_string())
Create a python function that prints out the largest element in an array. [1,4,7,12,-1] def findLargestElement(arr):
    largest_element = arr[0]
    for element in arr:
        if element > largest_element:
            largest_element = element
    return largest_element

arr = [1,4,7,12,-1]
print(findLargestElement(arr))
Write a loop in Python to display the following pattern Noinput for i in range(1, 6):
    for j in range(i):
        print("*", end=" ")
    print()
Develop a Python program for generating a random number between given limits.  import random

def random_number(start, end):
  return random.randint(start, end)
Suggest a solution to improve the following Python code to minimize the running time. def reverse_list(input_list): 
    rev_list = [] 
    for i in range(len(input_list)-1,-1,-1): 
        rev_list.append(input_list[i]) 
    return rev_list def reverse_list(input_list): 
    left = 0
    right = len(input_list) - 1
    while left < right:
        input_list[left], input_list[right] = input_list[right], input_list[left]
        left += 1
        right -= 1
        
    return input_list
Suggest a code improvement for the following python code to ensure that all input is valid. def get_user_info(username):
    query = 'SELECT * FROM users WHERE username = {}'.format(username)
    result = Database.execute_query(query)
    return result def get_user_info(username):
    query = 'SELECT * FROM users WHERE username = %s'
    result = Database.execute_query(query, (username,))
    return result
Create a Python program to filter a list of words and keep only those words that are longer than 8 characters. ['hello', 'world', 'this', 'is', 'a', 'test', 'foobar'] # Filter list 
words = ['hello', 'world', 'this', 'is', 'a', 'test', 'foobar']

# Keep only words longer than 8 characters
filtered_words = [word for word in words if len(word) > 8]

print(filtered_words)
# Output: ['foobar']
Given a string, determine if it's a palindrome in Python.  def is_palindrome(input_string):
 reversed_string = input_string[::-1]
 if input_string == reversed_string:
  return True
 else:
  return False
Create a function in Python which takes a list of numbers and returns the sum of squares of those numbers. [3, 4, 5] def sum_squares(nums):
    result = 0
    for num in nums:
        result += num*num
    
    return result

nums = [3, 4, 5]

result = sum_squares(nums)
print(result)
Create a Python script to generate a random password of length 8, containing a mix of upper and lower case letters, and numbers Not applicable import string
import random

def generate_password(length):
 charPool = string.ascii_letters + string.digits
 password = ''.join(random.sample(charPool,length))
 return password

password = generate_password(8)
print(password) # e.g. hg6bs2Vu
Format a numerical table of data into a JSON object in Python. Numerical table of data. Assuming the numerical table of data is stored in a 2D list data, a function to format it into a JSON object can be written as follows:

import json
def formatData2JSON(data):
    json_formatted_data = json.dumps(data)
    return json_formatted_data
Create a function in Python that prints the first n Fibonacci numbers. 6 def fibonacci(n):
  fib_list = [0, 1]
  for i in range(2, n):
    fib_list.append(fib_list[i-2] + fib_list[i-1])
  return fib_list[:n]

fibonacci_list = fibonacci(6)
print(fibonacci_list)
Create a Python script to print the numbers from 1 to 50, but for multiples of 3 print "Fizz" instead of the number, for multiples of 5 print "Buzz" instead of the number and for multiples of both 3 and 5 print "FizzBuzz". Not applicable for i in range(1, 51):
    if i % 3 == 0 and i % 5 == 0:
        print("FizzBuzz")
    elif i % 3 == 0:
        print("Fizz")
    elif i % 5 == 0:
        print("Buzz")
    else:
        print(i)
Write a Python program optimize the following code using functional programming. i = 5
while i >= 0:
 print(i)
 i -= 1 from functools import reduce

# initialize the loop
num = 5

# call reduce()
solution = reduce(lambda i, _: i - 1, range(num + 1))

# print the result
print(solution)
Create a Python program to find the total distance of a set of given (x,y) coordinates. coordinates = [(2, 4), (3, 5), (4, 3), (9, 7)] def totalDistance(coordinates):
    total = 0
    for i in range(len(coordinates) - 1):
        distance = ((coordinates[i+1][0] - coordinates[i][0])**2 + (coordinates[i+1][1] - coordinates[i][1])**2)**(1/2)
        total += distance
    return total

print(totalDistance(coordinates))
Translate this code from JavaScript to Python const helloWorld = () =>  console.log("Hello World!") def hello_world():
    print("Hello World!")
Create a Pythonically optimized version of the following code. def add_nums(nums):
    total = 0
    for i in range(len(nums)):
        total += nums[i] 
    return total def add_nums(nums):
    return sum(nums)
Create an algorithm in Python to search a given string for the longest consecutive substring of the same character. String = "aaaaaaabbbccdddee" def longestConsecutive(string):
 max_consecutive = ""
 current_consecutive = ""

 for char in string:
 if current_consecutive == "" or current_consecutive[-1] == char:
 current_consecutive += char
 else:
 if len(current_consecutive) > len(max_consecutive):
 max_consecutive = current_consecutive
 
 current_consecutive = char

 if len(current_consecutive) > len(max_consecutive):
 max_consecutive = current_consecutive

 return max_consecutive

string = "aaaaaaabbbccdddee"

print(longestConsecutive(string))
Create a python program to implement an algorithm to find the square root of a given number  def sqrt(x):
    result = x
    eps = 0.000001
    while abs(result*result - x) > eps:
        result = (result + x/result) / 2
    return result
Edit the following Python code to remove duplicate values in the given array. arr = [1, 2, 4, 2, 5, 4] arr = [1, 2, 4, 5]
 
unique_arr = []
 
for element in arr:
    if element not in unique_arr:
        unique_arr.append(element)
 
print(unique_arr) # [1, 2, 4, 5]
Write a Python function to find the difference between two given dates in days.  from datetime import datetime

def find_difference_in_days(date1, date2):
    date1 = datetime.strptime(date1, '%Y-%m-%d')
    date2 = datetime.strptime(date2, '%Y-%m-%d')
    return abs((date2 - date1).days)
This code checks if files changed in git match the .clang-format specification. To use it, run the `cli()` function with the following arguments:
- `--file-extensions`: a comma-separated list of file extensions to check (default is `.cpp,.h,.cxx,.hxx,.hpp,.cc,.ipp`)
- `--exclude`: a list of files or directories to exclude from the check
- `--clang-format-bin`: the path to the clang-format binary (default is `clang-format`)
- `--git-bin`: the path to the git binary (default is `git`)  #!/usr/bin/env python

import argparse
import os
import sys
import subprocess


def check_file(filename, excludes, extensions):
    """
    Check if a file should be included in our check
    """
    name, ext = os.path.splitext(filename)

    if len(ext) > 0 and ext in extensions:
        if len(excludes) == 0:
            return True

        for exclude in excludes:
            if exclude in filename:
                return False

        return True

    return False


def check_directory(directory, excludes, extensions):
    output = []

    if len(excludes) > 0:
        for exclude in excludes:
            if exclude in directory:
                directory_excluded = False
                return output

    for root, _, files in os.walk(directory):
        for file in files:
            filename = os.path.join(root, file)
            if check_file(filename, excludes, extensions):
                print("Will check file [{}]".format(filename))
                output.append(filename)
    return output

def get_git_root(git_bin):
    cmd = [git_bin, "rev-parse", "--show-toplevel"]
    try:
        return subprocess.check_output(cmd).strip()
    except subprocess.CalledProcessError, e:
        print("Error calling git [{}]".format(e))
        raise

def clean_git_filename(line):
    """
    Takes a line from git status --porcelain and returns the filename
    """
    file = None
    git_status = line[:2]
    # Not an exhaustive list of git status output but should
    # be enough for this case
    # check if this is a delete
    if 'D' in git_status:
        return None
    # ignored file
    if '!' in git_status:
        return None
    # Covers renamed files
    if '->' in line:
        file = line[3:].split('->')[-1].strip()
    else:
        file = line[3:].strip()

    return file


def get_changed_files(git_bin, excludes, file_extensions):
    """
    Run git status and return the list of changed files
    """
    extensions = file_extensions.split(",")
    # arguments coming from cmake will be *.xx. We want to remove the *
    for i, extension in enumerate(extensions):
        if extension[0] == '*':
            extensions[i] = extension[1:]

    git_root = get_git_root(git_bin)

    cmd = [git_bin, "status", "--porcelain", "--ignore-submodules"]
    print("git cmd = {}".format(cmd))
    output = []
    returncode = 0
    try:
        cmd_output = subprocess.check_output(cmd)
        for line in cmd_output.split('\n'):
            if len(line) > 0:
                file = clean_git_filename(line)
                if not file:
                    continue
                file = os.path.join(git_root, file)

                if file[-1] == "/":
                    directory_files = check_directory(
                        file, excludes, file_extensions)
                    output = output + directory_files
                else:
                    if check_file(file, excludes, file_extensions):
                        print("Will check file [{}]".format(file))
                        output.append(file)

    except subprocess.CalledProcessError, e:
        print("Error calling git [{}]".format(e))
        returncode = e.returncode

    return output, returncode


def run_clang_format(clang_format_bin, changed_files):
    """
    Run clang format on a list of files 
    @return 0 if formatted correctly.
    """
    if len(changed_files) == 0:
        return 0
    cmd = [clang_format_bin, "-style=file",
           "-output-replacements-xml"] + changed_files
    print("clang-format cmd = {}".format(cmd))
    try:
        cmd_output = subprocess.check_output(cmd)
        if "replacement offset" in cmd_output:
            print("ERROR: Changed files don't match format")
            return 1
    except subprocess.CalledProcessError, e:
        print("Error calling clang-format [{}]".format(e))
        return e.returncode

    return 0


def cli():
    # global params
    parser = argparse.ArgumentParser(prog='clang-format-check-changed',
                                     description='Checks if files chagned in git match the .clang-format specification')
    parser.add_argument("--file-extensions", type=str,
                        default=".cpp,.h,.cxx,.hxx,.hpp,.cc,.ipp",
                        help="Comma separated list of file extensions to check")
    parser.add_argument('--exclude', action='append', default=[],
                        help='Will not match the files / directories with these in the name')
    parser.add_argument('--clang-format-bin', type=str, default="clang-format",
                        help="The clang format binary")
    parser.add_argument('--git-bin', type=str, default="git",
                        help="The git binary")
    args = parser.parse_args()

    # Run gcovr to get the .gcda files form .gcno
    changed_files, returncode = get_changed_files(
        args.git_bin, args.exclude, args.file_extensions)
    if returncode != 0:
        return returncode

    return run_clang_format(args.clang_format_bin, changed_files)

if __name__ == '__main__':
    sys.exit(cli())

Write a Python program to parse a string containing HTML tags and extract the text not contained in the HTML tags. <p>This is a <a href="https://example.com">link</a>.</p> import re

html = '<p>This is a <a href="https://example.com">link</a>.'
text = re.sub(r'<[^>]+>', '', html)
print(text)

# Output: This is a link.
Develop an algorithm for solving a Sudoku puzzle in Python. [
 [3, 0, 6, 5, 0, 8, 4, 0, 0],
 [5, 2, 0, 0, 0, 0, 0, 0, 0],
 [0, 8, 7, 0, 0, 0, 0, 3, 1],
 [0, 0, 3, 0, 1, 0, 0, 8, 0],
 [9, 0, 0, 8, 6, 3, 0, 0, 5],
 [0, 5, 0, 0, 9, 0, 6, 0, 0],
 [1, 3, 0, 0, 0, 0, 2, 5, 0],
 [0, 0, 0, 0, 0, 0, 0, 7, 4],
 [0, 0, 5, 2, 0, 6, 3, 0, 0]
] # Algorithm to solve a 9x9 sudoku

def solve(board):
    # Function to check if a given position on the board is empty
    def is_empty(board):
        for row in range(0, 9):
            for col in range(0, 9):
                if board[row][col] == 0:
                    return (row, col)
        return None

    # Function to check if a given number is valid in the given position on the board
    def is_safe(board, row, col, num):
        for position in range(0, 9):
            # checking for row
            if board[row][position] == num and position != col:
                return False
            # checking for column
            if board[position][col] == num and position != row:
                return False

        # checking for subboxes
        upper_row = row - row%3
        upper_col = col - col%3
        for r in range(upper_row, upper_row + 3):
            for c in range(upper_col, upper_col + 3):
                if board[r][c] == num and (r, c) != (row, col):
                    return False
        
        return True

    next_num = is_empty(board)
    if not next_num:
        return True

    row, col = next_num

    for number in range(1, 10):
        if is_safe(board, row, col, number):
            board[row][col] = number

            if solve(board):
                return True

            # backtracking
            board[row][col] = 0

    return False

board = [
 [3, 0, 6, 5, 0, 8, 4, 0, 0],
 [5, 2, 0, 0, 0, 0, 0, 0, 0],
 [0, 8, 7, 0, 0, 0, 0, 3, 1],
 [0, 0, 3, 0, 1, 0, 0, 8, 0],
 [9, 0, 0, 8, 6, 3, 0, 0, 5],
 [0, 5, 0, 0, 9, 0, 6, 0, 0],
 [1, 3, 0, 0, 0, 0, 2, 5, 0],
 [0, 0, 0, 0, 0, 0, 0, 7, 4],
 [0, 0, 5, 2, 0, 6, 3, 0, 0]
]

solve(board)

for row in range(9):
    for col in range(9):
        print(board[row][col], end=" ")
    print()
Create a REST API in Python to retrieve a list of users from a database.  import flask
from flask_restful import Resource, Api

app = flask.Flask(__name__)
api = Api(app)

class Users(Resource):
    def get(self):
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM users ORDER BY id ASC')
        users = cursor.fetchall()
        conn.close()
        return users

api.add_resource(Users, '/users')
Create a Python program to create a dictionary whose keys are all of the unique characters in a text and the value is the number of times each character appears. text = "Hello world!" def character_count(text):
    char_dict = {}
    for char in text:
        if char in char_dict:
            char_dict[char] += 1
        else:
            char_dict[char] = 1
    return char_dict

result = character_count(text)
print(result)
Modify the given Python program to optimize the memory allocation and improve the execution time of the program import pandas as pd
data = pd.read_csv('dataset.csv') import pandas as pd

# Load the dataset with memory optimization
data = pd.read_csv('dataset.csv', low_memory=True)

# Optimize the data to reduce the size 
data = data.drop_duplicates(keep=False)

# Optimize the data to increase the performance 
data = data.apply(pd.to_numeric, errors='coerce')
Create a class in Python to calculate the area and perimeter of a rectangle.  class Rectangle:
    def __init__(self, length, width):
        self.length = length
        self.width = width

    def area(self):
        return self.length * self.width

    def perimeter(self):
        return 2 * (self.length + self.width)
In Python, write a program to find a single missing number in a sorted array of unique integers. arr = [1,2,3,4,6,7,8] def findMissingNumber(arr):
    n = len(arr)
    total_sum = (n+1)*(n+2)//2
    arr_sum = sum(arr)
    
    missing_number = total_sum - arr_sum
    
    return missing_number

arr = [1,2,3,4,6,7,8]

print(findMissingNumber(arr))
Create a Python list that contains strings ["apple", "banana", "lemon", "mango"].  my_list = ["apple", "banana", "lemon", "mango"]
Generate a classifier in python to categorize the given set of records. [(32, “male”),(49, “female”),(21, “male”),(45, “female”)] def classifier(records):
    male_list = []
    female_list = []

    # loop through the records
    for record in records:
        # check if the record belongs to male
        if record[1] == 'male':
            male_list.append(record[0])
        # check if the record belongs to female
        elif record[1] == 'female':
            female_list.append(record[0])
    # return the categorized lists 
    return male_list, female_list
Generate a correct python function to check if a given list of integers contains a certain number.  def contains_number(numbers, number):
 for x in numbers:
 if x == number:
 return True
 return False
Create a Python program to find the most frequent words in a given text. The program should return the top 10 words with their associated frequencies. specific text = "This is a test. We are testing the frequency of certain words in this sentence" import collections
 
text = "This is a test. We are testing the frequency of certain words in this sentence"

# Split string into list of words
words = text.split()

# Create dictionary to store frequency of words
word_freq = {} 

# Loop through words to create dictionary
for word in words:
 if word not in word_freq.keys():
 word_freq[word] = 1
 else:
 word_freq[word] += 1

# Sort dictionary by frequency in descending order
words_sorted = sorted(word_freq.items(), key=lambda x: x[1], reverse=True)
 
# Print the top 10 most frequent words
print("Most frequent words and their frequencies:")
for word, freq in words_sorted[:10]:
 print(word, freq)
Write a Python program to decode the given encoded text using ROT-13 algorithm. Gur pynff vf snpgbevnag The code is obfuscated
Generate a Python program to find the sum of all even numbers in an array [1, 5, 9, 11, 2, 8] def sumEven(array):
    sum = 0
    for x in array:
        if x % 2 == 0:
            sum += x
    return sum

print(sumEven([1, 5, 9, 11, 2, 8]))
Complete the code to print "Hello, World!" using Python.  print("Hello, World!")
Write a Python program to convert a given binary number to a decimal number. 101101 binary = input("Enter a binary number: ")
decimal = 0
for i in range(len(binary)):
    if binary[i] == '1': 
        decimal += 2**(len(binary) - i - 1)
print("Decimal equivalent of the given binary number:", decimal)
Create a Python script to periodically fetch data from a web API and store it in a local database. API endpoint:  http://example.com/api
Database name: MyData import requests 
import sqlite3 

# Define the API endpoint 
API_ENDPOINT = "http://example.com/api"

# Connect to the Database 
conn = sqlite3.connect('MyData.db')
c = conn.cursor()

# Make sure we have the right schema 
c.execute("CREATE TABLE IF NOT EXISTS data (data TEXT)")

# Fetch the data from the API 
r = requests.get(API_ENDPOINT)
data = r.json()

# Save the data to the Database 
c.execute("INSERT INTO data VALUES (?)", (data,))
conn.commit()

# Close the connection 
conn.close()
Generate a valid python program to remove the duplicate elements from a given list. [2, 3, 4, 3, 2, 4] def remove_duplicates(input_list):
    result = []
    for ele in input_list:
        if ele not in result:
            result.append(ele)
    return result
Create a Python program to check if two strings are anagrams. leg, gel def is_anagram(s1, s2): 
    # Convert both strings to lower case 
    s1 = s1.lower() 
    s2 = s2.lower() 

    # Sort both strings 
    s1 = sorted(s1) 
    s2 = sorted(s2) 

    if s1 == s2: 
        return True 
    else: 
        return False
Generate a REST API in Python for an employee database with fields for name, salary, and experience. The API should include CRUD operations to create, read, update, and delete entries. [{
"name": "John Doe",
"salary": 10000,
"experience": 3
},
{
"name": "Alice Smith",
"salary": 12000,
"experience": 4
}] from flask import Flask
from flask_restful import Api, Resource, reqparse

app = Flask(name)
api = Api(app)
 
employees = [
 {
 "name": "John Doe",
 "salary": 10000,
 "experience": 3
 },
 {
 "name": "Alice Smith",
 "salary": 12000,
 "experience": 4
 }
]
 
class Employee(Resource):
 def get(self, name):
 for employee in employees:
 if(name == employee["name"]):
 return employee, 200
 return "Employee not found", 404
 
 def post(self, name):
 parser = reqparse.RequestParser()
 parser.add_argument("salary")
 parser.add_argument("experience")
 args = parser.parse_args()
 
 for employee in employees:
 if(name == employee["name"]):
 return "Employee with name {} already exists".format(name), 400
 
 employee = {
 "name": name,
 "salary": args["salary"],
 "experience": args["experience"]
 }
 employees.append(employee)
 return employee, 201

def put(self, name):
 parser = reqparse.RequestParser()
 parser.add_argument("salary")
 parser.add_argument("experience")
 args = parser.parse_args()
 
 for employee in employees:
 if(name == employee["name"]):
 employee["salary"] = args["salary"]
 employee["experience"] = args["experience"]
 return employee, 200
 
 employee = {
 "name": name,
 "salary": args["salary"],
 "experience": args["experience"]
 }
 employees.append(employee)
 return employee, 201

def delete(self, name):
 global employees
 employees = [employee for employee in employees if employee["name"] != name]
 return "{} is deleted.".format(name), 200
 
api.add_resource(Employee, "/employee/<string:name>")
 
app.run(debug=True)
Generate a Python function that takes a list and a target number as input and returns a list of the indices of all elements in the given list that are smaller than the given target number. [2, 3, 4, 5, 6], 4 def find_smaller_elements(nums, target):
  indices = []
  for i, num in enumerate(nums):
    if num < target:
      indices.append(i)
  return indices
  
result = find_smaller_elements([2, 3, 4, 5, 6], 4)
print(result) # [0, 1]
Write a Python program to find the closest pair of points in a given set of points. [[2, 3], [12, 30], [40, 50], [5, 1], [12, 10], [3, 4]] import math

def closest_pair(points):
 closest_pair = None
 closest_distance = float('inf')
 for i in range(len(points)):
 for j in range(i + 1, len(points)):
 distance = calc_distance(points[i], points[j])
 if distance < closest_distance:
 closest_distance = distance
 closest_pair = (points[i], points[j])

 return closest_pair, closest_distance

def calc_distance(p1, p2):
 return math.sqrt((p2[0] - p1[0])**2 + (p2[1] - p1[1])**2)

points = [[2, 3], [12, 30], [40, 50], [5, 1], [12, 10], [3, 4]]
closest_pair, closest_distance = closest_pair(points)

print(closest_pair) # prints ([2, 3], [3, 4])
print(closest_distance) # prints 1.0
Design a class for data storage in Python.  class DataStorage:

    def __init__(self):
        self.data = {}

    def store(self, key, value):
        """Stores a value in the data structure with the given key"""
        self.data[key] = value

    def get(self, key):
        """Retrieves the value associated with a given key in the data structure"""
        return self.data[key]

    def remove(self, key):
        """Removes the value associated with a given key from the data structure"""
        if key in self.data:
            del self.data[key]
Create a Python script to convert a given string into uppercase and lowercase. String: "Hello, World!" # Python program to convert string into
# uppercase and lowercase
 
# Function to convert the string 
# into uppercase and lowercase 
def string_case(str): 
    upper_case = str.upper() # convert into uppercase 
    lower_case = str.lower() # convert into lowercase 
  
    print("Original String: ", str) 
    print("Uppercase String: ", upper_case) 
    print("Lowercase String: ", lower_case) 
  
str = 'Hello, World!'
string_case(str)
Write a clustering algorithm in Python to identify patient segments based on a given disease state. Patient 1: Blood Pressure: 120mmHg, Blood Sugar: 250mg/dL
Patient 2: Blood Pressure: 110mmHg, Blood Sugar: 200mg/dL
Patient 3: Blood Pressure: 140mmHg, Blood Sugar: 300mg/dL import matplotlib.pyplot as plt
import numpy as np
from sklearn.cluster import KMeans

data = [[120, 250], [110, 200], [140, 300]]

# Convert data to a numpy array
data = np.array(data)

# Train the KMeans model with the data
kmeans = KMeans(n_clusters=2).fit(data)

# Generate centroid coordinates
centroids = kmeans.cluster_centers_

# Plot the centroids for the clusters
plt.scatter(centroids[:, 0], centroids[:, 1], marker='x', s=200, linewidths=3, c='r')

# Plot all datapoints
plt.scatter(data[:, 0], data[:, 1], marker='*', s=100)

plt.show()
Create a Python application to simulate a dice game.  # Create a Python application to simulate a dice game 
import random

# Remind the player of the rules
print("You are playing a dice game. Roll the dice to determine who will go first\n")

# Set number of players, configuring the game
num_players = int(input("Enter the number of players: "))
player_list = []
first_player = 0

# Loop for each individual players
for player in range(1, num_players + 1):
    # Simulate rolling a dice
    roll = 0
    roll = random.randint(1, 6)

    # Player name
    print("Player " + str(player))
    name = input("Enter your name: ")

    # Append name and roll value to the list
    player_list.append((name, roll))
    print("You have rolled: {0}\n".format(roll))

# Get the player with the highest roll
max_roll = 0
for player in player_list:
    # Store the highest value of the roll
    if player[1] > max_roll:
        first_player = player
        max_roll = player[1]

# Announce the winner
print("{0} is the first player with the roll of {1}".format(first_player[0], first_player[1]))
Convert the following python class to XML format. class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age <?xml version="1.0" ?>
<person>
    <name>{self.name}</name>
    <age>{self.age}</age>
</person>
Create an algorithm in Python that takes in a string and returns the number of words in the string. "Hello world" def word_count(s):
	words = s.split()
	return len(words)

s = "Hello world"

print(word_count(s)) # 2
Implement a Python method that builds a binary search tree from an unsorted array [4, 3, 8, 15, 1, 5] # Node class
class Node: 
    def __init__(self, val): 
        self.val = val
        self.left = None
        self.right = None

# Function to construct a Binary Search Tree  
# from a given array
def constructBst(arr): 
    # check if list is empty or not 
    if (len(arr) == 0): 
        return None
  
    # create a new root 
    root = Node(arr[0]) 
    arr.pop(0) 
  
    # assign left and right child  
    # of root node 
    left_arr, right_arr = [], []
    for item in arr: 
        if (item <= root.val): 
            left_arr.append(item) 
        else: 
            right_arr.append(item)
              
    # recursively construct  
    # left and right sub tree 
    root.left = constructBst(left_arr) 
    root.right = constructBst(right_arr) 
    return root 

# Function to traverse a Binary Search Tree  
# and print its elements in inorder 
def inorderTraversal(root): 
    if (root != None): 
        inorderTraversal(root.left) 
        print(root.val, end = " ") 
        inorderTraversal(root.right) 

# Driver Code  
if __name__ == '__main__': 
    arr =[4, 3, 8, 15, 1, 5]
    root = constructBst(arr)  
    inorderTraversal(root)
Create a function to print the even numbers in a given range using Python.  def printEvenNumbers(start, end):
    for i in range(start, end + 1):
        if (i % 2 == 0):
            print(i, end=" ")
Create a linked list structure in Python to store employee records in ascending order based on salary.  class Node:
 def __init__(self, emp_name, salary):
  self.emp_name = emp_name
  self.salary = salary
  self.next = None

class LinkedList:
 def __init__(self):
  self.head = None
  
 def insert(self, node): 
  if self.head is None:
   self.head = node
  else:
   cur = self.head
   prev = cur
   while cur is not None: 
    if node.salary < cur.salary:
     if prev == cur:
      node.next = self.head
      self.head = node
     else:
      prev.next = node
      node.next = cur
      break
    else:
     prev = cur
     cur = cur.next
   else: 
    prev.next = node
Create a function in Python that returns the longest increasing subsequence in a given array. [3,4,2,1,6,7] # Return the longest increasing subsequence
def lis(arr): 
  n = len(arr) 
  
  # Initialize LIS values for all indexes 
  lis = [1]*n 
 
  # Compute LIS values from left to right 
  for i in range (1, n): 
    for j in range(0, i): 
      # lis[i] = max(lis[i], lis[j] + 1) if arr[i] > arr[j] 
      if arr[i] > arr[j] and lis[i] < lis[j] + 1 : 
        lis[i] = lis[j]+1
  
  # Return the maximum value
  return max(lis)
Write a Python script to compress a directory using the gzip library. source directory: example_dir import gzip
import os

# Walk through the source directory
for root, dirs, files in os.walk('example_dir'):
    # Gzip each file
    for file in files:
        with open(os.path.join(root, file), 'rb') as f_in:
            with gzip.open(os.path.join(root, file + '.gz'), 'wb') as f_out:
                f_out.writelines(f_in)
Can you create a program in Python which reverses a number? Number = 12345 # Using Python

def reverseNumber(number):
    reversed = 0
    while(number > 0):
        digit = number%10
        reversed = reversed*10 + digit
        number = number//10
    
    return reversed

number = 12345
reverse = reverseNumber(number)
print(reverse) 
# Output: 54321
Create a python program to find if a number is a prime number 15 def is_prime(num):
    for i in range(2, num):
        if not num % i:
            return False
    return True

num = 15 
if is_prime(num):
    print("The number is prime")
else:
    print("The number is not prime")
Develop a Keras deep learning program in Python to detect facial features using a Convolutional Neural Network (CNN). Not applicable from keras.layers import Conv2D, MaxPool2D, Dense, Flatten
from keras.models import Sequential

# Build the model
model = Sequential()

model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(64, 64, 3)))
model.add(MaxPool2D(pool_size=(2, 2)))
model.add(Conv2D(16, (3, 3), activation='relu'))
model.add(MaxPool2D(pool_size=(2, 2)))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dense(2, activation='sigmoid'))

# Compile and Train
model.compile(loss='binary_crossentropy', optimizer='rmsprop', metrics=['accuracy'])
model.fit(X, y, batch_size=32, epochs=10, validation_split=0.2)
Develop a program in Python to compute the median of three numbers.  def median(a, b, c): 
    if (a <= b <= c) or (c <= b <= a): 
        median = b 
    elif (b <= a <= c) or (c <= a <= b): 
        median = a 
    else: 
        median = c 
  
    return median
Write a Python program to remove all whitespace from a string. The quick brown fox jumps over the lazy dog text_without_whitespace = "".join(text.split())
Design a code generator in Python to generate content based on the provided input. Create a program to generate retweets to a post. def generate_retweets(post_id):
    retweets = []
    for _ in range(10):
        # Retrieve post from API using post_id
        post = get_post(post_id)

        # Generate a random retweet of the post
        retweet = f'RT @{post['author']}: {post['message']}'
        retweets.append(retweet)
    
    return retweets
Write a Python script to detect the presence of outliers in a given dataset. Not applicable import numpy as np
from scipy import stats

data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1000, 10000]

# Method 1 - Standard Deviation

std_dev = np.std(data)
mean = np.mean(data)
outliers = []

for value in data:
 if value > mean + 3 * std_dev or value < mean - 3 * std_dev:
 outliers.append(value)

print(outliers)
# Output: [1000, 10000]

# Method 2 - Interquartile Range

q75, q25 = np.percentile(data, [75,25])
iqr = q75 - q25

lower_threshold = q25 - (iqr * 1.5)
upper_threshold = q75 + (iqr * 1.5)

outliers = []

for value in data:
 if value > upper_threshold or value < lower_threshold:
 outliers.append(value)

print(outliers)
# Output: [1000, 10000]
Create a sentiment classifier using a linear regression algorithm in Python. Sentences:
1. I love this movie 
2. I hate this movie import numpy as np

X = np.array([[1, 0], [0, 1]])
y = np.array([1, 0])

from sklearn.linear_model import LinearRegression 

model = LinearRegression().fit(X, y) 
  
predictions = model.predict(X) 
  
print("Sentiment:", predictions)
Develop a Python program that calculates the maximum and minimum of a given list. nums = [2, 3, 5, 10, 12] def get_min_max(nums): 
  min_value = min(nums) 
  max_value = max(nums) 
  return (min_value, max_value)
Rearchitect a Python Class to accept a JSON object. Class:
class Person:
    def __init__(self, first_name, last_name):
        self.first_name = first_name
        self.last_name = last_name
 
    def __str__(self):
        return self.first_name + ' ' + self.last_name import json

class Person:
    def __init__(self, json_object):
        self.first_name = json_object["first_name"]
        self.last_name = json_object["last_name"] 

    def __str__(self):
        return self.first_name + ' ' + self.last_name

json_object = json.loads('{"first_name": "John", "last_name": "Smith"}')

person = Person(json_object)
print(person)
Using the given dataset, create a clustering algorithm in Python for mission planning. Dataset:
{
    'mission_name': 'Space Mission',
    'mission_details': {
        'num_of_satellites': 5,
        'target_region': 'South East Asia',
        'mission_duration': 24
    }
} """
Clustering Algorithm for Mission Planning
"""

import numpy as np

def create_cluster_matrix(dataset):
    # Get required data
    num_satellites = dataset['mission_details']['num_of_satellites']
    target_region = dataset['mission_details']['target_region']
    mission_duration = dataset['mission_details']['mission_duration']

    # Create the matrix
    matrix = np.zeros((num_satellites, mission_duration))

    # Fill the matrix with the target region
    for i in range(num_satellites):
        matrix[i]= np.ones((1, mission_duration))*target_region

    return matrix

if __name__ == '__main__':
    dataset = {
        'mission_name': 'Space Mission',
        'mission_details': {
            'num_of_satellites': 5,
            'target_region': 'South East Asia',
            'mission_duration': 24
        }
    }

    cluster_matrix = create_cluster_matrix(dataset)
    print(cluster_matrix)
Create a machine learning model in Python that predicts the sentiment of a given sentence. The model should use a combination of word embeddings and recurrent neural networks. Input sentence: "I am so happy right now!" #import necessary packages
import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as F

# define the word embedding layer
class WordEmbeddingLayer(nn.Module):
	def __init__(self, vocab_size, embedding_dim):
		super().__init__()
		# define the embedding layer
		self.embedding = nn.Embedding(vocab_size, embedding_dim)

	def forward(self, x):
		# lookup the embeddings for the input
		return self.embedding(x)

# define the recurrent neural network
class SentimentRNN(nn.Module):
	def __init__(self, embedding_dim, hidden_dim, output_dim, n_layers, dropout, bidirectional, pad_idx):
		super().__init__()
		# define the embedding layer
		self.embedding = WordEmbeddingLayer(vocab_size, embedding_dim)
		# define the recurrent neural network
		self.rnn = nn.LSTM(embedding_dim, hidden_dim, num_layers=n_layers, bidirectional=bidirectional, dropout=dropout)
		# define the output layer
		self.fc = nn.Linear(hidden_dim * 2, output_dim)
		# define the dropout layer
		self.dropout = nn.Dropout(dropout)
		# define the padding id
		self.pad_idx = pad_idx

	def forward(self, text):
		# look up the embeddings
		embedded = self.embedding(text)
		# perform the recurrent neural network
		outputs, (hidden, cell) = self.rnn(embedded)
		# perform dropout
		outputs = self.dropout(outputs)
		# get the last output
		out = outputs[-1, :, :]
		# apply the output layer
		out = self.fc(out)
		return out

# define the model
model = SentimentRNN(embedding_dim=100, hidden_dim=256, output_dim=1, n_layers=2, bidirectional=True, dropout=0.5, pad_idx=1)

# define the optimizer	
optimizer = torch.optim.Adam(model.parameters())

# define the test sentence
test_sentence = "I am so happy right now!"

# predict the sentiment of the sentence
pred = model(test_sentence)

# print the prediction
print(pred)
Create a search engine in Python to search a collection of documents for a given keyword. Not applicable import string

def search(docs, key):
 results = []
 for doc in docs:
 words = doc.lower().translate(str.maketrans('', '', string.punctuation)).split()
 if key in words:
 results.append(doc)
 return results
Write a Python program to analyze a given dataset and generate a report on the top ten most frequently used words. Not applicable import collections
import string

# define punctuation
punctuations = string.punctuation

# open the file and read lines
with open('words.txt', 'r') as f:
    words = f.readlines()

# remove punctuation and make all words lowercase
words = [word.strip(punctuations).lower() for word in words]

# count the words and store the word count in dictionary
word_count = collections.Counter(words)

# sort the data and get the top ten words
top_ten_words = sorted(word_count.items(), key=lambda x: x[1], reverse=True)[:10]

# print the results
print("Result:")
for word in top_ten_words:
    print(f"{word[0]} {word[1]}")
Expand this function to compute the sum of a list in Python. def computeSum(L):
    total = 0
    for x in L:
        total += x
    return total def computeSum(L):
    """Computes the sum of a list

    Parameters
    ----------
    L : list
        A list of numbers

    Returns
    -------
    total : int
        The sum of all the numbers in the list
    """
    total = 0
    for x in L:
        total += x
    return total
Create a function in Python to print all numbers from N to 1 in reverse order.  def reverse_print(n):
    for i in range(n, 0, -1):
        print(i)

n = 5
reverse_print(n)
Develop a Python program which will take a string and print out the total number of characters in it.  def num_chars(string):
    char_count = 0
    for i in string:
        char_count += 1
    print("The number of characters in the string is", char_count)
Generate a random password of 8 characters in Python  import random
import string

length = 8

chars = string.ascii_letters + string.digits + string.punctuation
password = ''.join(random.choice(chars) for _ in range(length))

print(password)
Write a Python program to generate random passwords from a list of strings. strings = ["random","password","security","codes","aaa","bbb","ccc", "ddd"] import random

strings = ["random","password","security","codes","aaa","bbb","ccc", "ddd"]
password = ""

for i in range(len(strings)):
 randomIndex = random.randint(0,len(strings) -1)
 password += strings[randomIndex]

print("Generated Password:", password)
Create a Python program to calculate the total cost of an order, including the base price and applicable taxes. orderItems = [{"Name":"Apples","Price":2.00,"Qty":2},{"Name":"Milk","Price":2.50,"Qty":1},{"Name":"Eggs","Price":3.00,"Qty":6}]
taxRate = 0.08 def calculate_total(order_items, tax_rate):
    total = 0.00
    for item in order_items:
        total += (item["Price"] * item["Qty"])
    total += total * tax_rate
    return total

order_items = [{"Name":"Apples","Price":2.00,"Qty":2},{"Name":"Milk","Price":2.50,"Qty":1},{"Name":"Eggs","Price":3.00,"Qty":6}]
tax_rate = 0.08

total = calculate_total(order_items, tax_rate)
print(total)
Trace the recursive Fibonacci algorithm in Python and test its execution time for different values of n. num = 10 import time 

def fib(n): 
 if n<0: 
  print("Incorrect input") 
 elif n==1: 
  return 0
 elif n==2: 
  return 1
 else: 
  return fib(n-1)+fib(n-2) 

start = time.time() 

num = 10 
print(fib(num))

print("Time taken:", time.time()-start)
Using object-oriented principles, write a small Python program to reverse a string without using the built-in reverse function. String = “Hello World” class ReverseString():
    
    def __init__(self, string):
        self.string = string
    
    def reverse(self):
        splittedString = self.string.split(' ')
        reversedString = []
        for word in splittedString:
            reversedString.insert(0, word)
        reversedString = ' '.join(reversedString)
        return reversedString
        
r = ReverseString(string)
print(r.reverse())
Write a function in Python to Print a given string in Reverse order. string = "Welcome to my site!" def reverseString(string):
    revString = ''
    for i in range(len(string)-1, -1, -1):
        revString += string[i]
    return revString
Generate a program in Python which implements a linked list  class Node: 
    def __init__(self, data): 
        self.data = data 
        self.next = None
  
  
class LinkedList: 
    def __init__(self): 
        self.head = None

    def printList(self): 
        temp = self.head 
        while (temp): 
            print (temp.data) 
            temp = temp.next
  
    def insertAtBeginning(self, new_data):  
        new_node = Node(new_data) 
        new_node.next = self.head 
        self.head = new_node 
  
    def insertAtEnd(self, new_data):
        if self.head is None:
            self.head = Node(new_data)
            return 
        last = self.head
        while(last.next):
            last = last.next
        last.next = Node(new_data)

    def insertAfter(self, prev_node, new_data): 
        if prev_node is None: 
            print("Previous node should be in the linked list.")
            return
        new_node = Node(new_data) 
        new_node.next = prev_node.next
        prev_node.next = new_node 
   
    def deleteNode(self, data):
        temp = self.head 
        if (temp == None):
            return  
        if (temp.data == data):
            self.head = temp.next
            temp = None
            return  
        while (temp != None):
            if temp.data == data:  
                break  
            prev = temp
            temp = temp.next
        if (temp == None):
            return  
        prev.next = temp.next
        temp = None
 
 
llist = LinkedList() 
llist.insertAtBeginning(2)
llist.insertAtEnd(3)
llist.insertAtBeginning(1) 
llist.insertAfter(llist.head.next, 4)
llist.printList() 
llist.deleteNode(2)
print("Updated list:")
llist.printList()
Create a Python script to calculate the sum of all elements in a matrix. matrix = [[1, 7, 3], [9, 2, 8], [3, 1, 7]] def sum_of_elements_matrix(matrix):
    # Initialize result 
    result = 0
    # Iterate through the matrix
    for row in matrix:
        for col in row: 
            result += col 
    # Return the result
    return result
Design a Python program to read in a integer array and find the second largest element in the array. [3, 8, 4, 5, 7, 6] def second_largest(arr):
    first_largest =  arr[0]
    second_largest = -float("inf")
    for num in arr:
        if num > first_largest:
            second_largest = first_largest
            first_largest = num
        elif second_largest < num < first_largest:
            second_largest = num
            
    return second_largest

if __name__ == '__main__':
    arr = [3, 8, 4, 5, 7, 6]
    print(second_largest(arr))
Write a python program to print the least common multiple of two integers 6, 8 def lcm(x, y):
  if x > y:
    greater = x
  else:
    greater = y
  while(True):
    if((greater % x == 0) and (greater % y == 0)):
      lcm = greater
      break
    greater += 1
  return lcm
Rewrite the following Python program using recursion. def fib(n):
    if n == 1 or n == 0:
        return n
    return fib(n-1) + fib(n-2)

print(fib(5)) def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)

print(fib(5))
What is the smallest possible code in Python to read the value of an item in a given dictionary? {"key": "value"} dictionary = {"key": "value"}
value = dictionary["key"]
Write a Python program to identify the elements in a list that are present in another given list. list1 = [1, 4, 5, 6, 7] 
list2 = [2, 3, 5, 6, 7] def identifyElements(list1, list2):
  
  # create a set from list1
  set1 = set(list1)
  
  # create a set from list2
  set2 = set(list2)
  
  # store the common elements in result
  result = []
  
  # check for each element of list2 if it is present in set1 
  for element in set2:
    if element in set1:
      result.append(element)
  
  return result

list1 = [1, 4, 5, 6, 7] 
list2 = [2, 3, 5, 6, 7]

result = identifyElements(list1, list2)
print("Common Elements :",result)

# Output: Common Elements: [5, 6, 7]
Write an algorithm in Python to identify anagrams in a given list of words. Not applicable def is_anagram(word1, word2):
 # split words into list of characters
 letters1 = list(word1)
 letters2 = list(word2)

 # sort lists
 letters1.sort()
 letters2.sort()

 # check if the sorted lists are equal
 return letters1 == letters2

# main program
words = [ 'army', 'mary', 'cat', 'act', 'rat', 'tar' ]

for i in range(len(words)):
 for j in range(i + 1, len(words)):
 if is_anagram(words[i], words[j]):
 print('%s is an anagram of %s' % (words[i], words[j]))
Write a Python script to compute the area of the circle using its radius.  import math

def compute_area_of_the_circle(radius):
    return math.pi * (radius**2)
Create a recursive function in Python that prints the values from 0 to n. 5 def print_values(n):
    if n == 0:
        return
    else:
        print(n)
        print_values(n-1)

print_values(5)
Write a Python program to optimize an equation to find the minimum value.  import numpy as np
from scipy.optimize import minimize

def equation(x):
    return x**5 + 5*x**4 - 10*x**3 - 40*x**2 + 81*x 

results = minimize(equation, [0])
minx = results.x
miny = results.fun

print('The minimum value of f(x) is {:.2f} when x={:.2f}.'.format(miny, minx))
Develop a python program to feature scale an input array [1,2,3,4,5] # feature scaling function
def feature_scale(arr):
    min_arr = min(arr)
    max_arr = max(arr)
    y = (arr-min_arr)+1
    scaled = y/(max_arr-min_arr)
    return scaled

# example usage
arr = [1,2,3,4,5]
scaled_arr = feature_scale(arr)
print(scaled_arr) # Output: [0.  0.2 0.4 0.6 0.8]
Convert the following Python code into C++. def greet(name):
    print("Hello, " + name) #include <iostream>

void greet(std::string name)
{
    std::cout << "Hello, " << name << std::endl;
}
Generate a Python script to solve a given system of linear equations. 2x + 3y = 1
5x + 6y = -2 import numpy as np 
  
# vector of coefficients 
a = np.array([[2,3], [5,6]]) 
  
# constants vector 
b = np.array([1, -2]) 
  
# printing augmented matrix 
print ("Augmented matrix:") 
for i in range(2): 
    l1 = np.concatenate((a[i], [b[i]])) 
    print (l1) 
  
# Calculating inverse of coefficient matrix 
inverse_a = np.linalg.inv(a) 
  
# Calculating value of variables 
x = np.dot(inverse_a, b) 
  
# printing required solution 
print ("Solution:") 
print ("x = {}".format(x[0]))
print ("y = {}".format(x[1]))
Can you design a mathematical function using Python which takes a n x n matrix as input and returns the determinant of the matrix? [[1, 0, 1],
 [1, 1, 0],
 [0, 1, 1]] def determinantMatrix(matrix):
    if len(matrix) == 2:
        return (matrix[0][0] * matrix[1][1]) - (matrix[0][1] * matrix[1][0])
    else:
        det = 0
        for i in range(len(matrix)):
            temp = [[row[a] for a in range(len(matrix)) if a != i] for row in matrix[1:]]
            det += ((-1) ** i) * matrix[0][i] * determinantMatrix(temp)
        return det

matrix = [[1, 0, 1],
        [1, 1, 0],
        [0, 1, 1]]

print("The determinant of the matrix is:", determinantMatrix(matrix))
Write a correct Python program to extract all words from a given sentence which have 4 or more characters. my_sentence = "This is an example sentence" def words_with_four_or_more_characters(my_sentence):
  words = my_sentence.split(" ")
  four_plus_words = []
  for word in words:
    if len(word) >= 4:
      four_plus_words.append(word)
  return four_plus_words
Generate a python program that prints out all the even numbers between a given range of integers 1 to 50 def print_even_numbers(start, end):
    for num in range(start, end+1):
        if num % 2 == 0:
            print(num)

# main
start = 1
end = 50
print_even_numbers(start, end)
Create a Python function that takes a string as an argument and returns the number of vowels present in the string.  def num_vowels(string):
 num_vowels = 0
 for char in string:
 if char in "aeiouAEIOU":
 num_vowels += 1
 return num_vowels
Describe how to create a web service for a database.  A web service for a database can be created by writing an application layer that accepts requests from a client, queries the database, and returns the results back to the client. The application layer can be written using a language that is supported by the database's driver, such as Java or Python. The application layer should also handle security, user authentication, and access control.
Create a program that can find the top five most common words in the input. Python is a powerful general-purpose programming language. import collections
import re

# clean and preprocess text
words = re.sub('\W+', ' ', input_text).split()

# find most common words
word_counter = collections.Counter(words)

# print top five most common words
print(word_counter.most_common(5))

# Output:
[('a', 1), ('Python', 1), ('is', 1), ('powerful', 1), ('general', 1)]
Generate a random 6-digits number in Python.  import random

number = random.randint(100000, 999999)
print(number)
Use a while-loop in Python to print the sum of the first 10 natural numbers.  num = 1
sum = 0
while num <= 10:
    sum = sum + num
    num = num + 1

print(sum)  # Output: 55
Create a linear regression model in Python using Scikit-learn. The model should have single input variable and a single output variable and should be able to predict the output given the input. Number of Hours [1000], Grade [78] import numpy as np 
from sklearn.linear_model import LinearRegression 

# Input data
X = np.array([1000]).reshape(-1, 1)
y = np.array([78])

# Creating the model
model = LinearRegression().fit(X, y) 

print("Predicted grade: ", model.predict([[1000]])[0]) # Output: 78.0
Create a Python script to sort a list of integers using quicksort algorithm. [4,7,2,9,8,1] def quick_sort(arr):
    if len(arr) < 2:
        return arr
    else:
        pivot = arr[0]
        less = [i for i in arr[1:] if i <= pivot]
        greater = [i for i in arr[1:] if i > pivot]
        return quick_sort(less) + [pivot] + quick_sort(greater)

# main function
if __name__ == "__main__":
    arr = [4,7,2,9,8,1]
    sorted_list = quick_sort(arr)
    print(sorted_list)

# output
[1, 2, 4, 7, 8, 9]
Create a Python class for a Person with properties name, age and city.  class Person:
    def __init__(self, name, age, city):
        self.name = name
        self.age = age
        self.city = city
Prepare a training dataset for a Machine Learning model using Python. Not applicable import pandas as pd
 
# Read in the data
df = pd.read_csv('data.csv')

# Preprocess the data
df = preprocessData(df)

# Split the data into training and test
train_X, test_X, train_y, test_y = train_test_split(df.drop('X',axis=1),
                df['X'], test_size=0.2)

# Save the training and test data to files
train_X.to_csv('train_X.csv', index=False)
test_X.to_csv('test_X.csv', index=False)
train_y.to_csv('train_y.csv', index=False)
test_y.to_csv('test_y.csv', index=False)
Generate Python code to calculate the largest number that is divisible by both 8 and 6.  def find_largest_divisible_number(m, n):
 num = 0
 while True:
 num += max(m, n)
 if num % m == 0 and num % n == 0:
 return num

print(find_largest_divisible_number(8, 6))
Create an algorithm in Python to find the smallest number in an unsorted list [12, 5, 9, 8, 10] def find_smallest(list):
    smallest = list[0]
    for num in list:
        if num < smallest:
            smallest = num
    return smallest

result = find_smallest([12, 5, 9, 8, 10])
print(result)
Create a basic chatbot using Python.  import re #importing library for regular expressions

user_input = "" #Initializing user_input

while user_input != "exit": 
    user_input = input("Type your message: ")
    if re.search("hi|hello", user_input): #Using regural expressions to make the chatbot response to greetings
        print("Hello, I am a chatbot. How can I help you?")
    else:
        print("Sorry, I don't understand.")
Write a python program to implement Merge Sort  def mergeSort(arr): 
    if len(arr) >1: 
        mid = len(arr)//2 #Finding the mid of the array 
        L = arr[:mid] # Dividing the array elements  
        R = arr[mid:] # into 2 halves 
  
        mergeSort(L) # Sorting the first half 
        mergeSort(R) # Sorting the second half 
  
        i = j = k = 0
          
        # Copy data to temp arrays L[] and R[] 
        while i < len(L) and j < len(R): 
            if L[i] < R[j]: 
                arr[k] = L[i] 
                i+=1
            else: 
                arr[k] = R[j] 
                j+=1
            k+=1
          
        # Checking if any element was left 
        while i < len(L): 
            arr[k] = L[i] 
            i+=1
            k+=1
          
        while j < len(R): 
            arr[k] = R[j] 
            j+=1
            k+=1
Create an optimization algorithm written in Python that chooses the items to include in a given list to maximize the total value while staying within a weight constraint. list = [{'name': 'item1', 'weight': 5, 'value': 10}, 
        {'name': 'item2', 'weight': 6, 'value': 15}, 
        {'name': 'item3', 'weight': 3, 'value': 5}]
weight_limit = 9 def knapsack(items, weight_limit):
 # Initialize an empty list to hold the items to include in the knapsack
 knapsack_items = []
 # Iterate over each item in the list
 for item in items:
 # Calculate the weight of the items already in the knapsack
 knapsack_weight = sum([i['weight'] for i in knapsack_items])
 # If the item can fit in the knapsack, add it
 if item['weight'] + knapsack_weight <= weight_limit:
 knapsack_items.append(item)
 
 # Return the items to include in the knapsack
 return knapsack_items


list = [{'name': 'item1', 'weight': 5, 'value': 10}, 
        {'name': 'item2', 'weight': 6, 'value': 15}, 
        {'name': 'item3', 'weight': 3, 'value': 5}]
weight_limit = 9

# Call the knapsack function
optimal_items = knapsack(list, weight_limit)
 
# Print the items to include in the knapsack
print(optimal_items)  # [{'name': 'item1', 'weight': 5, 'value': 10}, {'name': 'item3', 'weight': 3, 'value': 5}]
Write a Python program that takes an integer as input and returns a list which contains all the prime numbers up to the given integer. n = 10 def generate_prime_numbers(n):
    prime_numbers = []
    for num in range(2, n + 1):
        for i in range(2, num):
            if (num % i) == 0:
                break
        else:
            prime_numbers.append(num)
    return prime_numbers

if __name__ == "__main__":
    n = 10
    prime_numbers = generate_prime_numbers(n)
    print(prime_numbers) # Output: [2, 3, 5, 7]
Build a web scraping script in Python to get information about a given topic from a website. bike shops in Berlin import requests
from bs4 import BeautifulSoup


url = "https://example.org/search?q=bike+shops+in+Berlin"

page = requests.get(url)

soup = BeautifulSoup(page.text, "lxml")

# Get all shop information from the page.
shops = soup.find_all("div", class_="shop-info")

# Print each shop's name, address, and phone number.
for shop in shops:
 name = shop.find("h3", class_="shop-name").text
 address = shop.find("div", class_="shop-address").text
 phone = shop.find("div", class_="shop-phone").text
 
 print(name, address, phone)
Design a web API for a database powered by MongoDB in Python.  # Import the required libraries 
import pymongo
import json

# Establish a connection to the database 
client = pymongo.MongoClient("mongodb://localhost:27017")
mydb = client["mydb"]

# Define the API endpoints 
@app.route("/api/v1/getAll", methods=["GET"])
def api_get_all():
    # Get all the documents from the database and return as JSON
    documents = mydb.mycollection.find({})
    data = [json.loads(d) for d in documents]
    return json.dumps({"data": data})

@app.route("/api/v1/add", methods=["POST"])
def api_add():
    # Create a document from the `request.data` and insert it into the database
    doc = json.loads(request.data)
    mydb.mycollection.update(doc)
    return json.dumps({"message": "Document added successfully!"})
Create a Python program to compute the greatest common divisor (GCD) for two given numbers. 24 and 32 def gcd(x, y):
 
    # Using Euclidean algorithm 
    while(y): 
        x, y = y, x % y 
  
    return x 
  
# Driver Code 
a = 24
b = 32
  
gcd = gcd(a, b) 
print("GCD of", a, "and", b, "is:", gcd)
Create a module for generating random strings in Python. Not applicable import random
import string

def generate_random_string(length):
    letters = string.ascii_letters
    return ''.join(random.choice(letters) for i in range(length))
Write a function in Python that takes an array of integers as an input and returns an array with only the distinct numbers from the input. [1, 2, 3, 4, 4, 5, 5] def distinct_numbers(arr):
 return list(set(arr))
Build a python program to multiply two matrices. Matrix A 2x3 
1 2 3
4 5 6 

Matrix B 3x2
7 8
9 10
11 12 def multiply(A, B):
        rows_A = len(A)
        cols_A = len(A[0])
        rows_B = len(B)
        cols_B = len(B[0])
        if cols_A != rows_B:
            # Check matrix dimensions
            print("Cannot multiply the two matrices. Incorrect dimensions.")
            return

        result = [[0 for row in range(cols_B)] for col in range(rows_A)]
    
        for i in range(rows_A):
            for j in range(cols_B):
                for k in range(cols_A):
                    result[i][j] += A[i][k] * B[k][j]
        return result
Write a Python program to check if a given list of strings consists only of unique elements. my_list = ['cat', 'dog', 'cat'] def check_unique_list(my_list):
    unique_list =[]
    for i in my_list:
        if i not in unique_list:
            unique_list.append(i)
    if len(unique_list) == len(my_list):
        return True
    else:
        return False
Create a Python program with a class ```Book``` that has ```title``` and ```author``` properties. Not applicable class Book:
 def __init__(self, title, author):
 self.title = title 
 self.author = author

 def __str__(self):
 return f'{self.title} by {self.author}'
Edit the following Python code to print "Hello World" in a loop 10 times. for i in range(5):
    print("Hello World") for i in range(10):
    print("Hello World")
Write a Python program to determine and-or operations x = False and False x = False and False

# Output
print(x)
# False
Create a command-line program in Python which takes in three command-line arguments. The program should add the three arguments and print the result in the console. 1 6 3 import sys

if __name__ == '__main__':
 args = sys.argv[1:]
 if len(args) != 3:
 print('Error: Not enough arguments provided')
 else:
 result = int(args[0]) + int(args[1]) + int(args[2])
 print('Result: ' + str(result))
Write a web scraper in Python to fetch the title, rating and synopsis of the first 10 movies from IMDB  import requests
from bs4 import BeautifulSoup

url = "https://www.imdb.com/chart/top"
response = requests.get(url)
soup = BeautifulSoup(response.text, "html.parser")

for movie in soup.find_all("td", class_="titleColumn"):
    title = movie.find("a").text
    rating = float(movie.find("strong").text)
    synopsis = movie.find("span", class_="outline").text
    print("Title: {}\nRating: {}\nSynopsis: {}\n".format(title, rating, synopsis))
Code a solution to this leetcode problem using Python. Problem: Given an array of integers and an integer k,    you need to find the total number of continuous subarrays whose sum equals to k.

Example 1:

Input:nums = [1,1,1], k = 2
Output: 2 def subarraySum(nums, k):
    count = 0
    sums = [0]*(len(nums) + 1)
    for i in range(1,len(nums) + 1):
        sums[i] = sums[i-1] + nums[i-1]

    for i in range(len(nums)):
        for j in range(i+1,len(nums) + 1):
            if sums[j] - sums[i] == k:
                count += 1
    return count
Can you write a Python script to sort a list of strings alphabetically? ["Hello", "Yes", "No", "World"] strings = ["Hello", "Yes", "No", "World"]

strings.sort()

print(strings)
Create an algorithm in Python that takes in a sequence of numbers and finds the two numbers that have the highest product. Sequence of numbers: 4, -2, 10, 8, 9 def highest_product(arr):
 largest = max(arr[0], arr[1])
 smallest = min(arr[0], arr[1])
 largest_product = arr[0] * arr[1]

 for i in range(2, len(arr)):
 if arr[i] > largest:
 largest = arr[i]
 elif arr[i] < smallest:
 smallest = arr[i]

 largest_product = max(largest_product, largest*smallest)

 return largest_product

print(highest_product([4, -2, 10, 8, 9]))
Generate a Python function to check if a number is prime or not.  def is_prime(num):
    if num <= 1:
        return False
    for i in range(2,num):
        if num % i == 0:
            return False
    return True
Create a neural network model using Keras in Python for sentiment analysis. The model should be able to classify the sentiment of a movie review as either positive or negative. Not applicable import tensorflow as tf
from tensorflow import keras

# Define model
model = tf.keras.Sequential([
    tf.keras.layers.Embedding(vocab_size, embedding_dim, input_length=max_length),
    tf.keras.layers.GlobalAveragePooling1D(),
    tf.keras.layers.Dense(24, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

# Compile Model
model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])

# Train the model
model.fit(training_padded, training_labels, epochs=num_epochs, validation_data=(testing_padded, testing_labels))

# Make predictions
sentiment = model.predict(testing_padded)
Write a Python script to decode a base64 encoded string. encoded_string = 'aGVsbG8=' import base64

encoded_string = 'aGVsbG8='
decoded_string = base64.b64decode(encoded_string)
print(decoded_string) # prints b'hello'
Create a Python script to resolve a given web address.  import socket

def resolve_domain(domain):
    try:
        addr = socket.gethostbyname(domain) # Resolve the address by DNS
        return addr
    except socket.gaierror: # Raise when the domain name not found
        return None
Create a Django web application that allows users to view, add, and edit blog posts.  # create our Django project
django-admin startproject blogapp

# create our app 
cd blogapp
python manage.py startapp posts

# create a model for our blog posts
# in posts/models.py:
from django.db import models

class Post(models.Model):
    title = models.CharField(max_length=255)
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True) 

# register the model with admin
# in posts/admin.py:
from django.contrib import admin
from .models import Post

admin.site.register(Post)

# create a form for our blog posts
# in posts/forms.py:
from django import forms
from .models import Post

class PostForm(forms.ModelForm):
    class Meta:
        model = Post
        fields = ['title', 'content']

# create a view for our posts
# in posts/views.py:
from django.shortcuts import render
from .models import Post
from .forms import PostForm

def posts_view(request):
    posts = Post.objects.all()
    if request.method == 'POST':
        form = PostForm(request.POST)
        if form.is_valid():
            post = form.save()
            return redirect('posts_view')
    else:
        form = PostForm()
    return render(request, 'posts/posts_view.html', { 'posts': posts, 'form': form })
Create a Python 3 program that prints out the numbers from 1 to 10 in reverse order.  for i in range(10, 0, -1):
    print(i)
Create a Kmeans clustering program in Python for a dataset with 5 numeric featrues and 35 observations. Example 1st observation data

[6.400e+01,	-3.800e+01,	2.320e+02,	1.500e+00,	9.400e+00] import pandas as pd
from sklearn.cluster import KMeans

data = [[6.400e+01, -3.800e+01, 2.320e+02, 1.500e+00, 9.400e+00], 
        ...
        ...
        ...
        ...
        ...
        [2.390e+01, -1.050e+00, 6.400e+01, 4.200e+00, 2.500e+00]]

# Create a DataFrame from data
df = pd.DataFrame(data, columns=['Feature 1', 'Feature 2', 'Feature 3', 'Feature 4', 'Feature 5'])

# Create a KMeans instance
kmeans = KMeans(n_clusters=3, random_state=0)

# Fit the model to data
kmeans.fit(df)

# Print the cluster labels
print(kmeans.labels_)
You need to write a python script that takes user input for hours worked and outputs the amount of salary due.  def calculate_salary(hours_worked):
    wage_per_hour = 8.0
    salary = wage_per_hour * hours_worked
    return salary
Create a program in Python that displays a 3x3 chess board, with pieces at starting positions. Not applicable import numpy as np

chess_board = np.array([["R", "N", "B", "Q", "K", "B", "N", "R"],
 ["P", "P", "P", "P", "P", "P", "P", "P"],
 [" ", " ", " ", " ", " ", " ", " ", " "],
 [" ", " ", " ", " ", " ", " ", " ", " "],
 [" ", " ", " ", " ", " ", " ", " ", " "],
 [" ", " ", " ", " ", " ", " ", " ", " "],
 ["p", "p", "p", "p", "p", "p", "p", "p"],
 ["r", "n", "b", "q", "k", "b", "n", "r"]])
print (chess_board)
Develop an algorithm in Python to identify prime numbers in a given range of numbers.  def prime_numbers(lower_limit, upper_limit): 
    prime_numbers = [] 
    while lower_limit <= upper_limit:
        if all(lower_limit % i != 0 for i in range(2, lower_limit)):
            prime_numbers.append(lower_limit)
        lower_limit += 1
    return prime_numbers

print(prime_numbers(2, 10))
Generate a python statements to insert an item at a specific index in a list. list = [1, 2, 4, 5]
item = 3
index = 2 list.insert(index, item)
Take a given Python program and refactor it using method chaining and higher order functions. def divisible_by_three_and_five(number):
 if number % 3 == 0 and number % 5 == 0:
 return True
 else:
 return False def divisible_by_three_and_five(number):
 return (number % 3 == 0 and number % 5 == 0)
Generate a class in Python to represent a Person with the following attributes: name, age, gender.  class Person:
    def __init__(self, name, age, gender):
        self.name = name
        self.age = age
        self.gender = gender
 
    def get_name(self):
        return self.name
 
    def get_age(self):
        return self.age
 
    def get_gender(self):
        return self.gender
Write a Python script that prints out all the numbers from 1 to 100, with the following exceptions:
- If the number is a multiple of 3, print "Fizz" instead of the number.
- If the number is a multiple of 5, print "Buzz" instead of the number.
- If the number is a multiple of both 3 and 5, print "FizzBuzz" instead of the number. Not applicable for num in range(1,101):
 if num % 3 == 0 and num % 5 == 0:
  print('FizzBuzz')
 elif num % 3 == 0:
  print('Fizz')
 elif num % 5 == 0:
  print('Buzz')
 else:
  print(num)
Create a Python function that takes an integer argument and prints the prime factors of that number. num = 30 def find_prime_factors(num): 
    factors = []
    
    i = 2
    while i * i <= num: 
        if num % i: 
            i += 1
        else:
            num //= i
            factors.append(i)

    if num > 1:
        factors.append(num)

    print(factors)

find_prime_factors(num)
Write a Python Function that receives two strings and checks to see if one of them is an anagram of the other one.  def is_anagram(s1, s2):
    s1 = s1.replace(" ","").lower()
    s2 = s2.replace(" ","").lower()
    return sorted(s1) == sorted(s2)
Write a Python program to generate multiplication tables from 1 to 10.  for num in range(1,11):
 for i in range(1,11):
  print(num,"X",i,"=",num*i)
  print("")
Calculate the computational complexity of this Python code. def find_max(list):
    max_num = -1
    for item in list:
        if item > max_num:
            max_num = item
    return max_num The computational complexity of this code is O(n) because the code iterates through each element in the list only once. Therefore, the complexity is directly proportional to the length of the list, n.
Write a Python program to parse a JSON object. The program should take as input a JSON object and print the parsed values. Sample JSON:

{
 "name": "John",
 "age": 24,
 "hobbies": ["Soccer", "Dance"]
} import json

# sample json object 
data = {
 "name": "John",
 "age": 24,
 "hobbies": ["Soccer", "Dance"]
}

# parse the json object 
parsed_data = json.loads(data)

# print the parsed values 
print("Name: ", parsed_data["name"])
print("Age: ", parsed_data["age"])
print("Hobbies: ", parsed_data["hobbies"])
Optimize the following code in Python. def largest_elements(arr):
    max_vals = []
    while len(arr) > 0:
        max_value = 0
        for item in arr:
            if item > max_value:
                max_value = item
        max_vals.append(max_value)
        i = 0
        while i < len(arr):
            if arr[i] == max_value:
                arr.remove(arr[i])
                i -= 1
            i += 1
    return max_vals def largest_elements(arr):
    
    max_vals = []
    while arr:
        max_value = max(arr)
        max_vals.append(max_value)
        while max_value in arr:
            arr.remove(max_value)
    return max_vals
Given an URL as a string, write a program in Python to find the domain name. url = "https://www.google.com" def get_domain_name(url): 
    return url.split("/")[2]

print(get_domain_name("https://www.google.com"))  # prints www.google.com
Create a Python program to search for a given query from a given array of strings using regular expressions. query = 'ab+c'
string_array = ['abc', 'def', 'ghi', 'abcd', 'abcde'] import re

query = 'ab+c'
string_array = ['abc', 'def', 'ghi', 'abcd', 'abcde']

for string in string_array:
    if re.search(query, string):
        print(string)

# Output:
# abc
# abcd
# abcde
Analyze a dataset of customers and create a classification model in scikit-learn to determine customer churn. Not applicable # Python code
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split

# Load the data set
data = pd.read_csv("customer_data.csv")

# Select features
X = data.drop(['churn'], axis=1)

# Select targets
y = data['churn']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create the model
model = RandomForestClassifier()

# Train the model
model.fit(X_train, y_train)

# Make predictions and measure accuracy
predictions = model.predict(X_test)
print(model.score(X_test, y_test))
Design a python script to convert a list of strings to a dictionary my_list = ["Apple", "Banana", "Cherry"] my_list = ["Apple", "Banana", "Cherry"]

def list_to_dict(lst):
    dictionary = dict(zip(lst, range(len(lst))))
    return dictionary
    
dictionary = list_to_dict(my_list)
print(dictionary)
Create a basic Python program to produce a chart in the form of a turtle. The chart should contain a title, y-axis, x-axis, and labels. Not applicable import turtle

def chart():
    data = [100, 120, 95, 70, 60]
    
    # Draw the chart
    turtle.forward(100)
    turtle.backward(200)
    turtle.forward(100)
    turtle.right(90)
    turtle.forward(200)
    turtle.right(90)
    turtle.forward(100)
    
    for x in range(len(data)):
        turtle.right(90)
        turtle.forward(data[x])
        turtle.write(data[x])
        turtle.forward(15)
        turtle.left(90)
        turtle.forward(40)
    
    # Write the title and axes labels
    turtle.penup()
    turtle.goto(-100, -20)
    turtle.pendown()
    turtle.write("Chart Title")
    turtle.penup()
    turtle.goto(-220, -230)
    turtle.pendown()
    turtle.write("Y-Axis")
    turtle.penup()
    turtle.goto(0, -230)
    turtle.pendown()
    turtle.write("X-Axis")
    
chart()
turtle.done()
Create a linear regression model in Python to predict the price of a taxi ride given the distance and time for the ride. distance: 10 miles
time: 30 minutes import numpy as np
import sklearn
from sklearn.linear_model import LinearRegression

# Create model
model = LinearRegression()

# Train model
data = np.array([[10, 30], [20, 40], [30, 50], [40, 60], [50, 70]])
X = data[:, 0].reshape(-1, 1)
y = data[:, 1].reshape(-1, 1)
model.fit(X, y)

# Predict price of taxi ride
distance = 10
time = 30
price = model.predict([[distance, time]])[0][0]
print(f'The predicted price of a {distance} miles, {time} minutes taxi ride is ${price:.2f}')
Write a Python script to clean a dataset containing stock market data for a company. The script should remove superfluous columns, normalize the values, and check for missing data. Not applicable import pandas as pd

# Read in dataset 
data = pd.read_csv('dataset.csv')

# Remove any superfluous columns
data = data.drop(columns=['Unnamed', 'column'])

# Normalize values 
data['price'] = data['price'].apply(lambda x: x / max(data['price']))

# Check for missing values
data = data.dropna()

# Save cleaned dataset 
data.to_csv('cleaned_dataset.csv', index=False)
Create a python program for the following task: given a set of values, output the count of the mode of the set.  def get_mode_count(list_of_values):
    count_dict = dict()
    max_count = 0 
    for value in list_of_values:
        if value in count_dict:
            count_dict[value] += 1
        else:
            count_dict[value] = 1
 
        max_count = max(max_count, count_dict[value])
    
    mode_count = 0
    for key in count_dict:
        if count_dict[key] == max_count:
            mode_count += 1

    return mode_count
Using the input provided, write a Python program to print the sum of the numbers in both lists. list1 = [7, 4, 5] 
list2 = [8, 10, 4] list3 = list1 + list2

total = 0

for num in list3:
    total += num 

print(total)  # output: 29
Write python code to calculate distance between two points with latitude, longitude Point A: (51.509865, -0.118092)  
Point B: (40.730610, -73.935242) """
Calculating the distance between two points with latitude and longitude
"""
import math

def calc_dist(x1,y1,x2,y2):
    """
    Calculates the distance between two points given their latitude and longitude.
    Input: 
        x1, y1 - the latitude and longitude of the first point
        x2, y2 - the latitude and longitude of the second point
    Output:
        distance - the distance between the two points
    """
    # convert the latitude and longitude to radians
    x1, y1, x2, y2 = map(math.radians, [x1, y1, x2, y2])
    
    # calculate the great circle distance
    dlon = y2-y1
    dlat = x2-x1
    a = math.sin(dlat/2)**2 + math.cos(x1) * math.cos(x2)* math.sin(dlon/2)**2
    c = 2 * math.asin(math.sqrt(a))
    r = 6371 # radius of Earth in kilometers
    return c * r

# the coordinates of point A and point B
x1 = 51.509865
y1 = -0.118092
x2 = 40.730610
y2 = -73.935242

# calculate the distance between the two points
dist = calc_dist(x1, y1, x2, y2)
print("The distance between two points is " + str(dist) + " kilometers")
Can you provide a Python script to print the largest and smallest number from a given list? [1, 6, 4, -3, 7, 8, 11] def largest_smallest(arr):
    max_num = arr[0]
    min_num = arr[0]

    for i in arr:
        if i > max_num:
            max_num = i
        if i < min_num:
            min_num = i

    print("The largest number is", max_num, "and the smallest number is", min_num)
Write a Python program to sort the input list according to its length. list = ["Hello", "World", "This is a test"] list = ["Hello", "World", "This is a test"]

def sort_list_length(list):
    '''
    Function to sort the list according to its length
    '''
    return sorted(list, key=len)

if __name__ == "__main__":
    list = ["Hello", "World", "This is a test"]
    sorted_list = sort_list_length(list)
    print(sorted_list)
Compress a given folder using GZip in Python. folder /files import gzip 
import shutil 

# Source files to compress 
source = '/files'
  
# Destination to store compressed files 
destination = '/files/compressed'
  
# set the compression level 
compression_level = 3

shutil.make_archive(destination, 'gz', source, compression_level)
Create a Python function that takes a string and finds the longest word in it. sentence = "This is an example of a sentence with some words" def longestWord(sentence): 
    longestWord = ''
    maxLength = 0
    for word in sentence.split(' '):
        if len(word) > maxLength:
           maxLength = len(word)
           longestWord = word
    return longestWord

longest_word = longestWord(sentence)
print('The longest word is: '+ longest_word)
Write a Python function that creates a JSON response with fields for score and data. The data field should contain a message that varies depending on the score value. If the score is 0, the message should state "Try again". If the score is 1, the message should state "Well done". score = 0 def create_response(score):
 if score == 0:
  message = "Try again"  
 elif score == 1:
  message = "Well done"
 else:
  message = ""
 
 return {"score": score, "message": message}
Create a Python class with two instance methods: one for calculating the area of a circle, and one for calculating the circumference.  class Circle:

def __init__(self, radius):
  self.radius = radius

def area(self):
  return 3.14 * self.radius * self.radius

def circumference(self):
  return 3.14 * (2 * self.radius)
Create a function in Python that takes a string argument, and returns all the possible permutations of that string. Not applicable def permutations(str):
 if len(str) == 1:
 return [str]
 else:
 perms = []
 for i in range(len(str)):
 remaining_elements = str[:i] + str[i+1:]
 z = permutations(remaining_elements)
 for t in z:
 perms.append(str[i] + t)
 
 return perms
Turn the given input string into a valid Python statement. Input string:
"Function to print hello world." def printHelloWorld():
    print("Hello world")
Create an algorithm for text summarization using Python.  # import libraries
import nltk
from nltk.tokenize import sent_tokenize, word_tokenize
from nltk.corpus import stopwords
from nltk.probability import FreqDist
from heapq import nlargest
 
# Define text summarization function
def summarize(text):
    # Tokenize text
    words = word_tokenize(text)
 
    # Calculate word frequencies
    word_frequencies = FreqDist(words)
    # Identify the most frequecny words
    most_frequent_words = nlargest(100, word_frequencies, key=word_frequencies.get)
 
    # Identify sentences
    sentences = sent_tokenize(text)
 
    # Calculate sentence score based on most frequent words
    sentence_scores = {} 
    for sentence in sentences:
        score = 0
        for word in word_tokenize(sentence.lower()):
            if word in most_frequent_words:
                score += 1
        sentence_scores[sentence] = score
 
    # Choose the highest score sentences from the list
    summarized_text = nlargest(7, sentence_scores, key=sentence_scores.get)
 
    return ' '.join(summarized_text)
Write a Python program to implement the Levenshtein Distance algorithm.  def levenshtein_distance(s1, s2):
    n = len(s1)
    m = len(s2)

    dp = [[0] * (m + 1) for _ in range(n + 1)]
    for i in range(1, n + 1):
        dp[i][0] = i
    for j in range(1, m + 1):
        dp[0][j] = j

    for i in range(1, n + 1):
        for j in range(1, m + 1):
            cost = 0 if s1[i - 1] == s2[j - 1] else 1
            dp[i][j] = min(dp[i - 1][j] + 1, 
                            dp[i][j - 1] + 1, 
                            dp[i - 1][j - 1] + cost)
    return dp[-1][-1]
Create a Python program that takes a string and indicates whether it is a palindrome or not. "racecar" def is_palindrome(s):
  s = s.lower()
  left = 0
  right = len(s) - 1
  
  while left < right:
    if s[left] != s[right]:
      return False
    left += 1
    right -= 1
  return True
  
print(is_palindrome("racecar"))
Rewrite a given function in Python to return the sum of the two parameters instead of multiplying them. def multiply(a, b):
  return a * b def multiply(a, b):
  return a + b
Create a function to convert a string to a list using Python. text = "This is a sentence." def string_to_list(text):
    lst = text.split()
    return lst

text = "This is a sentence."
print(string_to_list(text))
Create a chatbot that can answer basic questions about programming.  import nltk 
import numpy as np 
import random
import string
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

def create_chatbot():
  greetings = ["hi", "hey", "hello", "hola", "greetings", "wassup", "yo"]
  greet_response = ["hey there friend!", "hi there! How can I help you?", "hello! What would you like to know?"]

  question_responses = {
    "what is python?": "Python is a widely-used general-purpose, high-level programming language.",
    "who created python?": "Python was created in the late 1980s by Guido van Rossum, and released in 1991.",
    "what is java": "Java is a class-based, object-oriented programming language developed by Sun Microsystems in the 1990s."
  }

  # tokenize the user's input string
  def tokenize(user_input): 
    tokens = nltk.word_tokenize(user_input) 
    return tokens

  # generate a response from the chatbot
  def response(user_input, greetings, greet_responses, question_responses): 
    tokens = tokenize(user_input) 

    # check if the user's input contains a greeting
    for token in tokens:
      if token.lower() in greetings: 
        random_greeting = random.choice(greet_responses)
        return random_greeting

    # check if the user's input is contained in the question_responses dictionary
    for token in tokens:
      if token.lower() in question_responses.keys(): 
        return question_responses[token]

  print("Hello! I'm your friendly programming chatbot. What can I help you with?")
    
  exit_chat = False
  while(exit_chat == False):
    user_input = input() 
    user_input = user_input.lower() 
    
    if user_input != 'bye': 
      if user_input == 'thanks' or user_input =='thank you': 
        exit_chat = True
        print("My pleasure!")
      
      else:
        if response(user_input, greetings, greet_responses, question_responses) != None:
          chatbot_response = response(user_input, greetings, greet_responses, question_responses)
          print(chatbot_response)
        else:
          print("I'm sorry, I don't understand. Can you ask in a different way?")
    else:
      exit_chat = True
      print("Bye! Have a nice day!")
Create a program to classify the given emails into spam or ham using a Naive Bayes classifier in Python.  """
Classify emails into spam or ham using Naive Bayes
"""

import numpy as np
import pandas as pd
from sklearn.naive_bayes import MultinomialNB
from sklearn.feature_extraction.text import TfidfVectorizer

# read the emails
df = pd.read_csv('emails.csv')

# prepare training and test sets
df_train = df[:int(df.shape[0]*0.8)]
df_test = df[int(df.shape[0]*0.8):]

# instantiate tf-idf vectorizers
tfidf_vectorizer = TfidfVectorizer() 

# tf-idf vectorize the texts
X_train = tfidf_vectorizer.fit_transform(df_train.text)
X_test = tfidf_vectorizer.transform(df_test.text)

# create Naive Bayes classifier
clf = MultinomialNB().fit(X_train, df_train.label)

# predict the labels for the test set
predictions = clf.predict(X_test)

# calculate the accuracy
accuracy = np.mean(predictions == df_test.label)
print('Accuracy: {}'.format(accuracy))
Write a Python program to filter a list of words by their length. word_list = ["apple", "banana", "pear", "grape", "mango"] def filter_by_length(word_list, length):
    filtered_list = []
    for word in word_list:
        if len(word) == length:
            filtered_list.append(word)
    return filtered_list

result = filter_by_length(word_list, 5)
print(result)
Implement a Monte Carlo simulation in Python to calculate the probability of completing a given task. Not applicable import random

trials = 10000
successes = 0

for _ in range(trials):
 # Simulate process (e.g. a dice roll)
 outcome = random.randint(1, 6)
 
 # Keep track of successes
 if outcome == 6:
 successes += 1

# Calculate probability
probability = successes / trials
print(f'Probability of success: {probability: .2f}')
Produce a python program for the following task: Given a 2D matrix, find all the paths from the top left corner to the bottom right corner. def find_paths(grid):
    # base case: if the grid is empty
    if not grid or not grid[0]:
        return []

    # number of rows
    rows = len(grid) 
    # number of columns
    cols = len(grid[0]) 

    # initialize the result list
    paths = []

    # function to recursively generate all the paths
    def generate_paths(row, col, path):
        # if the row and col indices are out of bounds
        if row < 0 or col < 0 or row >= rows or col >= cols:
            return
        # if the current position is a wall
        if grid[row][col] == '#':
            return
        # add the current position to the path
        path.append(grid[row][col])
        # check if the current position is the bottom right corner
        if row == rows-1 and col == cols-1:
            paths.append(path[:])
            return
        # recursively generate paths from the four neighbors
        generate_paths(row+1, col, path)
        generate_paths(row-1, col, path)
        generate_paths(row, col+1, path)
        generate_paths(row, col-1, path)
        # remove the current position from the path
        path.pop()

    # start generating paths from the top left corner
    generate_paths(0, 0, [])
    return paths
Can you build an algorithm using Python which shuffles the elements of a list?  import random
 
def shuffle(list_data):
  # Loop through the indices of the list
  for i in range(len(list_data)-1, 0, -1):
    # Generate a random index
    random_index = random.randint(0, i)
    # Swap the elements
    temp = list_data[i]
    list_data[i] = list_data[random_index]
    list_data[random_index] = temp
 
  # Return the shuffled list
  return list_data
Create a script in Python for classifying the sentiment of a text. The script should be able to handle input of various lengths and should return a sentiment score (on a scale from -1 to +1) for the text. positive import nltk

def sentiment_analysis(text):
 tokens = nltk.word_tokenize(text)
 score = 0
 for token in tokens:
 tag = nltk.pos_tag(token)[0]
 if tag[1] == 'positive':
 score += 1
 else:
 score -= 1
 return score / len(tokens)
Please construct a function in Python that constructs and returns a dictionary containing all unique characters in a given string. Example String: "missisippi" def unique_characters(string):
    unique_chars = {}
    for char in string:
        if char in unique_chars:
            continue
        else:
            unique_chars[char] = True
    return unique_chars

result = unique_characters('missisippi')
print(result) # Output: {'m': True, 'i': True, 's': True, 'p': True}
Create a tree from an array of numbers in Python. arr = [13, 5, 6, 17, 23, 4] class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

def createTree(arr):
    root = Node(arr[0])
    for i in arr[1:]:
        current_node = root
        while True:
            if i <= current_node.data:
                if current_node.left is None:
                    current_node.left = Node(i)
                    break
                else:
                    current_node = current_node.left
            elif i > current_node.data:
                if current_node.right is None:
                    current_node.right = Node(i)
                    break
                else:
                    current_node = current_node.right
    return root
Edit this Python code to raise an error if the length of the list less than 3 def check_list_length(lists):
    if len(lists) > 3:
        return True
    else:
        return False def check_list_length(lists):
    if len(lists) > 3:
        return True
    else:
        raise ValueError("list length should be more than 3")
Create a Recurrent Neural Network Model in Python that can predict the value of a stock index. The input data should include historical prices of a stock index over the past 5 years, with daily updates. import pandas as pd
import numpy as np
import tensorflow as tf

# Load the data
df = pd.read_csv("stock_data.csv")

# Prepare the data, normalize it and prepare labels 
data = df.values
X_data = data[:,:-1]
Y_data = data[:,-1]

# rescale data
X_data = X_data/np.amax(X_data)  
Y_data = Y_data/100.

# dataset size and number of timesteps
training_sample_cnt = X_data.shape[0]
time_steps = X_data.shape[1]

# initialize weights, recurrent cell and output layer
weights = init_weights()
recurrent_cell = init_recurrent_cell()
output_layer = init_output_layer()

# reshape the data for RNN
X_tensor = tf.reshape(X_data, [-1, time_steps])

# Split the data
X_tensor = tf.split(X_tensor, training_sample_cnt, 0)

# Create RNN
rnn_output, states = rnn(recurrent_cell, X_tensor, weights, time_steps)

# Get output
rnn_output = tf.reshape(rnn_output, [-1, time_steps])
Y_predict = output_layer(rnn_output)

# Create loss
loss = tf.losses.mean_squared_error(Y_data, Y_predict)

# Optimize 
optimizer = tf.train.GradientDescentOptimizer(0.01).minimize(loss)
Create a function in Python that takes a name and age and prints a greeting like "Hi, my name is <name> and I'm <age> years old." "John", 28 def greeting(name, age):
    print("Hi, my name is ", name, "and I'm", age, "years old.")

greeting("John", 28)
Create a visually appealing line chart in Python comparing the sales of two products over a 6-month period.  import matplotlib.pyplot as plt

x1 = [1, 2, 3, 4, 5, 6]
y1 = [50, 60, 70, 80, 70, 60]
x2 = [1, 2, 3, 4, 5, 6]
y2 = [40, 50, 70, 80, 90, 100]

# set figure size
plt.figure(figsize=(8, 5))

# plot data
plt.plot(x1, y1, label='Product A')
plt.plot(x2, y2, label='Product B')

# beautify the graph
plt.xlabel('Months')
plt.xticks([1, 2, 3, 4, 5, 6])
plt.ylabel('Sales (in Units)')
plt.title('Comparing Sales of Two Products')
plt.legend()
plt.grid(True)

# show the chart
plt.show()
Create a RESTful API using Python Django for a book library. The API should allow users to manipulate and list books, authors, and reviews. Not applicable from django.conf import settings
from django.contrib.auth.models import User
from django.db import models

class Book(models.Model):
 title = models.CharField(max_length=255)
 description = models.TextField()
 author = models.ForeignKey(User, on_delete=models.CASCADE)

class Author(models.Model):
 first_name = models.CharField(max_length=30)
 last_name = models.CharField(max_length=30)

class Review(models.Model):
 text = models.TextField()
 book = models.ForeignKey(Book, on_delete=models.CASCADE)
 author = models.ForeignKey(User, on_delete=models.CASCADE)
Write a function in Python that takes in a string and then reverses each word in the string. string = "This is a string" def reverse_words(s):
  words = s.split()
  reversed_words = [word[::-1] for word in words]
  return ' '.join(reversed_words)

string = "This is a string"
print(reverse_words(string))
// Output: sihT si a gnirts
Design a Python program that finds maximum sum of an array Array: [1,-3,7,12,-4,8] def max_sum(arr): 
    n = len(arr) 
    max_sum_so_far = 0
  
    for i in range(n): 
        max_ending_here = 0
          
        for j in range(i, n): 
            max_ending_here += arr[j] 
            if (max_sum_so_far < max_ending_here): 
                max_sum_so_far = max_ending_here 
  
    return max_sum_so_far

result = max_sum([1,-3,7,12,-4,8])
print(result)
Create an algorithm to remove all occurrences of a word from an input string str = "This is a sample string with words to remove"
word = "to" # Python 3 program to remove all occurrences 
# of a word from an input string
  
# Function to remove all occurrences of a word
# from an input string
def remove_word(str, word): 
  
    # split the string by spaces in a 
    lst = str.split()

    # new list
    lst2 = [] 

    # traverse in the list
    for c in lst: 
  
        if c != word: 
            lst2.append(c)

    # join the words of list
    return(" ".join(lst2))

# Driver code
str = "This is a sample string with words to remove"
word = "to"

# Function call
result = remove_word(str,word)

print(result)
Create a Python class called "Person" with attributes "name" and "age".  class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age
Utilize the Python in-built module to print the calendar for the given month. Month: 5
Year: 2021 # import the module
import calendar

# print the calendar 
print(calendar.month(2021, 5))
Rearrange the following code so that it works in Python. y, x = x, y x, y = y, x
Using the provided input, write a Python program to calculate the sum of the digits of a given number. number = 123 def sum_of_digits(number):
    result = 0
    while number > 0:
        result += number % 10
        number = number // 10
    return result
    
if __name__ == '__main__':
    number = 123
    print(sum_of_digits(number))
Create a class in Python named `Movie` that contains two parameters `title` and `rating`.  class Movie:
    def __init__(self, title, rating):
        self.title = title
        self.rating = rating
Write a Python program to parse a JSON data and print the values. {"name": "John", "age": 30, "city": "New York"} """
Write a Python program to parse a JSON data and print the values
"""

import json

# Load the input data as a json string
data = '{"name": "John", "age": 30, "city": "New York"}'

# Parse the json string into a dictionary
parsed_data = json.loads(data)

# Print out the values
for key, value in parsed_data.items():
    print(f'{key}: {value}')
Design a Python program to remove duplicate characters from a given string.  def remove_duplicate_characters(string):
    new_string = ''
    new_string_set = set()
    for character in string:
        if character not in new_string_set:
            new_string += character
            new_string_set.add(character)
    return new_string
Write an algorithm in Python to perform a linear search. arr = [1, 5, 7, 8, 10]
key = 7 def linear_search(arr, key):
    for index, element in enumerate(arr):
        if element == key:
            return index
    return -1

print(linear_search(arr, key))
Design a program in Python that takes in a list of numbers and outputs the list after removing all negative numbers  def remove_negatives(list):
    filtered_list = list(filter(lambda x: x>=0,list))
    return filtered_list
Design an algorithm in Python to perform binary search.  def binary_search(arr, target):
    start = 0
    end = len(arr) - 1
    while start <= end:
        mid = (start + end) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] > target:
            end = mid - 1
        else:
            start = mid + 1
    return -1
Write Python code to classify the sentiment of this sentence. The movie was awesome! import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer

sentiment_analyzer = SentimentIntensityAnalyzer()

sentiment_score = sentiment_analyzer.polarity_scores("The movie was awesome!")

if sentiment_score['compound'] >= 0.05:
    sentiment = "positive"
elif sentiment_score['compound'] <= -0.05:
    sentiment = "negative"
else:
    sentiment = "neutral"
    
print("Sentiment of the sentence is", sentiment)
Develop a web service using Python Flask to handle POST requests. Not applicable from flask import Flask, request

app = Flask(__name__)

@app.route('/api', methods=['POST'])
def api():
 if (request.method == 'POST'):
  # All code for handling POST requests
  return 'Handling POST requests'
 else:
  return 'Method Not Allowed'

if __name__=='__main__':
 app.run(debug=True)
Create a Python program to perform currency conversion. Exchange rate of USD/EUR = 0.86 def currency_converter(amount, rate):
 return amount * rate

# US Dollars to Euro
print(currency_converter(10, 0.86))  # Output: 8.6

# Euro to US Dollars 
print(currency_converter(10, 1.16))  # Output: 11.6
Develop a function in Python that removes all the duplicates from a list. arr = [1, 2, 2, 3, 3, 4, 4] def remove_duplicates(arr):
    new_list = []
    for i in arr:
        if i not in new_list:
            new_list.append(i)
    return new_list

arr = [1, 2, 2, 3, 3, 4, 4]
print(remove_duplicates(arr))
Generate a python dictionary for storing student information as { Student ID: (name, email, phone number) } Alice: (123456, alice@example.com, 123-456-789)
Bob: (789456, bob@example.com, 456-789-012) student_dict = {
    123456: ("Alice", "alice@example.com", "123-456-789"),
    789456: ("Bob", "bob@example.com", "456-789-012")
}
Write a Python program to calculate the number of days between two dates. Date 1: 2020-01-02
Date 2: 2020-02-19 def days_between_dates(date1, date2):
    """
    Calculate the number of days between two dates
    date1: date object
    date2: date object
    """
    time_diff = date2 - date1
    return time_diff.days

days_between_dates(date(2020,1,2), date(2020,2,19))
Implement a simple python program to split a string on a punctuation symbol. 'Hello,World!' def split_on_punctuation(s):
    #Using re module
    import re
    out = re.split('[,]',s)
    return out

print(split_on_punctuation('Hello,World!'))
Create a Python program which takes a series of integers as input and returns the largest. ins = [1, 5, 8, 3] def get_max(ins):
    return max(ins)
Implement a real-time chat application in Python using websockets. Not applicable import websockets

users = []

async def consumer(websocket):
 while True:
 message = await websocket.recv()
 
 for user in users:
 await user.send(message)

async def producer(websocket, path):
 users.append(websocket)
 await consumer(websocket)

start_server = websockets.serve(producer, 'localhost', 8000)

asyncio.get_event_loop().run_until_complete(start_server)
asyncio.get_event_loop().run_forever()
Create a Python program to sort a list of numbers by their absolute value (e.g. sort [2,-5, -1, 3] in ascending order). [2,-5, -1, 3] def abs_sort(arr):
    return sorted(arr, key=abs)

abs_sort([2,-5, -1, 3])
Generate a program that searches if an element exists in a given array arr = [1, 2, 3, 4, 5] # Python 3 program to check if an element 
# exists in the given array

# function to check if an element exists in the array
def search(arr, item): 
    for element in arr: 
        if element == item: 
            return True
    return False
  
# Driver code 
arr = [1, 2, 3, 4, 5]
  
# Function Call
item = 5
if search(arr,item):
    print("Element is present")
else:
    print("Element is not present")
Using Python, create a program to convert the string 'Hello, world!' to titlecase. "Hello, world!" import string

def toTitlecase(inputString):
    return inputString.title()

print(toTitlecase("Hello, world!"))
Can you implement a function in Python that takes two strings, and return the longest common substring?  def longest_common_substring(s1, s2):
    dp = [[0 for _ in range(len(s2) + 1)] for _ in range(len(s1) + 1)]
    longest_len = 0
    longest_string = ""

    for i in range(1, len(s1) + 1):
        for j in range(1, len(s2) + 1):
            if s1[i - 1] == s2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1] + 1
                if dp[i][j] > longest_len:
                    longest_len = dp[i][j]
                    longest_string = s1[i - longest_len:i]
            else:
                dp[i][j] = 0
    return longest_string
Edit the following Python code to handle unexpected errors. def add_numbers(a,b): 
  return a + b def add_numbers(a,b): 
    try:
        return a + b
    except TypeError as e:
        print(e)
        return None
Design a python code to convert a given sentence to camelCase  def toCamelCase(s):
    s = s.split(' ')
    return ''.join(x.title() for x in s)

s = "this is some random text"
print(toCamelCase(s))
Create a virtual assistant using Python and Dialogflow to answer a basic set of questions. Not applicable import dialogflow_v2 as dialogflow
import requests

project_id = 'project-id'
session_client = dialogflow.SessionsClient()
session = session_client.session_path(project_id, 'session-id')

while True:
 text = input('User: ')
 text_input = dialogflow.types.TextInput(text=text, language_code='en-US')
 query_input = dialogflow.types.QueryInput(text=text_input)
 response = session_client.detect_intent(session=session, query_input=query_input)

 print('Assistant:', response.query_result.fulfillment_text)
Create a function in Python that takes in an array of integers and returns the odd numbers from that array. [1, 2, 3, 4, 5] def get_odd_numbers(arr):
    # Create an empty list to store the odd numbers
    odd_numbers = []

    # Iterate through and check for odd numbers
    for num in arr:
        if num % 2 != 0:
            odd_numbers.append(num)
    
    return odd_numbers

arr = [1, 2, 3, 4, 5]

odd_numbers = get_odd_numbers(arr)

print('Odd numbers: ', odd_numbers)
Write a Python program to differentiate the following equation:
y = 5*x^2 + 3*x + 1 Not applicable def differentiate(x):
  return 10*x + 3;

# Test
x = 2 
print("The derivative of y = 5*x^2 + 3*x + 1 at x = 2 is:", differentiate(x)) # Output: 17
Write a function in python using Numpy to perform linear interpolation on a given dataset. you only have the following given dataset
x=[1,2,3]
y=[2,4,6] import numpy as np

def linear_interpolation(x, y):
    '''Linear interpolation on given dataset.'''
    points = list(zip(x, y))
    x_new, y_new = zip(*[(x_i, np.interp(x_i, x, y)) for x_i in np.arange(1,max(x))])
    points_new = list(zip(x_new, y_new))
    return points + points_new

x=[1,2,3]
y=[2,4,6]

print(linear_interpolation(x, y))
Generate a Python dictionary to store the user preferences like language, font size and background color.  user_preferences = {
    'language': 'english',
    'font_size': 12,
    'background_color': '#FFFFFF'
}
Create a Python function to find the maximum number in an array. The function should accept a single argument and return the maximum value in the array. array = [5, 8, 0, 1, 3, 9] def find_maximum(arr):
  max_val = arr[0]
  for value in arr:
    if value > max_val:
      max_val = value
  return max_val

# Usage
max_num = find_maximum([5, 8, 0, 1, 3, 9])
print(max_num)
# prints 9
Create an AI-based chatbot in Python that can answer simple queries about a product or service. Not applicable import random

# The answers to the queries
answers = {
    'What is XYZ?': 'XYZ is a company that provides XYZ services.',
    'What does XYZ do?': 'XYZ helps customers find solutions to their problems.',
    'Where is XYZ located?': 'XYZ is located in ABC city.',
    'What are the benefits of using XYZ?': 'XYZ provides a quick and easy way to find solutions to your problems.'
}

# Generate a response
def generate_response(question):
    if question in answers:
        return answers[question]
    else:
        return random.choice(['I am not sure I understand.', 'Can you give me more information?', 'Can I help you with something else?'])

# Start the conversation
question = input('Welcome to XYZ. How can I help you? ')
response = generate_response(question)

while response != 'Goodbye':
    print(response)
    question = input('Is there anything else I can help you with? ')
    response = generate_response(question)

print('Goodbye!')
Create a program in Python that takes in a text document and counts the number of times a specific word is used in it. Text: "This is a test sentence. This sentence is used for testing."
Word: "test" text = "This is a test sentence. This sentence is used for testing."
word = "test"

def count_words(text, word):
    words = text.split()
    count = 0
    for w in words:
        if w == word:
            count += 1
    return count

print(count_words(text, word)) #2
Design an algorithm in Python to detect duplicate elements in an array. [1, 2, 3, 4, 2] def find_duplicates(lst):
    seen = set()
    duplicates = []
    for item in lst:
        if item in seen:
            duplicates.append(item)
        else:
            seen.add(item)
    
    return duplicates
Generate a program in Python to calculate the factorial of an integer.  def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)
Edit the code to make it in a Python program to check if a number is divisible by 5 and 11. def isDivisible(num): 
    if num % 5 == 0: 
        print("Number is divisible by 5") 
    if num % 11 == 0:
        print("Number is divisible by 11") def isDivisible(num): 
    if num % 5 == 0 and num % 11 == 0:
        print("Number is divisible by 5 and 11") 
    else:
        print("Number is not divisible by 5 and 11")
Write a python code snippet to identify a word is a palindrome or not. word: radar # Python code to identify word is palindrome or not 
  
word = 'radar'
  
# Reversing a word 
rev_word = word[::-1] 
  
# checking if the word is equal to its reverse 
if (word == rev_word): 
    print("The word is a palindrome.") 
else: 
    print("The word is not a palindrome.")
Develop a system in Python for detecting plagiarism.  import difflib

def plagiarism_detector(string_a, string_b):
    sequence = difflib.SequenceMatcher(None, string_a, string_b)
    similarity = sequence.ratio() * 100
    print('Similarity = {:.2f}%'.format(similarity))

plagiarism_detector('The quick brown fox', 'The quick brown fox jumps over the lazy dog')
Implement an AI algorithm in Python to solve an 8-puzzle. [[1,2,3],
 [8,0,4],
 [7,6,5]] def get_successor_states(board):
	successor_states = []
	empty_space_coordinates = get_empty_space_coordinates(board)

	# Check the 4 possible operations
	for row, col in empty_space_coordinates:
		if row > 0:
			# Move empty space UP
			tmp_board = np.copy(board)
			tmp_board[row][col] = tmp_board[row-1][col]
			tmp_board[row-1][col] = 0
			successor_states.append(tmp_board)
		
		if row < 2:
			# Move empty space DOWN
			tmp_board = np.copy(board)
			tmp_board[row][col] = tmp_board[row+1][col]
			tmp_board[row+1][col] = 0
			successor_states.append(tmp_board)
		
		if col > 0:
			# Move empty space LEFT
			tmp_board = np.copy(board)
			tmp_board[row][col] = tmp_board[row][col-1]
			tmp_board[row][col-1] = 0
			successor_states.append(tmp_board)
		
		if col < 2:
			# Move empty space RIGHT
			tmp_board = np.copy(board)
			tmp_board[row][col] = tmp_board[row][col+1]
			tmp_board[row][col+1] = 0
			successor_states.append(tmp_board)
	return successor_states

def solve_8_puzzle(board):
	solved_board = [[1, 2, 3], [8, 0, 4], [7, 6, 5]]

	open_list = []
	closed_list = []

	# Initialize start state
	start_node = {'state' : board, 'parent': None}
	open_list.append(start_node)

	while len(open_list) > 0:
		# Get current node
		current_node = open_list[0]
		del open_list[0]

		# Check if current node is the solution
		if np.array_equal(current_node['state'], solved_board):
			return current_node

		# Generate a list of successors
		successor_states = get_successor_states(current_node['state'])
		for state in successor_states:
			# Generate the new node 
			successor_node = {'state' : state, 'parent': current_node}

			# Check if node is not in open list
			in_open_list = False
			for node in open_list:
				if np.array_equal(state, node['state']):
					in_open_list = True

			# Check if node is not in closed list
			in_closed_list = False
			for node in closed_list:
				if np.array_equal(state, node['state']):
					in_closed_list = True

			# If not in open list and not in closed list, add it to the open list
			if in_open_list is False and in_closed_list is False:
				open_list.append(successor_node)
		closed_list.append(current_node)
Create a program in Python to print all numbers that are divisible by 4 but not by 4.  for i in range(1, 101):
  if (i % 4 == 0) and (i % 2 != 0):
    print(i)
Write a Python code snippet to find the words which are at least 4 characters long in a given string. string = "This is a sample sentence" def find_words(string):
    words = string.split()
    result = []
    for word in words:
        if len(word) >= 4:
            result.append(word)
    return result
Create a method in Python that takes two arguments and returns a specified error message if one of the two conditions is not met. error_message = "The input must be a number!" def check_input(arg1, arg2):
   if type(arg1) is not int or type(arg2) is not int:
      return "The input must be a number!"
   else:
      return "The input is valid!"
Explain how to segment a sentence into words with Python.  The easiest way to segment a sentence into words with Python is to use the split() method of the str class. This takes a string as an argument, which is the sentence you want to segment, and returns a list of each word in the sentence. For example:

sentence  = "This is a sentence."
words = sentence.split()
print(words)
# Output: ["This", "is", "a", "sentence."]
Create a sigmoid function in Python.  def sigmoid(x): 
    return 1 / (1 + math.exp(-x))
Create a Python program that extracts a set of keywords from a given text document. Not applicable # package imports
import nltk
from nltk.corpus import stopwords 
from nltk.tokenize import word_tokenize, sent_tokenize 

# store the text document as a string
text = '''
This is a sample text document that will be used to find the keywords. 
It has a few sentences that talk about different topics such as sports, 
technology, and entertainment.
'''

# tokenize sentences
sentences = sent_tokenize(text) 

# store keyword set
keywords = set() 

for i in sentences: 
	
	# tokenize words
	words = word_tokenize(i) 
	
	# remove stopwords
	words = [w for w in words if not w in stopwords.words('english')] 

	# store keywords
	keywords = keywords.union(set(words)) 

print(keywords)

# Output: 
{'different', 'sentences', 'sports', 'document', 'Technology', 
'entertainment', 'find', 'sample', 'text', 'topics'}
Change the following Python code such that it prints the difference between two numbers. n1 = 9
n2 = 4
print(n1+n2) n1 = 9
n2 = 4
print(n1 - n2)
Code an algorithm in Python to compute the Fibonacci sequence. A positive integer n.

n = 10 def fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print("Incorrect input") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
        return b 
  
# Driver Program 
print(fibonacci(10)) 

# Output: 55
Develop a decision tree classifier in Python to predict a fourth feature from three other features. Features: A, B, C import pandas as pd

#importing the dataset 
dataset = pd.read_csv('data.csv')

#splitting the dataset into features and labels 
X = dataset.iloc[:, :-1].values 
y = dataset.iloc[:, 3].values

#importing DecisionTreeClassifier 
from sklearn.tree import DecisionTreeClassifier

classifier = DecisionTreeClassifier(criterion = 'entropy')

#fitting the classifier to the dataset
classifier.fit(X,y)
Identify and explain a memory leak in the following Python code. def getData():
    data = []
    while True:
        val = input("Enter a value: ")
        if val == "done":
            break
        data.append(val)
    return data The code in question contains a memory leak due to an infinite loop. Inside the loop, a new value is continuously added to the list ‘data’ without ever being removed. This will result in the list growing without bounds, resulting in the memory associated with the list being allocated indefinitely but never freed. To fix this memory leak, the list should be cleared or removed after each iteration of the loop. This can be done by simply setting the list to an empty list or by simply deleting the list.
Write an efficient sorting algorithm in Python that will sort a list of numbers. [5, 3, 1, 4, 7, 2, 6] def sort(nums):
    for i in range(len(nums)):
        min_index = i
        for j in range(i + 1, len(nums)):
            if nums[min_index] > nums[j]:
                min_index = j
        
        nums[i], nums[min_index] = nums[min_index], nums[i]
    
    return nums

print(sort([5, 3, 1, 4, 7, 2, 6]))
Write a Python function that takes in a list of elements and removes all the duplicate elements. [1, 2, 2, 3, 3, 3] def remove_duplicates(nums):
  new_list = []
  for num in nums:
    if num not in new_list:
      new_list.append(num)
  return new_list
  
result = remove_duplicates([1, 2, 2, 3, 3, 3])
print(result)
Create a Python class for a TV Show with attributes for title, season number, episode number, and rating. Not applicable class TVShow:
  def __init__ (self, title, season_number, episode_number, rating):
    self.title = title
    self.season_number = season_number
    self.episode_number = episode_number
    self.rating = rating
    
  def get_title(self):
    return self.title
  
  def get_season_number(self):
    return self.season_number
  
  def get_episode_number(self):
    return self.episode_number
  
  def get_rating(self):
    return self.rating
Using Python, design an algorithm that takes a string as an input and reverses it. "Hello World!" def reverseString(str): 
  s = "" 
  for i in str: 
    s = i + s
  return s 

print(reverseString('Hello World!'))	# Output: !dlroW olleH
Design a REST API endpoint in Python that retrieves customer data given the customer id. Not applicable from flask import Flask, jsonify, request

app = Flask(name)

@app.route('/api/customers/<int:id>', method=['GET'])
def get_customer(id):
    # your code here
    customer = Customer.query.filter_by(id=id).first()
    if customer:
        return jsonify({
            'id': customer.id,
            'name': customer.name,
            'email': customer.email,
            'address': customer.address
        })
    else:
        return jsonify({'error': 'customer not found'}), 404

if name == 'main':
    app.run(debug=True)
Rewrite the existing code to edit the contents of an existing Python dictionary. language_dict = {
    'English': 'Hello', 
    'Spanish': 'Hola', 
    'Japanese': 'Konnichiwa'
    } language_dict = {
    'English': 'Hi', 
    'Spanish': 'Hola', 
    'Japanese': 'Konnichiwa'
    }
    
def edit_dict(dictionary, key, value):
    dictionary[key] = value
Create a program that performs linear regression using the gradient descent algorithm in Python. Not applicable # Import the necessary libraries
import numpy as np

# Define the gradient descent function
def gradient_descent(x, y):
  # Initialize the model parameters
  m = 0
  c = 0

  # Set the learning rate
  learning_rate = 0.05

  # Set the number of iteration
  num_iterations = 1000

  # Perform gradient descent
  for i in range(num_iterations):
    # Calculate the cost
    y_pred = m * x + c
    cost = np.mean(np.square(y - y_pred))

    # Calculate the derivatives of the cost function with respect to m and c
    m_deriv = -2 * np.mean((y - y_pred) * x)
    c_deriv = -2 * np.mean(y - y_pred)

    # Update the model parameters
    m -= m_deriv * learning_rate
    c -= c_deriv * learning_rate

  # Print the final model parameters
  print('Coefficient:', m)
  print('Intercept:', c)
Devise a Python function to calculate Fibonacci series up to n numbers. 10 def Fibonacci(n): 
    if n<0: 
        print("Incorrect input") 
    # First Fibonacci number is 0 
    elif n==1: 
        return 0
    # Second Fibonacci number is 1 
    elif n==2: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2) 
  
# Driver Program 
  
print(Fibonacci(10))
Create a program that takes a text input and prints out a histogram of word frequencies. the quick brown fox jumps over the lazy dog # Python code

# input text
text = "the quick brown fox jumps over the lazy dog"

# store words in list
words = text.split()

# empty dictionary to store word frequencies
word_freq = {}

# loop through list of words
for word in words:
  # check if word is already in the dictionary
  if word in word_freq:
    # if so, increase count by 1
    word_freq[word] += 1
  else:
    # if not, add it to the dictionary with count = 1
    word_freq[word] = 1

# print the output
print("Word Frequency Histogram")
for word, freq in word_freq.items():
 print(word + ' |' + '*' * freq)
Generate a Python program to implement a Min-Heap data structure.  class MinHeap:
    def __init__(self):
        self.heap_array = []

    def parent(self, i):
        return (i - 1) // 2

    def insert(self, key):
        self.heap_array.append(key)

        # Fix the min heap property if it is violated
        self.heapify_up(len(self.heap_array) - 1)

    def heapify_up(self, index):
        # If current node is greater than parent, then swap
        if index > 0 and self.heap_array[self.parent(index)] > self.heap_array[index]:
            # Swap the current node with its parent
            self.heap_array[index], self.heap_array[self.parent(index)] = (
                self.heap_array[self.parent(index)],
                self.heap_array[index],
            )

            # Heapify the parent node
            self.heapify_up(self.parent(index))

    def delete_min(self):
        if self.heap_array:
            deletemin = self.heap_array[0]

            # Replace the root with the last node
            self.heap_array[0] = self.heap_array[-1]
            del self.heap_array[-1]

            # Heapify the root node
            self.heapify_down(0)

            return deletemin

    def heapify_down(self, index):
        index_left = 2 * index + 1
        index_right = 2 * index + 2
        index_smallest = index

        # If left child is smaller than root
        if (
            index_left
            < len(self.heap_array)
            and self.heap_array[index_left] < self.heap_array[index]
        ):
            index_smallest = index_left

        # If right child is smaller than smallest so far
        if (
            index_right
            < len(self.heap_array)
            and self.heap_array[index_right] < self.heap_array[index_smallest]
        ):
            index_smallest = index_right

        # If index is not the smallest
        if index != index_smallest:
            # Swap with the smallest
            self.heap_array[index], self.heap_array[index_smallest] = (
                self.heap_array[index_smallest],
                self.heap_array[index],
            )

            # Heapify the index that was swapped
            self.heapify_down(index_smallest)
Create a Python program that produces the output shown in this example. 3
3
3
3
3
3 def print_grid(grid_size):
    for x in range(grid_size):
        for y in range(grid_size):
            print(grid_size, end=" ")
        print()

grid_size = 3
print_grid(grid_size)
Generate a program in python that searches for an element in the given list and returns its index. mylist = [1, 4, 5, 8, 9]
element = 5 def search_list(mylist, element):
  
  for i in range(len(mylist)):
    if mylist[i] == element:
      return i
  
  return -1

mylist = [1, 4, 5, 8, 9]
element = 5

index = search_list(mylist, element)

if index == -1:
  print("Element not found.")
else:
  print("Element found at index:", index)
Generate a program in Python which will take a sentence and output its synonyms.  import nltk

def get_synonyms(sentence):
    output = []
    words = nltk.word_tokenize(sentence)
    for word in words:
        synonyms = []
        for syn in wordnet.synsets(word):
            for l in syn.lemmas():
                synonyms.append(l.name())
        output.append(list(set(synonyms)))
  return output
Develop a python function to locate a specific element in an array [6, 2, 4, 8], 8 def find_element(arr, target): 
    for i in range(len(arr)): 
        if arr[i] == target: 
            return i 
    return -1
Write a Python function to sum up elements in a given array. [1, 2, 3, 4, 5] def sum_array(arr):
 result = 0
 for item in arr:
 result += item
 return result
Debug existing Python code to update a field in a table. Context:

Table: records

Columns: id, name, value

# Incorrect Python code
cur.execure('UPDATE records SET value = ? WHERE name = ?', (value, name)) cur.execute('UPDATE records SET value = ? WHERE name = ?', (value, name))
conn.commit() # Added statement to commit changes to the database.
Write Python code to retrieve a specific element from a 2D array. my_2d_array = [[1,2,3],[4,5,6],[7,8,9]]
row_to_retrieve = 2
column_to_retrieve = 0 my_2d_array = [[1,2,3],[4,5,6],[7,8,9]]
row_to_retrieve = 2
column_to_retrieve = 0

retrieved_element = my_2d_array[row_to_retrieve][column_to_retrieve]
Create a Python script that monitors a given URL and sends an email notification if there is an error while accessing the resource  """
Create a Python script that monitors a given URL and sends an email notification if there is an error while accessing the resource
"""

import requests
import smtplib

# Monitor the URL
URL = 'https://example.com'
response = requests.get(URL)
status_code = response.status_code

# Send an email if there is an error
if status_code == 404:
    # Set up the email server
    server = smtplib.SMTP('smtp.example.com', 25)
    server.ehlo()
    server.starttls()

    # Set the 'from' and 'to' addresses
    from_email = 'monitor@example.com'
    to_email = 'admin@example.com'

    # Construct the message
    message = 'Error 404 on ' + URL

    # Send the email
    server.sendmail(from_email, to_email, message)
    server.quit()
Construct an algorithm in Python to find the longest substring in a string which does not have any repeating characters. string = 'abcaac' def findLongestSubstring(string):
 
 # Initialize the result
 max_length = 0
 
 # Initialize substrings
 curr = ''
 
 for char in string:
  if char not in curr:
   curr += char
   max_length = max(max_length, len(curr))
  else:
   curr = char
 
 return max_length

string = 'abcaac'
print(findLongestSubstring(string))
Generate a graphical representation of a function using Python. f(x) = 2x + 3 import matplotlib.pyplot as plt

x = range(-10, 11)
y = [2 * x_coord + 3 for x_coord in x]
plt.plot(x, y)
plt.title('Graph of the function: f(x) = 2x + 3')
plt.xlabel('x')
plt.ylabel('2x + 3')

plt.show()
Write a Python program to group a list of numbers based on their modulo with a given number. list_numbers = [2, 6, 8, 10, 3, 7] 
num = 3 def group_modulo(list_numbers, num):
    result = {i:[] for i in range(num)}
    for number in list_numbers:
        result[number % num].append(number)
    
    return result
    
result = group_modulo(list_numbers, num)
print(result)
Generate a REST API with a web server using Python Flask. The API should have endpoints for basic CRUD operations for a resource. Name of the resource from flask import Flask, jsonify, request

# Initialize the Flask application
app = Flask(__name__)

# Define a list to hold the resource
<Resource Name> = []

# Define the route for the resource
@app.route('/<Resource Name>', methods=['GET', 'POST', 'DELETE'])
def <Resource Name>_route():
 if request.method == 'GET':
 # Return the list of <Resource Name>
 return jsonify(<Resource Name>)

 elif request.method == 'POST':
 # Create a <Resource Name>
 <Resource Name>.append(request.get_json())
 # Return the added <Resource Name>
 return jsonify(<Resource Name>[-1])

 elif request.method == 'DELETE':
 # Delete a <Resource Name>
 <Resource Name>.remove(request.get_json())
 # Return an empty list
 return jsonify([])

if __name__ == '__main__':
 app.run(debug=True)
Generate a Python program to read a list of integers and print its elements in reversed order. The input should include a sample list of integers for testing the program, for example: [1, 3, 6, 8, 10] list_of_ints = [1, 3, 6, 8, 10]

list_of_ints.reverse()

print(list_of_ints) # [10, 8, 6, 3, 1]
Given a string, write a Python program to remove all leading and trailing whitespace characters. text = "  This  is a text string   " text = text.strip()
Write a function in Python to parse text from the HTML of a given web page.  def parse_html(html):
    soup = BeautifulSoup(html, 'html.parser')
    text = soup.get_text()
    return text
Implement a genetic algorithm in Python to find the best possible solution for the given problem. Problem: Find the global minimum of a two-dimensional function. import random
import numpy as np

# Define the function
def f(x, y):
    return (x**2) + (2*y**2)

# Define parameters for genetic algorithm
pop_size = 25 
num_generations = 100

# Create initial random starting population
pop = np.random.rand(pop_size, 2) 
scores = np.array([f(*member) for member in pop])

# Iterate over the generations
for i in range(num_generations):
    # Create mating pool
    mating_pool=np.random.choice(np.arange(pop_size), replace=False, size=(round(pop_size/2), 2)) 
    offspring = np.empty_like(mating_pool) 
    # Create offspring
    for parent_idx, child_idx in enumerate(mating_pool):
        parent_1 = pop[child_idx[0]]
        parent_2 = pop[child_idx[1]]

        # Generate offspring
        child_1 = np.random.uniform(low=min(parent_1, parent_2),high=max(parent_1, parent_2)) 
        child_2 = np.random.choice([child_1[0],child_1[1]])
        offspring[parent_idx] = [child_1[0], child_2]

    # Evaluate offspring
    scores_offspring = np.array([f(*member) for member in offspring])
    # Generate mating pool for next iteration
    mating_pool = np.concatenate((pop,offspring))
    scores = np.concatenate((scores,scores_offspring))
    pop = mating_pool
    # Select best individuals
    best_idx = np.argsort(scores)[:pop_size] 
    pop = mating_pool[best_idx]

# Find global minimum
global_minimum = np.min(scores) 

print('Global minimum is ',global_minimum)
Program a Python script that has a given list of integers as input and returns the sum of the list elements. my_list = [3, 2, 5, 4, 9] def sum_list(my_list):
	total = 0
	for i in my_list:
		total += i
	return total
Modify the Python code below to reverse the string input. string = “hello world” string = “hello world” 
# Reverse the string 
rev_string = "" 
for char in string: 
 rev_string = char + rev_string 

# Print the reversed string 
print(rev_string)
Create a Python method which will make an HTTP GET request to the given URL and return the response. url='http://www.example.com/' import requests

def getRequest(url):
 response = requests.get(url)
 return response

res = getRequest('http://www.example.com/')
print(res.text)
Construct a loop in Python to add all the elements of a given list. mylist = [5, 12, 17, 22] total_sum = 0
for num in mylist:
    total_sum += num
print("The sum is",total_sum)
Create a Python script that scrapes product prices from an Amazon page. The script should parse through the HTML of the page and extract the price of the product and the currency it is denominated in. https://www.amazon.com/gp/product/B076H6PW2F import requests
from bs4 import BeautifulSoup

url= 'https://www.amazon.com/gp/product/B076H6PW2F'

headers = {
    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'
    }

page = requests.get(url, headers=headers)

soup = BeautifulSoup(page.content, 'html.parser')

price = soup.find(id="priceblock_ourprice").get_text()

split_price = price.split()

currency = split_price[0]
amount = split_price[1]

print(f"Price: {currency} {amount}")
Convert the following JSON string to a valid Python dictionary. '{"name": "John", "age": 32, "city": "New York"}' data = json.loads('{"name": "John", "age": 32, "city": "New York"}')
Optimize a Python program to sort numeric data in ascending order. [3, 5, 2, 1, 4] def sort_list(nums):
  for i in range(len(nums)):
    min_value = min(nums[i:])
    min_index = nums[i:].index(min_value)
    nums[i], nums[i + min_index] = min_value, nums[i] 
  return nums

unsorted_list = [3, 5, 2, 1, 4]
sorted_list = sort_list(unsorted_list)
print(sorted_list) # [1, 2, 3, 4, 5]
Construct a Python program to encrypt a given text using the Caesar cipher. text = “Hello World!”
key = 2 def caesar_encrypt(text, key):
 encrypted = ""
 
 for char in text:
   if char.isalpha():
     if char.isupper():
       encrypted += chr((ord(char) + key - 65) % 26 + 65)
     else:
       encrypted += chr((ord(char) + key - 97) % 26 + 97)
   else:
     encrypted += char
 return encrypted

text = "Hello World!"
key = 2

encrypted_text = caesar_encrypt(text, key)
print(encrypted_text) #Hfnnq Yqgfgt!
Can you build a program in Python to calculate the median of a given list of integers? [4, 9, 12, 8, 1] def median(list): 
	list.sort() 
	length = len(list) 
	if length % 2 == 0: 
		return sum(list[int(length / 2) - 1:int(length / 2) + 1]) / 2
	else: 
		return list[int(length / 2)] 

median_of_list = median([4, 9, 12, 8, 1]) 
print("Median of the list is: " + str(median_of_list)) 
# Output: 8
Create a web scraping program in Python to extract data from a given website about a given subject. The subject is stocks, and the website is www.example.com. import requests
from bs4 import BeautifulSoup

# get the html from the website
url = "https://www.example.com/stocks"
page = requests.get(url)
soup = BeautifulSoup(page.content, 'html.parser')

# find all table rows
table_rows = soup.find_all('tr')

# iterate through each table row
for row in table_rows:
 # get the table data
 stock_data = row.find_all('td')

 # extract the data from each table data element
 stock_symbol = stock_data[0].text
 stock_name = stock_data[1].text
 stock_price = stock_data[2].text

 # Print the data
 print("Stock Symbol:", stock_symbol)
 print("Stock Name:", stock_name)
 print("Stock Price:", stock_price)
Can you program a web scraper in Python to extract specific data from a website?  import requests
from bs4 import BeautifulSoup

url = "example.com"
response = requests.get(url)
html = response.text

soup = BeautifulSoup(html, "html.parser")
data = soup.find_all(class_="data-class")

for item in data:
    # Extract the data you need here
    # ...
Create a function to take a numerical input and return a list of its prime factors in python.  """
Function to take an input and return a list of its prime factors
"""
def prime_factorize(n): 

    prime_factors = [] 

    d = 2
    while d*d <= n: 
        while (n % d) == 0: 
            prime_factors.append(d)  
            n /= d 
        d += 1
    
    if n > 1: 
        prime_factors.append(n)
    
    return prime_factors 

if __name__ == '__main__':
    print(prime_factorize(81))
Write a Python program to count the number of occurrences of each word in a sentence. The quick brown fox jumps over the lazy dog sentence = 'The quick brown fox jumps over the lazy dog'
words = sentence.split(' ')

word_count = {} 
for word in words:
    if word in word_count:
        word_count[word] += 1
    else:
        word_count[word] = 1
 
for k,v in word_count.items():
    print(k , ':' , v)
Can you create a Python program to return true if a given string is a valid IP address and false otherwise?  import re
def is_valid_ip(ip):
    regex_pattern = r"^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$"
    if re.match(regex_pattern, ip):
        return True
    else:
        return False
Create a function to implement linear search in Python.  def linear_search(list, item):
    # Traverse through all elements in the list
    for i in range(len(list)):
        if list[i] == item:
            return i  # Return the index of the element
    return -1 # Return -1 if the item is not found
Can you build a function in Python that accepts two strings and returns true or false depending on whether the strings are an anagram? "silent", "listen" def isAnagram(str1, str2):
    # Count the number of character occurrences in both strings
    str1_dict = {}
    str2_dict = {}
    for i in range(len(str1)):
        if str1[i] in str1_dict:
            str1_dict[str1[i]] += 1
        else:
            str1_dict[str1[i]] = 1
    for j in range(len(str2)):
        if str2[j] in str2_dict:
            str2_dict[str2[j]] += 1
        else:
            str2_dict[str2[j]] = 1
  
    # Compare both dictionaries
    for char in str1_dict:
        if char in str2_dict and str1_dict[char] == str2_dict[char]:
            return True
        else:
            return False

str1 = "silent"
str2 = "listen"
if isAnagram(str1, str2):
    print("true")
else:
    print("false") # output: true
Write a Python program to find the longest substring with only two distinct characters in a given string. String: "abbaba" def substring_2chars(s):
    maxlen = 0
    currlen = 0
    prev_char = ''
    curr_char = ''

    for c in s:
        if c != prev_char and curr_char == '':
            curr_char = c
            currlen += 1
        elif c != prev_char and c != curr_char:
            maxlen = max(maxlen, currlen)
            currlen = 1
            prev_char = curr_char
            curr_char = c
        else:
            currlen += 1
            prev_char = curr_char

    maxlen = max(maxlen, currlen)    
    return maxlen
Write a python program to convert a time string "hh:mm:ss" into total number of seconds time = "08:11:15" time_in_secs = 8 * 3600 + 11 * 60 + 15
Provide a Python program that sorts a list of strings based on the length of the strings. ["banana", "apple", "watermelon"] my_list = ["banana", "apple", "watermelon"]
my_list.sort(key=len)

# my_list is now ["apple", "banana", "watermelon"]
Create a Python program to detect and remove outlier data points from a dataset. Sample dataset representing customer orders:
order_id,date,quantity
1,15/01/2020,10
2,17/01/2020,20
3,19/01/2020,30
4,20/01/2020,40
5,22/01/2020,50
6,24/01/2020,60
7,26/01/2020,70
8,28/01/2020,80
9,30/01/2020,90 import numpy as np

data = np.genfromtxt("orders.csv", delimiter=",", dtype="int")

# Calculate mean and standard deviation
mean = np.mean(data[:, 2])
std = np.std(data[:, 2])

# Set threshold
threshold = mean - (3 * std)

# Remove outlier
filtered = data[data[:, 2] > threshold]
print(filtered)

"""
Output:
[[ 1 15 10]
 [ 2 17 20]
 [ 3 19 30]
 [ 4 20 40]
 [ 5 22 50]
 [ 6 24 60]
 [ 8 28 80]
 [ 9 30 90]]
"""
Implement a function in Python to implement Merge Sort algorithm.  def merge_sort(arr): 
    # Base case 
    if len(arr) <= 1:
        return arr
    else: 
        # Split array into two halves 
        mid = len(arr)//2
        left = arr[:mid] 
        right = arr[mid:] 

        # Call merge_sort recursively with each half 
        left = merge_sort(left) 
        right = merge_sort(right)
    
        # Merge each half 
        return merge(left, right) 
 
def merge(left, right): 
  
    # Initialize variables 
    result = [] 
    left_index = 0
    right_index = 0
   
    # result will be a sorted array
    while left_index < len(left) and right_index < len(right): 
        if left[left_index] < right[right_index]: 
            result.append(left[left_index]) 
            left_index += 1
        else: 
            result.append(right[right_index]) 
            right_index += 1
    
     # If left is longer, add remaining elements
    result += left[left_index:] 

    # If right is longer, add remaining elements
    result += right[right_index:] 
    return result
Using the comments as a guide, fix the given python code. num_list = [2, 7, 4, 10, 5]
            
 # TODO: replace the line below
total = 0       
for num in num_list:
    total += num

print(total) num_list = [2, 7, 4, 10, 5]
            
# Replace the line below
total = 0       
for num in num_list:
    total += num

print(total)
Read the following data structure and generate a Python program to sort the list by name alphabetically. student_list = [{"name": "John", "age": 20}, {"name": "Emily", "age": 18}, {"name": "James", "age": 21}] sorted_list = sorted(student_list, key=lambda k: k["name"])
 
for student in sorted_list:
    print(student["name"])
Create a Python class that implements a max heap data structure.  class MaxHeap:
    def __init__(self, array):
        self.heap = self.build_heap(array)

    def build_heap(self, array):
        n = len(array)
        for i in reversed(range(n // 2)):
            self.heapify(i, array, n)
        return array

    def heapsort(self, array):
        n = len(array)
        for i in reversed(range(n)):
            array[i], array[0] = array[0], array[i]
            self.heapify(0, array, i)
        return array

    def heapify(self, current_index, array, heap_size):
        largest = current_index
        left_child = 2 * current_index + 1
        right_child = 2 * current_index + 2
        if (left_child < heap_size and
           array[left_child] > array[largest]):
            largest = left_child
        if (right_child < heap_size and
                array[right_child] > array[largest]):
            largest = right_child
        if largest != current_index:
            array[largest], array[current_index] = (
                array[current_index], array[largest]
            )
            self.heapify(largest, array, heap_size)
Generate code for a predictive model in Python that uses linear regression to predict the stock price for a given company.  import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression

# Read in csv data
data = pd.read_csv('stock_data.csv')

# Split our data into testing and training sets
X_train = data[data['date'] < '2014-01-01']
X_test = data[data['date'] >= '2014-01-01']

# Extract our feature and target columns
X_train = X_train.drop(['date', 'price'], axis=1)
X_test = X_test.drop(['date', 'price'], axis=1)
y_train = data[data['date'] < '2014-01-01']['price']
y_test = data[data['date'] >= '2014-01-01']['price']

# Fit our Linear Regression Model
linear_regression = LinearRegression()
linear_regression.fit(X_train, y_train)
y_preds = linear_regression.predict(X_test)

# Print out our predictions
for i in range(1, len(y_preds)):
 print(f"Predicted: {y_preds[i]}, Actual: {y_test.iloc[i]}")
Write a Python program to calculate the total cost of a customer's online orders. orders = [
 {'item': 'Pizza', 'price': 12.00}, 
 {'item': 'Chips', 'price': 3.50}, 
 {'item': 'Coke', 'price': 2.50}
] total_cost = 0
for order in orders: 
 total_cost += order['price']

print('Total cost is', total_cost)
Develop a Python script to generate a report containing the top keywords mentioned in the given document. Document: The quick brown fox jumped over the lazy dog import re

text = "The quick brown fox jumped over the lazy dog"

# Extract words from the document
words = re.findall(r'\w+', text)

# Get the frequency of each word
word_freq = {} 
for word in words: 
    if word not in word_freq: 
        word_freq[word] = 0
    word_freq[word] += 1

# Sort words in descending order by frequency
sorted_word_freq = sorted(word_freq.items(), key = lambda x: x[1], reverse = True) 
  
# Print the top 10 most frequent words
print("Top 10 most frequent words:") 
for word, freq in sorted_word_freq[:10]: 
    print(word, ' :', freq)
Generate a Python program to solve cube root of the input number. 25 def cube_root(x):
    res = 0
    while (res*res*res < abs(x)):
        res += 1
  
    if (res*res*res != abs(x)):
        print("Not a perfect cube")
    else:
        if (x < 0):
            res = -res
        print("Cube root of " + str(x) + " is " + str(res))

cube_root(25)
Create a Python program to classify a given sentence according to its sentiment (positive, negative, or neutral). The interface is very intuitive and user-friendly. import nltk
import sklearn

from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB

sentence = 'The interface is very intuitive and user-friendly.'

# Tokenize the sentence
tokens = nltk.word_tokenize(sentence)

# Get the features from the tokens
count_vect = CountVectorizer()
word_count = count_vect.fit_transform(tokens)

# Create a Multinomial Naive Bayes classifier
clf = MultinomialNB().fit(word_count, ['positive'])

# Predict the sentiment of the sentence
prediction = clf.predict(word_count)

# Print the result
print(f'The sentiment of the sentence is {prediction[0]}.')
Write a Python program to solve the traveling salesman problem for a given list of cities with a specified starting node. Starting Node: A
Cities: A, B, C, D, E import networkx as nx

# Create a graph
G = nx.Graph()
G.add_nodes_from(['A', 'B', 'C', 'D', 'E']) 

# Get all possible paths from starting node
all_paths = nx.all_simple_paths(G, source="A", target=None)

# Compute the shortest path
shortest_path = nx.shortest_path(G, source="A", target=None)

# Display the result
for p in shortest_path:
 print("->".join(p))

# Output
A->B->C->D->E->A
Develop a program written in Python that will print the first 30 prime numbers.  def print_primes(n):
    # Create a list of prime numbers
    prime_numbers = []

    # Iterate from 2 to n
    for num in range(2, n + 1):
        isPrime = True
        
        # Check for factors
        for i in range(2, num):
            if num % i == 0:
                isPrime = False
                break

        # If prime, append to list
        if isPrime:
            prime_numbers.append(num)

    # Print out the first 30 prime numbers
    for p in prime_numbers[:30]:
        print(p, end=" ")

# Test function
print_primes(100)
Implement a Python program to find the longest common subsequence of characters. s1 = 'acefhjkb'
s2 = 'bcdefhi' def longest_common_subsequence(s1, s2):
    n1 = len(s1)
    n2 = len(s2)

    dp_table = [[0]*(n2+1) for _ in range(n1+1)]
    for i in range(n1):
        for j in range(n2):
            if s1[i] == s2[j]: 
                dp_table[i+1][j+1] = dp_table[i][j] + 1
            else:
                dp_table[i+1][j+1] = max(dp_table[i][j+1], 
                                        dp_table[i+1][j])
    lcs_length = dp_table[-1][-1]
    lcs_string = "" 
    i, j = n1, n2
    while i > 0 and j > 0: 
        if dp_table[i][j] == dp_table[i-1][j]: 
            i -= 1
        elif dp_table[i][j] == dp_table[i][j-1]: 
            j -= 1
        else: 
            lcs_string = s1[i-1] + lcs_string 
            i -= 1
            j -= 1
    
    return lcs_string, lcs_length
Create a program in JavaScript to reverse a sentence. "I love coding in Python" let sentence = "I love coding in Python";
let reversed = sentence.split("").reverse().join("");
console.log(reversed);
Collate a machine learning model in Python that distinguishes between cats and dogs. A dataset of 800 images of cats and dogs import numpy as np
import keras
from keras.layers import Dense, Conv2D, MaxPooling2D, Dropout, Flatten
from keras.models import Sequential
from keras.preprocessing.image import ImageDataGenerator

# Create the neural network model
model = Sequential()

# Input layer
model.add(Conv2D(32, (3, 3), input_shape = (64, 64, 3), activation = 'relu'))

# Hidden layers
model.add(MaxPooling2D(pool_size = (2, 2)))
model.add(Dropout(0.3))
model.add(Conv2D(64, (3, 3), activation = 'relu'))
model.add(MaxPooling2D(pool_size = (2, 2)))
model.add(Dropout(0.3))
model.add(Conv2D(64, (3, 3), activation = 'relu'))
model.add(MaxPooling2D(pool_size = (2, 2)))
model.add(Dropout(0.3))

# Output layer
model.add(Flatten())
model.add(Dense(units = 128, activation = 'relu'))
model.add(Dense(units = 1, activation = 'sigmoid'))

# Compile the model
model.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['accuracy'])

# Create data generator
datagen = ImageDataGenerator(rescale = 1./255, shear_range = 0.2, zoom_range = 0.2, horizontal_flip = True)

# Fit the model
train_generator = datagen.flow_from_directory(directory = '/path/to/dataset', target_size = (64, 64), color_mode = 'rgb', class_mode = 'binary', batch_size = 32)
model.fit_generator(generator = train_generator, steps_per_epoch = 800, epochs = 5, validation_data = test_generator, validation_steps = 200)
Develop a class in Python to store 3D vectors.  class Vector3D(object):
    def __init__(self, x=0, y=0, z=0):
        self.x = x
        self.y = y
        self.z = z

    def magnitude(self):
         return math.sqrt(self.x**2 + self.y**2 + self.z**2)

    def __add__(self, other):
        return Vector3D(self.x + other.x,
                        self.y + other.y,
                        self.z + other.z)
Given a list of words and a target word, write a function in Python that finds the index of target word in the list. words = ["hello", "world", "another"], target_word = "world" def find_word_index(words, target_word):
    for i, word in enumerate(words):
        if word == target_word:
            return i
    return -1

word_index = find_word_index(words, target_word)
print(word_index)
Write a Python function that takes two input strings and returns TRUE if the second string is a rotation of the first one (e.g., 'hello' and 'lohel' should return true). "hello", "lohel" def is_rotation(str1, str2):
    return len(str1) == len(str2) and str2 in str1 + str1

# testing
print(is_rotation('hello', 'lohel'))  # prints True
Construct a class in Python to represent a 2D point.  class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    def get_x(self):
        return self.x
    def get_y(self):
        return self.y
    def is_origin(self):
        return self.x == 0 and self.y == 0
    def __str__(self):
        return 'Point(x = {}, y = {})'.format(self.x, self.y)
Create a web crawler with Python 3 that retrieves the title, description, and HTML of each page it visits. Not applicable import requests
from bs4 import BeautifulSoup

def get_html(url):
 r = requests.get(url)
 return r.text


def get_data(html):
 soup = BeautifulSoup(html, 'lxml')
 title = soup.find('title')
 if title is not None:
 title = title.text
 else:
 title = ''

 description = soup.find('meta', {
 'name': 'description'
 })
 if description is not None:
 description = description.get('content')
 else:
 description = ''

 html = soup.find('body')
 if html is not None:
 html = html.prettify()
 else:
 html = ''

 return {
 'title': title,
 'description': description,
 'html': html,
 }

url = 'https://example.com'
data = get_data(get_html(url))
print(data) # {'title': 'Example Domain', 'description': 'Example Domain', 'html': ...}
Write a Python program to match a given pattern in a given string. String: "ABCDDEFG" 
Pattern: "AB*EFG" import re

string = "ABCDDEFG"
pattern = "AB*EFG"
match = re.search(pattern, string)
 
if match:
    print("Pattern found!")
else:
    print("Pattern not found!")
Create a Python script that scrapes a website for all the external links present in the page. Not applicable import requests 
from bs4 import BeautifulSoup 
  
def extract_links_from_url(url): 
  
    # make a request to the URL  
    r = requests.get(url) 
  
    # create a beautiful soup object  
    soup = BeautifulSoup(r.content,'html5lib') 
  
    # find and return hyperlinks(a tags)  
    return [link['href'] for link in soup.find_all('a', href=True)]
Design a simple OOP calculator class in Python to carry our basic arithematic operations.  class SimpleCalculator:
    """A simple class which has methods to do basic arithmetic operations."""
    def __init__(self):
        """Initializing an instance of the SimpleCalculator class."""
        self.result = 0
    
    def __str__(self):
        """Returns the string representation for the SimpleCalculator class."""
        return "Simple Calculator"
    
    def add(self, num1, num2):
        self.result = num1 + num2
        return self.result
    
    def subtract(self, num1, num2):
        self.result = num1 - num2
        return self.result
    
    def multiply(self, num1, num2):
        self.result = num1 * num2
        return self.result
    
    def divide(self, num1, num2):
        self.result = num1 / num2
        return self.result
Generate a script in Python to generate a random password that has a minimum of 8 characters, including special characters and numbers. Not applicable import string
import random

# Generate 8 random characters, including special characters and numbers
size = 8
password = ''.join(random.choices(string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation, k=size))

print(password) # Output: eu$y6c17
Generate a Python program to implement the Euclidean algorithm for finding the greatest common divisor.  def gcd(a, b):
 if b == 0:
  return a
 return gcd(b, a % b)

result = gcd(100, 12)
print(result)
What is the code to shuffle an array in Python?  import random

array = [1,2,3,4,5]

random.shuffle(array)
Reformat a collection of list into a dictionary in Python. [['a', 1], ['b', 2], ['c', 3], ['d', 4]] data = [['a', 1], ['b', 2], ['c', 3], ['d', 4]]

my_dict = dict(data)
print(my_dict) # {'a': 1, 'b': 2, 'c': 3, 'd': 4}
Create an array of the first 10 whole numbers using python.  arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
Implement a search algorithm in Python that searches for a given element in a given array. [3, 5, 7, 8, 9], 5 def search_array(array, element):
    # loop through array
    for i in range(len(array)):
        # compare array element and search element
        if array[i] == element:
            # return index if elements are equal
            return i
    # return -1 if search element is not found
    return -1

array = [3, 5, 7, 8, 9]
element = 5

index = search_array(array, element)
if index != -1:
    print("Element {} found at index {}".format(element, index))
else:
    print("Element not found.")
Write a Python program to convert a string to a list of characters. String "Hello". def str_to_list(str):
    char_list = []
    for c in str:
        char_list.append(c)
    return char_list

print(str_to_list("Hello")) #prints ['H', 'e', 'l', 'l', 'o']
Generate a Python program to update the value of a variable by given percentage. Given variable value = 25.22
Given percentage = 5 value = 25.22
percent = 5

new_value = value + (value * (percent/100))

print("The new value is: ", new_value) 
# Output: The new value is: 26.496
Design a Python class to store information about student records.  class StudentRecord:
    def __init__(self, name, age, gender, gpa):
        self.name = name
        self.age = age
        self.gender = gender
        self.gpa = gpa
    def get_name(self):
        return self.name
    def get_age(self):
        return self.age
    def get_gender(self):
        return self.gender
    def get_gpa(self):
        return self.gpa
Generate a program in Python that takes a given dictionary and finds the key with the highest value. my_dict = {
    'a': 1,
    'b': 5,
    'c': 3
} def highest_value(d):
    key, highest_val = None, -float("inf")
    for k, val in d.items():
        if val > highest_val:
            key, highest_val = k, val
    return key

highest_key = highest_value(my_dict)
print(highest_key)
Classify this Python function according to behavior. def is_even(n):
    '''
    This function takes a number n and 
    returns True if n is even and False if n is odd
    '''
    return n % 2 == 0 Classifying this Python function as a Predictive Function.
Create a method in Python that takes a text string as an argument and determines whether the text is a palindrome. "racecar" """
Create a method in Python that takes a text string and determines whether the string is a palindrome.
"""

def is_palindrome(text):
    i = 0
    j = len(text) - 1
    while i <= j:
        if text[i] != text[j]:
            return False
        i += 1
        j -= 1
    return True

if __name__ == '__main__':
    text = "racecar"
    print(is_palindrome(text))
Create a calculator program using Python.  def calculator(num1, num2, op):
 if op == '+':
 return num1 + num2
 elif op == '-':
 return num1 - num2
 elif op == '*':
 return num1 * num2
 elif op == '/':
 return num1 / num2
 else:
 return None
Generate a Python program to fit a linear model focusing on the prediction for x2 No Input import sklearn.linear_model as lm

def fit_linear_model_prediction_x2(x, y):
    """ 
    Function to fit a linear model focussing on predicting x2 from the given data.

    Args:
        x (list[list]): List of features vectors
        y (list): List of target labels

    Returns:
        The fitted linear model
    """
    # Select the specific feature corresponding to x2
    x_new = np.array([x[:, 1]]).T

    # Construct and fit the linear model
    model = lm.LinearRegression()
    model.fit(x_new, y)
    
    return model
Design a program in Python that takes a string as an input and checks whether all the vowels are present in the string or not. This is a test def check_vowels(string):
    vowels = ['a','e','i','o','u']
    for vowel in vowels:
        if vowel not in string:
            return False
    return True

print(check_vowels('This is a test'))
Create a simple web page using HTML and CSS to display a list of the top 5 most popular programming languages. Not applicable <!DOCTYPE html>
<html>
<head>
 <title>Top 5 Programming Languages</title>
 <style>
 ul {
 list-style: none;
 font-family: sans-serif;
 font-size: 20px;
 }
 li {
 padding-top: 10px;
 }
 </style>
</head>
<body>
 <h1>Top 5 Programming Languages</h1>
 <ul>
 <li>JavaScript</li>
 <li>Python</li>
 <li>Java</li>
 <li>C#</li>
 <li>C++</li>
 </ul>
</body>
</html>
Improve the performance of the below algorithm written in Python.  def algorithm(arr):
    result = []
    for i in range(len(arr)):
        for j in range(i + 1, len(arr)):
            if arr[i] + arr[j] == 0:
                result.append((arr[i], arr[j]))
    return result

def optimizedAlgorithm(arr):
    result = []
    seen = set()
    for num in arr:
        if -num in seen:
            result.append((num, -num))
        seen.add(num)
    return result
Create a recursive function in Python to calculate the Fibonacci numbers up to the nth term.  def computeFibonacci(n): 
   if n<0: 
      print("Incorrect input") 
   elif n==1: 
      return 0
   elif n==2: 
      return 1
   else: 
      return computeFibonacci(n-1)+computeFibonacci(n-2)
Create an algorithm in Python to find the longest continuous sequence of zeros in a binary string. Example binary string: "1101011000" def longestZeroSeq(inputStr):
    maxLength = 0 
   
    currentLength = 0
   
    for c in inputStr:
        if c == '0':
            currentLength += 1
        else:
            maxLength = max(maxLength, currentLength) 
            currentLength = 0
   
    maxLength = max(maxLength, currentLength)
   
    return maxLength
Merge two dictionaries into one using Python. dict1 = {'a': 1, 'b': 2}
dict2 = {'c': 3, 'd': 4} def merge_dictionaries(dict1, dict2):
    res = {**dict1, **dict2} 
    return res

print(merge_dictionaries(dict1, dict2)) # Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4}
Create a web scraper in Python that scrapes the website "example.com" and prints out the content of all the h1 tags. Not applicable import requests
from bs4 import BeautifulSoup

response = requests.get('https://example.com/')
soup = BeautifulSoup(response.text, 'html.parser')

for h1 in soup.find_all('h1'):
 print(h1.text)
Generate code in Python to print out the common elements of two sorted lists in linear time.  def find_common_elements(list1, list2):
    common_elements = []
    i = 0
    j = 0
    while i < len(list1) and j < len(list2):
        if list1[i] == list2[j]:
            common_elements.append(list1[i])
            i += 1
            j += 1
        elif list1[i] > list2[j]:
            j += 1
        else:
            i += 1
    return common_elements
Write a generic function in Python to sort a list of dictionaries based on multiple parameters.  def multi_sort(lst, keys): 
    # lst is a list of dictionaries
    # keys is a list containing the keys to sort on
    split_list = [item[k] for k in keys] 
    lst.sort(key = lambda x:split_list) 
    return lst 

# Example:
my_list = [{"name": "John", "age": 24}, 
           {"name": "Chris", "age": 25},
           {"name": "John", "age": 20}] 
keys = ["name", "age"]
  
multi_sort(my_list, keys)

# Output:
[{'name': 'Chris', 'age': 25}, 
 {'name': 'John', 'age': 20}, 
 {'name': 'John', 'age': 24}]
Write a function in Python for finding the maximum subarray sum of an array. arr = [4,2,1,4,5,-7,2,4] def max_subarray_sum(arr):
	max_so_far = 0
	max_ending_here = 0	
	
	for i in range(0, len(arr)): 
		max_ending_here = max_ending_here + arr[i] 
		if max_ending_here < 0: 
			max_ending_here = 0	 
		if (max_so_far < max_ending_here): 
			max_so_far = max_ending_here 
			
	return max_so_far 

result = max_subarray_sum(arr)
print(result)
Edit the Python program below to add an if condition to determine if an input number is odd or even. def odd_or_even(number):
    # your code here def odd_or_even(number):
    # your code here
    if number % 2 == 0:
        return "even"
    else:
        return "odd"
Create a Python program to find the most frequently occuring element [1, 4, 2, 3, 4, 1, 2, 3, 2, 3] def most_frequent_element(input_list):
    count_dict = {
        'element': None,
        'count': 0  
    }
    for item in input_list:
        if input_list.count(item) > count_dict['count']:
            count_dict['element'] = item
            count_dict['count'] = input_list.count(item)
    return count_dict

input_list = [1, 4, 2, 3, 4, 1, 2, 3, 2, 3]
result = most_frequent_element(input_list)
print(result)
Write a Python program to classify a given text as having positive or negative sentiment. The customer service was fantastic but the meal was terrible. positive
Write a Python algorithm to find out whether a number is a palindrome or not.  def is_palindrome(n):
    n_str = str(n)
    rev_str = n_str[::-1]
    if n_str == rev_str:
        return True
    else:
        return False
Construct a Python program that computes the area of a circle with the given radius. radius = 5 import math

def area_circle(radius):
 return math.pi * (radius ** 2)

area = area_circle(radius)
print('The area of the circle is %.2f' % area)
Write a Python program that takes an integer number as an input and calculates the sum of the even factors of that number. 50 def get_sum_even_factors(n):
    sum = 0
    for i in range(2, n+1):
        if (n % i == 0) and (i % 2 == 0):
            sum = sum + i
    return sum

# Test 
input_num = 50
print(get_sum_even_factors(input_num)) # returns 196
Optimize the following Python code to remove unnecessary operations or code. def count(list_data):
    total = 0
    for i in list_data:
        total += i
    return total def count(list_data):
    return sum(list_data)
Create an AI agent in Python using the OpenAI Gym library that can play a game of Pong. Not applicable import gym
import numpy as np

env = gym.make('Pong-v0')

# hyper-parameters
num_episodes = 1000
max_steps_per_episode = 1000
learning_rate = 0.1
discount_rate = 0.95

# set exploration rate
exploration_rate = 1
max_exploration_rate = 1
min_exploration_rate = 0.01
exploration_decay_rate = 0.001 

# training the agent
q_table = np.zeros((env.observation_space.shape[0], env.action_space.n))

# start game
for episode in range(num_episodes):
 state = env.reset()
 done = False
 total_rewards = 0

 for step in range(max_steps_per_episode):
 # choose action
 exploration_rate_threshold = np.random.uniform(0, 1)
 if exploration_rate_threshold > exploration_rate:
 action = np.argmax(q_table[state])
 else:
 action = env.action_space.sample()
 
 # play one turn
 new_state, reward, done, info = env.step(action)

 # update q-table
 q_table[state, action] = (1 - learning_rate) * q_table[state, action] + learning_rate * ( reward + discount_rate * np.max(q_table[new_state]))
 
 # reduce exploration rate
 exploration_rate = min_exploration_rate + (max_exploration_rate - min_exploration_rate) * np.exp(-exploration_decay_rate*episode)
 
 total_rewards += reward
 state = new_state

 if done == True:
 break

print('total rewards:', total_rewards)
Generate a python code to sort a dictionary in descending order by its values d = {"a": 23, "b": 70, "c": 10} sorted_d = dict(sorted(d.items(), key = lambda kv:(kv[1], kv[0]), reverse = True))
print(sorted_d)
Create a Python program to get input from the user via command line  and store it into a MySQL database. Not applicable import mysql.connector

mydb = mysql.connector.connect(
  host="localhost",
  user="username",
  passwd="password",
  database="mydatabase"
)

mycursor = mydb.cursor()

name = input('Please enter your name: ')
country = input('Please enter your country: ')

sql = "INSERT INTO customers (name, country) VALUES (%s, %s)"
val = (name, country)

mycursor.execute(sql, val)
mydb.commit()

print(mycursor.rowcount, "record inserted.")
Write a Python function to sort list of tuples using custom sorting algorithm. Your sorting algorithm should use last tuple element to sort a given list of tuples in ascending or descending order. [(1, 11, 4), (2, 3, 5), (3, 2, 1), (4, 15, 9)] def sort_list_of_tuples(list_of_tuples, key, reverse=False):
    '''This function sorts a list of tuples based on the specified key
    in ascending or descending order

    Parameters: 
       list_of_tuples (list): list of tuples
       key: the index of the tuple that should be used to sort
       reverse (bool): flag to decide sorting order, 
                        False for ascending, True for descending

    Returns:
        list: A sorted list of tuples
    '''

    # sort using specified key
    sorted_list = sorted(list_of_tuples, key=lambda x: x[key], reverse=reverse)

    return sorted_list

list_of_tuples = [(1, 11, 4), (2, 3, 5), (3, 2, 1), (4, 15, 9)]
key = 2

# Sort in ascending order
sorted_list_asc = sort_list_of_tuples(list_of_tuples, key, reverse=False)

# Sort in descending order
sorted_list_desc = sort_list_of_tuples(list_of_tuples, key, reverse=True)

print("Sorted list in ascending order:", sorted_list_asc)
print("Sorted list in descending order:", sorted_list_desc)
Create a Python script to generate a randomly generated password of 8 characters.  import random

def generate_password():
    password_length = 8
    password_characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$^&*()_+-="
    password = ''.join(random.sample(password_characters, password_length))
    return password
Input an array of numbers, and build a function in Python to replace all even numbers with 0. [4, 10, 15, 20] def replace_even(arr):
    for i in range(len(arr)):
        if arr[i] % 2 == 0:
            arr[i] = 0
    return arr

result = replace_even([4, 10, 15, 20])
print(result)
Write a Python function to create and show a binary search tree given a set of values.  class Node:
    def __init__(self, val):
        self.l = None
        self.r = None
        self.v = val

def tree_insert( node, val):
    if node is None:
        return Node(val)
    if val < node.v:
        node.l = tree_insert(node.l, val)
    else:
        node.r = tree_insert(node.r, val)

    return node

def show_tree(node):
    if node is None:
        return
    
    show_tree(node.l)
    
    print(f"{node.v}")
    
    show_tree(node.r)

def initialize_tree():
    root = None
    set_values = [8, 3, 10, 1, 6, 14, 4, 7, 13]
    for val in set_values:
        root = tree_insert(root, val)
    
    return root

root = initialize_tree()
show_tree(root)
Create a program in Python to convert a Celsius temperature to its equivalent Fahrenheit temperature. celsiusTemp = 37 def convertCelsiusToFahrenheit(celsiusTemp):
    fahrenheitTemp = (celsiusTemp*9/5)+32
    return fahrenheitTemp
Write a python program to print out the contents of a email message.  import email
from email.Parser import Parser

# parse email
parser = Parser()
message = parser.parse(open('sample_email.eml'))

# print out the message
print(message.as_string())
Using regex, extend the following python code to remove whitespaces from a string. def remove_spaces(user_string):
    '''This function will remove all the spaces from a string''' def remove_spaces(user_string):
    '''This function will remove all the spaces from a string'''
    user_string = re.sub(r'\s','',user_string)
    return user_string
Develop a python program to obtain the sum of items in an array  def sum_array(arr):
    sum = 0
    for elem in arr:
         sum += elem
    return sum
Create a Python script that calculates the area of a triangle by taking the base and height as user input. base = 10, height = 14 base = float(input('Enter the base:'))
height = float(input('Enter the height:'))

def areaOfTriangle(base, height):
 return 0.5 * base * height

print(areaOfTriangle(base, height))
Suggest some improvements to the following Python program. def is_prime(x):
    if x > 1:
        i = 2
        while i < x:
            if (x % i) == 0:
                return False
            i+= 1
        return True def is_prime(x):
    if x < 2:
        return False
    elif x == 2:
        return True
    elif x % 2 == 0:
        return False
    else:
        for i in range(2, x):
            if x % i == 0:
                return False
        return True
Write a Python function that takes an array of integers and returns the sorted array with the most common element in the middle. [4, 5, 2, 5, 8, 5, 6, 5] def medianMostCommon(arr):
  # Count the number of occurences of every element
  counts = {}
  for element in arr:
    if element in counts:
      counts[element] += 1
    else:
      counts[element] = 1
  
  # Find the most common element
  most_common_element = None
  max_count = 0
  for element, count in counts.items():
    if count > max_count:
      most_common_element = element
      max_count = count

  # Sort the array
  sorted_arr = sorted(arr)

  # Find the index of the most common element
  index = sorted_arr.index(most_common_element)

  # Swap the most common element and the middle element in the array
  mid = len(sorted_arr) // 2
  sorted_arr[index] = sorted_arr[mid]
  sorted_arr[mid] = most_common_element

  return sorted_arr

arr = [4, 5, 2, 5, 8, 5, 6, 5]
result = medianMostCommon(arr)
print(result) # [4, 5, 5, 5, 5, 6, 8, 2]
Optimize a function in Python. def sum_of_list(lst): 
    sum = 0
    for n in lst: 
        sum += n 
    return sum def sum_of_list(lst): 
    return sum(lst)
Write a function to generate a set of random numbers in Python.  import random

def generate_randoms(n):
  # generate a set of n random numbers
  rands = []
  for _ in range(n):
    rands.append(random.randint(1,100))
  return rands

generate_randoms(10)
Design a program in Python which will produce an output in art.  import turtle

t = turtle.Turtle()

for i in range(20):
    t.left(90)
    t.forward(50)
    t.right(90)
    t.forward(50)
Given a number of queues, each containing numbers, write python code to find and print out the numbers at the front of each queue. queue1 = [5, 2, 9, 4]
queue2 = [7, 8, 3, 6] def print_front_elements_from_queues(queue_list):
    for queue in queue_list:
        print(queue[0])

queue_list = [queue1, queue2]

print_front_elements_from_queues(queue_list) # This should print 5 and 7
Create an asynchronous function in Python for processing a list of tasks. The task should complete one item from the list, and then pass that item to another function to be processed. Not applicable async def process_tasks(tasks, fn):
 for task in tasks:
 await fn(task)

def process_task(task):
 # Do something with task
 print(task)

my_tasks = ['task_1', 'task_2', 'task_3']

asyncio.run(process_tasks(my_tasks, process_task))
Write a Python program to get a list of strings from a given string. string = "The quick brown fox jumped over the lazy dog" def get_words_from_string(string):
    """This function will return a list of words from the given string."""
    words = string.split()
    return words

string = "The quick brown fox jumped over the lazy dog"
words_list = get_words_from_string(string)
print(words_list)

# Output:
# ['The', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog']
Design a simple class in Python that stores quiz scores of students.  class QuizScores:
    def __init__(self):
        self.scores = {}

    def add_score(self, student_name, score):
        self.scores[student_name] = score

    def get_average(self):
        if len(self.scores) == 0:
            return 0
        total_score = 0
        for student, score in self.scores.items():
            total_score += score
        return total_score / len(self.scores)
Create a basic text editor using Python.  import tkinter
from tkinter import *

# create the root window
root = Tk()

# title for the root window
root.title('Text Editor') 

# create text box
text = Text(root)
text.pack()

# create scroll bar
scroll_bar = Scrollbar(root)
# attach the scroll bar to the text box
scroll_bar.pack(side='right', fill='y')
# configure text box with the scrollbar
text.config(yscrollcommand=scroll_bar.set)
scroll_bar.config(command=text.yview)

# main loop
root.mainloop()
Create a for loop in Python to iterate through a given list of numbers and find the sum. [11, 12 , 15, 20, 56] nums = [11, 12, 15, 20, 56]

total = 0
for num in nums:
    total += num
 
print(total) # 110
Write a Python program to pull data from a MySQL database and visualize it. Database name: my_db
Table name: my_table

Description:

my_table consists of six columns: id (int, primary key), name (VARCHAR(255)), occupation (VARCHAR(255)), age (int), salary (float), and dob (date). import mysql.connector
import pandas as pd
import matplotlib.pyplot as plt

# Connect to database
mydb = mysql.connector.connect(
 host="localhost",
 user="username",
 password="password",
 database="my_db"
)

# Create cursor
mycursor = mydb.cursor()

# Pull data from table
sql = "SELECT * from my_table"
mycursor.execute(sql)
myresult = mycursor.fetchall()

# Convert into DataFrame
df = pd.DataFrame(myresult,columns=['id','name','occupation','age','salary','dob'])

# Visualize
plt.scatter(df['age'], df['salary'])
plt.xlabel('Age')
plt.ylabel('Salary')
plt.title('Age VS Salary')
plt.show()
Create an algorithm to optimize a given travel route such that the total cost is minimized. A map containing 6 cities connected by roads of varying lengths and distances, with the cost of travelling on each road. # Python implementation of Prim's Algorithm for MST 
import sys 

# Number of vertices in the graph 
def primsMST(graph, n): 
	key = [sys.maxsize] * n 
	parent = [None] * n 
	key[0] = 0
	mstSet = [False] * n 
	parent[0] = -1

	for count in range(n): 
		u = minKey(key, mstSet)  
		mstSet[u] = True
		for v in range(n): 
			if graph[u][v] > 0 and mstSet[v] == False and key[v] > graph[u][v]: 
					key[v] = graph[u][v] 
					parent[v] = u 

	total_cost = 0
	# print the constructed MST 
	for i in range(1, n): 
		total_cost += graph[parent[i]][i] 
		print("% d - % d: % d" % (parent[i], i, graph[parent[i]][i])) 
		
	print("Total cost of the optimized route: % d" %(total_cost))

def minKey(key, mstSet): 
	min = sys.maxsize 
	for v in range(len(key)): 
		if key[v] < min and mstSet[v] == False: 
			min = key[v] 
			min_index = v 
	return min_index 

# Driver code 
if __name__ == '__main__': 

	graph = [[0, 2, 0, 6, 0], 
			[2, 0, 3, 8, 5], 
			[0, 3, 0, 0, 7], 
			[6, 8, 0, 0, 9], 
			[0, 5, 7, 9, 0]] 
			 
	n = len(graph) 
	
	primsMST(graph, n)
Create an algorithm in Python using the algorithm library for finding the greatest common divisor between two numbers. Not applicable import algorithm

def gcd(a, b):
	a, b = max(a, b), min(a, b)
	if a % b == 0:
		return b
	else:
		return gcd(b, a % b)
Write a Python program to predict the future stock price of a company. Predict the stock price of Apple in 2021. import pandas as pd

# Read the data
data = pd.read_csv("apple stock data.csv")

# Extract the data points
X = data[['open', 'high', 'low', 'volume']]
y = data['close']

# Fit the model
model.fit(X, y)

# Predict the stock price of Apple in 2021 
predict = model.predict([[Apple_open, Apple_high, Apple_low, Apple_volume]])
print(predict)
Use the given code to optimize the dimensions of a beam. Import the necessary libraries and define the parameters P and E. Define the objective function to calculate the volume of the beam. Define the constraints for the optimization problem. Use the fmin_cobyla function to find the optimal dimensions of the beam. Print the optimal dimensions and the objective function value.  from scipy.optimize import fmin_cobyla
import sys, os, subprocess, numpy

P, E = 1000.0, 69e9 # N, Pa, m, m

fileName = 'optimizeTest.txt'
resultName = '../TestsResults/opt.txt'

def objective(x):
    height = x[0]
    width = x[1]
    length = x[2]
    volume = length * width * height
    return volume

def g0(x):
    height = 0.0
    width = 0.0
    length = 0.0
    if type(x) is numpy.ndarray:
      height = x[0]
      width = x[1]
      length = x[2]
    else:
      height = x[0]
      width = x[1]
      length = x[2]
    print 'Calculating for Height, Width, Length:', height, width, length, '\n'
   
    # fail-safes
    if height <= 0.0 or width <= 0.0 or length <= 0.0:
      return -100
 
    file_write = open(fileName, 'w')
    file_write.write(fileName + ".scad "+str(length)+" "+str(width*1000)+" "+str(height*1000))
    file_write.close()
    subprocess.check_output(['python', 'pipeline.py', '--template', 'templateBeam.py', '--batch', fileName, '--sConfig', 'slic3rConfig.ini', '--ind', str(height* 1000 + width * 1000 + length * 1000), '-c'])
    # read results from file and return those
    opt = open(resultName)
    for line in opt.readlines():
      curLine = line.strip().split(' ')
      disp = float(curLine[0]) / 1000

      I = width * height**3 / 12
      tip_disp = (P * length**3)/(3*E*I)

      print 'Displacement for Height, Width, Length', height, width, length 'is ::', disp
      print 'Analytical Disp for Height, Width, Length', height, width, length, 'is ::', tip_disp, '\n'

      return 1e-4 - (float(curLine[0]) / -1000)

    return -1000000    

def g1(x):
    # height > 0.01 m (10 mm)
    if x[0] > 0.01 and x[1] > 0.01 and x[2] > 0.01:
      return 1
    return -1
    
def g2(x):
    # height < 0.5 m (500 mm)
    if x[0] < 0.5 and x[1] < 0.5 and x[2] < 0.5
      return 1
    return -1   
 
h0 = [0.02, 0.02, 0.02] # 20 mm
constraints = [g0, g1, g2]
h_opt = fmin_cobyla(objective, h0, constraints, rhoend=1e-6, maxfun=100, catol=1e-6)
print h_opt, objective(h_opt), g0(h_opt)

Generate a program using Python to calculate the factorial of a positive number. Number = 4 #Calculate the Factorial of a Positive Number

#Get input
factNum = 4

#Calculate and print result
factNum = factNum*(factNum - 1)
factNum = factNum*(factNum - 1)
factNum = factNum*(factNum - 1)

print("The factorial of 4 is:", factNum)
Create a Python program to encrypt a given text This is a secret message def encrypt(text, key): 
    cipher = "" 
    for c in text: 
        cipher += chr(ord(c) + key) 
    return cipher

#Driver code 
if __name__ == '__main__': 
    plaintext = "This is a secret message"
    key = 3
    ciphertext = encrypt(plaintext, key) 
    print(ciphertext)
Design a program in Python to filter a given array of integers and output only the even numbers. arr = [2, 7, 3, 4, 8, 9, 10] def filterEvenNo(arr): 

  # return a list containing only even numbers
  return [num for num in arr if num % 2 == 0]
Create a function in Python which gathers the maximum and minimum values from a list of numbers. [1, 4, 8, 3, 5, 9, 7] def min_max(nums):
  min_val = min(nums)
  max_val = max(nums)
  return min_val, max_val

nums = [1, 4, 8, 3, 5, 9, 7]
min_val, max_val = min_max(nums)
print('Minimum value:', min_val)
print('Maximum value:', max_val)
Generate a Python program to calculate the most common value in a list ['a', 'a', 'b', 'd', 'e', 'a'] def most_common(list):
    dict = {}
    for item in list:
        dict[item] = dict.get(item,0) + 1
    max_count = 0
    max_item = list[0]
    for k,v in dict.items():
        if v > max_count:
            max_count = v
            max_item = k
    return max_item

list = ['a', 'a', 'b', 'd', 'e', 'a']
result = most_common(list)
print(result)
Write a Python program to find the closest next lower value of a given number in an array of integers. Array of Numbers: [1, 3, 8, 9, 10, 11, 12] # Function to find the closest next lower value of a given number in an array
def get_next_lower(arr, num):
  # Initialise a dummy variable to store the closest next lower value
  closest_low = 0
  # Iterate through the array
  for i in range(len(arr)):
    # Check if the current number is less than the given number and greater than the current closest number
    if num > arr[i] > closest_low:
      closest_low = arr[i]
  
  # Return the closest next lower value
  return closest_low

# Initialize the array of numbers
arr = [1, 3, 8, 9, 10, 11, 12]
# Initialize the given number
num = 9

# Find the closest next lower value
closest_low = get_next_lower(arr, num)
print("Closest next lower value of", num, "is", closest_low)
Create an algorithm in Python that compares two lists of strings and returns only the strings that are found in both lists. list_one=["apple", "banana", "carrot", "kiwi"]
list_two=["kiwi", "cucumber", "grape", "apple"] def compare_lists(list_one, list_two):
    """Compare two lists of strings and return a list containing strings found in both."""
    result_list = []
    for elem in list_one:
        if elem in list_two:
            result_list.append(elem)
    return result_list

list_one = ["apple", "banana", "carrot", "kiwi"]
list_two = ["kiwi", "cucumber", "grape", "apple"]
 

print(compare_lists(list_one, list_two))
# Output: ["apple", "kiwi"]
Shorten the following code using appropriate Python statement x = 1
if x == 0:
    print("x is 0")
elif x == 1:
    print("x is 1")
else:
    print("x is not 0 or 1") x = 1
print("x is", ("0" if x == 0 else "1" if x == 1 else "not 0 or 1"))
Write a Python function to convert a list of characters to their corresponding ASCII codes. [‘a’, ‘b’, ‘c’, ‘d’] def to_ascii(arr):
    res = []
    for c in arr:
        res.append(ord(c))
    return res

print(to_ascii(['a', 'b', 'c', 'd']))
Create a python code to predict if a given pattern of features of a target user can be classified as a fraud. features = ['high credit' , 'low age' , 'high spending'] import numpy as np
from sklearn.naive_bayes import GaussianNB

#define the labels
labels = {'fraud': 0, 'not fraud': 1}

#defining the training data and the labels
train_data = [[1, 'high credit', 'low age', 'high spending'],
              [1, 'low credit', 'low age', 'low spending'],
              [0, 'low credit', 'low age', 'high spending'],
              [1, 'low credit', 'low age', 'low spending'],
              [0, 'low credit', 'low age', 'low spending'],
              [1, 'low credit', 'low age', 'low spending'],
              [0, 'low credit', 'low age', 'low spending'],
              ]
train_labels = [0, 1, 0, 1, 0, 1, 0]

#fitting the classifier
clf = GaussianNB()
clf.fit(train_data, train_labels)

#prediction
features = ['high credit' , 'low age' , 'high spending']
label = clf.predict([features])

if label == labels['fraud']:
    print('Target user is a fraud')
else:
    print('Target user is not a fraud')
Write a Python script that mines data from Twitter and displays the latest tweets for a keyword. Not applicable import tweepy

consumer_key = ''
consumer_secret = ''
access_token = ''
access_token_secret = ''

auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
auth.set_access_token(access_token, access_token_secret)

api = tweepy.API(auth)

public_tweets = api.search('python')
for tweet in public_tweets:
    print(tweet.text)
Write a Python program that retrieves the weather data from a given city. City="Tokyo" import requests

# Fill in your OpenWeatherMap API Key
api_key = "xxxxxxxxxxxxxxxxxxxxx"

# Base URL for OpenWeatherMap API
base_url = "http://api.openweathermap.org/data/2.5/weather?"

# City for which we want to retrieve weather data
city = "Tokyo"

# Complete URL used to retrieve weather data
url = base_url + "appid=" + api_key + "&q=" + city 

# Retrieve response in json format 
response = requests.get(url) 

# Parse the response and retrieve data
# Store the weather data in a variable
weather_data = response.json()
Write a code in Python to evaluate the expression 3x + 5 for any given x x = 7 def expression(x):
    return 3 * x + 5

print(expression(7))
Create a Python program that multiplies a list of numbers together [3, 6, 5, 4] def multiply_list(nums):
    product = 1
    for num in nums:
        product *= num
    return product

print(multiply_list([3, 6, 5, 4]))
Come up with an algorithm in Python that takes two strings as input and checks whether one string is a rotation of another. "ABACD", "CDABA" def is_rotation(s1, s2):
    if len(s1) != len(s2):
        return False
    
    s1s1 = s1 + s1
    if s2 in s1s1:
        return True
    return False

print(is_rotation("ABACD", "CDABA"))
Write a Python program to modify a given dataset for a specific task. Dataset:
{
    "name": "John", 
    "age": 20, 
    "height": 180
}

Task:
Filter the person's records if they are over the age of 18. def modify_data(dataset, task):
modified_data = []
 if task == "filter age >18":
 for d in dataset:
 if d['age'] > 18:
 modified_data.append(d)
 return modified_data
Write a Python function that given a list of strings and an integer n, returns the strings that have a length greater than n. ['Cat', 'Dog', 'Rabbit', 'Elephant'], n = 5 def filter_strings(strings, n):
    return [s for s in strings if len(s) > n]
Design a text editor in Python that prints ‘Corrected’ if a correct sentence is entered, and ‘Incorrect’ if an incorrect sentence is entered  def text_editor():
  sentence = input("Enter the sentence: ")
  is_correct = check_correctness(sentence)
  
  if is_correct:
    print("Corrected")
  else:
    print("Incorrect")

def check_correctness(sentence):
  # code to check the correctness of the sentence

  return is_correct
Design a data structure in Python to store a list of student names and their ages.  student_data = {
 "student1" : {"name": "John", "age": 20},
 "student2" : {"name": "Sam", "age": 22},
 "student3 : {"name": "Alice", "age": 19}
}
Create a binary search algorithm in Python that searches an input array for a certain number. A = [1,2,3,4,5,6,7,8,9] def binarySearch(A, x):
 start = 0
 end = len(A) - 1

 while start <= end:
  mid = (start + end) // 2

  if A[mid] == x:
   return mid
  elif A[mid] > x:
   end = mid - 1
  else:
   start = mid + 1

return -1
Construct a code to sum all the numbers in a list in Python. [3, 4, 7, 1] sum = 0
for num in [3, 4, 7, 1]:
  sum += num

print(sum) # Output is 15
Generate a Python script to cluster handwritten numbers by a given similarity metric.  # import the necessary libraries
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.datasets import load_digits

# load the digits dataset
digits = load_digits()

# define the clustering model
kmeans_model = KMeans(n_clusters=10, random_state=42)

# fit the model to the digits dataset 
kmeans_model.fit(digits.data)

# assign labels to the clusters
labels = kmeans_model.labels_

# plot the clusters
for i in range(10):
    # create a mask to isolate each cluster
    mask = labels == i
    
    # plot the images of the cluster
    plt.title(f"Cluster {i}")
    plt.imshow(digits.images[mask][0], cmap="gray")
    plt.show()
Construct a Python program that prints out all the numbers from 1 to a given number n.  def print_numbers(n):
 for num in range(1, n+1):
 print(num)
Write a Python program to find all numbers divisible by sixteen from a given list of numbers. [20, 16, 5, 6, 26, 48] list_numbers = [20, 16, 5, 6, 26, 48]

divisible_numbers = []
for number in list_numbers:
    if number % 16 == 0:
        divisible_numbers.append(number)

print(divisible_numbers)
Craft a Python code for sorting a list of strings by character length  def sort_by_char_length(strings):
    return sorted(strings, key = len)
Write a Python program to extract particular attributes from a given XML document. <bookstore>
  <book>
    <title>The Autobiography of Benjamin Franklin</title>
    <author>
      <first-name>Benjamin</first-name>
      <last-name>Franklin</last-name>
    </author>
    <price>8.99</price>
  </book>
</bookstore> import xml.etree.ElementTree as ET

def extract_attribute(xml_str):
    root = ET.fromstring(xml_str)
    attribs = []
    for element in root.iter():
        attribs.append(element.tag + ": " + element.attrib.get('title',''))
    
    return attribs

if __name__ == '__main__':
    xml_str = """
<bookstore>
  <book>
    <title>The Autobiography of Benjamin Franklin</title>
    <author>
      <first-name>Benjamin</first-name>
      <last-name>Franklin</last-name>
    </author>
    <price>8.99</price>
  </book>
</bookstore>
    """
    print("Attributes:", extract_attribute(xml_str))
Create a Python web scraper for an online store that generate a list of products and their prices. Not applicable from bs4 import BeautifulSoup
import requests

# Make an HTTP request to the website
response = requests.get('http://example.com/store/')

# Parse the response using BeautifulSoup
soup = BeautifulSoup(response.content, 'html.parser')

# Extract all product names
products = soup.find_all(class_='product')

# Extract product names and prices from each product
products_list = []
for product in products:
 name = product.find(class_='name').text
 price = product.find(class_='price').text
 products_list.append((name, price))

# Print the product list
print(products_list)
Create a Python program that takes an integer as an input and calculates the sum of all the digits of the integer. 123 # take a number 
number = int(input("Please enter a number: ")) 
  
#initialize sum
sum = 0
  
#Find the sum of the digits of the number
temp = number
while temp > 0: 
   digit = temp % 10
   sum += digit 
   temp //= 10
  
# print the output
print("The sum of the digits of the given number is", sum)
What Python code is needed to multiply two numbers and return the result?  def multiply(num1, num2):
    return num1 * num2
Implement a Principal Component Analysis algorithm in Python.  from sklearn.decomposition import PCA
pca = PCA()
pca.fit(X)
X_pca = pca.transform(X)
In Python, find the index of a character in a given string. string = "Hello World"
character = 'l' string = "Hello World"
character = 'l'

index = string.index(character)
print(index)
Write a Python program to parse a JSON response and extract the data. {
  "employees": [
    {
      "id": 1,
      "firstName": "John",
      "lastName": "Doe"
    },
    {
      "id": 2,
      "firstName": "Jane",
      "lastName": "Doe"
    }
  ]
} import json

data = '{"employees":[ {"id":1,"firstName":"John","lastName":"Doe"}, {"id":2,"firstName":"Jane","lastName":"Doe"} ]}'

# Parse the JSON
parsed = json.loads(data)

# Extract the data
employees = parsed['employees']

# Print the results
for employee in employees:
 print(employee['firstName'], employee['lastName'])
Generate a function in Python which can be used to compare two strings to see which one is longer.  def compare_length(s1, s2):
    if len(s1) == len(s2):
        return 0
    elif len(s1) > len(s2):
        return 1
    else:
        return 2
Generate a function in Python that receives a number and adds 15 to it.  def add_fifteen(num):
    return num + 15
Design a Python program to read in a list of integers and remove any duplicates from the list. Not applicable def remove_duplicates(lst):
  unique_list = []
  for item in lst:
    if item not in unique_list:
      unique_list.append(item)
  return unique_list

lst = [1, 2, 3, 4, 5, 1, 2, 3]
unique_list = remove_duplicates(lst)
print(unique_list)

# Output
[1, 2, 3, 4, 5]
Write a Python function to sort a list of tuples according to the second element of each tuple. [(4, 3), (2, 5), (0, 1)] def sort_by_tuple_second(tuple_list):
    tuple_list.sort(key=lambda x: x[1])
    return tuple_list
Create a python program to create a dictionary with key-value pairs using two lists keys = ["a", "b", "c"]
values = [1, 2, 3] keys = ["a", "b", "c"]
values = [1, 2, 3]

d = dict(zip(keys, values))
print(d) # output: {'a': 1, 'b': 2, 'c': 3}
Build a text generator in Python that can generate poem based on a given input.  def generate_poem(input): 
  poem = []
  for i in range(len(input)):
      line = ''
      for j in range(i):
          line += input[j] + ' '
      poem.append(line)
  return poem
Create a Python program to calculate the maximum number of items a person can buy with a given budget. budget = 1000
item_list = [('itemA', 10), ('itemB', 20), ('itemC', 30)] def max_items_with_budget(budget, item_list):
  # create a dictionary for the items and the corresponding item cost
    item_dict = dict(item_list)
  # check the budget
    if budget < min(item_dict.values()):
        return 0
  # initialize the maximum number of items
    max_item = 0
    for item, cost in item_dict.items():
        num_items = budget // cost
        if num_items > max_item:
            max_item = num_items
    return max_item

if __name__ == '__main__':
    budget = 1000
    item_list = [('itemA', 10), ('itemB', 20), ('itemC', 30)]
    print(max_items_with_budget(budget, item_list))
Write an algorithm in Python to find the maximum value in a list. [1, 9, -3, 20, 11] def find_max(input_list):
    # Initialize max value to be the first element of the list
    max = input_list[0]
    # Compare each value in the list to the max value 
    for val in input_list:
        if val > max:
            max = val
    # Return the max value
    return max

# Main function
list = [1, 9, -3, 20, 11]
max_val = find_max(list)
print("The maximum value in the list is:", max_val)
Generate a code that will print out all substrings of a given string. python def substrings(s):
    sub_str_list = []
    for i in range(len(s)):
        for j in range(i + 1, len(s)+1):
            sub_str = s[i:j]
            sub_str_list.append(sub_str)
    return sub_str_list

result = substrings("python")
print(result)
Write a function in Python that counts the number of words in a given sentence.  def word_count(sentence):
    count = 0
    for word in sentence.split(' '):
        count += 1
    return count
Write a loop in Python to traverse a given list of numbers in reverse order [1, 2, 3, 4, 5] for i in range(len(numbers)-1, -1, -1):
    print(numbers[i])
Generate Python code to evaluate a mathematical expression containing parentheses, addition and subtraction operations and numbers from 0-9. 2-(8-3) def evaluate_expr(expr):
 # Reverse the expression 
 expr = expr[::-1] 
  
 # Stack to store integer values. 
 values = [] 
  
 # Stack to store operators. 
 ops = [] 
  
 # Traverse the given expression. 
 i = 0
 while i < len(expr): 
   # Current character is a whitespace, skip it. 
   if expr[i] == ' ': 
     i += 1
     continue
   # Current character is an opening  
   # brace, push it to 'ops' 
   elif expr[i] == '(': 
     ops.append(expr[i]) 
   # Current character is a number, push  
   # it to stack for numbers. 
   elif expr[i].isdigit(): 
     val = 0
     # There may be more than one 
     # digits in number. 
     while (i < len(expr) and
            expr[i].isdigit()): 
       val = (val * 10) + int(expr[i]) 
       i += 1
     values.append(val) 
   # Closing brace encountered, solve  
   # entire brace. 
   elif expr[i] == ')': 
     while (not ops[-1] == '('): 
       val2 = values.pop() 
       val1 = values.pop() 
       op = ops.pop() 
  
       values.append(str(eval(val1 + op + val2))) 
     # pop opening bracket. 
     ops.pop() 
   # Current character is an operator. 
   else: 
     # While top of 'ops' has same or  
     # greater precedence to current  
     # token, which is an operator. 
     # Apply operator on top of 'ops'  
     # to top two elements in values stack. 
     while(len(ops) != 0 and
           not ops[-1] == '(' and
           not isHigherPrecedence(ops[-1], expr[i])): 
  
       val2 = values.pop() 
       val1 = values.pop() 
       op = ops.pop() 
  
       values.append(str(eval(val1 + op + val2))) 
     # Push current token to 'ops'. 
     ops.append(expr[i]); 
  
   i += 1
  
 # Entire expression has been parsed at this 
 # point, apply remaining ops to remaining 
 # values. 
 while len(ops) != 0: 
     val2 = values.pop() 
     val1 = values.pop() 
     op = ops.pop() 
  
     values.append(str(eval(val1 + op + val2))) 
  
 # Top of 'values' contains result, return it. 
 return values[-1]

def isHigherPrecedence(op1, op2): 
 if (op1 == '+' or op1 == '-') and (op2 == '*' or op2 == '/'): 
   return False
 else: 
   return True

if __name__ == "__main__": 
 expr = "2-(8-3)"
 print(evaluate_expr(expr))
Design a class in Python that contains the following functions: set_name, set_age, get_name and get_age.  class Person():
    def __init__(self):
        self.name = None
        self.age = None
    
    def set_name(self, name):
        self.name = name
    
    def set_age(self, age):
        self.age = age
    
    def get_name(self):
        return self.name
    
    def get_age(self):
        return self.age
Write a Python program to find the online median of an array of numbers.  import heapq
def online_median(numbers):
    
    small = [] 
    large = []
    medians = []
    
    for x in numbers:
        heapq.heappush(small, -heapq.heappushpop(large, x))
        if len(large) < len(small):
            heapq.heappush(large, -heapq.heappop(small))
        medians.append(0.5 * (large[0] + (-small[0])) if len(large) > len(small)  else large[0])
    
    return medians
Please generate a Python script that calculates the mean of a given array of numbers. [4, 9, 3, 5] def calculateMean(array):
    # sum up all elements in the array
    mean = 0
    for i in range(len(array)):
        mean += array[i]
    # calculate the mean by dividing the sum by number of elements
    mean /= len(array)
    return mean

array = [4, 9, 3, 5]
mean = calculateMean(array)
print(mean)
Create a function in Python to execute the following rule: given an array of integers, find the pair of adjacent elements that has the largest sum and print the sum. [5, 0, -1, 7, 20] def find_largest_sum(lst):
    largest_sum = 0
    for i in range(len(lst) - 1):
        current_sum = lst[i] + lst[i+1]
        if current_sum > largest_sum:
            largest_sum = current_sum
    return largest_sum
Write a function in Python that receives two positive integers and prints out all the numbers in the range of the two integers (inclusive), except for numbers divisible by three. lower_bound = 5
upper_bound = 15 def print_numbers(lower_bound, upper_bound):
 for num in range(lower_bound, upper_bound+1):
 if num % 3 != 0:
 print(num)
  
print_numbers(5, 15)
Create a machine learning model in Python to predict the price of a given type of car. Data Set containing 1000 rows, with columns "Car_Model", "Mileage", "Price". import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor

# Read in data set
df = pd.read_csv("your_data_file.csv")

# Separate predictor and target variables
X = df[["Car_Model", "Mileage"]]
y = df["Price"]

# Split into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Instantiate Random Forest model
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

# Score the model
rf_model.score(X_test, y_test)
Implement a Genetic Algorithm in Python to find the optimum solution from a given set of solutions. The given set of 10 solutions is: 
[1, 3, 8, 10, 15, 25, 30, 34, 43, 48] import random

def fitness(solution):
 # calculate the fitness for each solution
 return solution


def generate_population(population_size, solution_length):
 # generate the initial populatoin of random solutions
 return population


def selection(population):
 # select the best solutions from the population
 return selection


def crossover(parent1, parent2):
 # generate a crossover between parents
 return crossover


def mutation(solution):
 # randomly mutate individual solutions
 return solution


def genetic_algorithm(population_size, solution_length):
 # generate initial population
 population = generate_population(population_size, solution_length)
 
 # get best solution in initial population
 best_solution = max(population, key=fitness)
 
 # run loop until termination criteria is met
 while termination_criteria_not_met:

  # select best solutions
  selection = selection(population)

  # create a new population 
  new_population = []
  while len(new_population) < population_size:

   # select parents 
   parent1 = random.choice(selection)
   parent2 = random.choice(selection)

   # create a crossover 
   child = crossover(parent1, parent2)

   # mutate the child
   child = mutation(child)

   # add to new population
   new_population.append(child)

  # set population to the new population
  population = new_population

  # get the best solution in the current population
  best_solution = max(population, key=fitness)

 # return the best solution found
 return best_solution

population_size = 10
solution_length = 10 
solutions = [1, 3, 8, 10, 15, 25, 30, 34, 43, 48]
best_solution = genetic_algorithm(population_size, solution_length)

print(f'The optimum solution is {best_solution}')
Design a Python class that models a simple arithmetic calculator.  class Calculator:
    def __init__(self):
        pass
    
    def add(self, a, b):
        return a + b
    
    def subtract(self, a, b):
        return a - b
    
    def multiply(self, a, b):
        return a * b
    
    def divide(self, a, b):
        if b == 0:
            raise ValueError("Cannot divide by zero.")
        else:
            return a/b
Write a Python script to print out all the leap years from 2001 to 2025.  for year in range(2001,2026):
    # leap year condition
    if((year%4 == 0 and year%100 != 0) or year%400 == 0):
        print(year, end=' ')
Test if a given number is a Prime or not using Python. number = 32 if number<=1: 
  print("Number is not a prime number.") 
for i in range(2,int(number**0.5)+1):
  if(number % i == 0):
    print("Number is not a prime number.")
    break
else: 
  print("Number is a prime number.")
Create a python program to extract the name and phone number from a given string. John Doe: (+1) 555-665-8877 # Extract the name and phone number from a given string
def extract_name_phone(input_string):
    name_phone_dict = {}
    data = input_string.split(': ')
    
    name_phone_dict['name'] = data[0]
    name_phone_dict['phone'] = data[1]
    
    return name_phone_dict

result = extract_name_phone("John Doe: (+1) 555-665-8877")
print(result)
Develop a function in Python for analyzing a given text and generating a statistical report for finding the word frequencies in the text.  def generate_freq_report(text):
    words = {} # to store the word frequencies
    text = text.lower()
    text = text.replace('\n', ' ')
    text = text.split(' ')
    for word in text:
        if word in words:
            words[word] += 1
        else:
            words[word] = 1
    return words
Compare this object-oriented code in Python to the same code written in Java. class Car:
    def __init__(self, make, model, year):
        self.make = make
        self.model = model
        self.year = year
        self.odometer_reading = 0

    def get_make_and_model(self):
        return f'{self.make} {self.model}' // Java code
public class Car {
    private String make;
    private String model;
    private int year;
    private int odometerReading;

    public Car(String make, String model, int year) {
        this.make = make;
        this.model = model;
        this.year = year;
        this.odometerReading = 0;
    }

    public String getMakeAndModel() {
        return this.make + " " + this.model;
    }
}
Write a Python function capable of generating a personalized Etsy product listing URL for a given product. Product name: 'Tulip Breeze Necklace' 
Product category: 'Jewelry'
Product price: $45 def generateURL(productName, productCategory, productPrice):
 productName = productName.lower().replace(' ', '-')
 productCategory = productCategory.lower().replace(' ', '-')
 return 'https://www.etsy.com/listing/{}-{}-{}/{}'.format(productName, productPrice, productCategory, productName)
 
generatedURL = generateURL('Tulip Breeze Necklace', 'Jewelry', 45)
# https://www.etsy.com/listing/tulip-breeze-necklace-45-jewelry/tulip-breeze-necklace
Write a Python script to generate a table in a Word document, using the given headers and data. headers = ['Name', 'Phone', 'Email']
data = [['John', '9898989898', 'john@example.com'], ['Alice', '1234567890', 'alice@example.com']] import docx

headers = ['Name', 'Phone', 'Email']
data = [['John', '9898989898', 'john@example.com'], ['Alice', '1234567890', 'alice@example.com']]

document = docx.Document()
table = document.add_table(rows=1, cols=len(headers))

# Add column headings
head_cells = table.rows[0].cells
for header in headers:
    head_cells[headers.index(header)].text = header

# Add data
for row in data:
    row_cells = table.add_row().cells
    for cell in row:
        row_cells[row.index(cell)].text = cell

document.save('table.docx')
Write a Python program to create a basic web scraper that takes a given URL, downloads HTML content from it, and returns a list of all links found in the HTML. Not applicable import requests
from bs4 import BeautifulSoup

# Get the page
url = <provided_url>
response = requests.get(url)

# Parse the page content
soup = BeautifulSoup(response.text, ‘html.parser’)

# Find all links
links = []
for link in soup.find_all(‘a’):
    links.append(link.get(‘href’))

# Print out the list of links
for link in links:
    print(link)
Design an efficient data-structure using Python for storing a list of strings that can be efficiently searched. class StringList:
    def __init__(self): 
        self.storage = []
 
    def add(self, item): 
        self.storage.append(item)
 
    def search(self, query): 
        if query in self.storage:
            return True 
        else: 
            return False
Can you recommend important Python libraries that are useful for data science?  There are many important libraries in Python that are useful for data science, such as:

• NumPy – for array and matrix manipulation
• Pandas – for data manipulation, analysis, and wrangling
• Matplotlib – for data visualization
• Scikit-learn – for machine learning algorithms
• Tensorflow – for deep learning
• Seaborn – for statistical data visualization
• statsmodels – for statistical data analysis and modeling
• Keras – for building deep learning models
Create an algorithm and its corresponding code implementation in Python that counts the number of words in a string. This is a sentence def word_count(string):
 words = string.split()
 return len(words)

print(word_count("This is a sentence"))
Given a set X, suggest a Python program to calculate the median of X  def median(X): 
    sorted_X = sorted(X) 
    mid_index = (len(sorted_X) - 1) // 2 
    if len(sorted_X) % 2 == 0: 
        return (sorted_X[mid_index] + sorted_X[mid_index + 1]) / 2
    else: 
        return sorted_X[mid_index]
Create a Python program to generate a bar chart of a given data set. data_points = [50, 45, 55] import matplotlib.pyplot as plt

plt.bar(range(len(data_points)), data_points)
plt.title('Bar Chart')
plt.xlabel('index') 
plt.ylabel('value')
plt.show()
Write an algorithm in Python that calculates the maximum subarray of a given array. [-2,1,-3,4,-1,2,1,-5,4] def max_subarray(arr):
 max_so_far = arr[0] 
 max_ending_here = arr[0] 
   
 for i in range(1, len(arr)): 
  max_ending_here = max(arr[i], max_ending_here + arr[i]) 
  max_so_far = max(max_so_far, max_ending_here)  
   
 return max_so_far
Create a class in python, named RoundInstance, that can store radius, diameter, area and circumference coordinates.  class RoundInstance():
    def __init__(self, radius, diameter, area, circumference):
        self.radius = radius
        self.diameter = diameter
        self.area = area
        self.circumference = circumference
    
    def get_radius(self):
        return self.radius

    def get_diameter(self):
        return self.diameter

    def get_area(self):
        return self.area

    def get_circumference(self):
        return self.circumference
Given a Python list of integers, write a function to find the sum of the elements in the list. nums = [1, 2, 3, 4, 5] def findSum(nums):
 total = 0
 for num in nums:
 total += num
 return total
Write a Python program to sort a list in ascending order with respect to a particular key. lst = [{‘name’:’joe’, ‘score’:90}, {‘name’:’bob’, ‘score’:50}, {‘name’:’alice’, ‘score’:80}]
key = 'score' sorted_lst = sorted(lst, key=lambda x: x[key])
Write a Python program that will ask the user to enter a word or phrase and then print out the individual characters, sorted alphabetically.  word = input('Enter a word or phrase: ')

characters = sorted(list(word))

for character in characters:
    print(character)
Generate a method to remove all duplicates from a Python list. [4, 4, 5, 7, 8, 8, 1] def removeDuplicates(in_list):
    out_list = []
    for item in in_list:
        if item not in out_list:
            out_list.append(item)
    return out_list

my_list = [4, 4, 5, 7, 8, 8, 1] 
print(removeDuplicates(my_list))
Edit the following Python program to make the execution time faster by using appropriate data structures and algorithms: def get_prime_numbers(n):
    prime_numbers = []
    for i in range(1, n+1):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
        if is_prime:
            prime_numbers.append(i)
    return prime_numbers def get_prime_numbers(n):
    prime_numbers = []
    is_prime = [True]*(n+1)
    for i in range(2, n+1):
        if is_prime[i] == True:
            prime_numbers.append(i)
            for j in range(i, n+1, i):
                is_prime[j] = False
    return prime_numbers
Can you write a Python program to list all the prime numbers between 1 to 50?  def prime_numbers(n):
 
    prime_numbers_list = []
    for num in range(2, n + 1):
        if all(num % i != 0 for i in range(2, num)):
            prime_numbers_list.append(num)
 
    return prime_numbers_list
 
print(prime_numbers(50))
Create a Python script to interpolate missing data points from a Pandas dataframe. import pandas as pd

df = pd.DataFrame({
 'x': [0,1,3,4,5],
 'y': [1,2,4,8,16]
}) import pandas as pd
import numpy as np

df = pd.DataFrame({
 'x': [0,1,3,4,5],
 'y': [1,2,4,8,16]
})

# interpolate the missing data
new_x = np.linspace(0, 5, 6)
df = df.set_index('x').reindex(new_x).interpolate().reset_index()
print(df)
Design an algorithm in Python to compute the intersection of two given arrays.  def intersection(arr1,arr2):
  return set(arr1).intersection(set(arr2))
Create a Python program for analyzing a collection of texts. The program should take a text collection as an input and should return a list of the 10 most frequent words in the texts. [ 
 "This is a text about dogs", 
 "This is a text about cats" 
] import collections

texts = [ 
 "This is a text about dogs", 
 "This is a text about cats" 
]

# Create a counter to count the words
counter = collections.Counter()

# Go through each text
for text in texts:
 # Split the text and count the words
 words = text.split()
 for word in words:
  counter[word] += 1

# Get the 10 most common words
most_common_words = counter.most_common(10)

# Print the most common words
for word, count in most_common_words:
 print(word, count)
Create a program in Python to compare the elements of two given arrays and return the number of matches. arr1 = [1, 2, 3]
arr2 = [3, 4, 5] def count_matches(arr1, arr2):
    count = 0
    for i in arr1:
        if i in arr2:
            count += 1
    return count

print(count_matches(arr1, arr2))
Which of the following options is the best way to declare a constant variable in Python?  The best way to declare a constant variable in Python is by using the `const` keyword. For example:

```
const MAX_VAL = 100
```
Write a Python script to classify a sentence as positive or negative.  import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer

def classify_sentiment(sentence):
    sid = SentimentIntensityAnalyzer()
    score = sid.polarity_scores(sentence)
    if score['compound'] >= 0.05:
        return 'positive'
    elif score['compound'] <= -0.05:
        return 'negative'
    else:
        return 'neutral'
Create a Python function that searches a given list of strings for a match. The function should return true if any of the strings match, and false if none of the strings match. list = ['Hello', 'World', '!'] def search_list(lst, s):
 for item in lst:
  if item == s:
   return True
 return False
Create a Python GUI to display the output of the following program in a chart. import pandas as pd

data = {
   'x': [5,6,7,8,9,10],
   'y': [11,5,5,5,5,5]
}

df = pd.DataFrame(data) import tkinter as tk
import pandas as pd
import matplotlib.pyplot as plt

# Load the data
data = {
   'x': [5,6,7,8,9,10],
   'y': [11,5,5,5,5,5]
}

df = pd.DataFrame(data)

# Create the application window
root = tk.Tk()

# Create a figure to display the data
fig = plt.Figure(figsize=(4,4), dpi=100)

ax = fig.add_subplot(111)

ax.plot(df['x'], df['y'])

canvas = FigureCanvasTkAgg(fig, master=root)
canvas.get_tk_widget().pack()

# Run the application
root.mainloop()
Create a Python script that compares two lists and prints their differences. list1 = [1, 2, 3, 4] 
list2 = [2, 4, 6, 8] list1 = [1, 2, 3, 4] 
list2 = [2, 4, 6, 8]

list_diff = []

for i in list1:
    if i not in list2:
        list_diff.append(i)
        
for j in list2:
    if j not in list1:
        list_diff.append(j)
        
print(list_diff) # output: [1, 3, 6, 8]
Create a function in Python to read specified properties from a list. props = ['name', 'age', 'gender'] def read_props(props):
    """
    Read listed properties from a list.
    
    Args:
        props (list): The list containing properties to be read.
    
    Returns:
        tuple: Returns a tuple with values of the specified properties.
    """
    data = list()
    for prop in props:
        data.append(input("Enter {}: ".format(prop)))
    return tuple(data)
Develop a machine learning model in Python that takes as input a set of numbers and classifies them into two categories. [1, 2, 3, 4, 5] # import required libraries
import numpy as np
from sklearn import preprocessing
from sklearn.neighbors import KNeighborsClassifier

# define the training data and labels
data = np.array([1, 2, 3, 4, 5]).reshape(-1, 1)
labels = np.array([0, 0, 1, 1, 1])

# preprocess the data
scaled_data = preprocessing.scale(data)

# define and train the model
model = KNeighborsClassifier(n_neighbors=3).fit(scaled_data, labels)
Implement a class-level decorator in Python to time the execution of a method.  class timed_method(object):
    def __init__(self,func):
        self.func = func
        
    def __call__(self, *args, **kwargs):
        start_time = time.time()
        try:
            result = self.func(*args, **kwargs)
        except Exception as e:
            raise e
        
        end_time = time.time()
        print('Total elapsed time for method %s: %2.2f seconds' % (self.func.__name__, end_time - start_time))
        return result
Implement a web server in Python that responds to incoming requests.  import http.server

def respond(handler):
    handler.send_response(200)
    handler.send_header('Content-type','text/html')
    handler.end_headers()
    handler.wfile.write(b'Hello World')

class MyWebRequestHandler(http.server.BaseHTTPRequestHandler):
    def do_GET(self):
        respond(self)

if __name__=='__main__':
    server = http.server.HTTPServer(('0.0.0.0', 8001), MyWebRequestHandler)
    print('Starting server at port 8001...')
    server.serve_forever()
Create a Python program, which takes two strings as input, and returns true if one string is an anagram of the other and false otherwise. s1 = "test"
s2 = "ttes" def isAnagram(s1, s2): 
    # Sort both strings  
    s1 = sorted(s1) 
    s2 = sorted(s2)
    # Compare sorted strings 
    if( s1 == s2): 
        return True 
    else: 
        return False 
s1 = "test"
s2 = "ttes"
if (isAnagram(s1, s2)): 
    print ("The strings are anagrams.")
else: 
    print ("The strings aren't anagrams.")
Write a Python program to ask the user for two numbers and output their sum.  num1 = float(input("Please enter the first number: "))
num2 = float(input("Please enter the second number: "))

print("The sum of the two numbers is: " + str(num1 + num2))
Rewrite a given code snippet in Python using a list comprehension. my_list = []
for i in range(10):
 my_list.append(i ** 2) my_list = [i ** 2 for i in range(10)]
Write a Python program to implement K-Means clustering. The program should take two mandatory arguments, k and data, where k is the number of clusters and data is a 2D array containing the data points. k = 3
data = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]] import numpy as np
from sklearn.cluster import KMeans

def kmeans(k, data):
    kmeans = KMeans(k)
    kmeans.fit(data)
    return kmeans.labels_

k = 3
data = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]])
cluster_labels = kmeans(k, data)
print(cluster_labels)
Create a function in Python that takes a number as input and returns the random number generated.  import random

def generate_random_number(number):
    random.seed(number)
    rand_number = random.randint(1, number**2)
    return rand_number
Develop a program to detect and remove a given pattern in a string. String: “I am learning Python programming”
Pattern: “learning” """
Develop a program to detect and remove a given pattern in a string

def remove_pattern(string, pattern):
    # Replace the pattern in the string with an empty string 
    modified_string = string.replace(pattern, '')
    
    return modified_string

if __name__ == '__main__':
    string = 'I am learning Python programming'
    pattern = 'learning'
    print(remove_pattern(string, pattern))
"""
Build a custom container in Google Cloud Platform (GCP) to host a small-scale web application. Not applicable # Install Docker
sudo apt-get update
sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg-agent \
    software-properties-common
    
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

sudo add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"

sudo apt-get update
sudo apt-get install docker-ce docker-ce-cli containerd.io

# Create a docker image
docker build -t myproject:latest .

# Push the docker image to GCP
gcloud auth configure-docker
docker tag myproject:latest gcr.io/[PROJECT-ID]/[IMAGE]
docker push gcr.io/[PROJECT-ID]/[IMAGE]

# Provision a Compute instance
gcloud compute instances create my-instance \
    --boot-disk-size 50GB \
    --image-family ubuntu-1804-lts \
    --image-project ubuntu-os-cloud \
    --machine-type g1-small \
    --tags http-server \
    --metadata-from-file startup-script=gnupg-agent.st

# Create a managed instance group
gcloud compute instance-groups managed create my-group \
    --zone us-central1-a \
    --base-instance-name my-group \
    --template my-template \
    --size 1

# Create an instance template
gcloud compute instance-templates create my-template \
    --machine-type g1-small \
    --network my-net \
    --image-family ubuntu-bionic \
    --image-project ubuntu-os-cloud \
    --metadata-from-file startup-script=startup-script.sh

# Download startup script
wget https://raw.githubusercontent.com/GoogleCloudPlatform/python-docs-samples/master/container_engine/startup-script.sh
Write a Python program to calculate the total number of bits required to store an integer.  def bits_required(num):
    num_bits = 0
    if num == 0:
        num_bits = 1
    else:
        while num > 0:
            num_bits += 1
            num >>= 1
    return num_bits
Create a Python program which reads a list of numbers and stores them in an array. [1, 2, 3, 4, 5] my_list = [1, 2, 3, 4, 5]

my_array = []

for number in my_list:
    my_array.append(number)

print(my_array)
Generate a python program to calculate the equilibrium price of a commodity in different stores.  def calculate_equilibrium_price(data):
    """
    Args:
        data (dict): A dictionary with the prices of the commodity
        in different stores
    Returns:
        int: The equilibrium price of the commodity
    """

    num_stores = len(data)
    total_price = 0
    for store_price in data.values():
        total_price += store_price
    equilibrium_price = total_price / num_stores
    return equilibrium_price
Create a Python program to split a given string into a list of strings by reducing all consecutive whitespaces to a single whitespace. 'This is a   long  string   of words.' def split_consec_spaces(s):
    words = []
    word = ''
    for c in s:
        if c.isspace():
            if word:
                words.append(word)
            word = ''
        else:
            word+=c
            
    if word:
        words.append(word)
        
    return words
    
s = 'This is a   long  string   of words.'
words = split_consec_spaces(s)
print(words) # Output: ['This', 'is', 'a', 'long', 'string', 'of', 'words.']
Implement a function to remove all the duplicates from a linked list in Python. list_nodes = [7, 14, 28, 28, 28, 35, 49] class Node: 
    # Function to initialise the node object 
    def __init__(self, data): 
        self.data = data # Assign data 
        self.next = None # Initialize next as null 
  
  
# Linked List class contains a Node object 
class LinkedList: 
    # Function to initialize head 
    def __init__(self): 
        self.head = None

    def remove_duplicates(self, list_nodes):
        curr_node= self.head 
        new_list=[]
        while curr_node != None: 
            if curr_node.data not in new_list: 
                new_list.append(curr_node.data) 
            curr_node = curr_node.next
                
        # creating a linked list from the unique elements of list_nodes  
        self.head=None
        for i in new_list:
            self.insert_node(i)
    
    def insert_node(self, data): 
    # Create a new node 
        new_node = Node(data) 
        # Check if list is empty
        if self.head is None: 
            self.head = new_node 
            return
        # Otherwise, traverse to the end of list before 
        # inserting the new Node 
        last = self.head 
        while (last.next): 
            last = last.next
        last.next =  new_node
Generate a python program to normalize a list of values in the range 0 and 1 [-1, 0, 1, 2] def normalize_list(input_list):
    min_val = min(input_list)
    max_val = max(input_list)
    output_list = []
    for value in input_list:
        normalized_value = (value - min_val) / (max_val - min_val)
        output_list.append(normalized_value)
    return output_list
Find the Fibonacci sequence of a given number using a Python program. var n = 10; def Fibonacci(n): 
    if n<0: 
        print("Incorrect input")
    elif n==1: 
        return 0
    elif n==2: 
        return 1
    else:
        return Fibonacci(n-1)+Fibonacci(n-2) 

# Driver Program 
print(Fibonacci(n))
Create a Python function to edit a given string by changing the order of some of its characters. string: "hello world" def edit_string(string):
 characters = list(string)
 np.random.shuffle(characters)
 edited_string = "".join(characters)
 return edited_string
Rearrange this python code to make it shorter. a = 0
b = 1
for i in range(10):
   a, b = b, a + b a, b = 0, 1
for _ in range(10):
 a, b = b, a + b
Create a function in Python that takes a string as an argument and replace all vowels with underscores. teststring def replace_vowels(input_string):
    vowels = ["a", "e", "i", "o", "u", "A", "E", "I", "O", "U"]
    output_string = ''
    for s in input_string:
        if s in vowels:
            output_string += '_'
        else:
            output_string += s
    return output_string

result = replace_vowels('teststring')
print(result)
Write a code snippet in Python to print the date after 30 days from the current date.  from datetime import date, timedelta
 
d = date.today() 
print(d + timedelta(days = 30))
Can you create a program in Python that will return the nth Fibonacci number? n = 8 def fib(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)

n = 8
print(fib(n))
Can you develop a basic web server in Python that serves a webpage when queried?  from http.server import HTTPServer, BaseHTTPRequestHandler
from urllib.parse import urlparse

class RequestHandler(BaseHTTPRequestHandler):

  def do_GET(self):
    self.send_response(200)
    self.send_header('Content-Type', 'text/html')
    self.end_headers()
    self.wfile.write(b"<!DOCTYPE html><html><head> <title>Home Page</title> </head><body> <h1> Welcome to my website! </h1> </body></html>")

def run(server_class = HTTPServer, handler_class = RequestHandler):
  server_address = ('', 8000)
  httpd = server_class(server_address, handler_class)
  httpd.serve_forever()

run()
Write a command line program in Python that prints out the Fibonacci numbers up to n. 5 # Program to print the Fibonacci numbers up to n

# Function to return the nth Fibonacci number
def fibonacci(n):
 # Base case
 if n == 0:
  return 0
 elif n == 1 or n == 2:
  return 1
 else:
  return fibonacci(n-1) + fibonacci(n-2)
 
# Main function
num = int(input("Enter a number: "))
for i in range(num + 1):
 print(fibonacci(i))
Modify a Python program to generate output in JSON format. dictionary = {
   "name": "John",
   "age": 30,
   "car": ["Ford", "BMW", "Fiat"]
} import json

dictionary = {
   "name": "John",
   "age": 30,
   "car": ["Ford", "BMW", "Fiat"]
}

json_data = json.dumps(dictionary)
print(json_data) // Output: {"name": "John", "age": 30, "car": ["Ford", "BMW", "Fiat"]}
Create a chatbot in Python that can answer questions about information stored in a database. Example database with tables for categories, products, and orders. # import necessary modules
import sqlite3 
import random 

# establish connection to database
conn = sqlite3.connect('database.db')
cursor = conn.cursor()

# specify initial message
# and list of greetings
message = 'Hello, how can I help you?' 
greetings = ['hi', 'hello', 'hey', 'hi there'] 

# define a function to get
# appropriate response
def getResponse(user_input): 
 # if user input is in greetings
 if user_input.lower() in greetings: 
 response = random.choice(greetings) 
  
 # if user input is a question     
 elif user_input.endswith('?'): 
 # execute query to database
 query = 'SELECT * FROM products'
 cursor.execute(query)
 record = cursor.fetchall()
 products = [record[i][1] for i in range(len(record))]
  
 # provide appropriate response 
 if user_input in products:
 response = 'Yes, we have this product in stock!'
 else:
 response = 'Sorry, we do not have this product.'
  
 # if user input is any statement 
 else: 
 response = 'I can answer questions about our products, try asking me something!'
  
 # return the response 
 return response 
  
# main loop to continuously prompt user
while True: 
 # display initial message 
 print('BOT:', message) 
  
 # get user input 
 user_input = input('USER: ').lower()
  
 # display bot response 
 message = getResponse(user_input) 
 print('BOT:', message)
Write a Python program to find all possible subsets of a given set. s = {1,2,3} def find_subsets(s):
    subsets = []

    for i in range(len(s)+1):
        for subset in itertools.combinations(s, i):
            subsets.append(subset)

    return subsets

s = {1,2,3}
result = find_subsets(s)
print(result)
Write a Python program to replace a given string with another string. sentence = "I love walking on the beach"
old_word = "walking"
new_word = "swimming" sentence = "I love walking on the beach"
old_word = "walking"
new_word = "swimming"

new_sentence = sentence.replace(old_word, new_word)

print("The new sentence is: '{}'".format(new_sentence))
Design an algorithm in Python to calculate the Euclidean distance between two points Input: ([2, 4], [4, 8]) import math 
    
def euclidean_distance(point1, point2):
    dist = math.sqrt( (point1[0]-point2[0])**2 + (point1[1]-point2[1])**2 )
    return dist 

print(euclidean_distance([2,4], [4,8]))
Write a Python program to generate random passwords based on user input. The program should take the user input as the length of the password, number of special characters to include, and the list of available characters and generate a random password. length= 10, num_special_char = 2, allowed_chars= "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+-*_" import random

def generate_password(length, num_special_char, allowed_chars):
 password = ''
 for i in range(length):
  password += random.choice(allowed_chars)
 for i in range(num_special_char):
  password += random.choice('!@#$%^&*')
 return ''.join(random.sample(password, len(password)))

 print(generate_password(length, num_special_char, allowed_chars))
Generate a function in Python which checks whether a number is even or odd.  def is_even_odd(num):
    if num % 2 == 0:
        return "Even"
    else:
        return "Odd"
Create a program in Python to implement linear search.  def linear_search(data, target):
    for i in range(len(data)): 
        if data[i] == target: 
            return i
    return -1
Write a Pub/Sub program in Python for a simple chatroom application. Not applicable import zmq
import sys
import threading

# define constants
HOST = "127.0.0.1"
PORT = 6680

context = zmq.Context()

# Socket 1 
pub = context.socket(zmq.PUB)
pub.bind("tcp://%s:%s" % (HOST, PORT))

# Socket 2
sub = context.socket(zmq.SUB)
sub.connect("tcp://%s:%s" % (HOST, PORT))
sub.setsockopt_string(zmq.SUBSCRIBE, '')

# Function to receive message from subscriber
def get_message():
 while True:
 message = sub.recv()
 print(message.decode('utf-8'))

# Start thread
thread = threading.Thread(target=get_message)
thread.start()

# Send messages
while True:
 message = input('Say something: ')
 pub.send_string(str(message))
Construct a Python program to combine the elements of two lists into a list of tuples. [1, 2, 3], [4, 5, 6] def combine_list(array1, array2):
    return list(zip(array1, array2))
Design a Python program to optimize the operation of a robot  """
Design a Python program to optimize the operation of a robot

This program will take a function that maps the robot's movement from one cell to another in an environment, as well as a data structure that represents the cost associated with each cell as its input. The program will return an optimal path for the robot to take from a start cell to an end cell while minimizing its cost.

"""

def optimize_robot(map_func, cost_map):
    pass
Create code that generates the following output using looping concepts in Python.  for x in range(1, 10):
    for y in range(1, 10):
        print('{} x {} = {}'.format(x, y, x*y))
Implement a Heap data structure in Python.  class Heap:
  '''A Heap is a specialized tree-based data structure.'''
  
  # Constructor to initialize a Heap
  def __init__(self):
    self.heap_array = []
    
  def get_parent_index(self, index):
    return (index - 1)//2
  
  def get_left_child_index(self, index):
    return (2*index) + 1
  
  def get_right_child_index(self, index):
    return (2*index) + 2

  def has_parent(self, index):
    if self.get_parent_index(index) >= 0:
      return True
    else:
      return False

  def has_left_child(self, index):
    if self.get_left_child_index(index) <= len(self.heap_array) - 1:
      return True
    else:
      return False

  def has_right_child(self, index):
    if self.get_right_child_index(index) <= len(self.heap_array) - 1:
      return True
    else:
      return False

  def get_parent(self, index):
    return self.heap_array[self.get_parent_index(index)]

  def get_left_child(self, index):
    return self.heap_array[self.get_left_child_index(index)]
  
  def get_right_child(self, index):
    return self.heap_array[self.get_right_child_index(index)]

  def insert(self, element):
    self.heap_array.append(element)
    self.sift_up()

  def sift_up(self):
    index = len(self.heap_array) - 1
    while self.has_parent(index) and self.heap_array[index] > self.get_parent(index):
      self.heap_array[index], self.heap_array[self.get_parent_index(index)] = self.heap_array[self.get_parent_index(index)], self.heap_array[index]
      index = self.get_parent_index(index)

  def delete(self, index):
    last_element = self.heap_array[len(self.heap_array) - 1]
    self.heap_array[index] = last_element
    self.sift_down(index)

  def sift_down(self, index):
    while self.has_left_child(index):
      min_index = self.get_left_child_index(index)
      if self.has_right_child(index) and self.get_right_child(index) > self.get_left_child(index):
        min_index = self.get_right_child_index(index)
      
      if self.heap_array[index] > self.heap_array[min_index]:
        break
      
      self.heap_array[index], self.heap_array[min_index] = self.heap_array[min_index], self.heap_array[index]
      index = min_index
Create a Python program to find the sum of all the values in a dictionary d = {'a': 10, 'b': 20, 'c':30} def sum_values(d):
    sum = 0
    for value in d.values():
        sum += value
    return sum

total = sum_values(d)
print(total) # 60
Write a Python program to calculate the sum of the elements in a given matrix. Assume the matrix is a list of lists. matrix = [[1,2], [3,4], [5,6]] def matrix_sum(matrix):
sum = 0
for row in matrix:
 for elem in row:
  sum += elem
return sum
Identify a classification algorithm using Python and generate a code to implement it.  import numpy as np
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier

# Load the Iris dataset
X, y = load_iris(return_X_y=True)

# Create a training and test set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=21, stratify=y)

# Fit the model using K-Nearest Neighbors classifier
knn = KNeighborsClassifier(n_neighbors=8)
knn.fit(X_train, y_train)

# Make predictions on the test set
y_pred = knn.predict(X_test)
Generate a list comprehensions in Python that takes a positive integer and creates a list with all its factors. 15 factors = [list_element for list_element in range(1,15+1) if 15%list_element == 0]
Create a Python class called "Foo" and give it three properties: name, num, and array.  class Foo:
    def __init__(self, name, num, array):
        self.name = name
        self.num = num
        self.array = array
Create a class in Python to store data on employees in a company.  class Employee:
    def __init__(self, name, age, salary, job_title):
        self.name = name
        self.age = age
        self.salary = salary
        self.job_title = job_title
        self.bonus = 0
    
    def get_full_name(self):
        return self.name

    def get_age(self):
        return self.age

    def get_salary(self):
        return self.salary

    def get_job_title(self):
        return self.job_title

    def set_bonus(self, bonus):
        self.bonus = bonus
Create a python script that takes in a number and tells whether it is odd or even. number:9 def evenOdd(number): 
    if (number % 2 == 0): 
        print("Even") 
    else: 
        print("Odd") 

evenOdd(number)
Write a Python program to query a MySQL database and produce a chart representing the results of the query. The query is to calculate the total number of orders for each customer. The table name is 'orders'. import mysql.connector
import matplotlib.pyplot as plt

# Connect to the database
mydb = mysql.connector.connect(
    host="localhost",
    user="root",
    passwd="password",
    database="dbname"
)

# Create a cursor
mycursor = mydb.cursor()

# Execute a query
mycursor.execute("SELECT customer_id, COUNT(*) FROM orders GROUP BY customer_id")

# Fetch results
results = mycursor.fetchall()

# Generate Chart
ordercounts = [result[1] for result in results]
customers = []
for result in results:
    mycursor.execute("SELECT name FROM customers WHERE id = %s" % (result[0],))
    name_result = mycursor.fetchone()
    customers.append(name_result[0])

plt.bar(customers, ordercounts)
plt.xticks(customers, rotation=90)
plt.ylabel('Order Count')
plt.xlabel('Customer')
plt.show()
Write a Python program to filter a list of strings and only return the strings which follow a certain pattern. strings = ["hello", "hell", "world", "word", "hello_world"] filtered_strings = [string for string in strings if re.match(r"^hello.*world$", string)] 
# filtered_strings = ["hello_world"]
Generate a basic Machine Learning model in Python to classify the Iris flowers based on the provided dataset. Not applicable import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier

# Load dataset
dataset = pd.read_csv('iris.csv')

# Define X and y values
X = dataset.iloc[:, :-1].values
y = dataset.iloc[:, -1].values

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

# Create a KNeighborsClassifier model
knn = KNeighborsClassifier(n_neighbors=3)
knn.fit(X_train, y_train)

# Predict a classification for test data
y_pred = knn.predict(X_test)

# Calculate accuracy
accuracy = knn.score(X_test, y_test)
print("Accuracy:", accuracy)
Create a Python program that simulates a game of Tic-Tac-Toe.  board = [[0, 0, 0],
         [0, 0, 0],
         [0, 0, 0]]

def start_game():
    # Display the UI of the game
    print("Let the game begin!\n")
    print("1 | 2 | 3")
    print("---------")
    print("4 | 5 | 6")
    print("---------")
    print("7 | 8 | 9")
    print("")


def draw_board(board):
    print(" "+board[0][0]+" | "+board[0][1]+" | "+board[0][2]+" ")
    print(" "+"---------")
    print(" "+board[1][0]+" | "+board[1][1]+" | "+board[1][2]+" ")
    print(" "+"---------")
    print(" "+board[2][0]+" | "+board[2][1]+" | "+board[2][2]+" ")
Create a code generation task to generate a Python program to calculate the sum of a list of numbers. nums = [2, 5, 10, 15] def list_sum(nums): 
    '''This function will take a list as input and return the sum of its elements.'''
    result = 0
    for num in nums:
        result += num
    return result

nums = [2, 5, 10, 15]
print(list_sum(nums))
Can you develop a Python class to calculate the cross entropy loss between two probability distributions?  import numpy as np

class CrossEntropy:
    def __init__(self):
        pass
    
    def loss(self, p, q):
        return - np.sum(p * np.log(q))
Create a function in Python to calculate the total cost after applying a discount. The function should accept the original cost and the discount percentage as arguments. original cost = 100
discount percentage = 25 def calculate_discounted_cost(cost, discount_percentage):
 discounted_cost = cost - (cost * (discount_percentage/100))
 return discounted_cost

discounted_cost = calculate_discounted_cost(100, 25)
print ('The discounted cost is: ', discounted_cost)
Modify the Python script to store the correlation coefficients in an array.  import csv 
import numpy as np 
  
def read_csv(filename): 
    data = [] 
    with open(filename, 'r') as csvfile: 
        csvreader = csv.reader(csvfile) 
        for row in csvreader: 
            data.append(row) 
    return np.array(data).astype(float) 
  
def compute_corrcoef(data): 
    corrcoefs = [] 
    for i in range(data.shape[1]): 
        for j in range(i + 1, data.shape[1]): 
            r = np.corrcoef(data[:,i], data[:, j])[0,1] 
            corrcoefs.append((i, j, r)) 
    return np.array(corrcoefs)
This code is a Python class for a Zevera.com hoster plugin. To use it, import the MultiHoster module and create an instance of the ZeveraCom class. The class has methods for handling premium accounts and checking files. Use the create_getInfo function to generate information about the plugin.  # -*- coding: utf-8 -*-

from module.plugins.internal.MultiHoster import MultiHoster, create_getInfo


class ZeveraCom(MultiHoster):
    __name__    = "ZeveraCom"
    __type__    = "hoster"
    __version__ = "0.25"

    __pattern__ = r'http://(?:www\.)?zevera\.com/.+'

    __description__ = """Zevera.com hoster plugin"""
    __license__     = "GPLv3"
    __authors__     = [("zoidberg", "zoidberg@mujmail.cz")]


    def handlePremium(self):
        if self.account.getAPIData(self.req, cmd="checklink", olink=self.pyfile.url) != "Alive":
            self.fail(_("Offline or not downloadable"))

        header = self.account.getAPIData(self.req, just_header=True, cmd="generatedownloaddirect", olink=self.pyfile.url)
        if not "location" in header:
            self.fail(_("Unable to initialize download"))

        self.link = header['location']


    def checkFile(self):
        super(ZeveraCom, self).checkFile()

        if self.checkDownload({"error": 'action="ErrorDownload.aspx'}) is "error":
            self.fail(_("Error response received - contact Zevera support"))


getInfo = create_getInfo(ZeveraCom)

Write a Python program to generate a script for deploying a web application. The web application contains one page with HTML, Javascript and a MySQL database. #!/usr/bin/python

import os

# Install Apache Web Server
os.system('sudo apt-get install apache2')

# Install MySQL server
os.system('sudo apt-get install mysql-server')

# Create database
os.system('mysql -u root -p create database mydb')

# Create user
os.system('mysql -u root -p grant all privileges on mydb.* to username@localhost identified by 'password';

# Copy html file
html_file='index.html'
os.system('cp ' + html_file + ' /var/www/html/')

# Create and run CGI script
cgi_file='my_cgi.py'
os.system('cp ' + cgi_file + ' /usr/lib/cgi-bin/')
os.system('sudo chmod 755 /usr/lib/cgi-bin/'+cgi_file)

# Create connection file
conn_file='my_conn.py'
os.system('cp ' + conn_file + ' /usr/lib/')
Create a function in Python to initialize an array with two parameters. params: (4, 5) def initialize_array(rows, cols): 
    array = [[0 for i in range(cols)] for j in range(rows)]
    return array
Create a generator function in Python to yield the numbers in a given range.  def num_range_generator(start, end):
    for num in range(start, end+1):
        yield num
Create a Python method that accepts two strings as arguments and concatenates them.  def concatenate_strings(str1, str2):
    return str1 + str2
Rewrite the following JavaScript code to a python code. function addNums(x, y) {
    return x + y;
} def addNums(x, y):
    return x + y
Construct a neural network model in Python to predict the sale numbers of a product. Product: A
Historical data of sales: [3, 4, 2, 6, 5, 10] model = Sequential()
model.add(Dense(8, activation='relu', input_shape=[6]))
model.add(Dense(1, activation='linear'))
model.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae'])
model.fit(x_train, y_train, epochs=500, verbose=False)
Can you write a function in Python to find the maximum number from a given list? List of Numbers: [9, 4, 2, 7, 5] def find_max(lst):
  max_val = lst[0]
  for num in lst:
    if num > max_val:
      max_val = num
  return max_val

list_of_numbers = [9, 4, 2, 7, 5]
print(find_max(list_of_numbers))
Write a bash script to build a Jupyter Notebook environment from scratch. Not applicable #!/bin/bash

# Update existing packages
sudo apt-get update
# Install pip3
sudo apt-get install python3-pip
# Install the necessary packages
pip3 install jupyter notebook
# Install virtual environment
pip3 install virtualenv
# Create a virtual environment in the current directory
virtualenv notebook-env
# Activate the virtual environment
source notebook-env/bin/activate
# Upgrade pip and jupyter inside the virtual environment
pip3 install --upgrade pip jupyter
# Make jupyter launchable from inside the virtual environment
python3 -m ipykernel install --user

# To exit from the virtual environment
deactivate
Implement a sorting algorithm in Python that sorts a given array of numbers. array = [2, 7, 4, 1, 5, 3] def sort_array(array):
    for i in range(len(array)): 
        min_idx = i 
        for j in range(i+1, len(array)): 
            if array[min_idx] > array[j]: 
                min_idx = j       
        array[i], array[min_idx] = array[min_idx], array[i]
    return array
result = sort_array(array)
print(result) // Output: [1, 2, 3, 4, 5, 7]
Create a classification model using random forests in Python. No input. def random_forest_classifier(X, y):
    """
    Create a classification model using random forests.

    Parameters:
        X(array-like): Training data.
        y(array-like): Target values.

    Returns:
        object: The trained random forest classifier.
    """
    # create the random forest classifier
    rfc = RandomForestClassifier(random_state=42)

    # fit the classifier to the dataset
    rfc.fit(X, y)

    return rfc
Edit the following python code to run in Python 3 print "Hello World!" print("Hello World!")
Create a tag classifier using a Linear Support Vector Machine (Linear SVM) model in Python. An existing dataset of news articles, headlines and tags. import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score

# Read data
data = pd.read_csv('news.csv', encoding='utf-8')

# Vectorize data
vectorizer = CountVectorizer()
X = vectorizer.fit_transform(data['headline'])

# Train the model
model = LinearSVC()
model.fit(X, data['tags'])

# Test the model
predicted = model.predict(X)
print(accuracy_score(data['tags'], predicted))
Generate a function in Python to populate a dictionary data-structure with a list of numerical values. [1, 2, 3, 4, 5] def populateDict(lst):
    my_dict = {}
    for i in lst:
        my_dict[i] = i
    return my_dict

my_numbers = [1, 2, 3, 4, 5]
my_dict = populateDict(my_numbers)
print(my_dict)
Create a variable in Python which stores a list of tuples that contains student names and their scores. Not applicable students = [('John', 85.5), ('Chris', 90.5), ('Jane', 95.7)]
Generate a python program to compute the cartesian product of two lists. list1 = [1,2,3]
list2 = [4,5] def cartesian_product(list1, list2):
    result_list = []
    for i in list1:
        for j in list2:
            result_list.append([i,j])
    return result_list

list1 = [1,2,3]
list2 = [4,5]

cartesian_product_list = cartesian_product(list1, list2)

print(cartesian_product_list)  # [[1,4],[1,5],[2,4],[2,5],[3,4],[3,5]]
Optimize the Python code below to operate in linear time complexity. Not applicable # inefficient code
def find_duplicates(array):
  seen = set()
  duplicates = []
  for num in array:
    if num in seen:
      duplicates.append(num)
    seen.add(num)
  return duplicates
  
# optimized code
def find_duplicates_linear(array):
  duplicates = []
  seen = set()
  for num in array:
    if num not in seen:
      seen.add(num)
    else:
      duplicates.append(num)
  return duplicates
Write a Python program to create a list of odd numbers between x and y. x = 3, y = 10 # Generate a list of odd numbers between x and y
def odd_numbers(x, y):
  # Initialize an empty list 
  odd_list = [] 
  
  # Loop through the range
  for i in range(x, y): 
    # If the number is odd
    if (i % 2 != 0): 
      odd_list.append(i)
  
  return odd_list 
  
x = 3
y = 10

# Get the list of odd numbers
odd_list = odd_numbers(x, y)

# Print the list
print(odd_list)
Write a Python program that takes an input string as an argument and prints all its anagrams.  def is_anagram(s1, s2):
    s1 = s1.lower()
    s2 = s2.lower()
    if len(s1) != len(s2):
        return False
    for c in s1:
        if c not in s2:
            return False
    for c in s2:
        if c not in s1:
            return False
    return True

def get_anagrams(string):
    anagrams = []
    for i in range(len(string)):
        for j in range(len(string)):
            if i == j:
                continue
            s1 = string[i:j+1]
            s2 = string[:i] + string[j+1:]
            if is_anagram(s1, s2):
                anagrams.append(s2)
    return anagrams
Design a python program to generate a singly linked list Node Values: 1, 2,3, 4, 5 class Node: 
    def __init__(self, data):
        self.data = data
        self.next = None
  

class LinkedList: 
    def __init__(self):
        self.head = None
  
    # Function to insert a new node at the beginning
    def push(self, new_data): 
        new_node = Node(new_data) 
        new_node.next = self.head 
        self.head = new_node 
  

# Example 
llist = LinkedList() 
node_values = [1, 2, 3, 4, 5]
for node in node_values:
    llist.push(node)
Write a Python program to print a given dictionary where the keys are numbers between 1 and 3 and the values are a list from 1 to the number key. - d = {1: [1], 2: [1,2], 3: [1,2,3]}
for k,v in d.items():
    print(k,v)
Create a function in Python for computing the average of elements in a given list. [15, 16, 5, 20, 6, 8] def calculate_average(nums):
    total = 0
    for i in range(len(nums)):
        total += nums[i]
    return total / len(nums)
Generate an algorithm in Python that returns the kth smallest number in a given array. Input Array: [3, 2, 4, 1, 5]
Input k: 3 def kthSmallest(arr, k):
 # sort the array
 arr.sort()
 
 # return the kth element
 return arr[k-1]
 
# Driver Code
arr = [3,2,4,1,5]
k = 3

print(kthSmallest(arr, k)) # 3
Construct a program with Python for calculating the average of the numbers in a given list  """
Construct a program with Python for calculating the average of the numbers in a given list
"""

def calculate_average(numbers):
    # Calculate the sum of the numbers
    total_sum = 0 
    for n in numbers:
        total_sum += n

    # Calculate the average of the numbers
    average = total_sum/len(numbers)
    return average

if __name__ == '__main__':
    numbers = [1, 2, 3, 4, 5]
    print(f'The average of the numbers in the list is: {calculate_average(numbers)}')
Suggest a data structure in Python to store the following information about a list of students: Name, Age, Grade.  students = [ 
  { 
    'name': 'John Doe', 
    'age': 18, 
    'grade': 'A'
  }, 
  { 
    'name': 'Jane Smith', 
    'age': 16, 
    'grade': 'B'
  } 
]
Create a linear regression model in Python that predicts the outcome of a simple dataset. x = [1, 2, 3, 4, 5], y = [1, 2, 3, 4, 5] # import the necessary libraries
import numpy as np 
import matplotlib.pyplot as plt 

# Create the dataset 
x = np.array([1, 2, 3, 4, 5]) 
y = np.array([1, 2, 3, 4, 5]) 

# Create the model 
# Fit the data 
coeff = np.polyfit(x, y, 1) 

# Generate the prediction 
predict = np.poly1d(coeff)

# Plot the regression line
plt.plot(x, y, 'o')
plt.plot(x, predict(x), 'x')
plt.xlabel('x-axis')
plt.ylabel('y-axis')
plt.show()
Create a Debian package for MXCart:
1. Clean any previous build by removing the directory /build/debpkg/
2. Create the directory /build/debpkg/DEBIAN/
3. Write the control file at /build/debpkg/DEBIAN/control
4. Copy the required python files to /build/debpkg/usr/local/lib/mxcart/
5. Copy the required images to /build/debpkg/usr/local/share/mxcart/ and /build/debpkg/usr/local/share/icons/hicolor/48x48/apps/
6. Create the file /build/debpkg/usr/local/bin/mxcart with the given content
7. Create the desktop entry file /build/debpkg/usr/local/share/applications/mxcart.desktop with the given content
8. Build the Debian package by running "dpkg-deb -b /build/debpkg /build/MXCart_{versionNum}_.deb" where {versionNum} is the version number of the package.  import os, hashlib
from shutil import copy2 as copy
from Resources import versionNum
from subprocess import Popen
from shutil import rmtree

def md5sum(fd, block_size=2**20):
    md5 = hashlib.md5()
    while True:
        data = fd.read(block_size)
        if not data:
            break
        md5.update(data)
    return md5.hexdigest()

#clean any previous
mPath = os.path.dirname(__file__)+"/build/debpkg/"
if os.path.isdir(mPath):
    rmtree(mPath)

#create DEBIAN directory
mPath = os.path.dirname(__file__)+"/build/debpkg/DEBIAN"
if not os.path.isdir(mPath):
    os.makedirs(mPath)
    
#write control file
control = open(mPath+"/control", "w")
control.write( "Package: MXCart\n" + \
    "Version: %s\n" %(versionNum) + \
    "Section: misc\n" + \
    "Priority: optional\n" + \
    "Architecture: all\n" + \
    "Depends: pngnq, python, python-wxgtk2.8, python-imaging, python-gdal, python-pyproj, python-simplejson, python-shapely\n" + \
    "Installed-Size: 331\n" + \
    "Maintainer: Will Kamp\n" + \
    "Description: BSB version 2 and 3 chart import utility for MX Mariner\n" )
control.close()

#copy over needed python files
mPath = os.path.dirname(__file__)+"/build/debpkg/usr/local/lib/mxcart/"
if not os.path.isdir(mPath):
    os.makedirs(mPath)
for pyFile in ["/BsbHeader.py", "/buildWin.py", "/GUI.py", "/MXCart.py", "/BsbScales.py", \
               "/BsbOutlines.py", "/FilePathSearch.py", "/Helper_Gdal.py", "/MyGemfBuilder.py", \
               "/Helper_Tiler.py", "/Helper_Merge.py", "/Resources.py", "/FindZoom.py", "/GenerateData.py", \
               "/reader_bsb_data.csv", "/my_tilers_tools/viewer-google.html", "/my_tilers_tools/viewer-openlayers.html"]:
    #print os.path.dirname(__file__)+pyFile, mPath
    copy(os.path.dirname(__file__)+pyFile, mPath)
    
mPath = os.path.dirname(__file__)+"/build/debpkg/usr/local/lib/mxcart/my_tilers_tools/"
if not os.path.isdir(mPath):
    os.makedirs(mPath)
for pyFile in ["/my_tilers_tools/gdal_tiler.py", \
               "/my_tilers_tools/generate_efficient_map_file.py", \
               "/my_tilers_tools/map2gdal.py", \
               "/my_tilers_tools/reader_backend.py", \
               "/my_tilers_tools/reader_bsb.py", \
               "/my_tilers_tools/tiler_functions.py", \
               "/my_tilers_tools/tiles_convert.py", \
               "/my_tilers_tools/tiles_merge_simple.py" ]:
    #print os.path.dirname(__file__)+pyFile, mPath
    copy(os.path.dirname(__file__)+pyFile, mPath)

#copy dependant images
mPath = os.path.dirname(__file__)+"/build/debpkg/usr/local/share/mxcart/"
if not os.path.isdir(mPath):
    os.makedirs(mPath)
for pyFile in ["/kattegat.png", "/spinner.gif"]:
    #print os.path.dirname(__file__)+pyFile, mPath
    copy(os.path.dirname(__file__)+pyFile, mPath)

mPath = os.path.dirname(__file__)+"/build/debpkg/usr/local/share/icons/hicolor/48x48/apps/"
if not os.path.isdir(mPath):
    os.makedirs(mPath)
copy(os.path.dirname(__file__)+"/mxcart.png", mPath)

#create bin
mPath = os.path.dirname(__file__)+"/build/debpkg/usr/local/bin"
if not os.path.isdir(mPath):
    os.makedirs(mPath)
binsh = open(mPath + "/mxcart", "w")
binsh.write("#!/bin/bash\n\n" + \
            "cd /usr/local/lib/mxcart\n" + \
            "python MXCart.py\n")
binsh.close()
Popen(["chmod", "777", mPath + "/mxcart"])

#create desktop entry
mPath = os.path.dirname(__file__)+"/build/debpkg/usr/local/share/applications"
if not os.path.isdir(mPath):
    os.makedirs(mPath)
desktop = open(mPath + "/mxcart.desktop", "w")
desktop.write("[Desktop Entry]\n" + \
    "Version=%s\n" %(versionNum)  + \
    "Name=MX Cart\n" + \
    "Comment=BSB Chart Import Utility\n" + \
    "Path=/usr/local/lib/mxcart/\n" + \
    "Exec=mxcart\n" + \
    "Icon=/usr/local/share/icons/hicolor/48x48/apps/mxcart.png\n" + \
    "StartupNotify=true\n" + \
    "Terminal=false\n" + \
    "Type=Application\n" + \
    "Categories=Education;Science;Geography;" )
desktop.close()

Popen(["dpkg-deb", "-b", os.path.dirname(__file__)+"/build/debpkg", os.path.dirname(__file__)+"/build/MXCart_%s_.deb" %(versionNum)])
##write md5sum file
#mPath = os.path.dirname(__file__)+"/build/debpkg/DEBIAN"
#md5sums = open(mPath+"/md5sums", "w")
#for ea in os.listdir(os.path.dirname(__file__)+"/build/debpkg/usr/local/lib/mxcart/"):
#    fd = open( os.path.dirname(__file__)+"/build/debpkg/usr/local/lib/mxcart/"+ea, "rb" )
#    md5sums.write(md5sum(fd) + "  " + "/usr/local/lib/mxcart/"+ea+"\n")
#    fd.close()
##for fd in os 
#md5sums.close()

Develop a python program to print the hollow diamond pattern given size as argument. 5 def print_hollow_diamond(n):
    # top side
    for i in range(n):
        for j in range(n):
            if j == i or j == n-i-1:
                print('* ', end = '')
            else:
                print('  ', end = '')
        print() 
  
    # middle straight line
    for j in range(n):
        print('* ', end = '')
    print()
  
    # bottom side
    for i in range(n , 0 , -1):
        for j in range(n):
            if j == i - 1 or j == n-i:
                print('* ', end = '')
            else:
                print('  ', end = '')
        print()
Generate a Python code snippet to check if all the values of a dictionary are True.  all(dict_values) # This statement will return a boolean indicating whether all values in the dictionary are True.
Given a list of numbers, write a Python program to compute the average of all numbers. [10, 20, 45, 60] def compute_average(numbers):
 sum = 0
 for number in numbers:
 sum += number
 return sum/len(numbers)

numbers = [10, 20, 45, 60]
result = compute_average(numbers)
print(result)

# Output:
31.25
Generate a Python program to generate random numbers between 1 and 10.  import random
number = random.randint(1, 10)
print (number)
Create a Python program to automatically delete any repeated words from a given text. The cat was was running running in the park text = "The cat was running in the park"

words = text.split(' ')
unique_words = []

for word in words:
 if word not in unique_words: 
  unique_words.append(word)

print(' '.join(unique_words))
Analyze and edit this Python code to make it faster. def find_longest(arr):
    length = 0
    current_length = 0
    for i in range(len(arr) - 1):
        if arr[i] < arr[i+1]:
            current_length += 1
            if current_length > length:
                length = current_length
        else:
            current_length = 0
    return length def find_longest(arr):
    length = 0
    current_length = 0
    prev_num = float('-inf')
    for i in range(len(arr)):
        if arr[i] > prev_num:
            current_length += 1
            if current_length > length:
                length = current_length
        else:
            current_length = 0
        prev_num = arr[i]
    return length
Create a Python program to remove any items from a given list that are less than 5. [1, 4, 6, 8, 10, 15, 20] my_list = [1, 4, 6, 8, 10, 15, 20]

filtered_list = [item for item in my_list if item >= 5]

print(filtered_list)  # Output: [6, 8, 10, 15, 20]
Program a web crawler in Python to crawl URLs from a given website and follow all external links. url = https://www.example.com import requests
from bs4 import BeautifulSoup

# Set the base URL
url = "https://www.example.com"

# Keep track of visited URLs
visited = set()

# Set of external URLs
urls_external = set()

# Perform the crawl
def crawl():
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    internal_urls = set()

    # Find all links on the page
    for link in soup.find_all('a'):
        if url.startswith(url):
            internal_urls.add(link['href'])
        else:
            urls_external.add(link['href'])
    
    # Recursively crawl all internal URLs
    for internal_url in internal_urls:
        if internal_url not in visited:
            visited.add(internal_url)
            crawl(internal_url)

crawl()
Transform the following code from Python to JavaScript. for i in range(10):
    print(i) for (let i = 0; i < 10; i++) {
  console.log(i);
}
Write a Python AI program to play the 2048 game.  import pygame  # used to display the game board 
import numpy as np  # used to manage board states 
import time  # used for measuring time spent for each move 
import copy  # used to copy game boards 

# define the game board size
BOARD_SIZE = 4

# define useful game constants
TILE_2 = 2
TILE_4 = 4

# define useful game variables 
opening_tile_value = TILE_2
score = 0 

# define a game board class
class Board:
    # init game board
    def __init__(self):
        self.board = np.zeros((BOARD_SIZE,BOARD_SIZE), dtype=int)
        self.place_opening_tile()        

    # get available moves
    def get_available_moves(self):
        x_direction = [0,1,0,-1]
        y_direction = [1,0,-1,0]
        valid_moves = []
        # loop through each column/row
        for i in range(BOARD_SIZE):
            for j in range(BOARD_SIZE):
                # loop through each direction 
                for x_dir, y_dir in zip(x_direction, y_direction):
                    x, y = i + x_dir, j + y_dir
                    if 0 <= x < BOARD_SIZE and 0 <= y < BOARD_SIZE and self.board[x][y] == 0:
                        valid_moves.append((i, j, x, y))
        return valid_moves
    
    # make a move
    def make_move(self, tile_value, movement):
        x_from, y_from = movement[0], movement[1]
        x_to, y_to = movement[2], movement[3]
        self.board[x_from][y_from] = 0
        self.board[x_to][y_to] = tile_value
        self.place_opening_tile()

    # place an opening tile
    def place_opening_tile(self):
        available_pos = np.where(self.board == 0)
        if len(available_pos[0]) == 1:
            x_pos, y_pos = available_pos[0][0], available_pos[1][0]
            self.board[x_pos][y_pos] = opening_tile_value
        elif len(available_pos[0]) == 0:
            # game over
            pass
        else:
            x_pos, y_pos = available_pos[0][np.random.choice(range(len(available_pos[0])))], \
                available_pos[1][np.random.choice(range(len(available_pos[1])))]
            self.board[x_pos][y_pos] = opening_tile_value
Implement quicksort in Python. Not applicable def quicksort(arr):
     if len(arr) < 2:
         return arr

     pivot = arr[0]

     less_than_pivot = [x for x in arr[1:] if x <= pivot]
     greater_than_pivot = [x for x in arr[1:] if x > pivot]

     return quicksort(less_than_pivot) + [pivot] + quicksort(greater_than_pivot)
Develop a program in Python to compute the maximum contiguous subarray sum. [-3, 2, 5, -1, 6, 3, -2] def maxSubArraySum(arr):
    max_so_far = arr[0]
    curr_max = arr[0]
    
    for i in range(1, len(arr)):
        curr_max = max(arr[i], curr_max + arr[i])
        max_so_far = max(max_so_far, curr_max)
        
    return max_so_far
Using Python, can you calculate the sum of all numbers in a list? [1, 3, 5, 7, 9] sum = 0
for num in [1, 3, 5, 7, 9]:
    sum += num

print(sum) # 25
Write a Python script to generate a password using random characters and numbers.  import random
import string

def generate_password():
 password = ''.join(random.choices(string.ascii_letters + string.digits, k=8))
 return password

print(generate_password())
Create a web-crawler with Python that gathers emails from a given website. URL of the website: "www.example.com" import requests
import re

target_url = 'www.example.com'

def scrape_emails(url):
    # get the HTML source code from the given url
    response = requests.get(url)
    html = response.text
    # extract all emails from html with the help of regular expression
    emails = re.findall('\S+@\S+', html)
    # print all scraped emails
    print('Emails found:')
    print('\n'.join(emails))

if __name__ == '__main__':
    scrape_emails(target_url)
Create a Python program to classify a given set of data using a k-nearest neighbors algorithm. data = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]] import numpy as np
from sklearn.neighbors import KNeighborsClassifier

data = np.array([[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]])

# Create the model
model = KNeighborsClassifier()

# Train the model
model.fit(data[:, 0].reshape(-1, 1), data[:, 1].reshape(-1, 1))

# Output the result
print(model.predict([[2]])) # [[3]]
Create a Python program to compare two strings and determine which one is longer.  def compare_string_length(str1, str2):
    if len(str1) > len(str2):
        return str1
    else:
        return str2
Compute the sum of the fibonacci sequence up to n using a recursive Python function. 5 def fib_sum(n):
  if n <= 1:
    return n
  else:
    return fib_sum(n-1) + fib_sum(n-2) + n

print(fib_sum(5))
Create an algorithm in Python to convert a binary number to its decimal equivalent. 1010101 def binaryToDecimal(binary):
    binary = str(binary)
    length = len(binary)
    decimal = 0
    j = 0
    for i in range(length-1, -1, -1):
        decimal += (2**j)*int(binary[i])
        j += 1
    return decimal

binary_number = 1010101
decimal_number = binaryToDecimal(binary_number)
print(decimal_number) # Output: 85
Create a query in Python to retrieve all records from the 'Users' table where 'active' is true. Not applicable # Assuming you have a variable named 'conn' pointing to the database connection 

result = conn.execute(
    "SELECT * FROM Users WHERE active = true"
)
for row in result:
    # Do something with the retrieved record
    # ...
Create a way to encrypt a message using a key in Python. message = "Hello world!"
key = "secret" import hashlib

def encrypt(message, key):
    encrypted_msg = ""
    for char in message:
        encrypted_msg += chr(ord(char) + ord(key[0]))
    return encrypted_msg

encrypted_msg = encrypt(message, key)
print(encrypted_msg)
Create a Python program to calculate the total number of words and characters in a list of strings. ["Hello","world!"] """
Calculate the total number of words and characters in a list of strings
""" 
def count_words_and_characters(strings):
    total_words = 0
    total_characters = 0
    for string in strings:
        words = string.split()
        total_words += len(words)
        for word in words:
            total_characters += len(word)
    return total_words, total_characters
 
if __name__ == '__main__':
    strings = ["Hello","world!"]
    num_words, num_characters = count_words_and_characters(strings)
    print(f"Total number of words: {num_words}")
    print(f"Total number of characters: {num_characters}")
Write a Python program to calculate the maximum, minimum and mean number of elements in a given string.  def get_stats_for_string(string):
    num_elements = len(string)
    max_element = max(string)
    min_element = min(string)
    mean_element = sum(string) / num_elements
    return (max_element, min_element, mean_element)

string = "abcdef"
stats_for_string = get_stats_for_string(string)
print("Max: {0}, Min: {1}, Mean: {2}".format(*stats_for_string))
Given two lists of integers, write a python function that returns a list of all common elements shared between them.  def common_elements(list1, list2):
    return list(set(list1) & set(list2))
Write a python program that computes the average of 5 numbers.  def average(a, b, c, d, e):
    """This program computes the average of 5 numbers"""
    return (a+b+c+d+e)/5
Create an algorithm in Python that replaces substrings in a given string "hello world", "world", "Earth" # Define function
def replace_substring(string, substring, replacement):
    return string.replace(substring, replacement)
	
# Call function
print(replace_substring("hello world", "world", "Earth")) 
# Output hello Earth
Create a function in Python to generate random passwords of length n.  import string
import random

def generate_password(length):
    chars = string.ascii_lowercase + string.ascii_uppercase + string.digits
    generated_password = ''.join(random.choice(chars) for i in range(length))

    return generated_password
Generate a program to find the longest palindromic substring in given string in Python. "forgeeksskeegfor" def longestPalSubstr(string):
    maxLength = 1
    start = 0
    length = len(string)
  
    low = 0
    high = 0
  
    # One by one consider every character as center point of even and length palindromes 
    for i in range(1, length): 
        # Find the longest even length palindrome with center points as i-1 and i. 
        low = i - 1
        high = i 
        while low >= 0 and high < length and string[low] == string[high]: 
            if high - low + 1 > maxLength: 
                start = low 
                maxLength = high - low + 1
            low -= 1
            high += 1
  
        # Find the longest odd length palindrome with center point as i 
        low = i - 1
        high = i + 1
        while low >= 0 and high < length and string[low] == string[high]: 
            if high - low + 1 > maxLength: 
                start = low 
                maxLength = high - low + 1
            low -= 1
            high += 1
  
    print("Longest palindrome substring is:", end = "") 
    print(string[start:start + maxLength]) 

string = "forgeeksskeegfor"
longestPalSubstr(string)
Create a Python module to classify songs from a given song dataset. The dataset contains a list of songs and each song has four features associated with it: artist, song title, lyrics, and genre. The dataset contains 800+ rows. Each row contains data in the following format:
"artist: Avril Lavigne, title: Complicated, lyrics: Uh huh, life's like this
Uh huh, uh huh, that's the way it is
Cause life's like this
 Uh huh, uh huh, that's the way it is
 Relax, take it easy
Genre: Pop" import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.neighbors import KNeighborsClassifier

df = pd.read_csv('songs.csv')

X = df[['artist', 'title', 'lyrics']]
y = df['genre'].values

# Vectorize Text
vectorizer = CountVectorizer()
X_lyrics = vectorizer.fit_transform(X['lyrics']).todense()

# Fit the model
knn = KNeighborsClassifier(5)
knn.fit(X_lyrics, y)

# Predict a genre for a new song
new_song = [['artist', 'title', 'lyrics']]
new_song_lyrics = vectorizer.transform(new_song)
predicted_genre = knn.predict(new_song_lyrics)
print(predicted_genre)
Can you develop a function in Python to iteratively sum all the numbers in a list of numbers? [4, 9, 13, 5] def sum_list(list): 
  total = 0
  for num in list:
    total += num  
  return total

print(sum_list([4, 9, 13, 5])) # Output: 31
Create a python module to edit a dataframe The DataFrame is composed of two columns, 'id' and 'value'. import pandas as pd

def edit_dataframe(df):

    # Adding the column 'new_value'
    df['new_value'] = df['value'] + 1

    # Replacing values in the 'id' column
    df['new_id'] = df['id'].map(lambda x: 'id_' + str(x))

    # Updating the value in the 'value' column
    df.value = df.value * 2

    return df
Write a python class to store an employee's ID number and name.  class Employee:
  def __init__(self, id, name):
    self.id = id
    self.name = name

  def get_id(self):
    return self.id

  def get_name(self):
    return self.name
Implement a Python function to convert a float to a string with two decimal places.  def float_to_string(number):
     # Round the number
    rounded_num = round(number, 2)
     # Return the number converted to a string
    return str(rounded_num)
Develop a python script that takes in 2 strings and outputs the longest common subsequence. string1 = 'GeeksforGeeks' 
string2 = 'GeeksQuiz' def longest_common_subsequence(string1, string2):
    """
    Find the longest common subsequence of two strings.

    Args:
        string1 (str): first string
        string2 (str): second string

    Returns:
        str: longest common subsequence
    """
    m = len(string1)
    n = len(string2)
    dp = [[None]*(n+1) for i in range(m+1)]

    for i in range(m+1):
        for j in range(n+1):
            if i == 0 or j == 0:
                dp[i][j] = 0

            elif string1[i-1] == string2[j-1]:
                dp[i][j] = dp[i-1][j-1] + 1

            else:
                dp[i][j] = max(dp[i-1][j], dp[i][j-1])

    lcs = ''
    i, j = m, n
    while i > 0 and j > 0:
        if string1[i-1] == string2[j-1]:
            lcs += string1[i-1]
            i -= 1
            j -= 1

        elif dp[i-1][j] > dp[i][j-1]:
            i -= 1
        else:
            j -= 1

    return lcs[::-1]
Write a Python program to create a function that takes two strings as parameters and returns true if the first string contains the second string. String 1 = "Hello World!"
String 2 = "World" def contains(s1, s2):
 return s2 in s1

string1 = "Hello World!"
string2 = "World"

print(contains(string1, string2)) # True
Create a function in Python to perform linear regression looking for the best correlation for a set of data. x = [1, 2, 4, 3, 5]
y = [1, 3, 3, 2, 5] import numpy as np

def linear_regression(x, y):
    x_mean = np.mean(x)
    y_mean = np.mean(y)
    
    num = 0
    den = 0
    for i in range(len(x)):
        num += (x[i] - x_mean)*(y[i] - y_mean)
        den += (x[i] - x_mean)**2
    m = num / den
    c = y_mean - m*x_mean
    return m, c
Create a program in python to count the occurences of a given word in a sentence. sentence = "This is a sample sentence for the purpose of the example. "
keyword = "example" #Defining the sentence and keyword
sentence = "This is a sample sentence for the purpose of the example. "
keyword = "example"

#Counting the occurences
count = sentence.count(keyword)

#Printing the result
print("The keyword appears " + str(count) + " time(s) in the sentence.")
Suggest a function for concatenating two strings in Python.  def concatenate_strings(str1, str2):
    '''This function concatenates two strings, str1 and str2.'''
    return str1 + str2
Create a Python program to add two-dimensional lists and display the sum in a formatted tabular form. Two 2-Dimensional lists of equal size:
list1 = [[1,2,3], [4,5,6], [7,8,9]]
list2 = [[3,4,5], [6,7,8], [9,10,11]] list1 = [[1,2,3], [4,5,6], [7,8,9]]
list2 = [[3,4,5], [6,7,8], [9,10,11]]

sum = []

# Iterating each of the list
for i in range(len(list1)):
  row_sum = []
  for j in range(len(list1[0])):
    row_sum.append(list1[i][j] + list2[i][j])
  sum.append(row_sum)

# Printing the sum
for i in range(len(sum)):
  for j in range(len(sum[0])):
    print(sum[i][j], end = " ")
  print()

# Output
4 6 8
10 12 14
16 18 20
Write a Python program to print out the Fibonacci sequence, up to the 100th number in the sequence. Not applicable def fibonacci(n):
 a, b = 0, 1
 while a < n:
 print(a, end=' ')
 a, b = b, a + b
 print()

fibonacci(100)
Create a Python program that computes the total time taken by two runners in a race. Time of Runner 1: 3 minutes
Time of Runner 2: 4 minutes def race_time_total(time1,time2):
 total = time1 + time2
 return total
Edit the following Python code to improve its readability. def calctrade():
 c=50
 b=50
 while (c > 0 and b > 0):
  c–
  b-=2
 return c + b def calculate_trade():
 coal = 50
 barley = 50
 while coal > 0 and barley > 0:
  coal -= 1
  barley -= 2
 return coal + barley
Create a Python program to print numbers from 1 to 10 in reverse order.  for i in range(10, 0, -1):
    print(i)
Design a class in Python for hashing passwords.  import hashlib
 
class PasswordHasher:
 
    def __init__(self, algorithm='sha256'):
        self.algorithm = algorithm
 
    def generate_hash(self, password):
        """
        Generates a hash string using the given algorithm.
        """
        hash_value = hashlib.new(self.algorithm)
        hash_value.update(password.encode('utf-8'))
        return hash_value.hexdigest()
Develop a Python program that parses a given HTML page. <html>
<head>
  <title>Example web page</title>
</head>
<body>
  <h1>Hello world</h1>
  <div>
     <p>This is an example web page</p>
  </div>
</body>
</html> from bs4 import BeautifulSoup

html_page = '''
<html>
<head>
  <title>Example web page</title>
</head>
<body>
  <h1>Hello world</h1>
  <div>
     <p>This is an example web page</p>
  </div>
</body>
</html>
'''

soup = BeautifulSoup(html_page, 'html.parser')
print(soup.title.string)

for tag in soup.find_all('div'):
 print(tag.p.string)
Design a Python program to record data from a given list of dictionaries. [{'name':'John', 'age':25, 'team':'A'}, {'name':'Mark', 'age':30, 'team':'B'}] data = [
    {'name': 'John', 'age': 25, 'team': 'A'}, 
    {'name': 'Mark', 'age': 30, 'team': 'B'}
]

records = []
for item in data:
    record = {}
    for key, value in item.items():
        record[key] = value
    records.append(record)

print(records)
Generate a Python program to randomly fill the elements of an NxN matrix with a number 1  from random import randint
 
def fill_matrix(n):
    matrix = [[0 for y in range(n)] for x in range(n)]
    for i in range(n):
        for j in range(n):
            matrix[i][j] = randint(1,9)
    return matrix
Create a function in Python that takes two strings and returns the Levenshtein distance between them.  def levenshteinDistance(str1, str2): 
    m = len(str1) 
    n = len(str2) 
    dp = [[0 for x in range(n + 1)] for x in range(m + 1)] 
  
# base cases 
    for i in range(m + 1): 
        dp[i][0] = i 
    for j in range(n + 1): 
        dp[0][j] = j
  
    # fill the dp table 
    for i in range(1, m + 1): 
        for j in range(1, n + 1): 
            if str1[i - 1] == str2[j - 1]: 
                dp[i][j] = dp[i - 1][j - 1] 
            else: 
                dp[i][j] = 1 + min(dp[i][j - 1],        # Insert 
                                   dp[i - 1][j],        # Remove 
                                   dp[i - 1][j - 1])    # Replace 
  
    return dp[m][n]
This code converts bedtools cluster output of merged breakdancer calls into a feature table. To use it, you need to provide a bed file containing clustered deletion calls as an argument. You can also use the optional flag "--bd" or "-b" to indicate whether the input file has BreakDancer formatted IDs or 10X formatted IDs. The output feature table will have columns for each sample indicating the presence of each deletion. To run the code, execute the script and provide the required arguments.  #!/usr/bin/env python3
# Copyright (c) 2017  Genome  Research  Ltd.
# Author: Alistair Dunham
# This  program  is free  software: you  can  redistribute  it and/or  modify  it  under
# the  terms  of the  GNU  General  Public  License  as  published  by the  Free  Software
# Foundation; either  version 3 of the  License , or (at your  option) any  later
# version.
# This  program  is  distributed  in the  hope  that it will be useful , but  WITHOUT
# ANY  WARRANTY; without  even  the  implied  warranty  of  MERCHANTABILITY  or  FITNESS
# FOR A PARTICULAR  PURPOSE. See  the  GNU  General  Public  License  for  more
# details.
# You  should  have  received a copy of the  GNU  General  Public  License  along  with
# this  program. If not , see <http :// www.gnu.org/licenses/>.

## Script to convert bedtools cluster output of merged breakdancer calls into a feature table
## which has columns for each sample indicating the presence of each deletion
import argparse
import fileinput
import re

## Read arguments
parser = argparse.ArgumentParser(description="Transform bedtools cluster output for deletion calls into a feature table of 'genotypes'.")
parser.add_argument('tenx',metavar='T',type=str,help="Bed file containing clustered deletion calls")
parser.add_argument('--bd','-b',action='store_true',help="Expect BreakDancer formatted IDs. Otherwise expect 10X formatted IDs.")
args = parser.parse_args()

## Determine function to use for setting sample ID depending on given source format
if args.bd:
	def getSample(x):
		"""Extract sample from BreakDancer formatted ID tags"""
		return(re.split("[_.]",x)[-2])
else:
	def getSample(x):
		"""Extract sample from 10X formatted ID tags"""
		return(x.split('.')[0])
	

## Extract each deletion call and its cluster number
dels = []
samples = set()
with fileinput.input(args.tenx) as bed:
	for li in bed:
		t = li.strip().split()
		s = getSample(t[3])
		n = int(t[4])
		samples.add(s)
		if len(dels) < n:
			dels.append(set([s]))
		
		else:
			dels[n - 1].add(s)


## Print feature table
samples = sorted(list(samples))
print("Deletion",*samples,sep='\t')
for n,delSamples in enumerate(dels):
	## generate feature string
	feats = [(1 if i in delSamples else 0) for i in samples]
	print('_'.join(["del",str(n + 1)]),*feats,sep='\t')

Write a function to generate a prime number sequence using Python.  def generate_prime_numbers(n): 
        primes = [True for i in range(n+ 1)] 
        p = 2
        while (p * p <= n): 
            if (primes[p] == True): 
                for i in range(p * p, n + 1, p): 
                    primes[i] = False
            p += 1
        primes[0] = False
        primes[1] = False
        for p in range(n + 1): 
            if primes[p]: 
                print(p)
Develop a game AI in Python using a minimax algorithm for playing the game of Noughts and Crosses. Not applicable # Import the necessary libraries 
import numpy as np 
  
# Function to determine the available moves 
def get_available_moves(board): 
    available = [] 
    for i in range(3): 
        for j in range(3): 
            if board[i][j] == 0: 
                available.append((i, j)) 
    return available 
  
# Function to check if terminal state is reached 
def is_game_over(board): 
    # If any of the row, columns of the board has same elements across 
    # any row, then the game is over 
    for i in range(3): 
        # checking across columns 
        if board[i][0]==board[i][1] and board[i][1]==board[i][2] and board[i][0]!=0: 
            return True
  
        # checking across rows 
        if board[0][i]==board[1][i] and board[1][i]==board[2][i] and board[0][i]!=0: 
            return True
  
    # checking across diagonals 
    if board[0][0]==board[1][1] and board[1][1]==board[2][2] and board[0][0]!=0: 
        return True
  
    if board[0][2]==board[1][1] and board[1][1]==board[2][0] and board[0][2]!=0: 
        return True
  
    # If no element has a combination to make a game over,  
    # then the comparison continues 
    return False
  
# Function for implementing the minimax algorithm 
def minimax(board, depth, isMax): 
    # If game is over, return the score 
    if is_game_over(board): 
        # Winner of the game has score of 1 
        if depth % 2 != 0: 
            return 1 
  
        # Looser of the game has score of -1 
        else: 
            return -1
  
    # If no game over state is reached,  
    # find the scores for all available moves  
    scores = [] 
    available_moves = get_available_moves(board) 
    for move in available_moves: 
        x, y = move[0], move[1] 
  
        # If it is max player's turn  
        # assign 'X' to the empty space 
        # and value as 1 
        if isMax: 
            board[x][y] = 1
            val = minimax(board, depth + 1, False) 
  
        # If it is min player's turn 
        # assign 'O' to the empty space 
        # and value as 0 
        else: 
            board[x][y] = 0
            val = minimax(board, depth + 1, True) 
  
        # Assign the initial value as empty 
        board[x][y] = 0
        scores.append(val) 
  
    # If it is Max player's turn, pick the maximum score 
    if isMax: 
        maximum = max(scores) 
        return maximum 
  
    # If it is Min player's turn, pick the minimum score 
    else: 
        minimum = min(scores) 
        return minimum 
  
# Function for finding the best move 
def best_move(board): 
    available_moves = get_available_moves(board) 
    b_score = -2
    best_move = None
  
    # Iterate through every empty cells  
    for move in available_moves: 
        x, y = move[0], move[1] 
        board[x][y] = 1
        score = minimax(board, 0, False) 
        board[x][y] = 0
        if score > b_score: 
            b_score = score
            best_move = [x, y] 
  
    return best_move
Design a python program that returns the third smallest element from a given list. x = [4,5,6,7,2,9] def thirdSmallest(x):
    y = sorted(x)[2]
    return y
Create a program in Python that takes two parameters, a string and an integer, and returns the string repeated that many times. "Hello", 4 def repeat_string(string, n):
    repeated_string = string * n
    return repeated_string

print(repeat_string("Hello", 4))
Construct a Python function to insert a node at the head of a given linked list. Not applicable class Node:
 def __init__(self, data):
  self.data = data
  self.next = None

class LinkedList:
 def __init__(self):
  self.head = None
  
 # Recursive function to insert a node at the beginning of the linked list 
 def insert_at_head(self, new_node): 
  current_head = self.head 
  new_node.next = current_head
  self.head = new_node

list = LinkedList()
list.insert_at_head(Node(1))
Write a python program to calculate the sum of series 1 + 1/3 + 1/5 + ....  """
Calculate the sum of series 1 + 1/3 + 1/5 + ...
"""

def sum_series(n):
    result = 0 
    for i in range(1, n+1):
        result += (1 / (2 * i - 1))
    return result
 
if __name__ == '__main__':
    n = 5
    print(sum_series(n))
Develop a Python program to calculate the sum of all the elements in an array. Array = [1,2,3,4,5] def calculateSum(arr, n): 
	# Initialize result 
	sum = 0
	
	# using foreach loop to find sum 
	for i in arr: 
		sum += arr[i] 
	
	return sum

# Driver code 
arr = [1,2,3,4,5]
n = len(arr) 

print("Sum is",calculateSum(arr, n))
Write a Python program to generate a random string of length 20 characters with equal proportions of upper and lowercase letters, digits and special symbols. Not applicable import string
import random

length = 20
all_chars = string.ascii_letters + string.digits + string.punctuation

random_str = ''.join(random.choice(all_chars) for _ in range(length))

print('Random string of length {}: {}'.format(length, random_str))
Write a matrix multiplication algorithm in Python using two-dimensional lists. Not applicable def matrix_mul(A,B):
 if len(A[0]) != len(B):
   raise ValueError('The column of matrix A must be equal to the row of matrix B')
 
 # Create the result matrix C
 C = [[sum(A[i][k] * B[k][j] for k in range(len(B))) for j in range(len(B[0]))] for i in range(len(A))]
 
 return C
 
 A = [[1,2], [3,4]]
 B = [[5,6], [7,8]]
 
 product = matrix_mul(A,B)
 
 print(product)
Write a neural network in Python to classify handwritten digits from 0 to 9.  import keras 
from keras.datasets import mnist 
from keras.models import Model 
from keras.layers import Input, Dense, Dropout, Flatten 
from keras.layers import Conv2D, MaxPooling2D 

def create_model():
    # Define the input layer
    inputs = Input(shape=(28, 28, 1))
    
    # 1st convolutional layer
    conv = Conv2D(64, kernel_size=3, activation='relu')(inputs) 
    # 2nd convolutional layer 
    conv = Conv2D(32, kernel_size=3, activation='relu')(conv) 
    # Max pooling layer 
    pool = MaxPooling2D(pool_size=(2, 2))(conv) 
    # Dropout layer 
    drop = Dropout(0.25)(pool) 
    # Flatten layer 
    flatten = Flatten()(drop) 
    # Dense layer 
    dense = Dense(128, activation='relu')(flatten) 
    # Output layer 
    outputs = Dense(10, activation='softmax')(dense) 
    
    # Create a model and compile it 
    model = Model(inputs, outputs) 
    model.compile(loss='categorical_crossentropy', metrics=['accuracy'], optimizer='adam')
    
    return model
Optimize the following code in Python to reduce its complexity. def my_function(n):
    result = 0
    for i in range(n):
        for j in range(n):
            for k in range(n):
                result = result + i * j * k
    return result def my_function(n):
    result = 0

    # Loop through all possible pairs of i and j
    for i in range(n):
        for j in range(n):
            # Multiply each pair and add it to the result
            result += i * j * (n - 1)

    return result
Develop a python program to solve the 0-1 Knapsack Problem values = [20, 5, 10, 40, 15, 25] 
weights = [1, 2, 3, 8, 7, 4]
capacity = 10 # A Dynamic Programming based 
# Python program for 0-1 Knapsack problem 
# Returns th maximum value that can 
# be put in a knapsack of capacity W 
def knapSack(W, wt, val, n): 

    # Base Case 
    if n == 0 or W == 0: 
        return 0

    # If weight of the nth item is more than Knapsack of capacity 
    # W, then this item cannot be included in the optimal solution 
    if wt[n-1] > W: 
        return knapSack(W, wt, val, n-1) 

    # return the maximum of two cases: 
    # (1) nth item included 
    # (2) not included 
    else: 
        return max(val[n-1] + knapSack(W-wt[n-1], wt, val, n-1), 
                    knapSack(W, wt, val, n-1)) 

# Driver program to test above function 
values = [20, 5, 10, 40, 15, 25] 
weights = [1, 2, 3, 8, 7, 4] 
capacity = 10
n = len(values) 

print(knapSack(capacity, weights, values, n))
Create a Python function for converting a list to a dictionary. The function should take a list of key-value tuples and return a dictionary. [('a', 1), ('b', 2), ('c', 3)] def list_to_dict(input_list):
 result = {}
 for key, value in input_list:
 result[key] = value
 return result

list_to_dict([('a', 1), ('b', 2), ('c', 3)]) 
#{'a': 1, 'b': 2, 'c': 3}
Create a Python program to compare two lists and find their common elements. list1 = [1, 2, 3, 4, 5]
list2 = [3, 4, 5, 6, 7] def compare_lists(list1, list2):
    common_elements = []
    for element in list1:
        if element in list2:
            common_elements.append(element)
    return common_elements

list1 = [1, 2, 3, 4, 5]
list2 = [3, 4, 5, 6, 7]

common_elements = compare_lists(list1, list2)
print(common_elements)
Can you write a Python program to extract the list of email addresses from a given webpage?  import re
import requests

def extract_email_addresses(url):
    r = requests.get(url)
    emails = re.findall(r"[a-z0-9\.\-+_]+@[a-z0-9\.\-+_]+\.[a-z]+", r.text)
    return emails

email_list = extract_email_addresses('https://example.org')

for email in email_list:
    print(email)
Construct a Python program to calculate the age in years of a person given their birthdate. 06/11/1996 import datetime

def calculate_age(birthdate):

    today = datetime.date.today()
    current_year = today.year

    age = current_year - birthdate.year

    if ((birthdate.month, birthdate.day) > (today.month, today.day)):
        age -= 1
    
    return age

birthdate = datetime.date(1996, 6, 11)
age = calculate_age(birthdate)
print(age) # 24
Create a Python function to evaluate a given polynomial equation P(x) = x^2 - 4x + 6 def poly_evaluation(x):
  return x**2 - 4*x + 6

x = 2
result = poly_evaluation(x)
print(result) # prints 0
Write a Python program to detect the largest word in a sentence. The program should take a string as input and return the largest word found in it. This sentence has seven words. def find_largest_word(sentence):
 splits = sentence.split(' ')
 largest_word = ""
 for word in splits:
 if len(word) > len(largest_word):
 largest_word = word
 return largest_word

print(find_largest_word("This sentence has seven words."))
# Output: "sentence"
Create a Python script to remove all elements from a list that are divisible by 3. [2, 3, 4, 6, 8, 9] def remove_divisible_by_3(arr):
    new_arr = []
    for num in arr:
        if num % 3 != 0:
            new_arr.append(num)
    return new_arr

arr = [2, 3, 4, 6, 8, 9]
result = remove_divisible_by_3(arr)
print(result)
Create a class in Python that represents an employee object with three attributes - employee ID, name and salary. Not applicable class Employee:
 def __init__(self, employee_id, name, salary):
 self.employee_id = employee_id
 self.name = name
 self.salary = salary

 def __repr__(self):
 return 'Employee({}, {}, {})'.format(self.employee_id, self.name, self.salary)
Design a machine learning algorithm in Python that can identify whether a given sentence is an 'affirmative' sentence or a 'negative' sentence.  import re 
import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords 

# Function to find the negation words
def findNegation(sentence):
    # save all the negation words
    negationwords = {'not', 'never', 'no', 'none', 'non', 'neither',
                     'nobody', 'nowhere', 'cannot', 'couldnt', 'shouldnt', 
                     'wouldnt', 'dont', 'didnt', 'hasnt', 'havent', 'isnt', 'arent'} 
    words = nltk.word_tokenize(sentence)
    neg = []
    for word in words:
        if word in negationwords:
            neg.append(word)
    return neg

# Function to check if the sentence is affirmative or negative
def isAffirmativeorNegative(sentence):
     negationwords = findNegation(sentence)
    if len(negationwords)==0: 
        return "Affirmative" 
    else: 
        return "Negative"    

sentence = "He always comes late but I dont mind."
result = isAffirmativeorNegative(sentence) 
print(result)  # prints Negative
Create a Python program to check if an integer is divisible by 5 Integer : 10 def is_divisible_by_5(number):
    if (number % 5 == 0):
        return True
    else:
        return False
    
number = 10
is_divisible_by_5(number)
Refactor the following Python code to improve its readability and make it easier to maintain: images = list()
for item in allitems:
 if item.endswith('.jpg'):
 images.append(item) images = [item for item in allitems if item.endswith('.jpg')]
Write a Python program to sort a list of lists of integers by the first element of the sublists. The list should be sorted in ascending order. [[2, 4, 6], [1, 9, 8], [3, 7, 5]] def sortList(lst): 
    lst.sort(key = lambda x: x[0]) 
    return lst 
  
result = sortList([[2, 4, 6], [1, 9, 8], [3, 7, 5]]) 
print(result)
Create an algorithm in Python that finds the longest consecutive subarray within a given array. array = [1, 2, 3, 4, 5, 6, 7] def longest_consecutive_subarray(array): 
    longest_length = 0
    current_length = 0
   Hash = {} 
    
    for val in array: 
        if val not in Hash: 
            Hash[val] = 1
            current_length += 1
            
            if current_length > longest_length: 
                longest_length = current_length 
                
        else: 
            current_length = 0
    
    return longest_length
Design a genetic algorithm in Python to maximize the value of a given function. f(x) = x^2 - 4x + 3 import random

# function to calculate the value of a function
def func(x): 
  return x**2 - 4*x + 3

# population size
pop_size = 50

# range of initial values of x
x_range = [-20, 20]

# mutation rate
mutation_rate = 0.02

# maximum generation allowed
max_generation = 100

# function to generate a random population
def initial_population(pop_size, x_range):
  population = []
  for _ in range(pop_size): 
    x = random.randint(*x_range)
    population.append(x)
  return population

# function to calculate the current fitness of a given population
def calculate_fitness(population): 
  fitness = []
  for x in population:
    fx = func(x)
    fitness.append(fx)
  return fitness

# function to evolve the population to the next generation
def evolve_population(population, mutation_rate): 
  population_fitness = calculate_fitness(population)
  idx_max_fit = population_fitness.index(max(population_fitness))

  new_population = []
  for idx, x in enumerate(population):
    if idx == idx_max_fit: 
      new_population.append(x)
    else:
      mutation_chance = random.random()
      if mutation_chance <= mutation_rate: 
        new_x = x + random.randint(-1, 1)
        new_population.append(new_x)
      else: 
        new_population.append(x)
  return new_population

# generate the population
population = initial_population(pop_size, x_range)

# main loop of the genetic algorithm
for i in range(max_generation):
  population = evolve_population(population, mutation_rate)

# obtain the fittest solution
population_fitness = calculate_fitness(population)
idx_max_fit = population_fitness.index(max(population_fitness))
max_fitness_solution = population[idx_max_fit]

# print out the fittest solution
print("Max fitness: ", max(population_fitness))
print("Max fitness solution: ", max_fitness_solution)
Write a function in Python that takes in a linked list and a value, and checks to see if the value is contained within the list. Head -> 4 -> 8 -> 15 -> 16 -> 23 -> 42 -> null
Value: 15 def contains(head, value):
 current = head
 while current is not None:
 if current.data == value:
 return True
 current = current.next
 return False

head = Node(4)
head.next = Node(8)
head.next.next = Node(15)
head.next.next.next = Node(16)
head.next.next.next.next = Node(23)
head.next.next.next.next.next = Node(42) 

val = 15

print(contains(head, val))
# Output : True
Write a web crawler using Python Scrapy which starts from a URL and follows all the hyperlinks on the page until a given depth is reached. The URL to start the crawl and a maximum depth of two levels. import scrapy
from scrapy.spiders import CrawlSpider, Rule
from scrapy.linkextractors import LinkExtractor

class MySpider(CrawlSpider):
 name = 'crawler'
 allowed_domains = ['example.com']
 start_urls = ['http://example.com/']
 
 rules = [
 Rule(LinkExtractor(allow=()), follow=True, callback='parse_item', process_links='filter_links', max_depth=2)
 ]

def filter_links(self, links):
 # Filter the links to follow
 filtered_links = []
 for link in links:
 if link.url not in self.visited_urls and link.url.startswith(self.domain):
 filtered_links.append(link)
 return filtered_links

def parse_item(self, response):
 # Parse the page
 pass
Translate English sentence "Choose a random number" into Python code.  import random

random_number = random.randint(1,100)
print("Random number:", random_number)
Module a Python program that takes two numbers and computes the sum of their squares. 3, 4 def squared_sum(a, b):
    """
    Computes the sum of the squares of two given numbers
    """
    return a**2 + b**2

if __name__ == '__main__':
    a = 3
    b = 4
    result = squared_sum(a, b)
    print('The sum of {} and {} squares is: {}'.format(a, b, result))
Replace the for-loop in the following Python function with an equivalent while loop. def count_down(value):
    ret = 1
    for i in range(value, 0, -1):
        ret *= i
    return ret def count_down(value):
    ret = 1
    while value > 0:
        ret *= value
        value -= 1
    return ret
Generate a Django script to create a new Django project with an app called 'users'. <no input> # Create the project
django-admin startproject mysite

# Move to the project directory
cd mysite

# Create the users app
python manage.py startapp users

# Update the settings
vi  mysite/settings.py

# Add 'users' to the 'INSTALLED_APPS' list
INSTALLED_APPS = [
    ...
    'users',
]

# Create the database
python manage.py migrate

# Create the models
vi  users/models.py

# Add the User model
class User(models.Model):
    username = models.CharField(max_length=50)
    email = models.EmailField()
    name = models.CharField(max_length=50)

# Create the admin user
python manage.py createsuperuser

# Run the server
python manage.py runserver
Optimize the given code in Python to reduce its complexity my_list = [1, 2, 3, 4, 5]
total = 0

for x in my_list:
    total = total + x my_list = [1, 2, 3, 4, 5]
total = sum(my_list)

print("Sum of all elements in given list:", total)
Generate a program for searching for a pattern in a string using Python and the Boyer Moore pattern matching algorithm. Input string: "Hello World!" 
Pattern to search for: "World" """
Search for a pattern in a string using the Boyer Moore pattern matching algorithm
"""

def boyer_moore(text, pattern):
    # Initialize the index buffer and the location of the target pattern
    index_buffer = {}
    index = -1

    # Preprocess the patterns
    for i in range(len(pattern) - 1, -1, -1):
        if pattern[i] in index_buffer:
            index_buffer[pattern[i]].append(i)
        else:
            index_buffer[pattern[i]] = [i]

    # Search through the text until the target pattern is found
    while index == -1:
        for i in range(0, len(pattern)):
            if pattern[i] != text[i]:
                if pattern[i] in index_buffer:
                    try:
                        ind = index_buffer[pattern[i]][-1]
                    except:
                        return -1
                    i = i - (ind - i)
                else:
                    i = i + len(pattern)
        
        if pattern == text[0:len(pattern)]:
            index = 0
        else:
            text = text[1:]
    
    return index

# Test
text = "Hello World!"
pattern = "World"
    
index = boyer_moore(text, pattern)

if index >= 0:
    print("Pattern found at index " + str(index))
else:
    print("Pattern not found")
Write a Python program that inputs two sorted lists of numbers and produces a sorted result list which contains all the elements in both input lists list1 = [1,2,3,4,5]
list2 = [6,7,8,9,10] def sorted_list_merge(list1, list2):
    result = []
    index1 = 0
    index2 = 0
    while index1 < len(list1) and index2 < len(list2):
        if list1[index1] < list2[index2]:
            result.append(list1[index1])
            index1 += 1
        else:
            result.append(list2[index2])
            index2 += 1
    result += list1[index1:] + list2[index2:]
    return result
Write a Python program to create a list consisting of the squares of all the odd numbers between two given numbers m and n.  def list_odd_squares(m, n):
  squares = []
  for i in range(m, n+1):
    if i % 2 != 0:
      squares.append(i*i)
  return squares
Write a Python program to find all pairs of numbers in a given list whose sum is equal to a given target number.  def find_pairs_with_sum(nums, target):
    found_pairs = []
    for i in range(len(nums)):
        for j in range(i + 1, len(nums)):
            if nums[i] + nums[j] == target:
                found_pairs.append([nums[i], nums[j]])
    return found_pairs
Write a python program for performing linear regression.  #import the modules
import matplotlib.pyplot as plt 
import numpy as np 
  
#set the independent and dependent variables 
x = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) 
y = np.array([1, 3, 2, 5, 7, 8, 8, 9, 10, 12]) 

#calculate the mean
x_mean = np.mean(x) 
y_mean = np.mean(y) 
  
# Calculate the b1 and b0 
numerator = 0
denominator = 0
for i in range(len(x)): 
    numerator += (x[i] - x_mean)*(y[i] - y_mean) 
    denominator += (x[i] - x_mean)**2 
b1 = numerator / denominator 
b0 = y_mean - (b1 * x_mean) 

# Print the coefficients
print("b1 =", b1) 
print("b0 =", b0)  
  
# Plotting Values and Regression Line 
max_x = np.max(x) + 100
min_x = np.min(x) - 100
  
# Calculating line values x and y 
x1 = np.linspace(min_x, max_x, 1000) 
y1 = b0 + b1 * x1 
  
# Ploting Line 
plt.plot(x1, y1, color='#00ff00', label='Linear Regression') 
  
# Ploting Scatter Points 
plt.scatter(x, y, color='#ff0000', label='Scatter Plot') 
  
# Add title
plt.title("Linear Regression") 

# Show the plot
plt.show()
Construct a code that identifies the sum of elements of an array in Python. [4, 6, 8, 2] def sum_elements(arr):
    summ = 0
    for i in arr: 
        summ += i
    return summ

summ = sum_elements([4, 6, 8, 2])
print(summ)
Create a neural network in Python which can classify a given set of food posters as either Italian or Mexican. Train Data:
Italian:
- Pizza poster
- Lasagna poster
- Spaghetti poster
Mexican:
- Burrito poster
- Enchilada poster
- Taco poster import tensorflow as tf

# Set up the input and output data
X = tf.placeholder(tf.float32, shape=[None, 3])
y = tf.placeholder(tf.float32, shape=[None, 2])

# Define the model
model = tf.keras.Sequential()
model.add(tf.keras.layers.Dense(6, activation=tf.nn.relu))
model.add(tf.keras.layers.Dense(2, activation=tf.nn.softmax))

# Train the model
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

model.fit(X, y, epochs=10)
Create a Python program to generate a random IP address.  import random

def generateRandomIP():
    ip = ".".join(str(random.randint(0,255)) for i in range(4))
    return ip

ip_address = generateRandomIP()
print("Random IP address:", ip_address)
Design an algorithm using Python to select the kth largest element from a list. [5, 10, 15, 20, 25] def getKthLargest(arr, k): 
    arr.sort() 
  
    # Return the k'th largest element
    return arr[len(arr)-k]
Propose a series of Python commands for downloading the content of a web page.  import requests

page_url = 'https://www.example.com'  
page = requests.get(page_url)

content = page.content
Create a python code to migrate databases between different server instances.  import os
import subprocess

def migrate_database(host1, username1, password1, host2, username2, password2):
    command_str = "mysqldump -h '{host1}' -u '{username1}' -p{password1} \
            | mysql -h '{host2}' -u '{username2}' -p{password2}"
    os.system(command_str.format(host1 = host1, username1 = username1, password1 = password1,
                                host2 = host2, username2 = username2, password2 = password2))
Implement a search engine in Python to perform basic search operations like exact search, wildcard etc.  import re

def basic_search(text, pattern):
    """ A basic search to find 'pattern' in 'text' """
    # Find all matches
    matches = re.findall(pattern, text)
    # Output a list of all matches
    return matches

def exact_search(text, pattern):
    """ An exact search to find 'pattern' in 'text' """
    # Find all matches
    matches = re.findall(r'\b' + pattern + r'\b', text)
     # Output a list of all matches
    return matches

def wildcard_search(text, pattern):
    """ A wildcard search to find 'pattern' in 'text' """
    # Create a regex pattern from the input pattern 
    regex_pattern = re.escape(pattern).replace(r'\*', '.*')
    # Find all matches 
    matches = re.findall(regex_pattern, text)
    # Output a list of all matches
    return matches
Create a Python program to generate a report of top 10 customers who have spent the most in a store. A csv file containing the customer id and the amount spent import csv

# Read the csv file
with open('customer_data.csv', 'r') as f:
 reader = csv.DictReader(f)

 # Create a dictionary to store the customer data
 customer_data = {}

 # Iterate over the rows
 for row in reader:
  # Get the customer id and amount spent
  customer_id = row['customer_id']
  amount_spent = float(row['amount_spent'])
  
  # Add the customer data to the dictionary
  if customer_id in customer_data:
   customer_data[customer_id] += amount_spent
  else:
   customer_data[customer_id] = amount_spent

# Sort the customers by amount spent
customers_sorted = sorted(
 customer_data, 
 key=lambda customer_id: customer_data[customer_id], 
 reverse=True) 

# Print out the top 10 customers
for customer_id in customers_sorted[:10]:
 print(f"Customer {customer_id} spent {customer_data[customer_id]}")
Generate a Python program for creating a tiered dictionary with nested keys and values. Not applicable def generate_dict(keys, values):
 n = len(keys)
 if n != len(values):
  return None

 dct = {}
 for i in range(n):
  dct[keys[i]] = values[i] if i == (n-1) else generate_dict(keys[:i+1], values[i])

 return dct

keys = [‘a’, ‘b’, ‘c’, ‘d’]
values = [1, 2, 3, 4]
result = generate_dict(keys, values)
print(result)
Create a function in Python which takes 3 arrays as input, and returns the arrays merged together into a single array. [1, 2, 3], [4, 5, 6], [7, 8, 9] def merge_arrays(arr1, arr2, arr3):
    combined_arr = arr1 + arr2 + arr3
    return combined_arr

result = merge_arrays([1, 2, 3], [4, 5, 6], [7, 8, 9])
print(result)
Convert the given array to an array of dictionaries in Python. array = [["a", 1], ["b", 2], ["c", 3]] [{'a': 1}, {'b': 2}, {'c': 3}]
Define a function in Python that takes two strings and returns a new string which is the concatenation of the two. "Hello" and "World" def concatenate_two_strings(str_1, str_2):
    return str_1 + str_2

conc_str = concatenate_two_strings("Hello", " World")
print(conc_str)
Develop a function in Python that takes a string and an integer as input and returns the string with the length of the integer. 'Hello World', 5 def truncateString(inputString, length):
    return inputString[:length]

print(truncateString('Hello World', 5))
Write a Python program to convert a list to a tuple [1,2,3] def list_to_tuple(list):
    return tuple(list)
Write a Python program to print a calendar of the given month and year month = 11
year = 2020 import calendar

c = calendar.TextCalendar(calendar.SUNDAY)
str = c.formatmonth(year, month)
print(str)
In python, write a function that takes in two numbers and returns the sum of their digits.  def sum_digits(a,b):
    #convert each number to string
    a = str(a)
    b = str(b)
    #initialize sum
    sum = 0
    for i in range(len(a)): 
        sum += int(a[i]) 
    for i in range(len(b)): 
        sum += int(b[i]) 
    #return sum
    return sum
What is the best way to query a MySQL database in Python?  The best way to query a MySQL database in Python is by using the MySQL Connector/Python library. It is an official Oracle-supported driver that allows you to easily connect with MySQL databases and execute queries. It provides a Python Database API that complies with the Python Database API Specification v2.0. The library also has support for prepared statements, transactions, and more.
Write a Python program to accept a string input from the user and print each character in a list. String: "Hello World" user_input = input("Enter a string: ")

char_list = []

for char in user_input:
 char_list.append(char)

print(char_list)
Create a Python code for reversing a given string.  def reverse_string(str):
    rev_str = ""
    for ch in str: 
        rev_str = ch + rev_str 
    return rev_str
  
string = "Hello World"
print(reverse_string(string))
Create an object in Python that has two properties: name and year.  class Person:
  def __init__(self, name, year):
    self.name = name
    self.year = year

person = Person("Jane", 1998)
Generate a Markov Chain model in Python which can produce text with a specific given style based on a sample text. Sample text: "This is an example of a text with a specific style." import random

def generate_markov_chain(text):
  words = text.split()
  markov_dict = {}

  for i in range(len(words) - 1):
    if words[i] in markov_dict:
      markov_dict[words[i]].append(words[i + 1])
    else:
      markov_dict[words[i]] = [words[i + 1]]

  return markov_dict

def generate_text(markov_dict, length=50):
  current_word = random.choice(list(markov_dict.keys()))
  text = [current_word]

  for i in range(length):
    if current_word in markov_dict:
      current_word = random.choice(markov_dict[current_word])
      text.append(current_word)
    else:
      current_word = random.choice(list(markov_dict.keys()))
      text.append(current_word)
  
  return ' '.join(text)

sample_text = "This is an example of a text with a specific style."
markov_dict = generate_markov_chain(sample_text)
generated_text = generate_text(markov_dict)

print(generated_text)
Create a neural network architecture in Python for predicting the values of a time series dataset.  model = Sequential()

model.add(LSTM(50, activation='relu', input_shape=(n_timesteps, n_features)))

model.add(Dense(100, activation='relu'))
model.add(Dropout(0.5))

model.add(Dense(n_outputs))
model.add(Activation('linear'))

model.compile(loss='mean_squared_error', optimizer='adam', metrics=['accuracy'])

# fit network
model.fit(X_train, y_train, epochs=50, batch_size=72, verbose=2)
Create a Bitcoin wallet application using Python. This application should have endpoints for creating a wallet, sending coins to another wallet, and retrieving the balance of a wallet. Wallet address: 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa import hashlib
import base58

class BitcoinWallet:
 def __init__(self):
  self.address = None
  self.public_key = None
  self.private_key = None
  self.balance = 0

 def generate_keys(self):
  priv_key = hashlib.sha256(os.urandom(64)).hexdigest()
  public_key = hashlib.sha256(priv_key.encode('utf-8')).hexdigest()
  self.private_key = priv_key
  self.public_key = public_key
  self.address = self.generate_address()

 def generate_address(self):
  address = hashlib.new('ripemd160', self.public_key.encode('utf-8')).hexdigest()
  address_encoded = base58.b58encode_check(address)
  return address_encoded

 def send_coins(self, recipient, amount):
  ...

 def check_balance(self):
  ...
Create a Python function that sorts a list of strings alphabetically [‘apple’,’orange’,’pear’] def sort_strings(list_of_strings):
    sorted_list = sorted(list_of_strings, key=lambda str: str.lower())
    return sorted_list

result = sort_strings(['apple', 'orange', 'pear'])
print(result)
Write a Python code to convert a given list of strings to all lowercase. ['CoDE', 'OF', 'LinK'] def to_lowercase(strings):
    return [string.lower() for string in strings]
    
result = to_lowercase(['CoDE', 'OF', 'LinK'])
print(result)
Generate a function in Python to decode Base64 encoded strings.  import base64

def decode_base64(string):
    decoded_string = base64.b64decode(string).decode('utf-8')
    return decoded_string
Design an algorithm in Python that takes in a list of numbers and prints out the first and last element in the list. lst=[5,3,1,7,9] def first_last(lst):
    first_element = lst[0]
    last_element = lst[-1]
    return [first_element, last_element]

print(first_last([5,3,1,7,9]))
Create a Python program for finding the second highest number in a list. [1, 2, 3, 4, 5] def findSecondHighest(lst): 
  max = float("-inf")
  sec_max = float("-inf")
	
  for num in lst: 
    if (num > max): 
      sec_max = max 
      max = num 
    elif (num > sec_max): 
      sec_max = num	
  return sec_max

print(findSecondHighest([1, 2, 3, 4, 5]))
Implement a function in Python that takes a number as an argument and returns true if the number is even, false otherwise.  def is_even(number):
    if (number % 2 == 0):
        return True
    else:
        return False
Develop a recursive algorithm in Python for generating permutations of a given set of elements. Not applicable def permutations(s): 
 if len(s) == 0: 
  return [] 
 if len(s) == 1: 
  return [s] 
 l = [] # empty list that will store current permutation 
 # Iterate the input(s) and calculate the permutation 
 for i in range(len(s)): 
   m = s[i] 
   rem = s[:i] + s[i+1:] 
   for p in permutations(rem): 
    l.append([m] + p) 
 return l
Create a web service in Django for calculating tip amount from a restaurant bill. Not applicable # create the Django project
django-admin startproject tip_calculator

# create the application within the project
cd tip_calculator
python manage.py startapp calculator

# define the model for the Tip
# in calculator/models.py

from django.db import models

class Tip(models.Model):
    bill_amount = models.FloatField()
    tip_percentage = models.FloatField()
    tip_amount = models.FloatField()

# define the calculator view
# in calculator/views.py

from django.shortcuts import render
from .models import Tip
from django.http import HttpResponse

def calculator(request):
    if request.method == 'POST':
        bill_amount = float(request.POST.get('bill_amount'))
        tip_percentage = float(request.POST.get('tip_percentage'))

        # calculate the tip amount
        tip_amount = bill_amount * tip_percentage / 100

        # save the tip to the database
        tip = Tip(bill_amount=bill_amount,
                  tip_percentage=tip_percentage,
                  tip_amount=tip_amount)
        tip.save()

        return HttpResponse('Tip amount is: {}'.format(tip_amount))

    else:
        return render(request, 'calculator/calculator.html')

# create the URL for accessing the calculator
# in tip_calculator/urls.py

from django.urls import path
from calculator import views

urlpatterns = [
    path('calculator/', views.calculator),
]
Design a function in Python that takes a decimal number and returns its binary equivalent.  def dec_to_bin(number):
  # Convert decimal to binary
  binary = bin(number)
  # Remove prefix "0b"
  binary = binary[2:]
  # Return binary
  return binary
  
decimal = 10
binary = dec_to_bin(decimal)
print(binary)
Create a game in Python using OpenGL. The game should be a basic 3D maze. The maze should contain walls, a starting point, and an exit point. Not applicable import OpenGL
from OpenGL.GL import *
from OpenGL.GLU import *

from math import pi, cos, sin

# Variables that will be used for the game
width = 15    #Maze width
height = 15   #Maze height
keyDistance = 3.0  #Distance between keys

# Define constants used to create the maze
MAZE_WALL = 0
MAZE_EXIT = 2
MAZE_EMPTY = 1

# Create the maze
maze = [
    [0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0],
    [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0],
    [1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0],
    [0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1],
    [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0],
    [1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1],
    [1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1],
    [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0],
    [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1],
    [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0],
    [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0],
    [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0],
    [1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0],
    [0, 0, 0, 0, 1, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0]
]
# The starting position
posX = 0.0
posY = 0.0

# The rotation angle of the camera
angle = 0.0

#Draw each maze world
def draw_maze():
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
    glLoadIdentity()
    
    glTranslatef(-float(width)/2.0, -float(height)/2.0, -5.0)
    glRotatef(angle,0.0,1.0,0.0)
    glTranslatef(posX, posY, 0)

    # Draw each of the cubes in the maze
    for x in range(width):
        for y in range(height):
            # Select the appropriate shade for the cube
            if maze[y][x] == MAZE_WALL:
                glColor3f(0.0, 0.0, 0.0)
            elif maze[y][x] == MAZE_EXIT:
                glColor3f(1.0, 0.0, 0.0)
            elif maze[y][x] == MAZE_EMPTY:
                glColor3f(1.0, 1.0, 1.0)
            # Draw the cube
            glPushMatrix()
            glTranslatef(x, y, 0.0)
            draw_cube(1.0)
            glPopMatrix()

    glutSwapBuffers()

# Determine the position of the camera and key presses
def update(dt):
    global angle, posX, posY
    
    # Check for key presses
    keys = glutGetModifiers()
    if keys & GLUT_ACTIVE_ALT:
        # Rotate the camera
        angle += 5.0
    if keys & GLUT_ACTIVE_SHIFT:
        # Move the camera backward
        posX -= keyDistance * cos(angle * pi/180.0)
        posY -= keyDistance * sin(angle * pi/180.0)
    if keys & GLUT_ACTIVE_CTRL:
        # Move the camera forward
        posX += keyDistance * cos(angle * pi/180.0)
        posY += keyDistance * sin(angle * pi/180.0)

# Draw a cube. The cube is of size 1 and is centered around the origin
def draw_cube(size):
    halfSize = size / 2.0

    glBegin(GL_LINE_STRIP)
    glVertex3f(-halfSize,-halfSize, halfSize)
    glVertex3f( halfSize,-halfSize, halfSize)
    glVertex3f( halfSize, halfSize, halfSize)
    glVertex3f(-halfSize, halfSize, halfSize)
    glVertex3f(-halfSize,-halfSize, halfSize)
    glEnd()

    glBegin(GL_LINE_STRIP)
    glVertex3f(-halfSize,-halfSize,-halfSize)
    glVertex3f( halfSize,-halfSize,-halfSize)
    glVertex3f( halfSize, halfSize,-halfSize)
    glVertex3f(-halfSize, halfSize,-halfSize)
    glVertex3f(-halfSize,-halfSize,-halfSize)
    glEnd()

    glBegin(GL_LINES)
    glVertex3f(-halfSize,-halfSize, halfSize)
    glVertex3f(-halfSize,-halfSize,-halfSize)

    glVertex3f( halfSize,-halfSize, halfSize)
    glVertex3f( halfSize,-halfSize,-halfSize)

    glVertex3f( halfSize, halfSize, halfSize)
    glVertex3f( halfSize, halfSize,-halfSize)

    glVertex3f(-halfSize, halfSize, halfSize)
    glVertex3f(-halfSize, halfSize,-halfSize)
    glEnd()
Generate a program in Python to implement quick sort on an array of integers. [6, 9, 20, 1, 11, 46] def quicksort(arr):
    if len(arr) <= 1:
        return arr
    else:
        pivot = arr[0]
        less_than_pivot = [x for x in arr[1:] if x <= pivot]
        greater_than_pivot = [x for x in arr[1:] if x > pivot]

        return quicksort(less_than_pivot) + [pivot] + quicksort(greater_than_pivot)
 
arr = [6, 9, 20, 1, 11, 46]
print ("Quick Sort: " + str(quicksort(arr)))
Write a function in Python to find the longest substring in a string that is palindromic. str = "forgeeksskeegeekefrogg" def longestPalindromicSubstring( str):
 n = len(str)
 
 # table[i][j] will be false if substring str[i..j] 
 # is not palindrome. 
 # Else table[i][j] will be true
 table = [[0 for x in range(n)] for y 
                                  in range(n)] 
  
 # All substrings of length 1 are palindromes 
 maxLength = 1
 i = 0
 while (i < n): 
  table[i][i] = True
  i = i + 1
  
 # check for substring of length 2. 
 start = 0
 i = 0
 while i < n-1: 
  if (str[i] == str[i + 1]): 
   table[i][i + 1] = True
   start = i 
   maxLength = 2
  i = i + 1
  
 # Check for lengths greater than 2. k is length 
 # of substring 
 k = 3
 while k <= n: 
  # Fix the starting index 
  i = 0
  while i < (n-k+1): 
   # Get the ending index of substring from 
   # starting index i and length k 
   j = i + k - 1
  
   # checking for sub-string from ith index to 
   # jth index iff str[i+1] to 
   # str[j-1] is a palindrome 
   if (table[i+1][j-1] and
           str[i] == str[j]): 
    table[i][j] = True
  
    if (k > maxLength): 
     start = i 
     maxLength = k 
   i = i + 1
  k = k + 1
 print ("Longest palindrome substring is: ") 
 print  (str[start:start + maxLength]) 
  
  # return length of LPS 
 return maxLength
Create a python function that randomly selects three numbers from a given list and sort them in descending order. [4, 7, 9, 11, 33, 2] import random

def sort_numbers(lst):
    nums = random.sample(lst, 3)
    nums.sort(reverse=True)

    return nums

nums = [4, 7, 9, 11, 33, 2]
sorted_nums = sort_numbers(nums)

print(sorted_nums) # [33, 11, 9]
Build a student grade calculator using Python, given the following grades and weights: Exam 1: 95%, Exam 2: 80%, Homework: 100%, weighting: Exam 1: 0.5, Exam 2: 0.3, Homework: 0.2 Exam 1: 95%, Exam 2: 80%, Homework: 100%, weighting: Exam 1: 0.5, Exam 2: 0.3, Homework: 0.2 def grade_calculator(exam1, exam2, hw):
    grade = (exam1 * 0.5) + (exam2 * 0.3) + (hw * 0.2)
    return grade

grade = grade_calculator(95, 80, 100)
print(grade) # 91.0
Construct a stack class in Python to perform push, pop, isEmpty, and peek operations.  class Stack:
     def __init__(self):
         self.items = []

     def isEmpty(self):
         return self.items == []

     def push(self, item):
         self.items.append(item)

     def pop(self):
         return self.items.pop()

     def peek(self):
        return self.items[len(self.items)-1]
Create a program in Python that takes a string as input and returns the longest word found in the string. "The quick brown fox jumps over the lazy dog" def find_longest_word(string): 
 words = string.split(" ") 
 longest_word = ' '
 for cur_word in words: 
 if len(cur_word) > len(longest_word): 
 longest_word = cur_word 
 return longest_word 

# Driver Code 
string = "The quick brown fox jumps over the lazy dog"
longest_word = find_longest_word(string) 
print(f"The longest word from given string is: {longest_word}")
Design a Python function which takes two strings as inputs and returns whether they are permutations of each other. string1 = "abc"
string2 = "cba" def is_permutation(string1, string2):
 if len(string1) != len(string2):
 return False
 char_map = {}
 for char in string1:
 char_map[char] = char_map.get(char, 0) + 1
 for char in string2:
 if char_map.get(char, 0) == 0:
 return False
 char_map[char] -= 1
 return True

string1 = "abc"
string2 = "cba"
print(is_permutation(string1, string2)) # Output: True
This code defines a Python function called `dd_hyperbolic_single` that runs a Bayesian analysis of the Delay Discounting Task using the Hyperbolic Model. The function takes in a data set in the form of a Pandas DataFrame, a file path, or the string "example", and returns an `hbayesdm.TaskModel` instance with various components, including the fitted model and raw data. The function has several optional arguments that allow for customization of the analysis, such as the number of iterations, number of chains, and initial values. To use the function, call `dd_hyperbolic_single()` with the desired arguments.  from typing import Sequence, Union, Any
from collections import OrderedDict

from numpy import Inf, exp
import pandas as pd

from hbayesdm.base import TaskModel
from hbayesdm.preprocess_funcs import dd_single_preprocess_func

__all__ = ['dd_hyperbolic_single']


class DdHyperbolicSingle(TaskModel):
    def __init__(self, **kwargs):
        super().__init__(
            task_name='dd',
            model_name='hyperbolic',
            model_type='single',
            data_columns=(
                'subjID',
                'delay_later',
                'amount_later',
                'delay_sooner',
                'amount_sooner',
                'choice',
            ),
            parameters=OrderedDict([
                ('k', (0, 0.1, 1)),
                ('beta', (0, 1, 5)),
            ]),
            regressors=OrderedDict([
                
            ]),
            postpreds=['y_pred'],
            parameters_desc=OrderedDict([
                ('k', 'discounting rate'),
                ('beta', 'inverse temperature'),
            ]),
            additional_args_desc=OrderedDict([
                
            ]),
            **kwargs,
        )

    _preprocess_func = dd_single_preprocess_func


def dd_hyperbolic_single(
        data: Union[pd.DataFrame, str, None] = None,
        niter: int = 4000,
        nwarmup: int = 1000,
        nchain: int = 4,
        ncore: int = 1,
        nthin: int = 1,
        inits: Union[str, Sequence[float]] = 'vb',
        ind_pars: str = 'mean',
        model_regressor: bool = False,
        vb: bool = False,
        inc_postpred: bool = False,
        adapt_delta: float = 0.95,
        stepsize: float = 1,
        max_treedepth: int = 10,
        **additional_args: Any) -> TaskModel:
    """Delay Discounting Task - Hyperbolic Model

    Individual Bayesian Modeling of the Delay Discounting Task 
    using Hyperbolic Model [Mazur1987]_ with the following parameters:
    "k" (discounting rate), "beta" (inverse temperature).

    

    
    .. [Mazur1987] Mazur, J. E. (1987). An adjustment procedure for studying delayed reinforcement.

    

    User data should contain the behavioral data-set of all subjects of interest for
    the current analysis. When loading from a file, the datafile should be a
    **tab-delimited** text file, whose rows represent trial-by-trial observations
    and columns represent variables.

    For the Delay Discounting Task, there should be 6 columns of data
    with the labels "subjID", "delay_later", "amount_later", "delay_sooner", "amount_sooner", "choice". It is not necessary for the columns to be
    in this particular order; however, it is necessary that they be labeled
    correctly and contain the information below:

    - "subjID": A unique identifier for each subject in the data-set.
    - "delay_later": An integer representing the delayed days for the later option (e.g. 1, 6, 28).
    - "amount_later": A floating point number representing the amount for the later option (e.g. 10.5, 13.4, 30.9).
    - "delay_sooner": An integer representing the delayed days for the sooner option (e.g. 0).
    - "amount_sooner": A floating point number representing the amount for the sooner option (e.g. 10).
    - "choice": If amount_later was selected, choice == 1; else if amount_sooner was selected, choice == 0.

    .. note::
        User data may contain other columns of data (e.g. ``ReactionTime``,
        ``trial_number``, etc.), but only the data within the column names listed
        above will be used during the modeling. As long as the necessary columns
        mentioned above are present and labeled correctly, there is no need to
        remove other miscellaneous data columns.

    .. note::

        ``adapt_delta``, ``stepsize``, and ``max_treedepth`` are advanced options that
        give the user more control over Stan's MCMC sampler. It is recommended that
        only advanced users change the default values, as alterations can profoundly
        change the sampler's behavior. See [Hoffman2014]_ for more information on the
        sampler control parameters. One can also refer to 'Section 34.2. HMC Algorithm
        Parameters' of the `Stan User's Guide and Reference Manual`__.

        .. [Hoffman2014]
            Hoffman, M. D., & Gelman, A. (2014).
            The No-U-Turn sampler: adaptively setting path lengths in Hamiltonian Monte Carlo.
            Journal of Machine Learning Research, 15(1), 1593-1623.

        __ https://mc-stan.org/users/documentation/

    Parameters
    ----------
    data
        Data to be modeled. It should be given as a Pandas DataFrame object,
        a filepath for a data file, or ``"example"`` for example data.
        Data columns should be labeled as: "subjID", "delay_later", "amount_later", "delay_sooner", "amount_sooner", "choice".
    niter
        Number of iterations, including warm-up. Defaults to 4000.
    nwarmup
        Number of iterations used for warm-up only. Defaults to 1000.

        ``nwarmup`` is a numerical value that specifies how many MCMC samples
        should not be stored upon the beginning of each chain. For those
        familiar with Bayesian methods, this is equivalent to burn-in samples.
        Due to the nature of the MCMC algorithm, initial values (i.e., where the
        sampling chains begin) can have a heavy influence on the generated
        posterior distributions. The ``nwarmup`` argument can be set to a
        higher number in order to curb the effects that initial values have on
        the resulting posteriors.
    nchain
        Number of Markov chains to run. Defaults to 4.

        ``nchain`` is a numerical value that specifies how many chains (i.e.,
        independent sampling sequences) should be used to draw samples from
        the posterior distribution. Since the posteriors are generated from a
        sampling process, it is good practice to run multiple chains to ensure
        that a reasonably representative posterior is attained. When the
        sampling is complete, it is possible to check the multiple chains for
        convergence by running the following line of code:

        .. code:: python

            output.plot(type='trace')
    ncore
        Number of CPUs to be used for running. Defaults to 1.
    nthin
        Every ``nthin``-th sample will be used to generate the posterior
        distribution. Defaults to 1. A higher number can be used when
        auto-correlation within the MCMC sampling is high.

        ``nthin`` is a numerical value that specifies the "skipping" behavior
        of the MCMC sampler. That is, only every ``nthin``-th sample is used to
        generate posterior distributions. By default, ``nthin`` is equal to 1,
        meaning that every sample is used to generate the posterior.
    inits
        String or list specifying how the initial values should be generated.
        Options are ``'fixed'`` or ``'random'``, or your own initial values.
    ind_pars
        String specifying how to summarize the individual parameters.
        Current options are: ``'mean'``, ``'median'``, or ``'mode'``.
    model_regressor
        Whether to export model-based regressors. Currently not available for this model.
    vb
        Whether to use variational inference to approximately draw from a
        posterior distribution. Defaults to ``False``.
    inc_postpred
        Include trial-level posterior predictive simulations in
        model output (may greatly increase file size). Defaults to ``False``.
    adapt_delta
        Floating point value representing the target acceptance probability of a new
        sample in the MCMC chain. Must be between 0 and 1. See note below.
    stepsize
        Integer value specifying the size of each leapfrog step that the MCMC sampler
        can take on each new iteration. See note below.
    max_treedepth
        Integer value specifying how many leapfrog steps the MCMC sampler can take
        on each new iteration. See note below.
    **additional_args
        Not used for this model.

    Returns
    -------
    model_data
        An ``hbayesdm.TaskModel`` instance with the following components:

        - ``model``: String value that is the name of the model ('dd_hyperbolic_single').
        - ``all_ind_pars``: Pandas DataFrame containing the summarized parameter values
          (as specified by ``ind_pars``) for each subject.
        - ``par_vals``: OrderedDict holding the posterior samples over different parameters.
        - ``fit``: A PyStan StanFit object that contains the fitted Stan model.
        - ``raw_data``: Pandas DataFrame containing the raw data used to fit the model,
          as specified by the user.
        

    Examples
    --------

    .. code:: python

        from hbayesdm import rhat, print_fit
        from hbayesdm.models import dd_hyperbolic_single

        # Run the model and store results in "output"
        output = dd_hyperbolic_single(data='example', niter=2000, nwarmup=1000, nchain=4, ncore=4)

        # Visually check convergence of the sampling chains (should look like "hairy caterpillars")
        output.plot(type='trace')

        # Plot posterior distributions of the hyper-parameters (distributions should be unimodal)
        output.plot()

        # Check Rhat values (all Rhat values should be less than or equal to 1.1)
        rhat(output, less=1.1)

        # Show the LOOIC and WAIC model fit estimates
        print_fit(output)
    """
    return DdHyperbolicSingle(
        data=data,
        niter=niter,
        nwarmup=nwarmup,
        nchain=nchain,
        ncore=ncore,
        nthin=nthin,
        inits=inits,
        ind_pars=ind_pars,
        model_regressor=model_regressor,
        vb=vb,
        inc_postpred=inc_postpred,
        adapt_delta=adapt_delta,
        stepsize=stepsize,
        max_treedepth=max_treedepth,
        **additional_args)

Create a web scraper in Python that downloads a list of news articles. The script should take a URL as an input and produce a list of articles from that page. Each article should have the URL, title, author and publication date. https://www.nytimes.com/ import requests
from bs4 import BeautifulSoup

# URL to scrape
url = "https://www.nytimes.com/"

# Make a GET request to fetch the raw HTML content
html_content = requests.get(url).text

# Parse the html content
soup = BeautifulSoup(html_content, "lxml")

# News Section
news_Section = soup.find("div", class_="css-1qwxefa esl82me1")
# print(news_Section)

# News Articles
articles = news_Section.find_all("h2", class_="e1xfvim30")
# print(articles)

# Empty list to store all news articles
news_list = []

# Loop over each article
for article in articles:
    # Extract the title of the article
    title = article.find("a").text

    # Extract the author of the article
    author = article.find("span", class_="css-1n7hynb").text
    
    # Extract the date the article was published
    date = article.find("time").text
    
    # Extract the URL of the article
    link = article.find("a")["href"]
    
    # Store all the information in one dictionary
    news_dict = {
        "title": title,
        "author": author,
        "date": date,
        "link": link
    }
    
    # Append the dictionary to the list
    news_list.append(news_dict)

# Print the list
print(news_list)
Create python code to implement a decision tree classifier. Not applicable import numpy as np
from sklearn import datasets

class DecisionTreeClassifier():

 def __init__(self):
 self.tree = None

 def fit(self, X, y):
 self.tree = self._build_tree(X, y)

 def predict(self, X):
 return [self._predict(x, self.tree) for x in X]

 def _build_tree(self, X, y):
# build decision tree
def _predict(self, x, node):
# predict class
return node.label
Implement a Python program to find all unique combinations of words from a given array of words. words = ["Test", "Example", "Unique"] def find_combinations(words):
    if len(words) == 1:
        return words

    combinations = []
    for i in range(len(words)):
        for j in range(len(words)):
            if i != j:
                combinations.append(words[i] + words[j])

    return combinations

combinations = find_combinations(["Test", "Example", "Unique"])
print("Combinations:", combinations)
Generate code to de-serialize JSON into Python objects data_json = '{"name":"John Doe","age":18,"hobbies":["reading","swimming","gaming"],"contact":{"email":"johndoe@example.com","mobile":"+1900000000"}}' import json

data = json.loads(data_json)

# Output:
data = {
 "name": "John Doe",
 "age": 18,
 "hobbies": ["reading", "swimming", "gaming"],
 "contact": {
  "email": "johndoe@example.com",
  "mobile": "+1900000000"
 }
}
Develop a program in Python that generates the Fibonacci Series.  def fib(n):
 a, b = 0, 1
 while a < n:
 print(a, end=" ")
 a, b = b, a+b
 print()

n = int(input("Enter the number of terms: "))
fib(n)
Write a Python script to train a sentiment classifier on a given dataset. Dataset containing sentences and labels, where each label represents the sentiment of the associated sentence. import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression

df = pd.read_csv('dataset.csv')

X_train, X_test, y_train, y_test = train_test_split(df['text'], df['label'], random_state=0)

vectorizer = TfidfVectorizer().fit(X_train)
X_train_vectorized = vectorizer.transform(X_train)

model = LogisticRegression(max_iter=1000).fit(X_train_vectorized, y_train)

y_pred = model.predict(vectorizer.transform(X_test))
Create a function in Python that returns the fibonacci series until the 10th index.  def fibonacci_series(n): 
    # Creating an array to store fibonacci numbers till 10th index 
    fibonacci = [0, 1] 
      
    # Append the next number in the series till 10th index 
    while(len(fibonacci) < n + 1): 
        fibonacci.append(fibonacci[-1] + fibonacci[-2]) 
      
    # return the value at 10th index 
    return fibonacci[n]
Use the following data and develop a random forest classifier in Python to predict the species type. [5, 2, 4, 1, 3]	iris-setosa
[7, 3, 5, 1, 2]	iris-versicolor
[9, 5, 4, 2, 3]	iris-virginica import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier

data = [[5,2,4,1,3], [7,3,5,1,2], [9,5,4,2,3]]
labels = ['iris-setosa', 'iris-versicolor', 'iris-virginica']

df = pd.DataFrame(data, columns=['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'class'])
X = df.iloc[:, :4]
y = df['class']

X_train, X_test, y_train, y_test = train_test_split(
    X, 
    y,
    train_size=0.8, 
    test_size=0.2, 
    random_state=0
)

clf = RandomForestClassifier(n_estimators=100, random_state=0, max_depth=2)
clf.fit(X_train, y_train)
print("Accuracy of Random Forest classifier on training set:{:.2f}".format(clf.score(X_test, y_test)))
Write a Python program to take a string as input and return a new string with all vowels removed.  def remove_vowels(string):
    # compile regex
    regex = re.compile('[aeiou]', re.IGNORECASE)
    # replace matching characters with an empty string
    return regex.sub('', string)
Create a machine learning model in Python to predict the airline’s ticket prices, given some input values.  def build_model(input_values):
    # Build the model code
    return model
Write a Python program to compute the probability of an event based on the input data. data = {'success': 833, 'failure': 917} def probability_calc(data):
    total = data['success'] + data['failure']
    return data['success']/total
Create a function in Python that will sort a list of tuples based on the second elements in the tuples. [(2, 1), (3, 7), (6, 5)] def sort_by_second_element(tuples):
    return sorted(tuples, key=lambda element: element[1])

// testing
tuples_list = [(2, 1), (3, 7), (6, 5)]
print("Original list of tuples:")
print(tuples_list)
print("Sorted list of tuples based on the second element of tuples:")
print(sort_by_second_element(tuples_list))
Design a recursive function in Python that calculates the Fibonacci sequence to the nth number. n = 10 def fib(n):
 if n == 0:
  return 0
 elif n == 1:
  return 1
 else:
  return fib(n-1) + fib(n-2)

num = 10
print("The Fibonacci sequence to the " + str(num) +"th number is:")
for i in range(num):
 print(fib(i))
Build an Artificial Neural Network in Python using Keras. Not applicable import numpy as np
from keras.models import Sequential
from keras.layers import Dense, Flatten, Conv2D, MaxPooling2D

# Building a neural network model
model = Sequential()
model.add(Dense(32, activation='relu', input_shape=(784,)))
model.add(Dense(64, activation='relu'))
model.add(Dense(64, activation='relu'))
model.add(Dense(10, activation='softmax'))

# Compiling the model
model.compile(optimizer='adam',
 loss='categorical_crossentropy',
 metrics=['accuracy'])

# Fit the model
model.fit (x_train, y_train, epochs=5, batch_size=32)

# Evaluate the model
model.evaluate(x_test, y_test)
Design a Python program to find out the number of unique keywords used in documents. A list of documents: 

['The quick brown fox jumps over the lazy dog', 'The quick brown fox jumps over the lazy dog again', 'The quick brown fox jumps over the lazy dog again and again'] documents = ['The quick brown fox jumps over the lazy dog', 'The quick brown fox jumps over the lazy dog again', 'The quick brown fox jumps over the lazy dog again and again']

# Get the words from the documents
words = []
for doc in documents:
 words += doc.split()

# Get the unique words
unique_words = set(words)

# Print the number of unique words
print(f'The number of unique words is {len(unique_words)}')
Create an optimization program in Python using stochastic gradient descent (SGD) to solve a linear regression problem. Example data points [1,3], [2,5], [3,7], [4,11] import numpy as np
 
x = np.array([[1,3], [2,5], [3,7], [4,11]])
y = np.array([8,13,18,23])

alpha = 0.01
theta = np.zeros(2)
iterations = 1000

def sgd(x, y, theta, alpha, m, iterations):
 for _ in range(iterations):
 for i in range(m):
 h = np.dot(x[i], theta)
 loss = h - y[i]
 gradient = x[i] * loss * (2/m)
 theta = theta - alpha * gradient
 
 return theta

optimal_theta = sgd(x, y, theta, alpha, x.shape[0], iterations)
print(optimal_theta)
Design a class in Python to create a custom data structure.  class CustomDataStructure:
    def __init__(self):
        self.data = []
 
    def appendData(self, val):
        self.data.append(val)
 
    def getData(self):
        return self.data
 
    def removeData(self, index):
        self.data.pop(index)
Add a try-catch block to the given Python code x = 10
y = 0
z = x/y try:
  x = 10
  y = 0
  z = x/y
except ZeroDivisionError:
  print("ZeroDivisionError occurred: Cannot divide a number by 0")
Create a Python function that takes a string and a pattern, and returns the number of times the pattern appears in the string. string = "hello hello world"
pattern = "hello" def countSubstring(string, sub_string):
  count = 0 
  for i in range(0, len(string)-len(sub_string)+1):
    if (string[i:i+len(sub_string)] == sub_string):
      count+=1
  return count
  
print(countSubstring(string, pattern))
Create a Python function for converting a Celsius temperature to Fahrenheit scale.  def celsius_to_fahrenheit(celsius):
    return (celsius * (9/5)) + 32
Implement a function in Python that takes a list of integers and a number and returns a list of numbers that have the given number as their sum. lst = [1, 2, 3, 4]
num = 4 def find_combos(lst, num):
 result = []
 for i in range(len(lst)):
 for j in range(i+1, len(lst)):
 if lst[i] + lst[j] == num:
 result.append([lst[i], lst[j]])
 return result

print(find_combos([1, 2, 3, 4], 4))

# Output: [[1, 3], [2, 2], [3, 1]]
Design a class in Python for storing movie information including the name, year of release, genre and rating.  class Movie:
    def __init__(self, name, release_year, genre, rating):
        self.name = name
        self.release_year = release_year
        self.genre = genre
        self.rating = rating

movie = Movie("Interstellar", 2014, "Sci-Fi", 8.4)
print(movie.name, movie.release_year, movie.genre, movie.rating)
Write a Python program to take a list of numbers and reverse the order of the elements in the list in place. [1, 2, 3, 4, 5] def reverse_list(numbers):
 # get the length of the list
 n = len(numbers)

 # loop through the list
 for i in range(n // 2):
 # swap the elements
 numbers[i], numbers[n - i - 1] = numbers[n - i - 1], numbers[i]

numbers = [1, 2, 3, 4, 5]
reverse_list(numbers)
print(numbers) # [5, 4, 3, 2, 1]
Create a Python program which takes a list of words as input, and prints out the frequent words. Words: ["python", "is", "a", "programming", "language"] from collections import Counter

words = ["python", "is", "a", "programming", "language"]

word_count = Counter(words) 

for k,v in word_count.items(): 
    print(k,v) 

# To get the most frequent word 
most_freq_word = max(word_count, key=word_count.get) 

print("Most frequent word is:", most_freq_word)
The given code is a Python class called `isoMeasurer` that inherits from another class called `Measurer`. It contains methods for making isophotal measurements on astronomical images, including getting the file path for the contours of the isophotes, making measurements on a map and writing them to a CSV file, making a visual panel to display the composite image and the isophotal measurements, and getting the contours from an image. The class also contains some helper methods for converting between different units and for reading and writing Python pickle files. To use this code, create an instance of the `isoMeasurer` class and call its methods with appropriate parameters.  # isomeasurer.py 
# ALS 2017/06/01
import os
import astropy.units as u
from astropy.io import fits
import numpy as np
import astropy.table as at
import pickle
import scipy.ndimage as simg


from ..measurer import Measurer
from ... import tabtools
from . import polytools
from . import plottools

class isoMeasurer(Measurer):

	def __init__(self, **kwargs):
		"""
		child of Measurer
		do isophotal measurements
		"""
		super(isoMeasurer, self).__init__(**kwargs)

		self.msrtype = 'iso'


	def get_fp_contours(self, imgtag='OIII5008_I', onlycenter=False, suffix=''):
		""" e.g., msr_iso-OIII5008_I{suffix}_contours.pkl 
			\or   msr_iso-OIII5008_I{suffix}_contours-ctr.pkl 
		"""
		if onlycenter:
			ctrtag = '-ctr'
		else:
			ctrtag = ''

		fp_root = self.get_fp_msrtagroot(imgtag=imgtag, suffix=suffix)
		return fp_root+'_contours{ctrtag}.pkl'.format(ctrtag=ctrtag)


	def make_measurements(self, imgtag='OIII5008_I', isocut=3.e-15*u.Unit('erg / (arcsec2 cm2 s)'), minarea=5, onlycenter=True, centerradius=5.*u.arcsec, plotsuffix='', savecontours=False, plotmsr=False, msrsuffix='', overwrite=False, append=False):
		"""
		make measurements on a map and write to msr_iso.csv. 
			if imgtag='OIII5008_I' then measure 'stamp-OIII5008_I.fits'

		Params
		------
		self
		imgtag='OIII5008_I'
		overwrite = False (bool)

		isocut=1.e-15*u.Unit('erg / (arcsec2 cm2 s)'):
			isophote cut
		minarea=0:
			connected contour area (# pix) above the area is counted as part of the isophote measurement
		onlycenter=False:
			whether to consider only the center contours
		centerradius=2.*u.arcsec
		plotsuffix = '':
			plotsuffix label to be attach to the end of the plot or contour file names. 
		savecontours=False
		plotmsr=False
		msrsuffix=''
			plotsuffix label in the end of the measurement csv file: msr_iso_{msrsuffix}.csv.
		overwrite=False
		append=False

		Return
		------
		status (bool)

		Write Output 
		------------
		e.g., msr_iso.csv
		"""
		fn = self.get_fp_msr(msrsuffix=msrsuffix)

		condi = {'imgtag': imgtag, 'isocut': isocut, 'minarea': minarea, 'onlycenter': onlycenter, 'centerradius': centerradius}

		if append or overwrite or (not tabtools.fn_has_row(fn, condi)):
			print("[isomeasurer] making measurement")

			img = self.get_stamp_img(imgtag=imgtag, wunit=True)
			xc, yc = self._get_xc_yc(img)

			# calc
			if np.all(~np.isnan(img)): 
				contours = self._get_contours_from_img(img=img, isocut=isocut, xc=xc, yc=yc, minarea=minarea, onlycenter=onlycenter, centerradius=centerradius)
				tab_msr = self._get_tab_measurements_from_contours(contours=contours, xc=xc, yc=yc)
			else: 
				contours = []
				tab_msr = self._get_tab_measurements_nan()

			tab_params = self._get_tab_params(imgtag=imgtag, isocut=isocut, minarea=minarea, onlycenter=onlycenter, centerradius=centerradius)
			tabout = at.hstack([tab_params, tab_msr])

			# output
			tabtools.write_row(fn=fn, row=tabout, condi=condi, overwrite=overwrite, append=append)

			# optional output
			if savecontours:
				fn_contours = self.get_fp_contours(imgtag=imgtag, onlycenter=onlycenter, suffix=plotsuffix)
				write_pickle(contours, fn_contours, overwrite=overwrite)

			if plotmsr:
				fn_plot = self.get_fp_msrplot(imgtag=imgtag, suffix=plotsuffix)
				plottools.make_plot_img_w_contours(fn_plot=fn_plot, img=img, contours=contours)

		else:
			print("[isomeasurer] skip making measurement as files exist")

		return os.path.isfile(fn)


	def make_visualpanel(self, fn=None, compo_bands ='gri', imgtag='OIII5008_I', onlycenter=True, minarea=5, centerradius=5.*u.arcsec, tocolorbar=True, totitle=True, fontsize=12, overwrite=False):
		""" 
		make panel figure to visualize the composit and the iso measurements
		saved to e.g., 'msr_iso-OIII5008_I_panel.pdf'

		Params
		------
		fn = None: default: msr_iso_{imgtag}_panel.pdf
		compo_bands ='gri', imgtag='OIII5008_I', overwrite=False

		Return
		------
		status
		"""
		if fn is None:
			fn = self.get_fp_msrplot(imgtag=imgtag, suffix='_panel')
		else: 
			fn = self.dir_obj+fn

		if not os.path.isfile(fn) or overwrite:
			print("[isomeasurer] making visual panel")

			# get files ready 
			self.make_colorimg(bands=compo_bands, img_type='stamp', overwrite=False)

			# access data
			img_compo = simg.imread(self.dir_obj+'color_stamp-{}.png'.format(compo_bands))
			img_map = self.get_stamp_img(imgtag=imgtag, wunit=False)

			suffix = '_3e-15'
			isocut = 3.e-15*u.Unit('erg / (arcsec2 cm2 s)')
			fn_contours3 = self.get_fp_contours(imgtag=imgtag, onlycenter=onlycenter, suffix=suffix)
			if not os.path.isfile(fn_contours3):
				print("[isomeasurer] re-doing measurements to make contours required for visual panel plots")
				self.make_measurements(imgtag=imgtag, isocut=isocut, plotsuffix=suffix, minarea=minarea, onlycenter=onlycenter, centerradius=centerradius, overwrite=True, savecontours=True, plotmsr=False), 

			contours3 = read_pickle(fn_contours3)

			suffix = '_1e-15'
			isocut = 1.e-15*u.Unit('erg / (arcsec2 cm2 s)')
			fn_contours1 = self.get_fp_contours(imgtag=imgtag, onlycenter=onlycenter, suffix=suffix)
			if not os.path.isfile(fn_contours1):
				print("[isomeasurer] re-doing measurements to make contours required for visual panel plots")
				self.make_measurements(imgtag=imgtag, isocut=isocut, plotsuffix=suffix, minarea=minarea, onlycenter=onlycenter, centerradius=centerradius, overwrite=True, savecontours=True, plotmsr=False), 

			contours1 = read_pickle(fn_contours1)

			z = self.z
			pixsize = self.pixsize.to_value(u.arcsec)
			legend_suffix = ' at 3'
			name = self.obj.name[4:]

			title_compo = '${}~{}~{}~$'.format(compo_bands[0], compo_bands[1], compo_bands[2])+'$\mathrm{Composite}$'
			title_map = '$\mathrm{[OIII]\lambda 5007~Intensity}$'
			label_cbar = '$I~[10^{-15}~\mathrm{erg~s^{-1}~cm^{-2}~arcsec^{-2}}]$'

			plottools.make_iso_visual_panel(fn, img_compo, img_map, contours1, contours3, z, pixsize, legend_suffix, name, title_compo, title_map, label_cbar, tocolorbar=tocolorbar, totitle=totitle, fontsize=fontsize)

		else:
			print("[isomeasurer] skip making visual panel as files exist")

		return os.path.isfile(fn)

		
	def _get_tab_params(self, imgtag, isocut, minarea, onlycenter, centerradius):
		"""
		return a one row table of the measurement params 
		"""
		tab = at.Table([[imgtag], [str(isocut)], [minarea], [onlycenter], [str(centerradius)], ], names=['imgtag', 'isocut', 'minarea', 'onlycenter', 'centerradius', ])
		return tab


	def _get_tab_measurements_from_contours(self, contours, xc, yc):
		""" 
		calculate iso measurements from contours, return a table like: 
		"""

		tab = polytools.ShapeParamsTab_from_contours(contours, xc, yc)

		# unit conversion
		area_ars = tab['area_pix'][0]*(self.pixsize/u.arcsec)**2
		dmax_ars = self._pix_to_theta(tab['dmax_pix'][0], wunit=False)
		rmax_ars = self._pix_to_theta(tab['rmax_pix'][0], wunit=False)
		dper_ars = self._pix_to_theta(tab['dper_pix'][0], wunit=False)

		kpc_per_arcsec = np.array(self._get_kpc_proper_per_arcsec())

		area_kpc = area_ars * kpc_per_arcsec**2
		dmax_kpc = dmax_ars * kpc_per_arcsec
		rmax_kpc = rmax_ars * kpc_per_arcsec
		dper_kpc = dper_ars * kpc_per_arcsec

		tab_converted = at.Table(names=['area_kpc', 'dmax_kpc', 'rmax_kpc', 'dper_kpc', 'area_ars', 'dmax_ars', 'rmax_ars', 'dper_ars', ])
		tab_converted.add_row([area_kpc, dmax_kpc, rmax_kpc, dper_kpc, area_ars, dmax_ars, rmax_ars, dper_ars, ])

		tabout = at.hstack([tab_converted, tab])

		return tabout


	def _get_tab_measurements_nan(self):
		""" 
		return a tab measurement just like _get_tab_measurements_from_contours() but with entries all nan. 
		"""
		names = ['area_kpc', 'dmax_kpc', 'rmax_kpc', 'dper_kpc', 'area_ars', 'dmax_ars', 'rmax_ars', 'dper_ars', 'area_pix', 'dmax_pix', 'rmax_pix', 'dper_pix', 'theta_dmax', 'theta_rmax', 'theta_dper', 'aspectr']

		tabout = at.Table(names=names)
		tabout.add_row([np.nan for i in range(len(names))])

		return tabout


	def _get_contours_from_img(self, img, isocut, xc, yc, minarea=0., onlycenter=False, centerradius=2.*u.arcsec):
		"""
		make contour at isocut of image as python pickle file (fn_contours)
		always overwrite

		Params
		------
		self
		img (array)
		isocut (float or quantity):
			has to be of the same type of unit as image
		minarea (float):
			minimum area (pix) to be considered as contour patch
		onlycenter (bool):
			whether to take only center patches as patches (they all have to pass minarea test as well)
		centerradius (angular quantity):
			if onlycenter = True, then it sets the radius of the center area. only patches overlapping with that area will be considered. 

		"""

		# prep
		try: 
			img.unit
		except:
			img_nparr = img/isocut
		else:
			img_nparr = np.array((img/isocut).to(u.dimensionless_unscaled))

		# find contours -- satisfy minarea
		contours = polytools.find_largecontours(img=img_nparr, threshold=1., minarea=minarea)

		if onlycenter:  # select only those at the center
			centerradius_pix = self._theta_to_pix(centerradius)
			contours = polytools.select_center_contours(contours, xc, yc, radius=centerradius_pix)

		return contours



def read_pickle(fn):
	with open(fn, 'rb') as handle:
		result = pickle.load(handle)
	return result


def write_pickle(result, fn, overwrite=False):

	if not os.path.isfile(fn) or overwrite:
		with open(fn, 'wb') as handle:
			pickle.dump(result, handle)


Generate a program in Python which takes a list of integers as an argument and prints the odd numbers in ascending order. list = [1, 2, 3, 4, 5, 6, 7] def print_odd_numbers(numbers):
    for num in sorted(numbers):
        if num % 2 != 0:
            print(num)

print_odd_numbers([1, 2, 3, 4, 5, 6, 7])
# Output: 1, 3, 5, 7
Write a python program that will generate a password containing numbers and letters from an entered string. Hello def generate_password(word):
      # initialize variables 
    password = ""
    letters = ""
    numbers = ""

    # create new password
    for i in range(0, len(word)):
      letters += word[i]
      numbers += str(i)

    password = letters + numbers
    return password

print(generate_password("Hello"))
Generate a function in Python to check if a given number is a palindrome (a number which remains the same on reversing its digits).  def isPalindrome(n):
    temp = n
    rev = 0
    while(temp > 0): 
        rev = (rev * 10) + (temp % 10) 
        temp = temp // 10
    if n == rev:
        return True
    else:
        return False
Create a program in Python to convert any number from 0 to 999 to its corresponding word. Input number: 259 def number_to_words(num):
  units = ["", "one", "two", "three", "four", "five", "six", "seven", 
           "eight", "nine"]
  teens = ["", "eleven", "twelve", "thirteen", "fourteen", "fifteen", 
           "sixteen", "seventeen", "eighteen", "nineteen"]
  tens = ["", "ten", "twenty", "thirty", "forty", "fifty", "sixty", 
          "seventy", "eighty", "ninety"]
  hundreds = ["", "onehundred", "twohundred", "threehundred", "fourhundred",
              "fivehundred", "sixhundred", "sevenhundred", "eighthundred",
              "ninehundred"]

  num_str = str(num)
  result = ""

  if num == 0:
    result = "zero"

  elif len(num_str) == 3:
    result += hundreds[int(num_str[0])] + " "
    if int(num_str[1:]) != 0:
      result += number_to_words(int(num_str[1:]))

  elif len(num_str) == 2:
    if int(num_str[0]) == 1:
      result += teens[int(num_str[1])]
    else:
      result += tens[int(num_str[0])] + " "
      if int(num_str[1]) != 0:
        result += units[int(num_str[1])]

  elif len(num_str) == 1:
    result += units[int(num_str[0])]

  return result
  
print(number_to_words(259))
Create a program in Python 3 to simulate the rolling of two dice.  import random

def roll_dice():
    '''This function simulates rolling two dice.'''
    die_1 = random.randint(1, 6)
    die_2 = random.randint(1, 6)
    print("Die 1: {}".format(die_1))
    print("Die 2: {}".format(die_2))
    return (die_1, die_2)
Create an algorithm in Python that receives an array of integers and returns an array with the unique values of the input array.  def unique(arr): 
    uniq_arr = []
    for x in arr:
        if x not in uniq_arr: 
            uniq_arr.append(x) 
    return uniq_arr
Implement a stack data structure in Python.  class Stack():
    def __init__(self):
        self.items = []

    def push(self, data):
        self.items.append(data)

    def pop(self):
        return self.items.pop()

    def is_empty(self):
        return self.items == []
You need to read code and detect the language it is written in (for example, Python, JavaScript, etc).  Python
Create a Python dictionary structure that stores a warning message for each item in the following list. ['apple', 'orange', 'banana'] {
 'apple': 'This apple is not fresh.',
 'orange': 'This orange has gone bad.',
 'banana': 'This banana is too ripe.'
}
Create a Python program that takes a list and replaces all negative numbers in the list with zeros. [-1, 2, -3, 4, -5] def replace_negative_with_zero(numbers):
    new_list = []

    for num in numbers:
        if num < 0:
            new_list.append(0)
        else:
            new_list.append(num)
    return new_list
Design a Merge Sort algorithm in Python that sorts a given list of integers. [5, 3, 6, 8, 10, 1, 4, 7] def merge_sort(arr):
 if len(arr) >1: 
 mid = len(arr)//2  #Finding the mid of the array 
 L = arr[:mid]   # Dividing the array elements  
 R = arr[mid:] # into 2 halves 
  
 merge_sort(L) # Sorting the first half 
 merge_sort(R) # Sorting the second half 
  
 i = j = k = 0
  
 # Copy data to temp arrays L[] and R[] 
 while i < len(L) and j < len(R): 
 if L[i] < R[j]: 
 arr[k] = L[i] 
 i+=1
 else: 
 arr[k] = R[j] 
 j+=1
 k+=1
  
 # Checking if any element was left 
 while i < len(L): 
 arr[k] = L[i] 
 i+=1
 k+=1
  
 while j < len(R): 
 arr[k] = R[j] 
 j+=1
 k+=1
  
def print_list(arr): 
 for i in range(len(arr)):         
 print(arr[i],end=" ") 
 print() 
  
# Driver code to test above 
if __name__ == '__main__': 
 arr = [5,3,6,8,10,1,4,7] 
 print ("Given array is", end="\n")  
 print_list(arr) 
 merge_sort(arr) 
 print("Sorted array is: ", end="\n") 
 print_list(arr)
Create a Python function to generate random numbers between a given range of numbers.  def random_number_generator(lhs, rhs):
    '''This function generates a random number between given range (lhs, rhs)'''
    import random
    return random.randint(lhs, rhs)
Design a class to represent a car in the Python programming language.  class Car:
    def __init__(self, make, model, year):
        self.make = make
        self.model = model
        self.year = year

    def get_make(self):
        return self.make

    def get_model(self):
        return self.model

    def get_year(self):
        return self.year

    def set_make(self, make):
        self.make = make

    def set_model(self, model):
        self.model = model

    def set_year(self, year):
        self.year = year
Rewrite a python program to take input from the user n1 = 10
n2 = 20 n1 = int(input("Enter first number: "))
n2 = int(input("Enter second number: "))
Come up with a python script to retrieve the last occurrence of an element in a list Find the last occurence of 5 in [3, 4, 5, 5, 9, 6, 5] def last_occurence(arr, x):
    last_index = -1
    for i in range(len(arr)):
        if arr[i] == x:
            last_index = i
    return last_index

print(last_occurence([3, 4, 5, 5, 9, 6, 5], 5))
Given a language (example: Python), write a function to convert a string (example: "Hello World!) to a list. Python def str_to_list(string):
    return string.split(' ')
Generate an algorithm in Python that finds the number of times an element is present in an array. arr = [4, 5, 2, 4, 2]
x = 2 def countOccurrences(arr, x): 
  
    count = 0
    for i in range(len(arr)): 
        if (x == arr[i]): 
            count = count + 1
  
    return count 
  
arr = [4, 5, 2, 4, 2]
x = 2
print(countOccurrences(arr, x))
The given code is a Python class called SecureRemoteLauncher that has several methods. To use this class, you need to import the necessary modules and create an instance of the class. Once you have an instance, you can call its methods to perform various tasks. 

To create an instance of the SecureRemoteLauncher class, you need to provide a mapping file path as an argument to the constructor. 

To create a port forwarding ssh tunnel, you can call the createTunnelOnRemotePort method of the SecureRemoteLauncher instance and provide it with a transport object, a remote host, and a port number. 

To rewrite the mapping file with the current session map, you can call the updateMappingFile method of the SecureRemoteLauncher instance. 

To wait for a process to exit so that you can end the tunnel thread and then end the waiting thread by returning from the function, you can call the waitOnChannelExitStatus method of the SecureRemoteLauncher instance and provide it with a channel, a session ID, and a tunnel. 

To start pvweb on a remote machine until you successfully start on a port, you can call the startPvwebOnOpenPortInRange method of the SecureRemoteLauncher instance and provide it with a transport object, a remote host, a file to load, and a port range. This method will try to start pvweb on a port within the given range and return a session ID and the port number if successful.  
import paramiko
import select
import argparse
import sys
import threading
import uuid
import tempfile
import os
import getpass

from ForwardSshTunnel import ForwardSshTunnel


class SecureRemoteLauncher(object) :

    #-------------------------------------------------------------------------
    # SecureRemoteLauncher constructor
    #-------------------------------------------------------------------------
    def __init__(self, mapFilePath) :
        self.mappingFilePath = mapFilePath
        self.sessionMap = {}

    #-------------------------------------------------------------------------
    # Create a port forwarding ssh tunnel
    #-------------------------------------------------------------------------
    def createTunnelOnRemotePort(self, transport, host, port) :
        print 'Create a tunnel on remote port ' + str(port)

        try:
            tunnel = ForwardSshTunnel(port,       # local port
                                      host,       # remote host
                                      port,       # remote port
                                      transport)  # SSHClient Transport object
            tunnel.establishForwardTunnel()
        except KeyboardInterrupt:
            print 'C-c: Port forwarding stopped.'
        except Exception as inst :
            print 'Encountered exception in forwarding'
            print inst

        print 'Returning from createTunnelOnRemotePort()'
        return tunnel

    #-------------------------------------------------------------------------
    # Rewrite the mapping file with the current session map
    #-------------------------------------------------------------------------
    def updateMappingFile(self) :
        with open(self.mappingFilePath, 'w') as outfile :
            for session in self.sessionMap :
                outfile.write(session + ' ' + self.sessionMap[session] + '\n')

    #-------------------------------------------------------------------------
    # Wait for process to exit so that when it does we can end the tunnel
    # thread and then end this waiting thread by returning from this
    # function
    #-------------------------------------------------------------------------
    def waitOnChannelExitStatus(self, channel, sessionId, tunnel) :
        # This call will block until channel process has finished
        processReturnVal = channel.recv_exit_status()

        # Now make sure to kill the thread which is running the port
        # forwarding ssh tunnel
        print 'Channel exit status ready, process has terminated'
        if tunnel is not None :
            print 'Attempting to end tunnel request loop...'
            tunnel.terminateRequestLoop()

        # Next remove this session from the map
        del self.sessionMap[sessionId]

        # Finally rewrite the map file with the updated session info
        self.updateMappingFile()

        print 'Returning from wait thread'

    #-------------------------------------------------------------------------
    # Try to start pvweb on remote machine until we successfully start on a
    # port.
    #-------------------------------------------------------------------------
    def startPvwebOnOpenPortInRange(self, transport, remoteHost, fileToLoad, portRange) :
        #port = random.randrange(portRange[0], portRange[1], 1)
        port = 9010

        # Works on mayall
        #cmdFirstPart = 'export LD_LIBRARY_PATH=/opt/python-2.7.3/lib ; export DISPLAY=:0.0 ; /home/kitware/projects/ParaView/build-make-gpu/bin/pvpython /home/kitware/projects/ParaView/build-make-gpu/lib/site-packages/paraview/web/pv_web_visualizer.py --data-dir /home/kitware/Documents/haloregions --port '

        # Works on solaris
        cmdFirstPart = 'export DISPLAY=:0.0 ; /home/scott/projects/ParaView/build-make-gpu/bin/pvpython /home/scott/projects/ParaView/build-make-gpu/lib/site-packages/paraview/web/pv_web_visualizer.py --data-dir /home/scott/Documents/cosmodata/haloregions --port '

        started = False

        while started == False :

            cmd = cmdFirstPart + str(port) + ' --load-file ' + fileToLoad + ' -f'

            channel = transport.open_session()
            channel.exec_command(cmd)

            characters = ''

            while True:
                if channel.exit_status_ready():
                    break

                rl, wl, xl = select.select([channel],[],[],0.0)

                if len(rl) > 0 :
                    characters = channel.recv(1024)

                    if 'CannotListenError' in characters or 'Address already in use' in characters :
                        print 'port ' + str(port) + ' is already being used'
                    elif ('tarting on ' + str(port)) in characters:
                        print 'Ahh, we have finally started on port ' + str(port)

                        # write the mapping file here
                        sessionId = str(uuid.uuid1())
                        connectStr = 'localhost:' + str(port)
                        self.sessionMap[sessionId] = connectStr
                        self.updateMappingFile()
                        tunnel = self.createTunnelOnRemotePort(transport, remoteHost, port)
                        print 'Have now returned from readyCallback() !!!!'
                        t = threading.Thread(target=self.waitOnChannelExitStatus,
                                             args=[channel, sessionId, tunnel],
                                             kwargs={})
                        t.start()
                        print 'wait thread started, returning from startPvwebOnOpenPortInRange()'
                        return (sessionId, port)
                        started = True

            if started == False :
                #port = random.randrange(portRange[0], portRange[1], 1)
                port += 1

        print 'Returning from startPvwebOnOpenPortInRange()'

Find the maximum of three numbers using a Python function. a = 10, b = 5, c = 20 def maximumOfThreeNumbers(a, b, c):
   if (a >= b) and (a >= c):
     return a
   elif (b >= a) and (b >= c):
     return b
   else:
     return c

maximum = maximumOfThreeNumbers(10, 5, 20)
print("The maximum number is:", maximum)
Optimise a bubble sort algorithm written in Python def bubble_sort(arr): 
    is_sorted = False 
    while not is_sorted: 
        is_sorted = True 
        for i in range(len(arr)-1): 
            if arr[i] > arr[i+1]: 
                arr[i],arr[i+1] = arr[i+1],arr[i] 
                is_sorted = False
    return arr def bubble_sort(arr): 
    is_sorted = False 
    n = len(arr)
    for i in range(n):
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr
Write a Python program to search for a given element in multiple lists my_list1 = [2, 3, 4, 5]
my_list2 = [7, 9, 5]
elem = 5 def search_elem(my_list1, my_list2, elem):
    for list in [my_list1, my_list2]:
        found = False
        for val in list:
            if val == elem:
                found = True
                break
        if found:
            return True
    return False

found = search_elem(my_list1, my_list2, elem)
print(found)
Generate a python script to make HTTP request.  import requests

url = 'https://www.example.com/'

response = requests.get(url)

if response.status_code == 200:
    print('Success!')
else:
    print('An error has occurred.')
Develop a Python function to sum an array of integers [1, 2, 3, 4] def sumIntArray(arr):
    arr_sum = 0
    for num in arr:
        arr_sum += num
    return arr_sum

arr = [1, 2, 3, 4]
print(sumIntArray(arr)) #prints 10
Generate a Python program to find all pythagorean triplets up to a given limit. limit = 20 def pythagorean_triplets(limit):
    for a in range(1, limit):
        for b in range(a, limit):
            for c in range(b, limit):
                if (a**2 + b**2) == c**2:
                    yield [a, b, c]

limit = 20
triplets = pythagorean_triplets(limit)
for triplet in triplets: 
    print(triplet)
Write an algorithm in Python to find the maximum and minimum of two given numbers. a = 10, b = 12 def max_and_min(a,b):
    """Function to find the maximum and minimum of two given numbers."""
    max = a if a > b else b
    min = a if a < b else b
    return max, min

#Example:
print("Maximum is: ",max_and_min(a,b)[0])
print("Minimum is: ",max_and_min(a,b)[1])
Generate a fuzzy search algorithm in Python that can match strings with near similarities.  def find_matches(query, choices, threshold):
    # Convert query and choices to lower case
    query, choices = query.lower(), [choice.lower() for choice in choices]
    # Initialize empty list to store matches
    matches = []
    
    # Loop through each choice
    for choice in choices:
        # Calculate Levenshtein distance between query and choice
        distance = levenshtein_distance(query, choice)
        # If distance is less than threshold, append choice to matches
        if distance <= threshold:
            matches.append(choice)
    
    return matches
Create a Python program to generate 10 unique and random integers.  import random

def generate_random_ints():
 random_ints = []
 for _ in range(10):
 random_int = random.randint(1, 1000)
 while random_int in random_ints:
 random_int = random.randint(1, 1000)
 random_ints.append(random_int)
 return random_ints
Generate Python code to automatically close a database connection after a specific duration of time  import time

# Connect to the database
db_conn = db_connect()

# Set the duration in seconds    
duration = 10
 
# Start the timer
start_time = time.time()

# Check if the duration has been exceeded
while (time.time() - start_time) < duration:
    # Continue with the database operation.
 
# Close the database connection
db_conn.close()
Using Python, create a command line program to print out the frequency of a given string in a given text. text = 'This is an example string.'
string = 'example' def countSubstring(text, string):
 count = 0
 for i in range(len(text)):
 if text[i:i+len(string)] == string:
 count += 1
 return count

print(countSubstring(text, string))
Create a function in Python for converting currencies from one type to another. currency_from = 'USD'
currency_to = 'EUR'
exchange_rate = 0.9 def convert_currencies(currency_from, currency_to, exchange_rate):
 return currency_fit * exchange_rate 

c = convert_currencies('USD', 'EUR', 0.9)
print(c) # Output: 0.9
Implement an algorithm in Python to check for palindromes. noon def isPalindrome(text):
    n = len(text)
    for i in range(n // 2):
        if text[i] != text[n - i - 1]:
            return False
    return True

print(isPalindrome('noon'))
Develop a Python function to predict the class labels of a given set of data. The dataset contains 4 features: Length, Width, Height and Weight. # Load the dataset
import pandas as pd
csv_url = 'http://test.test/test.csv'
df = pd.read_csv(csv_url)

# Split the dataset into features and label
X = df.iloc[:, 0:4].values
y = df.iloc[:, 4].values

# Import the ML model
from sklearn.tree import DecisionTreeClassifier

# Create and fit the model
model = DecisionTreeClassifier()
model.fit(X, y)

# Predict the label
def predict(data):
    predicted_label = model.predict([data])
    return predicted_label
Design a Python Class for a Student and provide a constructor for creating objects of that class.  class Student:
    def __init__(self, firstName, lastName, age):
        self.firstName = firstName
        self.lastName = lastName
        self.age = age
Create a Python script for downloading a web page's HTML content. http://example.com import requests
 
url = 'http://example.com'
 
r = requests.get(url)
html = r.text
 
with open('page.html', 'w') as f:
 f.write(html)
Explain the usage of `print` statement in Python.  The print statement is used to output text or other data to the standard output device in Python. It can be used to print strings, numeric data, objects, or other types of data. For example, you can print a simple string by using the print statement like this: print("Hello World!"). You can also print numbers and objects by using the print statement. For example, you can print the results of math operations by using the print statement like this: print(5 * 10). You can also print variables and lists of data using the print statement. For example, you can print a list by using the print statement like this: print(list_of_numbers). The print statement is used to output data to the standard output device and can be used to debug and display results in a readable way.
This code is a Python program that sends packets using a CC430 transmitter. To use it, run the program with the appropriate arguments for the port, radio address, destination address, and serial number. The program will then initialize the transmitter and send packets containing data retrieved from the Hacker News API. The program will continue to send packets until interrupted by the user.  #!/usr/bin/python

# python ~/workspace/level_basestation/pre-cog/examples/simple_trx.py --port 12345 --radio-addr 85 --dest-addr 86 --args serial=E8R10Z2B1
# python ~/workspace/level_basestation/pre-cog/examples/simple_trx.py --port 12346 --radio-addr 86 --dest-addr 85 --args serial=E4R11Y0B1

from gnuradio import gr
from gnuradio import uhd
from gnuradio import digital
from gnuradio import blks2
from gnuradio.gr import firdes
import gnuradio.gr.gr_threading as _threading
from gnuradio import level
from gnuradio import extras
from math import pi
from gruel import pmt
import urllib2, time, json

class test_transmit(gr.top_block):
    def __init__(self):
        gr.top_block.__init__(self, "CC430 Transmitter")

        self.sent_pkts = 0

        # 5555 5555 2c6e fd00 0071 da0b e2
        self.packet =  chr(0x55)*4                          # preamble
        self.packet += chr(0x2c) + chr(0x6e)                # sync
        self.packet += chr(0xfc)                            # length
        self.packet += chr(0x00) + chr(0x00) + chr(0x00)    # payload
        self.packet += chr(0x71) + chr(0xda) + chr(0x0b) + chr(0xe2) # CRC (currently incorrect)

        # Variables
        self.samp_rate = samp_rate = 125e3
        self.f_center = f_center = 868e6
        self.bandwidth = bandwidth = 200e3
        self.gain = gain = 5

        self.msgq = msgq = gr.msg_queue()

        # Blocks
        self.uhd_sink = uhd.usrp_sink(
            device_addr="",
            stream_args=uhd.stream_args(
                cpu_format="fc32",
                channels=range(1),
            ),
        )
        self.uhd_sink.set_samp_rate(samp_rate)
        self.uhd_sink.set_center_freq(f_center, 0)
        self.uhd_sink.set_gain(gain, 0)
        self.uhd_sink.set_bandwidth(bandwidth, 0)

        self.msg_src = gr.message_source(1, msgq)

        self.msk = level.msk_mod_bc(
            samples_per_symbol=2,
            bt=0.3
        )
        
        # Connections
        self.connect(self.msg_src, self.msk, self.uhd_sink)

    def send_pkt(self, payload):
        msg = gr.message_from_string(str(payload))
        self.msgq.insert_tail(msg)

    def get_top_hn(self):
        try:
            f_page = urllib2.urlopen("http://api.ihackernews.com/page").read()
        except urllib2.HTTPError:
            return "HN returned server error: 0"
        fj = json.loads(f_page)
        title = fj['items'][0]['title']
        score = fj['items'][0]['points']
        return str(title) + ":" + str(score)

    def form_packet(self, payload):
        length = len(payload)
        self.packet =  chr(0x55)*4                          # preamble
        self.packet += chr(0xd3) + chr(0x91)                # sync
        self.packet += chr(length)                          # length
        self.packet += str(payload)
        self.packet += chr(0x71) + chr(0xda) + chr(0x0b) + chr(0xe2) # CRC (currently incorrect)

    def main_loop(self):
        while True:
            payload = self.get_top_hn()
            print payload
            self.packet = self.form_packet(payload)
            self.send_pkt(self.packet)
            self.sent_pkts += 1
            try:
                time.sleep(5)
            except KeyboardInterrupt:
                print "\n\nSent Packets:", self.sent_pkts, "\n"
                break

if __name__ == '__main__':
    tx = test_transmit()
    r = gr.enable_realtime_scheduling()
    tx.start()
    tx.main_loop()

Create a REST API in Python with the Flask framework that returns a list of posts from a blog when a GET request is made. Not applicable from flask import Flask, jsonify

app = Flask(__name__)

posts = [
 {
 "id": 1,
 "title": "Lorem Ipsum",
 "body": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."
 },
 {
 "id": 2,
 "title": "Sed Ut Perspiciatis",
 "body": "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam."
 }
]

@app.route('/posts', methods=['GET'])
def get_posts():
 return jsonify({'posts': posts})

if __name__ == '__main__':
 app.run(debug=True)
Create a Python program that displays the number of characters and words in a given sentence. Francesco is learning to code def count_words_and_characters(str):
    character_count = 0
    word_count = 0
    
    #remove non-character unicode from string
    str = str.strip(' ')
    for s in str:
        if s != ' ':
            character_count += 1
    
    #count the words separated by space
    for word in str.split(' '):
        word_count += 1

    print('Number of characters:', character_count)
    print('Number of words:', word_count)

count_words_and_characters('Francesco is learning to code')
Create a secure authentication system in Python that verifies username and password against a database of users. Not applicable # import necessary modules
import hashlib
import mysql.connector

# connect to the database
conn = mysql.connector.connect(
 host="localhost",
 user="db_user", 
 passwd="password", 
 database="my_db"
)

# check if the given username and password are valid
def authenticate(username, password):
 # get the user's password hash from the database
 cursor = conn.cursor()
 query = "SELECT password_hash FROM users WHERE username=%s"
 cursor.execute(query, (username,))
 result = cursor.fetchone()

 # if user is not in the database, return false
 if result is None:
 return False

 # compare the hashes
 password_hash = hashlib.sha256(password.encode()).hexdigest() 
 if password_hash == result[0]:
 return True
 else:
 return False

# test the authentication function
print(authenticate("alice", "password123")) # True
print(authenticate("bob", "wrongpassword")) # False
Create a script in Python to classify a given array of integers into even and odd numbers. [1, 2, 3, 4, 5] def classify(arr):
    even = []
    odd = []
    for x in arr:
        if x % 2 == 0:
            even.append(x)
        else:
            odd.append(x)
    return even, odd

even, odd = classify([1, 2, 3, 4, 5])
print("Even numbers: ", even)
print("Odd numbers: ", odd)
Create a Python script to sort the given integers in descending order. [3, 7, 2, 8, 10] input_list = [3, 7, 2, 8, 10]
input_list.sort(reverse=True)
print(input_list)
Create a function in Python which can take in a string and capitalize the first character of the string. mystring = "hello world" def capitalize_first_character(mystring):
    return mystring[0].upper() + mystring[1:]
Generate a Python function to find all anagrams of a given string in a given list of strings.  def find_anagrams(string, words):
 anagrams = []
 for word in words:
  if sorted(word) == sorted(string):
   anagrams.append(word)
 return anagrams
Write a Python program to print the numbers of a specified list after removing even numbers from it. [1, 2, 3, 4, 5, 6, 7, 8, 9] def remove_even_numbers(numbers):
    odd_numbers = []
    for number in numbers:
        if number % 2 != 0:
            odd_numbers.append(number)
    return odd_numbers

numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
odd_numbers = remove_even_numbers(numbers)
print(odd_numbers)
Create a class in Python that represents a two-dimensional vector. Not applicable class Vector2D:
 def __init__(self, x = 0, y = 0):
  self.x = x
  self.y = y

def __str__(self):
 return '<' + str(self.x) + ', ' + str(self.y) + '>'

def add(self, other):
 return Vector2D(self.x + other.x, self.y + other.y)

def __add__(self, other):
 return self.add(other)

# testing
v1 = Vector2D(3, 4)
v2 = Vector2D(1, 2)
print(v1 + v2)

# Output: <4, 6>
Modify the following Python code to handle errors. def read_data_from_json(filename):
    with open(filename, 'r') as f:
        data = json.load(f)
    return data def read_data_from_json(filename):
    try:
        with open(filename, 'r') as f:
            data = json.load(f)
        return data
    except FileNotFoundError:
        print("The file specified does not exist.")
    except json.decoder.JSONDecodeError:
        print("The file specified is not in a valid JSON format.")
Develop a function in Python to convert a given list to a dictionary. list = [1,2,3,4,5,6] def convert_list_to_dict(list):
    final_dict = {}

    for index, value in enumerate(list):
        final_dict.update({index: value})

    return final_dict

list = [1,2,3,4,5,6]
list_dict = convert_list_to_dict(list)
print(list_dict)
Write a Python program to parse a JSON object from a given string. Input String: {"name": "John Doe", "age": 28} import json

givenString = "{\"name\": \"John Doe\", \"age\": 28}"

data = json.loads(givenString)

print(data)
Construct a Python program to read in a sequence of numbers, find the largest number and its position in the sequence. [3, 2, 5, 1, 9] sequence = [3, 2, 5, 1, 9]

# finding the largest number
max_num = max(sequence)

# finding the index of the largest number in the sequence
index = sequence.index(max_num)

print("The largest number in the sequence is:", max_num)
print("The position of the largest number in the sequence is:", index)
Create a Python module to encrypt a given string using the AES symmetric cipher. "My Secret Message" from Cryptodome.Cipher import AES

def encrypt(message, key):
    # Block size should match the chosen AES mode
    block_size = 16
    padding_length = block_size - len(message) % block_size

    # Padding must always be present per the AES spec
    if padding_length:
        padded_message = message + (chr(padding_length) * padding_length)
    else:
        padded_message = message

    # CBC Mode always works with 16 byte blocks
    iv = b'\x16\x87r\xb9\x1b\x8bho\x04u\x16\xdb\xbc\x98\x87\xb7Y\xc0'

    # Create cipher and encrypt data
    cipher = AES.new(key, AES.MODE_CBC, iv)
    encrypted_message = cipher.encrypt(padded_message.encode('utf-8'))

    return encrypted_message

key = b'#1\x84\xdc\x06\x0c\x12\xe8\x0c\xd7 \x9d\x03\xd4*\xdd[\x85'

encrypted_message = encrypt("My Secret Message",key)

print(encrypted_message)
# b"B\xf5{5<\xec~\xf9\xc9\x8f_3\x04\x95\x15'\x90\xd2\\\xfc\xd9\x03\xdc\x1dr\x1b"
Create a machine learning script in Python that trains a binary classification model on a dataset with two classes.  import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

# Read in data
data = pd.read_csv("data.csv")

# Split into train and test
X = data.drop("target_column", axis=1)
y = data["target_column"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a binary classification model 
model = LogisticRegression()
model.fit(X_train, y_train)

# Evaluate model
y_pred = model.predict(X_test)
accuracy = (y_pred == y_test).mean() 
print("Model accuracy:", accuracy)
Write a loop in Python to iterate through a list and print all elements that have an even length. List: ["apples", "oranges", "bananas", "pineapples"] list_x = ["apples", "oranges", "bananas", "pineapples"]
for item in list_x:
 if(len(item) % 2 == 0):
  print(item)
#output: apples, oranges, pineapples
Create a Python algorithm to calculate the maximum profit that can be earned given a stock's price list for the day. `List of prices = [5, 7, 1, 3, 6, 8]` def maxProfit(prices):
 maxProfit = 0
 minPrice = float('inf')

 for price in prices:
 minPrice = min(minPrice, price)
 maxProfit = max(maxProfit, price - minPrice)

 return maxProfit

# example
maxProfit([5, 7, 1, 3, 6, 8]) # returns 7
Develop a program in Python to calculate the average of five given numbers.  def average(nums):
 total = 0
 for num in nums:
  total+=num
 return total / len(nums)

print(average([1, 2, 3, 4, 5]))
// Output: 3
Using a library such as Numpy, write a Python program to generate a random matrix with 500 rows and 10 columns. Not applicable import numpy as np

# Generate random matrix with 500 rows and 10 columns
matrix = np.random.rand(500,10)

# Print the matrix
print(matrix)
Create a WebSocket server in Python. Not applicable import asyncio
import websockets

async def hello(websocket, path):
 greeting = await websocket.recv()
 print(f"< {greeting}")

async def hello_server():
 server = await websockets.serve(hello, '127.0.0.1', 8765)
 await server.wait_closed()

asyncio.get_event_loop().run_until_complete(hello_server())
asyncio.get_event_loop().run_forever()
Generate a complete python code to print the output shown. I love Python print("I love Python")
Create a text-based Python game that can be played from the terminal. The game should have a user-friendly interface, consisting of menus, text prompts and user input. Not applicable import random

def start_game():
 print('Welcome to Text-based Game!')
 print('You have been dropped into a dangerous dungeon. Your objective is to find the exit door and reach the next level.')
 print()

def explore_dungeon():
 print('You find yourself in a dark and mysterious dungeon.')
 room_descriptions = ['You find a dark and cramped room.', 
                      'You enter a large and well lit chamber.',  
                      'You enter a room with a small river running through it.']
 description = random.choice(room_descriptions)
 print(description)
  
def get_user_command():
 command = input('What would you like to do? ')
 return command 

if __name__ == '__main__':
 start_game()
 explore_dungeon()
 running = True
 while running:
  command = get_user_command()
  if command.lower() == 'exit':
    running = False
  else:
   print('I don\'t understand.')
 print('Goodbye!')
Write a Python program to sort a given list in ascending order without using built-in functions. [3, 7, 4, 1, 9] def sort_list(lst):
    for i in range(0, len(lst)):
        for j in range(i+1, len(lst)):
            if lst[i] > lst[j]:
                lst[i], lst[j] = lst[j], lst[i]
    
    return lst

print(sort_list([3, 7, 4, 1, 9])) # prints [1, 3, 4, 7, 9]
Create a python function to compute the area of a triangle with given sides. a = 3
b = 5
c = 4 def calculateTriangleArea(a, b, c): 
    s = (a + b + c) / 2
    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5
    return area
  
area = calculateTriangleArea(a, b, c) 
print("Area of triangle is %.2f" % area)
Write a Python program to generate all combinations of 2 given lists.  def generate_combinations(list1, list2):
    combinations = []
    for x in list1:
        for y in list2:
            combination = (x, y)
            combinations.append(combination)
    return combinations
Write a Python program to create a list containing all the prime numbers from 0 to 100.  primes = [2]
for number in range(3,101):
	is_prime = True
	for element in primes:
		if number % element == 0:
			is_prime = False
	if is_prime:
		primes.append(number)
print(primes)
Generate a random list of numbers in Python of size n and output their sum. n = 10 import random

n = 10
lst = [random.randrange(1, 101) for _ in range(n)]
sum_lst = sum(lst)

print("Random list: ", lst)
print("Sum of the list: ", sum_lst)
Construct a program in Python to create a TCP/IP server and client that accepts messages from the client and relays them to the server.  # Python program to implement server side of chatroom 
import socket 
import select 
import sys 
  
server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 
server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) 
  
if len(sys.argv) != 3: 
    print("Correct usage: script, IP address, port number")
    exit() 
  
IP_address = str(sys.argv[1]) 
Port = int(sys.argv[2]) 
server.bind((IP_address, Port)) 
server.listen(100) 
  
list_of_clients = [] 
  
def clientthread(conn, addr): 
  
    conn.send("Welcome to this chatroom!") 
  
    while True: 
            try: 
                message = conn.recv(2048) 
                if message: 
  
                    print("<" + addr[0] + "> " + message) 
  
                    message_to_send = "<" + addr[0] + "> " + message 
                    broadcast(message_to_send, conn) 
  
                else: 
                    remove(conn) 
  
            except: 
                continue
  
def broadcast(message, connection): 
    for clients in list_of_clients: 
        if clients!=connection: 
            try: 
                clients.send(message) 
            except: 
                clients.close() 
  
                remove(clients) 
            
# main function 
if __name__ == "__main__": 
      
    while True: 
  
        conn, addr = server.accept() 
  
        list_of_clients.append(conn) 
  
        # prints the address of the user that just connected 
        print(addr[0] + " connected") 
        clientthread(conn, addr)
Develop an algorithm in Python for merging k sorted arrays. arrays = [
    [1, 3, 5],
    [2, 4, 6],
    [7, 8, 9]
] def mergeKArrays(arrays):
    '''
    This function will merge k sorted
    arrays in to one sorted array.
    '''
    # initialize the resulting array
    result = []

    # loop through all the arrays
    for array in arrays:
       # merge this array with existing result
       result = mergeTwoArrays(result, array)

    # return the result array
    return result


def mergeTwoArrays(arr1, arr2):
    # define the resulting array
    result = []
    i, j = 0, 0

    # loop through both the arrays
    while i < len(arr1) and j < len(arr2):
        if arr1[i] < arr2[j]:
            result.append(arr1[i])
            i += 1
        else:
            result.append(arr2[j])
            j += 1

    # add the remaining elements from both arrays
    result.extend(arr1[i:])
    result.extend(arr2[j:])

    return result


arrays = [[1, 3, 5],
          [2, 4, 6],
          [7, 8, 9]]

print(mergeKArrays(arrays)) # [1, 2, 3, 4, 5, 6, 7, 8, 9]
Design a program in Python to detect if a given number is a perfect square?  # function to check if  
# given number is perfect square 
def isPerfectSquare(n): 
  
    if n < 0: 
        return False
    
    # Base case 
    if n == 1: 
        return True
  
    i = 1
    x = n // 2
      
    while x >= i: 
        if (x == i) and (n % x == 0): 
            return True
        x -= 1
    return False
Generate code to optimize a matrix multiplication in Python. A 3x3 matrix # import numpy
import numpy as np

# Declare matrix A and B
A = np. array([[2, 3, 5], [5, 7, 2], [4, 2, 6]])
B = np.array([[6, 2, 1], [3, 4, 5], [5, 3, 7]])

# use numpy for matrix multiplication
C = np.dot(A, B)

# Vectorization 
D = np.zeros((3,3))

for i in range(3):
 for j in range(3):
 for k in range(3):
 D[i,j] += A[i,k] * B[k,j]

# Compare matrix multiplication results
if np.array_equal(C, D):
 print("Matrix optimzation is successful")
else:
 print("Matrix optimization failed")
Create a Python function for calculating the mode (most frequently occuring item) in a list of numbers. List of numbers: [1, 2, 3, 2, 4, 2] import collections

def mode(numbers):
 counts = collections.Counter(numbers)
 max_count = max(counts.values())
 return [item for item, count in counts.items() if count == max_count]

numbers = [1, 2, 3, 2, 4, 2]
mode = mode(numbers)
print(mode)
# Output: [2]
Create a GUI application in Python that displays "Welcome to our application".  import tkinter
window = tkinter.Tk()
window.title('My Application')
window.geometry('200x200')
lbl = tkinter.Label(window,text="Welcome to our application!")
lbl.pack()
window.mainloop()
Generate a python list comprehension to square each item in the list. alist = [1, 2, 3, 4] [i**2 for i in alist]
Write a natural language processing algorithm (in Python) to classify a given sentence as positive, negative, or neutral sentiment. Not applicable import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer
  
def sentiment_calculator(text):
    sid = SentimentIntensityAnalyzer()
    sentiment_scores = sid.polarity_scores(text)
    if sentiment_scores['compound'] >= 0.5:
        sentiment = 'positive'
    elif -0.5 < sentiment_scores['compound'] < 0.5:
        sentiment = 'neutral'
    else:
        sentiment = 'negative'
    return sentiment
  
sentence = 'This is an amazing experience!'
sentiment_calculator(sentence)
# Output: 'positive'
Write a Python program to create a new list that contains the common elements of two other lists. [1, 2, 3, 4], [2, 4, 6, 8] def common_elements(list1, list2):
    common_list = []
    for element in list1:
        if element in list2:
            common_list.append(element)
    return common_list

list1 = [1, 2, 3, 4]
list2 = [2, 4, 6, 8]
print(common_elements(list1, list2))
Perform classification on the given dataset using Support Vector Machines in Python. X = [[0,0],[1,1],[1,2],[2,2],[2,3]]
y = [0,0,0,1,1] from sklearn.svm import SVC

model = SVC(kernel = 'linear', probability=True) 
model.fit(X, y)
Using Python, write a program to merge the elements of two arrays into one. arr1=[1, 2, 6, 9, 11] 
arr2=[2, 3, 4, 7, 8] merged_arr = arr1 + arr2 
print ( merged_arr ) # [1, 2, 6, 9, 11, 2, 3, 4, 7, 8]
Update the given Python program to shuffle an array of numbers. [1, 2, 3, 4, 5, 6] import random

def shuffleArray(arr):
    random.shuffle(arr)
    return arr

array = [1, 2, 3, 4, 5, 6]
shuffledArray = shuffleArray(array)
print(shuffledArray)
Optimize this list sorting algorithm in Python. def sort_list(arr):
    for i in range(len(arr)):
        min_idx = i
        for j in range(i+1, len(arr)):
            if arr[min_idx] > arr[j]:
                min_idx = j
        
        arr[i], arr[min_idx] = arr[min_idx], arr[i] def sort_list(arr):
    for i in range(len(arr)):
        min_idx = i
        for j in range(i+1, len(arr)):
            if arr[min_idx] > arr[j]:
                min_idx = j

        # Check if the minimum index is found to be at i-th position, then no need to swap
        if min_idx != i:
            arr[i], arr[min_idx] = arr[min_idx], arr[i]
Write Python code to normalize the values of a list of numbers by subtracting each number from the maximum value in the list and dividing it by the maximum value. [7, 8, 10], def normalize(lst): 
    max_num = max(lst)
    normalized_lst = [(num-max_num)/max_num for num in lst]
    return normalized_lst

lst = [7,8,10]
normalized_values = normalize(lst)
print(normalized_values)
Implement a Python program that solves the classic Towers of Hanoi problem. Not applicable def hanoi(n, from_tower, to_tower, aux_tower):
 if n == 1:
  print(f"Move disk 1 from {from_tower} to {to_tower}")
  return

 hanoi(n - 1, from_tower, aux_tower, to_tower)
 print(f"Move disk {n} from {from_tower} to {to_tower}")
 hanoi(n - 1, aux_tower, to_tower, from_tower)


num_disks = 4
hanoi(num_disks, 'Tower 1', 'Tower 2', 'Tower 3')
Create a library in Python to generate Fibonacci numbers.  We can create a library in Python to generate Fibonacci numbers. We can define a function that takes in the numbers of Fibonacci numbers to generate as an argument and returns a list of Fibonacci numbers. The function can maintain a cache of previously generated Fibonacci numbers to reduce computation time.
Generate a python algorithm to predict the stock price for the given company. Company: Tesla def predict_price(company):
    # Call an appropriate API
    company_data = request_api(company)
    # Use an appropriate ML algorithm
    model = build_model(company_data)
    # Get the prediction
    prediction = model.predict()
    return prediction
Create a search algorithm that searches for a given string in a given list of strings lst = ['remote', 'deliver', 'python', 'code']
str = 'python' def linear_search(lst, str): 
    for i in range(0, len(lst)): 
        if lst[i] == str:
            return i 
    return -1

lst = ['remote', 'deliver', 'python', 'code']
str = 'python'
result = linear_search(lst, str) 
  
if result != -1: 
    print ("Element is present at index", result) 
else: 
    print ("Element is not present in list")
Write a Python program that computes the mean and standard deviation of a dataset. Data = [1.1, 3.2, 4.7, 5.9, 7.7, 8.2] mean = 5.42
sd = 2.48

def compute_stats(Data):
    # calculuate mean
    mean = sum(Data) / len(Data)
    # calculate standard deviation
    variance = 0.0
    for i in Data:
        variance += (i - mean)**2
    sd = variance ** 0.5
    # return mean and sd
    return mean, sd
You are given a data set with categorical variables. Create a Python program to convert it into dummy variables. dataset = [Gender, Occupation]
dataset = [['Male', 'Doctor'], 
           ['Female', 'Teacher'], 
           ['Female', 'Lawyer']] import pandas as pd
    
dataset = [['Male', 'Doctor'], 
           ['Female', 'Teacher'], 
           ['Female', 'Lawyer']]

df = pd.DataFrame(dataset, columns = ['Gender', 'Occupation'])

df_dummies = pd.get_dummies(df, columns=['Gender'])

print(df_dummies)

# Output 
   Occupation  Gender_Female  Gender_Male
0     Doctor              0            1
1    Teacher              1            0
2     Lawyer              1            0
Create a Python class for media items (movies, TV shows, etc). The class should have class variables for genre, duration, and release date, as well as methods for setting and getting the attributes. Not applicable class MediaItem:
    def __init__(self, genre, duration, release_date):
        self.genre = genre
        self.duration = duration
        self.release_date = release_date

    @property
    def genre(self):
        return self.__genre

    @genre.setter
    def genre(self, genre):
        self.__genre = genre

    @property
    def duration(self):
        return self.__duration
    
    @duration.setter
    def duration(self, duration):
        self.__duration = duration

    @property
    def release_date(self):
        return self.__release_date

    @release_date.setter
    def release_date(self, release_date):
        self.__release_date = release_date
Write a python program to calculate the sum of consecutive numbers starting from 0 to a given number. Number = 10 #Calculate sum of consecutive numbers starting at 0

#Get input
num = 10

#Calculate and print result
sumNum = sum(range(0, num+1))

print("The sum of consecutive numbers from 0 to 10 is :", sumNum)
Create a supervised machine learning model using Python to predict if a loan will default or not. Loan data (features and labels) in a CSV format import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier

# Load the data
data = pd.read_csv('loan_data.csv')

# Split the data into features and labels
X = data.drop('target', axis=1)
y = data['target']

# Split the data into a training set and a test set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

# Create a Random Forest classifier
clf = RandomForestClassifier(n_estimators=100, random_state=42)

# Train the classifier
clf.fit(X_train, y_train)

# Make predictions
y_pred = clf.predict(X_test)

# Calculate the accuracy
accuracy = (y_pred == y_test).mean()

print('The accuracy is: {:.2f}'.format(accuracy))
Write a Python code to sort a 5x5 numpy matrix from the lowest to highest values. np.array([[8, 2, 6, 7, 4],
    [7, 9, 5, 4, 6],
    [2, 3, 7, 1, 4],
    [5, 8, 4, 9, 6],
    [4, 7, 8, 2, 1]]) import numpy as np

# The given array
arr = np.array([[8, 2, 6, 7, 4],
                [7, 9, 5, 4, 6],
                [2, 3, 7, 1, 4],
                [5, 8, 4, 9, 6],
                [4, 7, 8, 2, 1]])

# Sort the array in ascending order
sorted_arr = arr.reshape(arr.shape[0] * arr.shape[1]).argsort() # new added line

# Get the sorted array
sorted_arr = arr.reshape(arr.shape[0] * arr.shape[1])[sorted_arr].reshape(arr.shape[0], arr.shape[1])

print(sorted_arr)
Generate a Python program that will multiply two given matrices.  def multiply_matrices(m1, m2): 

    # Initializing empty list
    result = [[0 for x in range(len(m2[0]))] for y in range(len(m1))]

    # Iterate through rows and columns
    for i in range(len(m1)):
        for j in range(len(m2[0])):
            for k in range(len(m2)):
                result[i][j] += m1[i][k] * m2[k][j]
    return result
Create a web crawler in Python that is able to scrape data from webpages. The crawler should be able to crawl multiple pages and extract specific data from the HTML source code. Not applicable import requests
from lxml import html

def crawl(url):
 page = requests.get(url)
 tree = html.fromstring(page.content)

 # Extract the data from the HTML source code
 data = tree.xpath('xpath expression')

 # Return the data
 return data

# Crawl multiple URLs
urls = [url1, url2, ...]
for url in urls:
 data = crawl(url)
 
 print(data)
Use the following data and create a python program to find the minimum value in the list. nums = [7, 8, 5, 1, 9, 4] # find the minimum value using the min function
min_value = min(nums)

# print the minimum value
print("The minimum value is: ",min_value)
Build a python program to randomly generate an even integer between 0 and 10  import random

def generateEven():
    even_int = random.randint(0,10)
    if(even_int % 2 == 0):
        return even_int
    else:
        return generateEven()

print(generateEven())
Develop an optimized function to sort a list of elements using algorithms in Python The list contains [3, 9, 1, 4, 5] def sort_list(arr):
    # Insertion sort algorithm
    for i in range(1, len(arr)):
        key = arr[i] 
        j = i-1
        while j >=0 and key < arr[j] : 
            arr[j+1] = arr[j] 
            j -= 1
        arr[j+1] = key 
    return arr

sorted_arr = sort_list([3, 9, 1, 4, 5])
Create a program using Python that, given a list of employee records, groups those records by department and returns the records. [
  {
    "employee_name": "John Smith",
  "department": "Marketing"
  }, 
  {
    "employee_name": "Jane Doe",
  "department": "Sales"
  }, 
  {
    "employee_name": "John Doe",
  "department": "Marketing"
  }, 
  {
    "employee_name": "John Watson",
  "department": "Engineering"
  },
] def group_by_department(employees):
  result = {}
  for emp in employees:
    if emp["department"] in result:
      result[emp["department"]].append(emp)
    else:
      result[emp["department"]] = [emp]
  return result

const result = group_by_department(employees);
console.log(result);
Generate a predict function in Python to predict the net price of a car given its features such as price, make, model, age, etc. The following data, 
Price: 15000
Make: Ford
Model: Focus
Age: 5
Distance: 20,000 import numpy as np
from sklearn.linear_model import LinearRegression

features = [[15000, 'Ford', 'Focus', 5, 20000]]

model = LinearRegression()

# Train the model with the given data
model.fit(features, [14500])

# Define the predict function
def predict(price, make, model, age, distance):
    inputs = [[price, make, model, age, distance]]
    return model.predict(inputs)[0]
    
net_price = predict(15000, 'Ford', 'Focus', 5, 20000)
print(net_price)   #14500
Create an algorithm using Python that finds the maximum and minimum in a list of numbers. [9,6,7,11,14,5] def find_max_min(mylist):
  max_num = mylist[0]
  min_num = mylist[0]

  for num in mylist:
    if num > max_num:
      max_num = num
    if num < min_num:
      min_num = num
  
  return [min_num, max_num]

list1 = [9,6,7,11,14,5]

print(find_max_min(list1)) #[5, 14]
Generate command line commands for running a basic GridSearch model to improve an existing machine learning classifier. Not applicable from sklearn.model_selection import GridSearchCV

parameters = {'C': [1, 5, 10, 100], 'gamma': [0.0001, 0.001, 0.01, 0.1]}
clf = GridSearchCV(svm.SVC(), parameters)

# Run grid search
python your_program.py --estimator  clf --parameters $parameters
Design a Python algorithm to detect the presence of a target word in a text.  # This is a python program to detect the presence of a target word in a text
def detect_word(target, text):
    return target in text.split()

# Example
target = 'apple'
text = 'I like apples, they are sweet and juicy.'

if detect_word(target, text):
    print('Target word found in the text.')
else:
    print('Target word not found in the text.')
Create a Python program that takes a string as input and returns the longest word in it. "This is an example sentence." def find_longest_word(sentence):
    words = sentence.split()
    longest_word = words[0]
    for word in words:
        if len(word) > len(longest_word):
            longest_word = word
    return longest_word

sentence = "This is an example sentence."
longest_word = find_longest_word(sentence)
print(longest_word)
Construct a Python program to perform principal component analysis A dataset of 10 rows and 3 columns from sklearn.decomposition import PCA

def pca_transformation(X):
    pca = PCA()
    X_pca = pca.fit_transform(X)
    return X_pca
Generate a python program to determine if two objects are mutually exclusive or not. Input objects are ([1,2,3], [4,5,6]). def mutually_exclusive(object1, object2):
    if len(object1.intersection(object2)) > 0:
        return False
    else:
        return True
    
object1 = set([1, 2, 3])
object2 = set([4, 5, 6])

result = mutually_exclusive(object1, object2)
print(result) # Outputs True as objects don't share elements.
Generate a Python program that given a list of numbers, finds the largest pair sum. [7, 8, 12, 10] def max_pair_sum(arr):
    if len(arr) == 0:
        return 0

    max_sum = 0

    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            max_sum = max(max_sum, arr[i] + arr[j])
    
    return max_sum
Suggest a Python program to compute the sum of pairs of elements in a given array [2, 4, 5, 10] def sum_pairs(input_list):
    output_list = []
    for i in range(len(input_list)-1):
        sum = input_list[i] + input_list[i+1]
        output_list.append(sum)
    return output_list

input_list = [2, 4, 5, 10]
result = sum_pairs(input_list)
print(result)
Generate a function in Python to find the length of a given string.  def find_length(string):
     length = 0
     for i in string:
         length = length+1 
     return length
Modify the given Python code to optimize efficiency. def calculate_sum(nums):
    total = 0
    for n in nums:
        total += n
    return total def calculate_sum(nums):
    return sum(nums)
Create a function in Python that takes an array of integers as input and outputs the number of unique values in the array. [1,5,5,4,4,6,7,7] def get_unique_values(arr):
    # convert to set 
    unique_arr = set(arr) 
  
    # return length 
    return len(unique_arr) 
  
# driver code 
arr = [1, 5, 5, 4, 4, 6, 7, 7] 
  
# function call 
unique_values = get_unique_values(arr) 
  
# print unique values 
print(unique_values)
Develop a Python program to remove duplicates from a list of integers. arr = [1, 4, 2, 1, 7, 4, 4, 5, 7] def remove_duplicates(arr):
    seen = set()
    for elem in arr:
        if elem not in seen:
            seen.add(elem)
    return list(seen)
Create a Python script that will generate a random four digit number  import random

number = random.randint(1000, 9999)
print(number) # e.g. 3874
Generate a code in Python to extract the capital letters from a given string. Hello World! def extract_capitals(string):
    capitals = ""
    for character in string:
        if character.isupper():
            capitals += character
    return capitals

# Main program
input_string = "Hello World!"
capitals = extract_capitals(input_string)
print(capitals)
Design a structure in Python to store the ratings of different movies.  class MovieRatings:
    def __init__(self):
        self.movie_ratings = {}

    def add_rating(self, movie_name, rating):
        self.movie_ratings[movie_name] = rating

    def get_rating(self, movie_name):
        if movie_name in self.movie_ratings:
            return self.movie_ratings[movie_name]
        else:
            return 'Movie not found.'
Build a recommendation system in Python to suggest movies to a user based on their previous ratings.  def movie_recommender_system(user):
    """
    This function uses a collaborative filtering algorithm 
    to suggest movies to the given user
    """
    # Get the list of rated movies by the user
    user_movies = user.get_rated_movies()

    # Get the list of ratings given by other users
    user_ratings = user.get_ratings()

    # Calculate the similarity between the user and other users
    user_similarity = user.calculate_similarity(user_movies, user_ratings)

    # Get the list of movies rated highly by other users
    other_rated_movies = user.get_top_rated_movies(user_ratings) 

    # Find the movies which the user has not seen so far, but recommended by other users
    unseen_movies = [m for m in other_rated_movies if m not in user_movies]
    
    # Sort the movies based on their similarity and the ratings given by other users
    sorted_movies = sorted(unseen_movies, 
                            key=lambda m: user_similarity[m] * user_ratings[m], 
                            reverse=True)
    
    # Get the top 10 movies
    top_movies = sorted_movies[:10]

    return top_movies
Create a Python program for simulating a bouncing ball with a bouncing height of 10 meters. The program should print out the time at which the ball reaches the ground. The initial velocity of the ball is 20 m/s. import math

# initial velocity
v0 = 20
# height
h = 10
# time to reach ground
t = (v0 * 2) / 9.81

print("The ball will reach the ground in {:.2f} seconds".format(t))
Create a Python program to Generate an ASCII art visualization of input text or a string. "Hello World!" def ascii_art(inputText):
  # Create dictionary
  ascii_dict = {
    'A' : '    _____  ',
    'B' : ' \/3_  3_\/',
    'C' : '  (__/ \__)',
    'D' : ' \/2_  2_\/',
    'E' : '  (__/ \__)',
    'F' : '  (___/ \__)',
    'G' : '  (__&_/ \_)',
    'H' : '   //\/ \\\\',
    'I' : '    ---/ \_',
    'J' : '(___/ \___)',
    'K' : '\\__- .- \_/',
    'L' : '(__/ \___)',
    'M' : '   =\ \\/ /=',
    'N' : '   =5 \/ 5=',
    'O' : '  (___/ \__)',
    'P' : ' \(___/ \__)',
    'Q' : ' (___/ \___)',
    'R' : ' \(___/ \_/',
    'S' : '(__/ \___)',
    'T' : ' (___/ \___)',
    'U' : '  (__/ \___)',
    'V' : '   \ \/ /',
    'W' : '    \\/ | \\/',
    'X' : '     \/ |',
    'Y' : '     \/ |',
    'Z' : '(__/ \___)'
  }

  pic = ""
  for letter in inputText:
    pic = pic + ascii_dict[letter.upper()] + "\n"
    
  return pic

print(ascii_art("Hello World!")) 

# outputs: 
'''
    _____      (___/ \___)
 \/3_  3_\/   (__/ \___)
  (__/ \__)   (___/ \___)
 \/2_  2_\/    \ \/ /
  (__/ \__)     \/ |
  (___/ \___)  (__/ \___)
'''
Generate a Python program that takes a number as input and calculates its sum of digits. Number: 123 n = 123
sum_of_digits = 0

while n > 0:
    digit = n % 10
    sum_of_digits += digit
    n //= 10

print("Sum of digits in 123 is:", sum_of_digits)
Update the below Python code to run in multiprocess mode. import time

def add(a, b):
 return a + b

if __name__ == '__main__':
 start = time.time()
 result = add(2, 3)
 end = time.time()
 print(end-start) import multiprocessing
import time

def add(a, b):
 return a + b

if __name__ == '__main__':
 pool = multiprocessing.Pool()
 start = time.time()
 result = pool.apply_async(add, (2, 3))
 pool.close()
 pool.join()
 end = time.time()
 print(result.get())
 print(end-start)
Design a program in Python to compare two strings and output the number of characters that are different.  def count_differences(str1, str2): 
    differences = 0 
    for letter1, letter2 in zip(str1, str2): 
        if letter1 != letter2: 
            differences +=1 
    return differences
Design a code snippet in Python to find the factorial of a given number. 5 def factorial(num): 
    if num == 0:
        return 1
    else:
        return num * factorial(num-1)

num = 5
fact = factorial(num)
print("Factorial of", num," is", fact)
Edit the following Python code to improve its speed. def find_missing_numbers(arr):
    n = len(arr)
    complete_sum = n*(n+1)/2 
    arr_sum = sum(arr)
    return complete_sum - arr_sum

print(find_missing_numbers([1,2,3,4,5,7,8,9])) def find_missing_numbers(arr):
    complete_sum = (arr[-1]*(arr[-1]+1))//2
    arr_sum = 0
    for i in arr:
        arr_sum += i
    return complete_sum - arr_sum

print(find_missing_numbers([1,2,3,4,5,7,8,9]))
Given a list of RGB values, write a python function to convert it to a corresponding list of HSL values. RGB list: [[255, 200, 80], [100, 50, 20], [255, 0, 0]] def RGB_to_HSL(RGBList):
    output = []
    for color in RGBList:
        r = color[0]/255
        g = color[1]/255
        b = color[2]/255
        c_max = max(r, g, b)
        c_min = min(r, g, b)
        delta = c_max - c_min

        h = 0
        if delta == 0:
            h = 0
        elif c_max == r:
            h = 60 * (((g - b)/delta) % 6)
        elif c_max == g:
            h = 60 * (((b - r)/delta) + 2)
        elif c_max == b:
            h = 60 * (((r - g)/delta) + 4)

        l = (c_max + c_min)/2

        s = 0
        if delta == 0:
            s = 0
        else:
            s = delta/(1 - abs((2 * l) - 1))

        output.append([h,s,l])
    return output
Improve the following Python program def get_product_listing(product_category):
    listings = []
    for product in product_category:
        listings.append(product.get_listing())
    return listings def get_product_listing(product_category):
    return [product.get_listing() for product in product_category]
Generate a Python function that returns the maximum of two given numbers.  def maxOfTwo Numbers(num1, num2):
	if num1 > num2:
		return num1
	else:
		return num2

print(maxOfTwoNumbers(4, 6))
Create a Python program to process a pandas dataframe and identify all duplicates in a given column. Columns: Name, Age, City
Data: 
John, 27, London
James, 25, Tokyo
John, 27, Tokyo import pandas as pd

df = pd.DataFrame({'Name': ['John', 'James', 'John'],
                   'Age': [27, 25, 27],
                   'City': ['London', 'Tokyo', 'Tokyo']})

# identify all duplicates in the 'Name' column
duplicates = df[df.duplicated(['Name'], keep=False)]
print(duplicates)

# output
    Name  Age    City
0   John   27  London
2   John   27   Tokyo
Find a way to split the string below into an array of length 3. string = "Python is a great language" string = "Python is a great language"
arr = string.split(' ', 3) 
print(arr)
Create an array of 100 randomly generated integers using Python.  import random 

my_array = [random.randint(1, 100) for _ in range(100)]
Assume that you have a web application which stores data in three different databases: MySQL, MongoDB, and PostgreSQL. Write a python program using the libraries for all three databases to query and display the data on the web page. Not applicable import pymysql
from pymongo import MongoClient
import psycopg2

# connect to MySQL
connection_mysql = pymysql.connect(host='localhost', user='root', password='password', database='db_name')

# connect to MongoDB
client = MongoClient('mongodb://localhost:27017')

# connect to PostgreSQL
connection_postgresql = psycopg2.connect(host='localhost', user='postgres', password='password', dbname='db_name')

# define a query for each database
query_mysql = 'SELECT * FROM table_name'
query_mongodb = {'name': 'John Doe'}
query_postgresql =  'SELECT * FROM table_name WHERE age > 18'

# execute the query and fetch the results
result_mysql = connection_mysql.execute(query_mysql)
result_mongodb = client.db_name.collection_name.find(query_mongodb)
result_postgresql = connection_postgresql.execute(query_postgresql)

# close the connections
connection_mysql.close()
client.close() 
connection_postgresql.close()

# render the results on webpage
def render_page(request):
    return render(request, 'template.html', {
        'data_mysql': result_mysql, 
        'data_mongodb': result_mongodb,
        'data_postgresql': result_postgresql
    })
Develop an algorithm using Python to convert a given number (0-99999) into words.  def num_to_words(num):
    basic_terms = {
        0: "zero",
        1: "one",
        2: "two",
        3: "three",
        4: "four",
        5: "five",
        6: "six",
        7: "seven",
        8: "eight",
        9: "nine",
        10: "ten",
        11: "eleven",
        12: "twelve",
        13: "thirteen",
        20: "twenty",
        30: "thirty",
        40: "forty",
        50: "fifty",
        60: "sixty",
        70: "seventy",
        80: "eighty",
        90: "ninety"
    }
    
    if num in basic_terms.keys():
        return basic_terms[num]

    else:
        num_words = ""
        if num > 20 and num < 100:
            num_words += basic_terms[num - (num % 10)] + " "
                         + basic_terms[num % 10]
        elif num >= 100 and num < 1000:
            num_words += basic_terms[num // 100] + " " + "hundred " 
            if num % 100 != 0:
                num_words += num_to_words(num % 100)
        elif num >= 1000 and num < 10000:
            num_words += basic_terms[num // 1000] + " " + "thousand " 
            if num % 1000 != 0:
                num_words += num_to_words(num % 1000)
    return num_words
Create a web scraper in Python that extracts reviews data from a major e-commerce website. The output should include a rating, date, and review comment. Not applicable import requests
from bs4 import BeautifulSoup

url = 'https://www.example.com/product'

response = requests.get(url)
soup = BeautifulSoup(response.text, 'html.parser')

reviews = []
for review in soup.findAll('div', {'data-hook': 'review'}):
 rating = review.find('span', {'class': 'a-icon-alt'}).text
 date = review.find('span', {'data-hook': 'review-date'}).text
 review_comment = review.find('span', {'data-hook': 'review-body'}).text
 reviews.append([rating, date, review_comment])
 
print(reviews)
Make the following Python code snippet more efficient. def determine_commission_rate(gross_sales):
    if gross_sales >= 10000:
        commission_rate = 0.1
    elif gross_sales >= 5000 and gross_sales < 10000:
        commission_rate = 0.07
    elif gross_sales < 5000:
        commission_rate = 0.05
    return commission_rate def determine_commission_rate(gross_sales):
    if gross_sales >= 10000:
        return 0.1
    elif gross_sales >= 5000:
        return 0.07
    else:
        return 0.05
Write a Python script to print the first non-repeating character on the screen. 'AABCDBAGRQPY' #include <iostream> 
#include <string> 

std::string s = "AABCDBAGRQPY";
  
int commonChar(std::string str)  
{  
    int l = str.length();  
    int count[length] = { 0 };  
    int index;  
    int res = INT_MAX;  
  
    for (int i = 0; i < l; i++) {  
        index = str[i] - 'a';  
        count[index]++;  
  
        if (count[index] == 1)  
            res = i;  
    }  
  
    return res;  
}  

int main() 
{ 
    int index = commonChar(s); 
    if (index == INT_MAX) 
        std::cout << "Either all characters are repeating or string "
                        "is empty"; 
    else
        std::cout << "First non-repeating character is "
                  << s[index]; 
    return 0; 
}
Write a Python function to round a float to 2 decimal places.  def round_to_two_decimal_places(n):
    return round(n, 2)
Design a function in Python to find the maximum pair sum from the list input. input_list = [20, 11, 33, 67, 89 ,34] def maxPairSum(input_list):

    #assume the first and second elements are the max pair
    max_pair_sum = input_list[0] + input_list[1]

    # Keep track of the max pair
    pair_index_one = 0
    pair_index_two = 1

    # iterate through the entire list
    for index_one in range(0, len(input_list)):
        for index_two in range(index_one + 1, len(input_list)):

            # if the current pair sum is greater than the max pair sum
            # update the max pair sum and the pair indices
            if input_list[index_one] + input_list[index_two] > max_pair_sum:
                max_pair_sum = input_list[index_one] + input_list[index_two]
                pair_index_one = index_one
                pair_index_two = index_two

    #return the max pair sum
    return max_pair_sum
Produce a program in python to solve a given Sudoku puzzle. grid = [
    [7,8,0,4,0,0,1,2,0],
    [6,0,0,0,7,5,0,0,9],
    [0,0,0,6,0,1,0,7,8],
    [0,0,7,0,4,0,2,6,0],
    [0,0,1,0,5,0,9,3,0],
    [9,0,4,0,6,0,0,0,5],
    [0,7,0,3,0,0,0,1,2],
    [1,2,0,0,0,7,4,0,0],
    [0,4,9,2,0,6,0,0,7]
] def solve(grid): 
  
    """solves a 9x9 sudoku grid   
    """
    row = 0
    col = 0
  
# Initially searching for an unassigned position 
    while row<9: 
        while col<9: 
            # If the entry is empty 
            if grid[row][col]==0: 
                for num in range(1,10): 
                    if check(grid, row, col, num): 
                        grid[row][col] = num     
  
                        # recursively checking 
                        if solve(grid):   
                            return True
                        else:
                            grid[row][col]=0
            # If the entry is not empty, go to the next position 
            col += 1  
            if col >= 9: 
                col = 0 
                row += 1 
   
# returning true when the whole grid is assigned with numbers
    return True
  
def check(grid, row, col, num): 
    # checking row and column 
    for i in range(0, 9): 
        # To check whether this num is  
        # already present in the row 
        if grid[row][i] == num:  
            return False
  
        # To check whether this num is 
        # already present in the column 
        if grid[i][col] == num: 
            return False
  
        
    # now checking in its block (3x3) 
    r = row - row%3
    c = col - col%3
  
    for i in range(3): 
        for j in range(3): 
            if grid[i+r][j+c] == num: 
                return False
  
    # If everything checks out, 
    # return true (num is not being used) 
    return True

# Driver program to test above function 
if __name__ == '__main__': 
  
    grid = [ 
        [7,8,0,4,0,0,1,2,0], 
        [6,0,0,0,7,5,0,0,9], 
        [0,0,0,6,0,1,0,7,8], 
        [0,0,7,0,4,0,2,6,0], 
        [0,0,1,0,5,0,9,3,0], 
        [9,0,4,0,6,0,0,0,5], 
        [0,7,0,3,0,0,0,1,2], 
        [1,2,0,0,0,7,4,0,0], 
        [0,4,9,2,0,6,0,0,7] 
    ]
    if solve(grid):
        for row in grid:
            print (*row, sep=' ')
    else: 
        print("No solution exists!")
Create an optimizer tool in Python to find the maximum of a given set of inputs. [5, 10, 15, 20] def max_optimizer(input_list):
    maximum = max(input_list)
    return maximum
Create an optimization algorithm in Python to calculate the minimum distance between two points.  def distance(x1, y1, x2, y2):
 return ((x2 - x1)**2 + (y2 - y1)**2)**0.5

def get_minimum_distance(points):
 min_dist = sys.maxsize
 
 for i in range(len(points)):
 for j in range(i+1,len(points)):
 dist = distance(points[i][0], points[i][1], points[j][0], points[j][1])
 
 if dist < min_dist:
 min_dist = dist
 
 return min_dist
Create a Python program that counts the number of occurrences of a character in a string String = 'Hello World', Character = 'o' def count_char(string, char):
    count = 0
    for c in string:
        if c == char:
            count += 1
    return count
Write a Python program which implements a Knapsack problem. A list of items with associated weights and values
List: [{name: pencil, weight: 5, value: 10}, {name: eraser, weight: 3, value: 5}, {name: book, weight: 8, value: 15}, {name: notebook, weight: 2, value: 3}] 
Maximum weight: 8 def knapsack(items, maxWeight):
    maxValue = 0
    knapsackItems = []
    n = len(items)

    for i in range(1 << n):
        curWeight = 0
        curValue = 0
        for j in range(n):
            if (i & (1 << j)) != 0:
                curWeight += items[j]["weight"]
                curValue += items[j]["value"]
        if curWeight <= maxWeight and curValue > maxValue:
            maxValue = curValue
            knapsackItems = []
            for j in range(n):
                if (i & (1 << j)) != 0:
                    knapsackItems.append(items[j]["name"])
    return knapsackItems

items = [{"name": "pencil", "weight": 5, "value": 10},
         {"name": "eraser", "weight": 3, "value": 5},
         {"name": "book", "weight": 8, "value": 15},
         {"name": "notebook", "weight": 2, "value": 3}] 
maxWeight = 8

knapsackItems = knapsack(items, maxWeight)
print(knapsackItems)
In Python, write a program that checks whether a number is within a given range. number=5, lower bound 25, upper bound 50 def check_in_range(number, lower_bound, upper_bound):
    if (number >= lower_bound and number <= upper_bound):
        return True
    else:
        return False

number = 5
lower_bound = 25
upper_bound = 50

in_range = check_in_range(number, lower_bound, upper_bound)

if in_range:
    print("Number is in given range.")
else:
    print("Number is not in given range.")
Modify the given Python program to sort a list of words in alphabetical order. words = ['cat', 'dog', 'bird', 'fish'] words = ['cat', 'dog', 'bird', 'fish']

sorted_words = sorted(words)

print(sorted_words)
Create a machine learning model in Python using the scikit-learn library for classifying emails as ham or spam. Not applicable import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB

# Create a data frame from the input data
df = pd.read_csv("emails.csv")
# Extract features and outputs
X = df['content'].values
y = df['label'].values
# Split the dataset into train & test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)
# Count vectorizer
vectorizer = CountVectorizer()
X_train = vectorizer.fit_transform(X_train)
X_test = vectorizer.transform(X_test)
# Create & fit the model
model = MultinomialNB()
model.fit(X_train, y_train)
# Test the model
score = model.score(X_test, y_test)
print(score)
Construct a URL routing program in Python using basic variables and lists.  # Define a list of routes
routes = [
    ('/', 'homepage'), 
    ('/about', 'aboutpage'), 
    ('/contact', 'contactpage')
]

# Define a function to match the route and 
# get the name of the page
def match_route(route):
    for url, page in routes:
        if url == route:
            return page

# Test the function
result = match_route('/')
print(result)
Write a Python program to find a substring in a string. The program should return the index of the beginning of the substring or -1 if the substring is not found. string = "Hello World"
substring = "World" def findSubstring(string, substring):
 index = string.find(substring)
 if index != -1:
  return index
 else:
  return -1

string = "Hello World"
substring = "World"
print(findSubstring(string, substring)) # returns 6
Optimize this while loop in the given Python code. i = 0
while i < 5:
    i += 1
    print(i) i = 0
while i < 5:
    print(i)
    i += 1
Create a Python function that takes an array as input and returns a dictionary with each element as the key and its frequency as the value. [1, 1, 2, 3] def getElementFrequency(arr):
    frequency = {}
    for item in arr:
        if item in frequency:
            frequency[item] += 1
        else:
            frequency[item] = 1
    return frequency

print(getElementFrequency([1, 1, 2, 3]))
Develop a Python function to calculate the mean of an array of numbers. data = [1, 4, 6] # Python Function to calculate mean 
def calculateMean(data): 
    sum = 0
    # calculating sum 
    for e in data: 
        sum += e
  
    # calculating mean 
    mean = sum / len(data) 
    return mean
  
# Driver code 
data = [1, 4, 6]
mean = calculateMean(data)
print("Mean of given data is:", mean)
Create a Data Science program in Python that takes a set of numeric data and categorizes them into groups based on similarity. data = [1,2,3,4,5] import numpy as np

def classify_data(data):
 clusters = {}
 data = np.array(data)
 mean = np.mean(data)
 
 for x in data:
  if x < mean:
   if 'low' in clusters:
    clusters['low'].append(x)
   else:
    clusters['low'] = [x]
  else:
   if 'high' in clusters:
    clusters['high'].append(x)
   else:
    clusters['high'] = [x]
 
 return clusters

clusters = classify_data(data)
print(clusters)
Create a Python script to define a set that contains the names of the days of the week.  # Create a set containing the names of the days of the week
days_of_the_week = set(["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"])

# Print the set 
print(days_of_the_week)
Write a python program to classify a Web page into one of three categories: Business/Industry, Arts/Entertainment, or Education.  def webpage_classification(url):
    '''
    This function takes a URL as input and returns one of three categories: Business/Industry, Arts/Entertainment, or Education.
    '''
    # get the content of the webpage 
    response = requests.get(url)
    content = BeautifulSoup(response.content, 'html.parser')

    # define some keywords lists 
    business_words = ['business', 'industry', 'markets', 'investment']
    entertainment_words = ['entertainment', 'music', 'art', 'movies']
    education_words = ['university', 'school', 'college', 'education']

    # loop through the keywords in each category and check if any of them are present in the content 
    for word in business_words: 
        if word in content:
            return 'Business/Industry'

    for word in entertainment_words: 
        if word in content:
            return 'Arts/Entertainment'
    
    for word in education_words: 
        if word in content:
            return 'Education'

    # if none of the words matched, return None 
    return None
Create a Python code to display the multiplication table for a number between Number: 4 for i in range(1, 11):
    print("4 x", i, "=", 4*i)
Write a Python program to convert a list of lists into a dictionary. list = [[1, 'a', 'A'], [2, 'b', 'B'], [3, 'c', 'C'], [4, 'd', 'D']] dictionary = dict(list)
Debug and fix the following Python program that calculates a list of square roots. nums = [1, 4, 9, 16] 
for num in nums:
  print(num ** 0.5 nums = [1, 4, 9, 16] 
for num in nums:
  print(num ** 0.5)
Create a Python function to print the Fibonacci series up to a given range. range: 10 def Fibonacci(n): 
    if n<0: 
        print("Incorrect input") 
    # First Fibonacci number is 0 
    elif n==1: 
        return 0
    # Second Fibonacci number is 1 
    elif n==2: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2) 
   
# Driver Program 
result = []
for i in range(1,10): 
    result.append(Fibonacci(i))
    
print(result)
Generate an algorithm in Python that takes a decimal number x and converts it to binary. 178 # Input decimal number
decimal_number = 178

# Output binary number
binary_number = ""

# Main algorithm to convert from decimal to binary
while decimal_number > 0:
    remainder = decimal_number % 2
    binary_number = str(remainder) + binary_number
    decimal_number = decimal_number // 2

print(binary_number)
